
pub use self::types::*;
pub use self::enumerations::*;
pub use self::functions::*;

use std::os::raw;

pub struct FnPtr {
    ptr: *const raw::c_void,
    is_loaded: bool
}

impl FnPtr {
    pub fn empty() -> FnPtr {
        FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false }
    }

    pub fn load<F>(&mut self, loadfn: &mut F, name: &'static str) where F: FnMut(&'static str) -> *const raw::c_void {
        let loaded = loadfn(name);
        if !loaded.is_null() {
            self.ptr = loaded;
            self.is_loaded = true;
        } else {
            self.ptr = FnPtr::not_initialized as *const raw::c_void;
            self.is_loaded = false;
        };
    }

    pub fn aliased(&mut self, other: &FnPtr) {
        if !self.is_loaded && other.is_loaded {
            self.ptr = other.ptr;
            self.is_loaded = other.is_loaded;
        }
    }

    #[inline(never)]
    fn not_initialized() -> ! { panic!("gl: function not initialized") }
}

pub mod types {
#![allow(dead_code, non_snake_case, non_camel_case_types)]

use std::os::raw;

pub type GLvoid = raw::c_void;

pub type GLbyte = raw::c_char;
pub type GLubyte = raw::c_uchar;
pub type GLchar = raw::c_char;
pub type GLboolean = raw::c_uchar;

pub type GLshort = raw::c_short;
pub type GLushort = raw::c_ushort;

pub type GLint = raw::c_int;
pub type GLuint = raw::c_uint;
pub type GLint64 = i64;
pub type GLuint64 = u64;

pub type GLintptr = isize;
pub type GLsizeiptr = isize;
pub type GLintptrARB = isize;
pub type GLsizeiptrARB = isize;
pub type GLint64EXT = i64;
pub type GLuint64EXT = u64;

pub type GLsizei = GLint;
pub type GLclampx = raw::c_int;
pub type GLfixed = GLint;
pub type GLhalf = raw::c_ushort;
pub type GLhalfNV = raw::c_ushort;
pub type GLhalfARB = raw::c_ushort;

pub type GLenum = raw::c_uint;
pub type GLbitfield = raw::c_uint;

pub type GLfloat = raw::c_float;
pub type GLdouble = raw::c_double;
pub type GLclampf = raw::c_float;
pub type GLclampd = raw::c_double;

pub type GLcharARB = raw::c_char;

#[cfg(target_os = "macos")]
pub type GLhandleARB = *const raw::c_void;
#[cfg(not(target_os = "macos"))]
pub type GLhandleARB = raw::c_uint;

pub enum __GLsync {}

pub type GLsync = *const __GLsync;

pub enum _cl_context {}

pub enum _cl_event {}

pub type GLvdpauSurfaceNV = GLintptr;
pub type GLeglClientBufferEXT = *const raw::c_void;
pub type GLeglImageOES = *const raw::c_void;


pub type GLDEBUGPROC = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut raw::c_void,
);
pub type GLDEBUGPROCARB = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut raw::c_void,
);
pub type GLDEBUGPROCKHR = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut GLvoid,
);
pub type GLDEBUGPROCAMD = extern "system" fn (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut GLvoid,
);
pub type GLVULKANPROCNV = extern "system" fn ();
}

pub mod enumerations {
    #![allow(dead_code, non_upper_case_globals, unused_imports)]

    use std;
    use super::types::*;

    pub const GL_1PASS_EXT: std::os::raw::c_uint = 0x80A1;
    pub const GL_1PASS_SGIS: std::os::raw::c_uint = 0x80A1;
    pub const GL_2PASS_0_EXT: std::os::raw::c_uint = 0x80A2;
    pub const GL_2PASS_0_SGIS: std::os::raw::c_uint = 0x80A2;
    pub const GL_2PASS_1_EXT: std::os::raw::c_uint = 0x80A3;
    pub const GL_2PASS_1_SGIS: std::os::raw::c_uint = 0x80A3;
    pub const GL_2X_BIT_ATI: std::os::raw::c_uint = 0x00000001;
    pub const GL_422_AVERAGE_EXT: std::os::raw::c_uint = 0x80CE;
    pub const GL_422_EXT: std::os::raw::c_uint = 0x80CC;
    pub const GL_422_REV_AVERAGE_EXT: std::os::raw::c_uint = 0x80CF;
    pub const GL_422_REV_EXT: std::os::raw::c_uint = 0x80CD;
    pub const GL_4PASS_0_EXT: std::os::raw::c_uint = 0x80A4;
    pub const GL_4PASS_0_SGIS: std::os::raw::c_uint = 0x80A4;
    pub const GL_4PASS_1_EXT: std::os::raw::c_uint = 0x80A5;
    pub const GL_4PASS_1_SGIS: std::os::raw::c_uint = 0x80A5;
    pub const GL_4PASS_2_EXT: std::os::raw::c_uint = 0x80A6;
    pub const GL_4PASS_2_SGIS: std::os::raw::c_uint = 0x80A6;
    pub const GL_4PASS_3_EXT: std::os::raw::c_uint = 0x80A7;
    pub const GL_4PASS_3_SGIS: std::os::raw::c_uint = 0x80A7;
    pub const GL_4X_BIT_ATI: std::os::raw::c_uint = 0x00000002;
    pub const GL_8X_BIT_ATI: std::os::raw::c_uint = 0x00000004;
    pub const GL_ABGR_EXT: std::os::raw::c_uint = 0x8000;
    pub const GL_ACCUM_ADJACENT_PAIRS_NV: std::os::raw::c_uint = 0x90AD;
    pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92D9;
    pub const GL_ACTIVE_ATTRIBUTES: std::os::raw::c_uint = 0x8B89;
    pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: std::os::raw::c_uint = 0x8B8A;
    pub const GL_ACTIVE_PROGRAM: std::os::raw::c_uint = 0x8259;
    pub const GL_ACTIVE_PROGRAM_EXT: std::os::raw::c_uint = 0x8B8D;
    pub const GL_ACTIVE_RESOURCES: std::os::raw::c_uint = 0x92F5;
    pub const GL_ACTIVE_STENCIL_FACE_EXT: std::os::raw::c_uint = 0x8911;
    pub const GL_ACTIVE_SUBROUTINES: std::os::raw::c_uint = 0x8DE5;
    pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: std::os::raw::c_uint = 0x8E48;
    pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: std::os::raw::c_uint = 0x8DE6;
    pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: std::os::raw::c_uint = 0x8E47;
    pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: std::os::raw::c_uint = 0x8E49;
    pub const GL_ACTIVE_TEXTURE: std::os::raw::c_uint = 0x84E0;
    pub const GL_ACTIVE_TEXTURE_ARB: std::os::raw::c_uint = 0x84E0;
    pub const GL_ACTIVE_UNIFORMS: std::os::raw::c_uint = 0x8B86;
    pub const GL_ACTIVE_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8A36;
    pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: std::os::raw::c_uint = 0x8A35;
    pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: std::os::raw::c_uint = 0x8B87;
    pub const GL_ACTIVE_VARIABLES: std::os::raw::c_uint = 0x9305;
    pub const GL_ACTIVE_VARYINGS_NV: std::os::raw::c_uint = 0x8C81;
    pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV: std::os::raw::c_uint = 0x8C82;
    pub const GL_ACTIVE_VERTEX_UNITS_ARB: std::os::raw::c_uint = 0x86A5;
    pub const GL_ADD_ATI: std::os::raw::c_uint = 0x8963;
    pub const GL_ADD_SIGNED_ARB: std::os::raw::c_uint = 0x8574;
    pub const GL_ADD_SIGNED_EXT: std::os::raw::c_uint = 0x8574;
    pub const GL_ADJACENT_PAIRS_NV: std::os::raw::c_uint = 0x90AE;
    pub const GL_AFFINE_2D_NV: std::os::raw::c_uint = 0x9092;
    pub const GL_AFFINE_3D_NV: std::os::raw::c_uint = 0x9094;
    pub const GL_ALIASED_LINE_WIDTH_RANGE: std::os::raw::c_uint = 0x846E;
    pub const GL_ALLOW_DRAW_FRG_HINT_PGI: std::os::raw::c_uint = 0x1A210;
    pub const GL_ALLOW_DRAW_MEM_HINT_PGI: std::os::raw::c_uint = 0x1A211;
    pub const GL_ALLOW_DRAW_OBJ_HINT_PGI: std::os::raw::c_uint = 0x1A20E;
    pub const GL_ALLOW_DRAW_WIN_HINT_PGI: std::os::raw::c_uint = 0x1A20F;
    pub const GL_ALL_BARRIER_BITS: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_ALL_BARRIER_BITS_EXT: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_ALL_COMPLETED_NV: std::os::raw::c_uint = 0x84F2;
    pub const GL_ALL_PIXELS_AMD: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_ALL_SHADER_BITS: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_ALL_STATIC_DATA_IBM: std::os::raw::c_uint = 103060;
    pub const GL_ALPHA: std::os::raw::c_uint = 0x1906;
    pub const GL_ALPHA12_EXT: std::os::raw::c_uint = 0x803D;
    pub const GL_ALPHA16F_ARB: std::os::raw::c_uint = 0x881C;
    pub const GL_ALPHA16I_EXT: std::os::raw::c_uint = 0x8D8A;
    pub const GL_ALPHA16UI_EXT: std::os::raw::c_uint = 0x8D78;
    pub const GL_ALPHA16_EXT: std::os::raw::c_uint = 0x803E;
    pub const GL_ALPHA16_SNORM: std::os::raw::c_uint = 0x9018;
    pub const GL_ALPHA32F_ARB: std::os::raw::c_uint = 0x8816;
    pub const GL_ALPHA32I_EXT: std::os::raw::c_uint = 0x8D84;
    pub const GL_ALPHA32UI_EXT: std::os::raw::c_uint = 0x8D72;
    pub const GL_ALPHA4_EXT: std::os::raw::c_uint = 0x803B;
    pub const GL_ALPHA8I_EXT: std::os::raw::c_uint = 0x8D90;
    pub const GL_ALPHA8UI_EXT: std::os::raw::c_uint = 0x8D7E;
    pub const GL_ALPHA8_EXT: std::os::raw::c_uint = 0x803C;
    pub const GL_ALPHA8_SNORM: std::os::raw::c_uint = 0x9014;
    pub const GL_ALPHA_FLOAT16_APPLE: std::os::raw::c_uint = 0x881C;
    pub const GL_ALPHA_FLOAT16_ATI: std::os::raw::c_uint = 0x881C;
    pub const GL_ALPHA_FLOAT32_APPLE: std::os::raw::c_uint = 0x8816;
    pub const GL_ALPHA_FLOAT32_ATI: std::os::raw::c_uint = 0x8816;
    pub const GL_ALPHA_INTEGER_EXT: std::os::raw::c_uint = 0x8D97;
    pub const GL_ALPHA_MAX_CLAMP_INGR: std::os::raw::c_uint = 0x8567;
    pub const GL_ALPHA_MAX_SGIX: std::os::raw::c_uint = 0x8321;
    pub const GL_ALPHA_MIN_CLAMP_INGR: std::os::raw::c_uint = 0x8563;
    pub const GL_ALPHA_MIN_SGIX: std::os::raw::c_uint = 0x8320;
    pub const GL_ALPHA_REF_COMMAND_NV: std::os::raw::c_uint = 0x000F;
    pub const GL_ALPHA_SNORM: std::os::raw::c_uint = 0x9010;
    pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV: std::os::raw::c_uint = 0x934D;
    pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV: std::os::raw::c_uint = 0x934F;
    pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV: std::os::raw::c_uint = 0x934E;
    pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV: std::os::raw::c_uint = 0x92BF;
    pub const GL_ALREADY_SIGNALED: std::os::raw::c_uint = 0x911A;
    pub const GL_ALWAYS: std::os::raw::c_uint = 0x0207;
    pub const GL_ALWAYS_FAST_HINT_PGI: std::os::raw::c_uint = 0x1A20C;
    pub const GL_ALWAYS_SOFT_HINT_PGI: std::os::raw::c_uint = 0x1A20D;
    pub const GL_AND: std::os::raw::c_uint = 0x1501;
    pub const GL_AND_INVERTED: std::os::raw::c_uint = 0x1504;
    pub const GL_AND_REVERSE: std::os::raw::c_uint = 0x1502;
    pub const GL_ANY_SAMPLES_PASSED: std::os::raw::c_uint = 0x8C2F;
    pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: std::os::raw::c_uint = 0x8D6A;
    pub const GL_ARC_TO_NV: std::os::raw::c_uint = 0xFE;
    pub const GL_ARRAY_BUFFER: std::os::raw::c_uint = 0x8892;
    pub const GL_ARRAY_BUFFER_ARB: std::os::raw::c_uint = 0x8892;
    pub const GL_ARRAY_BUFFER_BINDING: std::os::raw::c_uint = 0x8894;
    pub const GL_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8894;
    pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT: std::os::raw::c_uint = 0x81A9;
    pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT: std::os::raw::c_uint = 0x81A8;
    pub const GL_ARRAY_OBJECT_BUFFER_ATI: std::os::raw::c_uint = 0x8766;
    pub const GL_ARRAY_OBJECT_OFFSET_ATI: std::os::raw::c_uint = 0x8767;
    pub const GL_ARRAY_SIZE: std::os::raw::c_uint = 0x92FB;
    pub const GL_ARRAY_STRIDE: std::os::raw::c_uint = 0x92FE;
    pub const GL_ASYNC_DRAW_PIXELS_SGIX: std::os::raw::c_uint = 0x835D;
    pub const GL_ASYNC_HISTOGRAM_SGIX: std::os::raw::c_uint = 0x832C;
    pub const GL_ASYNC_MARKER_SGIX: std::os::raw::c_uint = 0x8329;
    pub const GL_ASYNC_READ_PIXELS_SGIX: std::os::raw::c_uint = 0x835E;
    pub const GL_ASYNC_TEX_IMAGE_SGIX: std::os::raw::c_uint = 0x835C;
    pub const GL_ATOMIC_COUNTER_BARRIER_BIT: std::os::raw::c_uint = 0x00001000;
    pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00001000;
    pub const GL_ATOMIC_COUNTER_BUFFER: std::os::raw::c_uint = 0x92C0;
    pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92C5;
    pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: std::os::raw::c_uint = 0x92C6;
    pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: std::os::raw::c_uint = 0x92C1;
    pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: std::os::raw::c_uint = 0x92C4;
    pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: std::os::raw::c_uint = 0x9301;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: std::os::raw::c_uint = 0x90ED;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: std::os::raw::c_uint = 0x92CB;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: std::os::raw::c_uint = 0x92CA;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: std::os::raw::c_uint = 0x959E;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: std::os::raw::c_uint = 0x959F;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: std::os::raw::c_uint = 0x92C8;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: std::os::raw::c_uint = 0x92C9;
    pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: std::os::raw::c_uint = 0x92C7;
    pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: std::os::raw::c_uint = 0x92C3;
    pub const GL_ATOMIC_COUNTER_BUFFER_START: std::os::raw::c_uint = 0x92C2;
    pub const GL_ATTACHED_MEMORY_OBJECT_NV: std::os::raw::c_uint = 0x95A4;
    pub const GL_ATTACHED_MEMORY_OFFSET_NV: std::os::raw::c_uint = 0x95A5;
    pub const GL_ATTACHED_SHADERS: std::os::raw::c_uint = 0x8B85;
    pub const GL_ATTENUATION_EXT: std::os::raw::c_uint = 0x834D;
    pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV: std::os::raw::c_uint = 0x0009;
    pub const GL_ATTRIB_ARRAY_POINTER_NV: std::os::raw::c_uint = 0x8645;
    pub const GL_ATTRIB_ARRAY_SIZE_NV: std::os::raw::c_uint = 0x8623;
    pub const GL_ATTRIB_ARRAY_STRIDE_NV: std::os::raw::c_uint = 0x8624;
    pub const GL_ATTRIB_ARRAY_TYPE_NV: std::os::raw::c_uint = 0x8625;
    pub const GL_AUTO_GENERATE_MIPMAP: std::os::raw::c_uint = 0x8295;
    pub const GL_AUX_DEPTH_STENCIL_APPLE: std::os::raw::c_uint = 0x8A14;
    pub const GL_AVERAGE_EXT: std::os::raw::c_uint = 0x8335;
    pub const GL_AVERAGE_HP: std::os::raw::c_uint = 0x8160;
    pub const GL_BACK: std::os::raw::c_uint = 0x0405;
    pub const GL_BACK_LEFT: std::os::raw::c_uint = 0x0402;
    pub const GL_BACK_NORMALS_HINT_PGI: std::os::raw::c_uint = 0x1A223;
    pub const GL_BACK_PRIMARY_COLOR_NV: std::os::raw::c_uint = 0x8C77;
    pub const GL_BACK_RIGHT: std::os::raw::c_uint = 0x0403;
    pub const GL_BACK_SECONDARY_COLOR_NV: std::os::raw::c_uint = 0x8C78;
    pub const GL_BEVEL_NV: std::os::raw::c_uint = 0x90A6;
    pub const GL_BGR: std::os::raw::c_uint = 0x80E0;
    pub const GL_BGRA: std::os::raw::c_uint = 0x80E1;
    pub const GL_BGRA_EXT: std::os::raw::c_uint = 0x80E1;
    pub const GL_BGRA_INTEGER: std::os::raw::c_uint = 0x8D9B;
    pub const GL_BGRA_INTEGER_EXT: std::os::raw::c_uint = 0x8D9B;
    pub const GL_BGR_EXT: std::os::raw::c_uint = 0x80E0;
    pub const GL_BGR_INTEGER: std::os::raw::c_uint = 0x8D9A;
    pub const GL_BGR_INTEGER_EXT: std::os::raw::c_uint = 0x8D9A;
    pub const GL_BIAS_BIT_ATI: std::os::raw::c_uint = 0x00000008;
    pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV: std::os::raw::c_uint = 0x8541;
    pub const GL_BINORMAL_ARRAY_EXT: std::os::raw::c_uint = 0x843A;
    pub const GL_BINORMAL_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8443;
    pub const GL_BINORMAL_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x8441;
    pub const GL_BINORMAL_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x8440;
    pub const GL_BLACKHOLE_RENDER_INTEL: std::os::raw::c_uint = 0x83FC;
    pub const GL_BLEND: std::os::raw::c_uint = 0x0BE2;
    pub const GL_BLEND_ADVANCED_COHERENT_KHR: std::os::raw::c_uint = 0x9285;
    pub const GL_BLEND_ADVANCED_COHERENT_NV: std::os::raw::c_uint = 0x9285;
    pub const GL_BLEND_COLOR: std::os::raw::c_uint = 0x8005;
    pub const GL_BLEND_COLOR_COMMAND_NV: std::os::raw::c_uint = 0x000B;
    pub const GL_BLEND_COLOR_EXT: std::os::raw::c_uint = 0x8005;
    pub const GL_BLEND_DST: std::os::raw::c_uint = 0x0BE0;
    pub const GL_BLEND_DST_ALPHA: std::os::raw::c_uint = 0x80CA;
    pub const GL_BLEND_DST_ALPHA_EXT: std::os::raw::c_uint = 0x80CA;
    pub const GL_BLEND_DST_RGB: std::os::raw::c_uint = 0x80C8;
    pub const GL_BLEND_DST_RGB_EXT: std::os::raw::c_uint = 0x80C8;
    pub const GL_BLEND_EQUATION: std::os::raw::c_uint = 0x8009;
    pub const GL_BLEND_EQUATION_ALPHA: std::os::raw::c_uint = 0x883D;
    pub const GL_BLEND_EQUATION_ALPHA_EXT: std::os::raw::c_uint = 0x883D;
    pub const GL_BLEND_EQUATION_EXT: std::os::raw::c_uint = 0x8009;
    pub const GL_BLEND_EQUATION_RGB: std::os::raw::c_uint = 0x8009;
    pub const GL_BLEND_EQUATION_RGB_EXT: std::os::raw::c_uint = 0x8009;
    pub const GL_BLEND_OVERLAP_NV: std::os::raw::c_uint = 0x9281;
    pub const GL_BLEND_PREMULTIPLIED_SRC_NV: std::os::raw::c_uint = 0x9280;
    pub const GL_BLEND_SRC: std::os::raw::c_uint = 0x0BE1;
    pub const GL_BLEND_SRC_ALPHA: std::os::raw::c_uint = 0x80CB;
    pub const GL_BLEND_SRC_ALPHA_EXT: std::os::raw::c_uint = 0x80CB;
    pub const GL_BLEND_SRC_RGB: std::os::raw::c_uint = 0x80C9;
    pub const GL_BLEND_SRC_RGB_EXT: std::os::raw::c_uint = 0x80C9;
    pub const GL_BLOCK_INDEX: std::os::raw::c_uint = 0x92FD;
    pub const GL_BLUE: std::os::raw::c_uint = 0x1905;
    pub const GL_BLUE_BIT_ATI: std::os::raw::c_uint = 0x00000004;
    pub const GL_BLUE_INTEGER: std::os::raw::c_uint = 0x8D96;
    pub const GL_BLUE_INTEGER_EXT: std::os::raw::c_uint = 0x8D96;
    pub const GL_BLUE_MAX_CLAMP_INGR: std::os::raw::c_uint = 0x8566;
    pub const GL_BLUE_MIN_CLAMP_INGR: std::os::raw::c_uint = 0x8562;
    pub const GL_BLUE_NV: std::os::raw::c_uint = 0x1905;
    pub const GL_BOLD_BIT_NV: std::os::raw::c_uint = 0x01;
    pub const GL_BOOL: std::os::raw::c_uint = 0x8B56;
    pub const GL_BOOL_ARB: std::os::raw::c_uint = 0x8B56;
    pub const GL_BOOL_VEC2: std::os::raw::c_uint = 0x8B57;
    pub const GL_BOOL_VEC2_ARB: std::os::raw::c_uint = 0x8B57;
    pub const GL_BOOL_VEC3: std::os::raw::c_uint = 0x8B58;
    pub const GL_BOOL_VEC3_ARB: std::os::raw::c_uint = 0x8B58;
    pub const GL_BOOL_VEC4: std::os::raw::c_uint = 0x8B59;
    pub const GL_BOOL_VEC4_ARB: std::os::raw::c_uint = 0x8B59;
    pub const GL_BOUNDING_BOX_NV: std::os::raw::c_uint = 0x908D;
    pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: std::os::raw::c_uint = 0x909C;
    pub const GL_BUFFER: std::os::raw::c_uint = 0x82E0;
    pub const GL_BUFFER_ACCESS: std::os::raw::c_uint = 0x88BB;
    pub const GL_BUFFER_ACCESS_ARB: std::os::raw::c_uint = 0x88BB;
    pub const GL_BUFFER_ACCESS_FLAGS: std::os::raw::c_uint = 0x911F;
    pub const GL_BUFFER_BINDING: std::os::raw::c_uint = 0x9302;
    pub const GL_BUFFER_DATA_SIZE: std::os::raw::c_uint = 0x9303;
    pub const GL_BUFFER_FLUSHING_UNMAP_APPLE: std::os::raw::c_uint = 0x8A13;
    pub const GL_BUFFER_GPU_ADDRESS_NV: std::os::raw::c_uint = 0x8F1D;
    pub const GL_BUFFER_IMMUTABLE_STORAGE: std::os::raw::c_uint = 0x821F;
    pub const GL_BUFFER_MAPPED: std::os::raw::c_uint = 0x88BC;
    pub const GL_BUFFER_MAPPED_ARB: std::os::raw::c_uint = 0x88BC;
    pub const GL_BUFFER_MAP_LENGTH: std::os::raw::c_uint = 0x9120;
    pub const GL_BUFFER_MAP_OFFSET: std::os::raw::c_uint = 0x9121;
    pub const GL_BUFFER_MAP_POINTER: std::os::raw::c_uint = 0x88BD;
    pub const GL_BUFFER_MAP_POINTER_ARB: std::os::raw::c_uint = 0x88BD;
    pub const GL_BUFFER_OBJECT_APPLE: std::os::raw::c_uint = 0x85B3;
    pub const GL_BUFFER_OBJECT_EXT: std::os::raw::c_uint = 0x9151;
    pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE: std::os::raw::c_uint = 0x8A12;
    pub const GL_BUFFER_SIZE: std::os::raw::c_uint = 0x8764;
    pub const GL_BUFFER_SIZE_ARB: std::os::raw::c_uint = 0x8764;
    pub const GL_BUFFER_STORAGE_FLAGS: std::os::raw::c_uint = 0x8220;
    pub const GL_BUFFER_UPDATE_BARRIER_BIT: std::os::raw::c_uint = 0x00000200;
    pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000200;
    pub const GL_BUFFER_USAGE: std::os::raw::c_uint = 0x8765;
    pub const GL_BUFFER_USAGE_ARB: std::os::raw::c_uint = 0x8765;
    pub const GL_BUFFER_VARIABLE: std::os::raw::c_uint = 0x92E5;
    pub const GL_BUMP_ENVMAP_ATI: std::os::raw::c_uint = 0x877B;
    pub const GL_BUMP_NUM_TEX_UNITS_ATI: std::os::raw::c_uint = 0x8777;
    pub const GL_BUMP_ROT_MATRIX_ATI: std::os::raw::c_uint = 0x8775;
    pub const GL_BUMP_ROT_MATRIX_SIZE_ATI: std::os::raw::c_uint = 0x8776;
    pub const GL_BUMP_TARGET_ATI: std::os::raw::c_uint = 0x877C;
    pub const GL_BUMP_TEX_UNITS_ATI: std::os::raw::c_uint = 0x8778;
    pub const GL_BYTE: std::os::raw::c_uint = 0x1400;
    pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX: std::os::raw::c_uint = 0x8183;
    pub const GL_CAVEAT_SUPPORT: std::os::raw::c_uint = 0x82B8;
    pub const GL_CCW: std::os::raw::c_uint = 0x0901;
    pub const GL_CIRCULAR_CCW_ARC_TO_NV: std::os::raw::c_uint = 0xF8;
    pub const GL_CIRCULAR_CW_ARC_TO_NV: std::os::raw::c_uint = 0xFA;
    pub const GL_CIRCULAR_TANGENT_ARC_TO_NV: std::os::raw::c_uint = 0xFC;
    pub const GL_CLAMP_FRAGMENT_COLOR_ARB: std::os::raw::c_uint = 0x891B;
    pub const GL_CLAMP_READ_COLOR: std::os::raw::c_uint = 0x891C;
    pub const GL_CLAMP_READ_COLOR_ARB: std::os::raw::c_uint = 0x891C;
    pub const GL_CLAMP_TO_BORDER: std::os::raw::c_uint = 0x812D;
    pub const GL_CLAMP_TO_BORDER_ARB: std::os::raw::c_uint = 0x812D;
    pub const GL_CLAMP_TO_BORDER_SGIS: std::os::raw::c_uint = 0x812D;
    pub const GL_CLAMP_TO_EDGE: std::os::raw::c_uint = 0x812F;
    pub const GL_CLAMP_TO_EDGE_SGIS: std::os::raw::c_uint = 0x812F;
    pub const GL_CLAMP_VERTEX_COLOR_ARB: std::os::raw::c_uint = 0x891A;
    pub const GL_CLEAR: std::os::raw::c_uint = 0x1500;
    pub const GL_CLEAR_BUFFER: std::os::raw::c_uint = 0x82B4;
    pub const GL_CLEAR_TEXTURE: std::os::raw::c_uint = 0x9365;
    pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: std::os::raw::c_uint = 0x84E1;
    pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: std::os::raw::c_uint = 0x00004000;
    pub const GL_CLIENT_STORAGE_BIT: std::os::raw::c_uint = 0x0200;
    pub const GL_CLIPPING_INPUT_PRIMITIVES: std::os::raw::c_uint = 0x82F6;
    pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB: std::os::raw::c_uint = 0x82F6;
    pub const GL_CLIPPING_OUTPUT_PRIMITIVES: std::os::raw::c_uint = 0x82F7;
    pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB: std::os::raw::c_uint = 0x82F7;
    pub const GL_CLIP_DEPTH_MODE: std::os::raw::c_uint = 0x935D;
    pub const GL_CLIP_DISTANCE0: std::os::raw::c_uint = 0x3000;
    pub const GL_CLIP_DISTANCE1: std::os::raw::c_uint = 0x3001;
    pub const GL_CLIP_DISTANCE2: std::os::raw::c_uint = 0x3002;
    pub const GL_CLIP_DISTANCE3: std::os::raw::c_uint = 0x3003;
    pub const GL_CLIP_DISTANCE4: std::os::raw::c_uint = 0x3004;
    pub const GL_CLIP_DISTANCE5: std::os::raw::c_uint = 0x3005;
    pub const GL_CLIP_DISTANCE6: std::os::raw::c_uint = 0x3006;
    pub const GL_CLIP_DISTANCE7: std::os::raw::c_uint = 0x3007;
    pub const GL_CLIP_DISTANCE_NV: std::os::raw::c_uint = 0x8C7A;
    pub const GL_CLIP_FAR_HINT_PGI: std::os::raw::c_uint = 0x1A221;
    pub const GL_CLIP_NEAR_HINT_PGI: std::os::raw::c_uint = 0x1A220;
    pub const GL_CLIP_ORIGIN: std::os::raw::c_uint = 0x935C;
    pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT: std::os::raw::c_uint = 0x80F0;
    pub const GL_CLOSE_PATH_NV: std::os::raw::c_uint = 0x00;
    pub const GL_CMYKA_EXT: std::os::raw::c_uint = 0x800D;
    pub const GL_CMYK_EXT: std::os::raw::c_uint = 0x800C;
    pub const GL_CND0_ATI: std::os::raw::c_uint = 0x896B;
    pub const GL_CND_ATI: std::os::raw::c_uint = 0x896A;
    pub const GL_COLOR: std::os::raw::c_uint = 0x1800;
    pub const GL_COLOR3_BIT_PGI: std::os::raw::c_uint = 0x00010000;
    pub const GL_COLOR4_BIT_PGI: std::os::raw::c_uint = 0x00020000;
    pub const GL_COLORBURN_KHR: std::os::raw::c_uint = 0x929A;
    pub const GL_COLORBURN_NV: std::os::raw::c_uint = 0x929A;
    pub const GL_COLORDODGE_KHR: std::os::raw::c_uint = 0x9299;
    pub const GL_COLORDODGE_NV: std::os::raw::c_uint = 0x9299;
    pub const GL_COLOR_ALPHA_PAIRING_ATI: std::os::raw::c_uint = 0x8975;
    pub const GL_COLOR_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F23;
    pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8898;
    pub const GL_COLOR_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x8084;
    pub const GL_COLOR_ARRAY_EXT: std::os::raw::c_uint = 0x8076;
    pub const GL_COLOR_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2D;
    pub const GL_COLOR_ARRAY_LIST_IBM: std::os::raw::c_uint = 103072;
    pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103082;
    pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL: std::os::raw::c_uint = 0x83F7;
    pub const GL_COLOR_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8090;
    pub const GL_COLOR_ARRAY_SIZE_EXT: std::os::raw::c_uint = 0x8081;
    pub const GL_COLOR_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x8083;
    pub const GL_COLOR_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x8082;
    pub const GL_COLOR_ATTACHMENT0: std::os::raw::c_uint = 0x8CE0;
    pub const GL_COLOR_ATTACHMENT0_EXT: std::os::raw::c_uint = 0x8CE0;
    pub const GL_COLOR_ATTACHMENT1: std::os::raw::c_uint = 0x8CE1;
    pub const GL_COLOR_ATTACHMENT10: std::os::raw::c_uint = 0x8CEA;
    pub const GL_COLOR_ATTACHMENT10_EXT: std::os::raw::c_uint = 0x8CEA;
    pub const GL_COLOR_ATTACHMENT11: std::os::raw::c_uint = 0x8CEB;
    pub const GL_COLOR_ATTACHMENT11_EXT: std::os::raw::c_uint = 0x8CEB;
    pub const GL_COLOR_ATTACHMENT12: std::os::raw::c_uint = 0x8CEC;
    pub const GL_COLOR_ATTACHMENT12_EXT: std::os::raw::c_uint = 0x8CEC;
    pub const GL_COLOR_ATTACHMENT13: std::os::raw::c_uint = 0x8CED;
    pub const GL_COLOR_ATTACHMENT13_EXT: std::os::raw::c_uint = 0x8CED;
    pub const GL_COLOR_ATTACHMENT14: std::os::raw::c_uint = 0x8CEE;
    pub const GL_COLOR_ATTACHMENT14_EXT: std::os::raw::c_uint = 0x8CEE;
    pub const GL_COLOR_ATTACHMENT15: std::os::raw::c_uint = 0x8CEF;
    pub const GL_COLOR_ATTACHMENT15_EXT: std::os::raw::c_uint = 0x8CEF;
    pub const GL_COLOR_ATTACHMENT16: std::os::raw::c_uint = 0x8CF0;
    pub const GL_COLOR_ATTACHMENT17: std::os::raw::c_uint = 0x8CF1;
    pub const GL_COLOR_ATTACHMENT18: std::os::raw::c_uint = 0x8CF2;
    pub const GL_COLOR_ATTACHMENT19: std::os::raw::c_uint = 0x8CF3;
    pub const GL_COLOR_ATTACHMENT1_EXT: std::os::raw::c_uint = 0x8CE1;
    pub const GL_COLOR_ATTACHMENT2: std::os::raw::c_uint = 0x8CE2;
    pub const GL_COLOR_ATTACHMENT20: std::os::raw::c_uint = 0x8CF4;
    pub const GL_COLOR_ATTACHMENT21: std::os::raw::c_uint = 0x8CF5;
    pub const GL_COLOR_ATTACHMENT22: std::os::raw::c_uint = 0x8CF6;
    pub const GL_COLOR_ATTACHMENT23: std::os::raw::c_uint = 0x8CF7;
    pub const GL_COLOR_ATTACHMENT24: std::os::raw::c_uint = 0x8CF8;
    pub const GL_COLOR_ATTACHMENT25: std::os::raw::c_uint = 0x8CF9;
    pub const GL_COLOR_ATTACHMENT26: std::os::raw::c_uint = 0x8CFA;
    pub const GL_COLOR_ATTACHMENT27: std::os::raw::c_uint = 0x8CFB;
    pub const GL_COLOR_ATTACHMENT28: std::os::raw::c_uint = 0x8CFC;
    pub const GL_COLOR_ATTACHMENT29: std::os::raw::c_uint = 0x8CFD;
    pub const GL_COLOR_ATTACHMENT2_EXT: std::os::raw::c_uint = 0x8CE2;
    pub const GL_COLOR_ATTACHMENT3: std::os::raw::c_uint = 0x8CE3;
    pub const GL_COLOR_ATTACHMENT30: std::os::raw::c_uint = 0x8CFE;
    pub const GL_COLOR_ATTACHMENT31: std::os::raw::c_uint = 0x8CFF;
    pub const GL_COLOR_ATTACHMENT3_EXT: std::os::raw::c_uint = 0x8CE3;
    pub const GL_COLOR_ATTACHMENT4: std::os::raw::c_uint = 0x8CE4;
    pub const GL_COLOR_ATTACHMENT4_EXT: std::os::raw::c_uint = 0x8CE4;
    pub const GL_COLOR_ATTACHMENT5: std::os::raw::c_uint = 0x8CE5;
    pub const GL_COLOR_ATTACHMENT5_EXT: std::os::raw::c_uint = 0x8CE5;
    pub const GL_COLOR_ATTACHMENT6: std::os::raw::c_uint = 0x8CE6;
    pub const GL_COLOR_ATTACHMENT6_EXT: std::os::raw::c_uint = 0x8CE6;
    pub const GL_COLOR_ATTACHMENT7: std::os::raw::c_uint = 0x8CE7;
    pub const GL_COLOR_ATTACHMENT7_EXT: std::os::raw::c_uint = 0x8CE7;
    pub const GL_COLOR_ATTACHMENT8: std::os::raw::c_uint = 0x8CE8;
    pub const GL_COLOR_ATTACHMENT8_EXT: std::os::raw::c_uint = 0x8CE8;
    pub const GL_COLOR_ATTACHMENT9: std::os::raw::c_uint = 0x8CE9;
    pub const GL_COLOR_ATTACHMENT9_EXT: std::os::raw::c_uint = 0x8CE9;
    pub const GL_COLOR_BUFFER_BIT: std::os::raw::c_uint = 0x00004000;
    pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI: std::os::raw::c_uint = 0x8835;
    pub const GL_COLOR_CLEAR_VALUE: std::os::raw::c_uint = 0x0C22;
    pub const GL_COLOR_COMPONENTS: std::os::raw::c_uint = 0x8283;
    pub const GL_COLOR_ENCODING: std::os::raw::c_uint = 0x8296;
    pub const GL_COLOR_FLOAT_APPLE: std::os::raw::c_uint = 0x8A0F;
    pub const GL_COLOR_INDEX12_EXT: std::os::raw::c_uint = 0x80E6;
    pub const GL_COLOR_INDEX16_EXT: std::os::raw::c_uint = 0x80E7;
    pub const GL_COLOR_INDEX1_EXT: std::os::raw::c_uint = 0x80E2;
    pub const GL_COLOR_INDEX2_EXT: std::os::raw::c_uint = 0x80E3;
    pub const GL_COLOR_INDEX4_EXT: std::os::raw::c_uint = 0x80E4;
    pub const GL_COLOR_INDEX8_EXT: std::os::raw::c_uint = 0x80E5;
    pub const GL_COLOR_LOGIC_OP: std::os::raw::c_uint = 0x0BF2;
    pub const GL_COLOR_MATRIX_SGI: std::os::raw::c_uint = 0x80B1;
    pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI: std::os::raw::c_uint = 0x80B2;
    pub const GL_COLOR_RENDERABLE: std::os::raw::c_uint = 0x8286;
    pub const GL_COLOR_SAMPLES_NV: std::os::raw::c_uint = 0x8E20;
    pub const GL_COLOR_SUM_ARB: std::os::raw::c_uint = 0x8458;
    pub const GL_COLOR_SUM_CLAMP_NV: std::os::raw::c_uint = 0x854F;
    pub const GL_COLOR_SUM_EXT: std::os::raw::c_uint = 0x8458;
    pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI: std::os::raw::c_uint = 0x80DD;
    pub const GL_COLOR_TABLE_BIAS_SGI: std::os::raw::c_uint = 0x80D7;
    pub const GL_COLOR_TABLE_BLUE_SIZE_SGI: std::os::raw::c_uint = 0x80DC;
    pub const GL_COLOR_TABLE_FORMAT_SGI: std::os::raw::c_uint = 0x80D8;
    pub const GL_COLOR_TABLE_GREEN_SIZE_SGI: std::os::raw::c_uint = 0x80DB;
    pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI: std::os::raw::c_uint = 0x80DF;
    pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI: std::os::raw::c_uint = 0x80DE;
    pub const GL_COLOR_TABLE_RED_SIZE_SGI: std::os::raw::c_uint = 0x80DA;
    pub const GL_COLOR_TABLE_SCALE_SGI: std::os::raw::c_uint = 0x80D6;
    pub const GL_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D0;
    pub const GL_COLOR_TABLE_WIDTH_SGI: std::os::raw::c_uint = 0x80D9;
    pub const GL_COLOR_WRITEMASK: std::os::raw::c_uint = 0x0C23;
    pub const GL_COMBINE4_NV: std::os::raw::c_uint = 0x8503;
    pub const GL_COMBINER0_NV: std::os::raw::c_uint = 0x8550;
    pub const GL_COMBINER1_NV: std::os::raw::c_uint = 0x8551;
    pub const GL_COMBINER2_NV: std::os::raw::c_uint = 0x8552;
    pub const GL_COMBINER3_NV: std::os::raw::c_uint = 0x8553;
    pub const GL_COMBINER4_NV: std::os::raw::c_uint = 0x8554;
    pub const GL_COMBINER5_NV: std::os::raw::c_uint = 0x8555;
    pub const GL_COMBINER6_NV: std::os::raw::c_uint = 0x8556;
    pub const GL_COMBINER7_NV: std::os::raw::c_uint = 0x8557;
    pub const GL_COMBINER_AB_DOT_PRODUCT_NV: std::os::raw::c_uint = 0x8545;
    pub const GL_COMBINER_AB_OUTPUT_NV: std::os::raw::c_uint = 0x854A;
    pub const GL_COMBINER_BIAS_NV: std::os::raw::c_uint = 0x8549;
    pub const GL_COMBINER_CD_DOT_PRODUCT_NV: std::os::raw::c_uint = 0x8546;
    pub const GL_COMBINER_CD_OUTPUT_NV: std::os::raw::c_uint = 0x854B;
    pub const GL_COMBINER_COMPONENT_USAGE_NV: std::os::raw::c_uint = 0x8544;
    pub const GL_COMBINER_INPUT_NV: std::os::raw::c_uint = 0x8542;
    pub const GL_COMBINER_MAPPING_NV: std::os::raw::c_uint = 0x8543;
    pub const GL_COMBINER_MUX_SUM_NV: std::os::raw::c_uint = 0x8547;
    pub const GL_COMBINER_SCALE_NV: std::os::raw::c_uint = 0x8548;
    pub const GL_COMBINER_SUM_OUTPUT_NV: std::os::raw::c_uint = 0x854C;
    pub const GL_COMBINE_ALPHA_ARB: std::os::raw::c_uint = 0x8572;
    pub const GL_COMBINE_ALPHA_EXT: std::os::raw::c_uint = 0x8572;
    pub const GL_COMBINE_ARB: std::os::raw::c_uint = 0x8570;
    pub const GL_COMBINE_EXT: std::os::raw::c_uint = 0x8570;
    pub const GL_COMBINE_RGB_ARB: std::os::raw::c_uint = 0x8571;
    pub const GL_COMBINE_RGB_EXT: std::os::raw::c_uint = 0x8571;
    pub const GL_COMMAND_BARRIER_BIT: std::os::raw::c_uint = 0x00000040;
    pub const GL_COMMAND_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000040;
    pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT: std::os::raw::c_uint = 0x884E;
    pub const GL_COMPARE_REF_TO_TEXTURE: std::os::raw::c_uint = 0x884E;
    pub const GL_COMPARE_R_TO_TEXTURE_ARB: std::os::raw::c_uint = 0x884E;
    pub const GL_COMPATIBLE_SUBROUTINES: std::os::raw::c_uint = 0x8E4B;
    pub const GL_COMPILE_STATUS: std::os::raw::c_uint = 0x8B81;
    pub const GL_COMPLETION_STATUS_ARB: std::os::raw::c_uint = 0x91B1;
    pub const GL_COMPLETION_STATUS_KHR: std::os::raw::c_uint = 0x91B1;
    pub const GL_COMPRESSED_ALPHA_ARB: std::os::raw::c_uint = 0x84E9;
    pub const GL_COMPRESSED_INTENSITY_ARB: std::os::raw::c_uint = 0x84EC;
    pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: std::os::raw::c_uint = 0x84EB;
    pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: std::os::raw::c_uint = 0x8C72;
    pub const GL_COMPRESSED_LUMINANCE_ARB: std::os::raw::c_uint = 0x84EA;
    pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT: std::os::raw::c_uint = 0x8C70;
    pub const GL_COMPRESSED_R11_EAC: std::os::raw::c_uint = 0x9270;
    pub const GL_COMPRESSED_RED: std::os::raw::c_uint = 0x8225;
    pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: std::os::raw::c_uint = 0x8DBD;
    pub const GL_COMPRESSED_RED_RGTC1: std::os::raw::c_uint = 0x8DBB;
    pub const GL_COMPRESSED_RED_RGTC1_EXT: std::os::raw::c_uint = 0x8DBB;
    pub const GL_COMPRESSED_RG: std::os::raw::c_uint = 0x8226;
    pub const GL_COMPRESSED_RG11_EAC: std::os::raw::c_uint = 0x9272;
    pub const GL_COMPRESSED_RGB: std::os::raw::c_uint = 0x84ED;
    pub const GL_COMPRESSED_RGB8_ETC2: std::os::raw::c_uint = 0x9274;
    pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: std::os::raw::c_uint = 0x9276;
    pub const GL_COMPRESSED_RGBA: std::os::raw::c_uint = 0x84EE;
    pub const GL_COMPRESSED_RGBA8_ETC2_EAC: std::os::raw::c_uint = 0x9278;
    pub const GL_COMPRESSED_RGBA_ARB: std::os::raw::c_uint = 0x84EE;
    pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: std::os::raw::c_uint = 0x93BB;
    pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: std::os::raw::c_uint = 0x93B8;
    pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: std::os::raw::c_uint = 0x93B9;
    pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: std::os::raw::c_uint = 0x93BA;
    pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: std::os::raw::c_uint = 0x93BC;
    pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: std::os::raw::c_uint = 0x93BD;
    pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: std::os::raw::c_uint = 0x93B0;
    pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: std::os::raw::c_uint = 0x93B1;
    pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: std::os::raw::c_uint = 0x93B2;
    pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: std::os::raw::c_uint = 0x93B3;
    pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: std::os::raw::c_uint = 0x93B4;
    pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: std::os::raw::c_uint = 0x93B5;
    pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: std::os::raw::c_uint = 0x93B6;
    pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: std::os::raw::c_uint = 0x93B7;
    pub const GL_COMPRESSED_RGBA_BPTC_UNORM: std::os::raw::c_uint = 0x8E8C;
    pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB: std::os::raw::c_uint = 0x8E8C;
    pub const GL_COMPRESSED_RGBA_FXT1_3DFX: std::os::raw::c_uint = 0x86B1;
    pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: std::os::raw::c_uint = 0x83F1;
    pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: std::os::raw::c_uint = 0x83F2;
    pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: std::os::raw::c_uint = 0x83F3;
    pub const GL_COMPRESSED_RGB_ARB: std::os::raw::c_uint = 0x84ED;
    pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT: std::os::raw::c_uint = 0x8E8E;
    pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: std::os::raw::c_uint = 0x8E8E;
    pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT: std::os::raw::c_uint = 0x8E8F;
    pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: std::os::raw::c_uint = 0x8E8F;
    pub const GL_COMPRESSED_RGB_FXT1_3DFX: std::os::raw::c_uint = 0x86B0;
    pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: std::os::raw::c_uint = 0x83F0;
    pub const GL_COMPRESSED_RG_RGTC2: std::os::raw::c_uint = 0x8DBD;
    pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: std::os::raw::c_uint = 0x8C73;
    pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: std::os::raw::c_uint = 0x8C71;
    pub const GL_COMPRESSED_SIGNED_R11_EAC: std::os::raw::c_uint = 0x9271;
    pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: std::os::raw::c_uint = 0x8DBE;
    pub const GL_COMPRESSED_SIGNED_RED_RGTC1: std::os::raw::c_uint = 0x8DBC;
    pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: std::os::raw::c_uint = 0x8DBC;
    pub const GL_COMPRESSED_SIGNED_RG11_EAC: std::os::raw::c_uint = 0x9273;
    pub const GL_COMPRESSED_SIGNED_RG_RGTC2: std::os::raw::c_uint = 0x8DBE;
    pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT: std::os::raw::c_uint = 0x8C4B;
    pub const GL_COMPRESSED_SLUMINANCE_EXT: std::os::raw::c_uint = 0x8C4A;
    pub const GL_COMPRESSED_SRGB: std::os::raw::c_uint = 0x8C48;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: std::os::raw::c_uint = 0x93DB;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: std::os::raw::c_uint = 0x93D8;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: std::os::raw::c_uint = 0x93D9;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: std::os::raw::c_uint = 0x93DA;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: std::os::raw::c_uint = 0x93DC;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: std::os::raw::c_uint = 0x93DD;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: std::os::raw::c_uint = 0x93D0;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: std::os::raw::c_uint = 0x93D1;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: std::os::raw::c_uint = 0x93D2;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: std::os::raw::c_uint = 0x93D3;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: std::os::raw::c_uint = 0x93D4;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: std::os::raw::c_uint = 0x93D5;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: std::os::raw::c_uint = 0x93D6;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: std::os::raw::c_uint = 0x93D7;
    pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: std::os::raw::c_uint = 0x9279;
    pub const GL_COMPRESSED_SRGB8_ETC2: std::os::raw::c_uint = 0x9275;
    pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: std::os::raw::c_uint = 0x9277;
    pub const GL_COMPRESSED_SRGB_ALPHA: std::os::raw::c_uint = 0x8C49;
    pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM: std::os::raw::c_uint = 0x8E8D;
    pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: std::os::raw::c_uint = 0x8E8D;
    pub const GL_COMPRESSED_SRGB_ALPHA_EXT: std::os::raw::c_uint = 0x8C49;
    pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: std::os::raw::c_uint = 0x8C4D;
    pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: std::os::raw::c_uint = 0x8C4E;
    pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: std::os::raw::c_uint = 0x8C4F;
    pub const GL_COMPRESSED_SRGB_EXT: std::os::raw::c_uint = 0x8C48;
    pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: std::os::raw::c_uint = 0x8C4C;
    pub const GL_COMPRESSED_TEXTURE_FORMATS: std::os::raw::c_uint = 0x86A3;
    pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: std::os::raw::c_uint = 0x86A3;
    pub const GL_COMPUTE_PROGRAM_NV: std::os::raw::c_uint = 0x90FB;
    pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x90FC;
    pub const GL_COMPUTE_SHADER: std::os::raw::c_uint = 0x91B9;
    pub const GL_COMPUTE_SHADER_BIT: std::os::raw::c_uint = 0x00000020;
    pub const GL_COMPUTE_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x82F5;
    pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB: std::os::raw::c_uint = 0x82F5;
    pub const GL_COMPUTE_SUBROUTINE: std::os::raw::c_uint = 0x92ED;
    pub const GL_COMPUTE_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92F3;
    pub const GL_COMPUTE_TEXTURE: std::os::raw::c_uint = 0x82A0;
    pub const GL_COMPUTE_WORK_GROUP_SIZE: std::os::raw::c_uint = 0x8267;
    pub const GL_COMP_BIT_ATI: std::os::raw::c_uint = 0x00000002;
    pub const GL_CONDITION_SATISFIED: std::os::raw::c_uint = 0x911C;
    pub const GL_CONFORMANT_NV: std::os::raw::c_uint = 0x9374;
    pub const GL_CONIC_CURVE_TO_NV: std::os::raw::c_uint = 0x1A;
    pub const GL_CONJOINT_NV: std::os::raw::c_uint = 0x9284;
    pub const GL_CONSERVATIVE_RASTERIZATION_INTEL: std::os::raw::c_uint = 0x83FE;
    pub const GL_CONSERVATIVE_RASTERIZATION_NV: std::os::raw::c_uint = 0x9346;
    pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV: std::os::raw::c_uint = 0x937B;
    pub const GL_CONSERVATIVE_RASTER_DILATE_NV: std::os::raw::c_uint = 0x9379;
    pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV: std::os::raw::c_uint = 0x937A;
    pub const GL_CONSERVATIVE_RASTER_MODE_NV: std::os::raw::c_uint = 0x954D;
    pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: std::os::raw::c_uint = 0x954E;
    pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: std::os::raw::c_uint = 0x9550;
    pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: std::os::raw::c_uint = 0x954F;
    pub const GL_CONSERVE_MEMORY_HINT_PGI: std::os::raw::c_uint = 0x1A1FD;
    pub const GL_CONSTANT_ALPHA: std::os::raw::c_uint = 0x8003;
    pub const GL_CONSTANT_ALPHA_EXT: std::os::raw::c_uint = 0x8003;
    pub const GL_CONSTANT_ARB: std::os::raw::c_uint = 0x8576;
    pub const GL_CONSTANT_BORDER_HP: std::os::raw::c_uint = 0x8151;
    pub const GL_CONSTANT_COLOR: std::os::raw::c_uint = 0x8001;
    pub const GL_CONSTANT_COLOR0_NV: std::os::raw::c_uint = 0x852A;
    pub const GL_CONSTANT_COLOR1_NV: std::os::raw::c_uint = 0x852B;
    pub const GL_CONSTANT_COLOR_EXT: std::os::raw::c_uint = 0x8001;
    pub const GL_CONSTANT_EXT: std::os::raw::c_uint = 0x8576;
    pub const GL_CONST_EYE_NV: std::os::raw::c_uint = 0x86E5;
    pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: std::os::raw::c_uint = 0x00000002;
    pub const GL_CONTEXT_CORE_PROFILE_BIT: std::os::raw::c_uint = 0x00000001;
    pub const GL_CONTEXT_FLAGS: std::os::raw::c_uint = 0x821E;
    pub const GL_CONTEXT_FLAG_DEBUG_BIT: std::os::raw::c_uint = 0x00000002;
    pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: std::os::raw::c_uint = 0x00000001;
    pub const GL_CONTEXT_FLAG_NO_ERROR_BIT: std::os::raw::c_uint = 0x00000008;
    pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: std::os::raw::c_uint = 0x00000008;
    pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT: std::os::raw::c_uint = 0x00000004;
    pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: std::os::raw::c_uint = 0x00000004;
    pub const GL_CONTEXT_LOST: std::os::raw::c_uint = 0x0507;
    pub const GL_CONTEXT_PROFILE_MASK: std::os::raw::c_uint = 0x9126;
    pub const GL_CONTEXT_RELEASE_BEHAVIOR: std::os::raw::c_uint = 0x82FB;
    pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: std::os::raw::c_uint = 0x82FC;
    pub const GL_CONTEXT_ROBUST_ACCESS: std::os::raw::c_uint = 0x90F3;
    pub const GL_CONTINUOUS_AMD: std::os::raw::c_uint = 0x9007;
    pub const GL_CONTRAST_NV: std::os::raw::c_uint = 0x92A1;
    pub const GL_CONVEX_HULL_NV: std::os::raw::c_uint = 0x908B;
    pub const GL_CONVOLUTION_1D_EXT: std::os::raw::c_uint = 0x8010;
    pub const GL_CONVOLUTION_2D_EXT: std::os::raw::c_uint = 0x8011;
    pub const GL_CONVOLUTION_BORDER_COLOR_HP: std::os::raw::c_uint = 0x8154;
    pub const GL_CONVOLUTION_BORDER_MODE_EXT: std::os::raw::c_uint = 0x8013;
    pub const GL_CONVOLUTION_FILTER_BIAS_EXT: std::os::raw::c_uint = 0x8015;
    pub const GL_CONVOLUTION_FILTER_SCALE_EXT: std::os::raw::c_uint = 0x8014;
    pub const GL_CONVOLUTION_FORMAT_EXT: std::os::raw::c_uint = 0x8017;
    pub const GL_CONVOLUTION_HEIGHT_EXT: std::os::raw::c_uint = 0x8019;
    pub const GL_CONVOLUTION_HINT_SGIX: std::os::raw::c_uint = 0x8316;
    pub const GL_CONVOLUTION_WIDTH_EXT: std::os::raw::c_uint = 0x8018;
    pub const GL_CON_0_ATI: std::os::raw::c_uint = 0x8941;
    pub const GL_CON_10_ATI: std::os::raw::c_uint = 0x894B;
    pub const GL_CON_11_ATI: std::os::raw::c_uint = 0x894C;
    pub const GL_CON_12_ATI: std::os::raw::c_uint = 0x894D;
    pub const GL_CON_13_ATI: std::os::raw::c_uint = 0x894E;
    pub const GL_CON_14_ATI: std::os::raw::c_uint = 0x894F;
    pub const GL_CON_15_ATI: std::os::raw::c_uint = 0x8950;
    pub const GL_CON_16_ATI: std::os::raw::c_uint = 0x8951;
    pub const GL_CON_17_ATI: std::os::raw::c_uint = 0x8952;
    pub const GL_CON_18_ATI: std::os::raw::c_uint = 0x8953;
    pub const GL_CON_19_ATI: std::os::raw::c_uint = 0x8954;
    pub const GL_CON_1_ATI: std::os::raw::c_uint = 0x8942;
    pub const GL_CON_20_ATI: std::os::raw::c_uint = 0x8955;
    pub const GL_CON_21_ATI: std::os::raw::c_uint = 0x8956;
    pub const GL_CON_22_ATI: std::os::raw::c_uint = 0x8957;
    pub const GL_CON_23_ATI: std::os::raw::c_uint = 0x8958;
    pub const GL_CON_24_ATI: std::os::raw::c_uint = 0x8959;
    pub const GL_CON_25_ATI: std::os::raw::c_uint = 0x895A;
    pub const GL_CON_26_ATI: std::os::raw::c_uint = 0x895B;
    pub const GL_CON_27_ATI: std::os::raw::c_uint = 0x895C;
    pub const GL_CON_28_ATI: std::os::raw::c_uint = 0x895D;
    pub const GL_CON_29_ATI: std::os::raw::c_uint = 0x895E;
    pub const GL_CON_2_ATI: std::os::raw::c_uint = 0x8943;
    pub const GL_CON_30_ATI: std::os::raw::c_uint = 0x895F;
    pub const GL_CON_31_ATI: std::os::raw::c_uint = 0x8960;
    pub const GL_CON_3_ATI: std::os::raw::c_uint = 0x8944;
    pub const GL_CON_4_ATI: std::os::raw::c_uint = 0x8945;
    pub const GL_CON_5_ATI: std::os::raw::c_uint = 0x8946;
    pub const GL_CON_6_ATI: std::os::raw::c_uint = 0x8947;
    pub const GL_CON_7_ATI: std::os::raw::c_uint = 0x8948;
    pub const GL_CON_8_ATI: std::os::raw::c_uint = 0x8949;
    pub const GL_CON_9_ATI: std::os::raw::c_uint = 0x894A;
    pub const GL_COORD_REPLACE_ARB: std::os::raw::c_uint = 0x8862;
    pub const GL_COORD_REPLACE_NV: std::os::raw::c_uint = 0x8862;
    pub const GL_COPY: std::os::raw::c_uint = 0x1503;
    pub const GL_COPY_INVERTED: std::os::raw::c_uint = 0x150C;
    pub const GL_COPY_READ_BUFFER: std::os::raw::c_uint = 0x8F36;
    pub const GL_COPY_READ_BUFFER_BINDING: std::os::raw::c_uint = 0x8F36;
    pub const GL_COPY_WRITE_BUFFER: std::os::raw::c_uint = 0x8F37;
    pub const GL_COPY_WRITE_BUFFER_BINDING: std::os::raw::c_uint = 0x8F37;
    pub const GL_COUNTER_RANGE_AMD: std::os::raw::c_uint = 0x8BC1;
    pub const GL_COUNTER_TYPE_AMD: std::os::raw::c_uint = 0x8BC0;
    pub const GL_COUNT_DOWN_NV: std::os::raw::c_uint = 0x9089;
    pub const GL_COUNT_UP_NV: std::os::raw::c_uint = 0x9088;
    pub const GL_COVERAGE_MODULATION_NV: std::os::raw::c_uint = 0x9332;
    pub const GL_COVERAGE_MODULATION_TABLE_NV: std::os::raw::c_uint = 0x9331;
    pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV: std::os::raw::c_uint = 0x9333;
    pub const GL_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0C;
    pub const GL_CUBIC_EXT: std::os::raw::c_uint = 0x8334;
    pub const GL_CUBIC_HP: std::os::raw::c_uint = 0x815F;
    pub const GL_CULL_FACE: std::os::raw::c_uint = 0x0B44;
    pub const GL_CULL_FACE_MODE: std::os::raw::c_uint = 0x0B45;
    pub const GL_CULL_FRAGMENT_NV: std::os::raw::c_uint = 0x86E7;
    pub const GL_CULL_MODES_NV: std::os::raw::c_uint = 0x86E0;
    pub const GL_CULL_VERTEX_EXT: std::os::raw::c_uint = 0x81AA;
    pub const GL_CULL_VERTEX_EYE_POSITION_EXT: std::os::raw::c_uint = 0x81AB;
    pub const GL_CULL_VERTEX_IBM: std::os::raw::c_uint = 103050;
    pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT: std::os::raw::c_uint = 0x81AC;
    pub const GL_CURRENT_ATTRIB_NV: std::os::raw::c_uint = 0x8626;
    pub const GL_CURRENT_BINORMAL_EXT: std::os::raw::c_uint = 0x843C;
    pub const GL_CURRENT_FOG_COORDINATE_EXT: std::os::raw::c_uint = 0x8453;
    pub const GL_CURRENT_MATRIX_ARB: std::os::raw::c_uint = 0x8641;
    pub const GL_CURRENT_MATRIX_INDEX_ARB: std::os::raw::c_uint = 0x8845;
    pub const GL_CURRENT_MATRIX_NV: std::os::raw::c_uint = 0x8641;
    pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: std::os::raw::c_uint = 0x8640;
    pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV: std::os::raw::c_uint = 0x8640;
    pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV: std::os::raw::c_uint = 0x8865;
    pub const GL_CURRENT_PALETTE_MATRIX_ARB: std::os::raw::c_uint = 0x8843;
    pub const GL_CURRENT_PROGRAM: std::os::raw::c_uint = 0x8B8D;
    pub const GL_CURRENT_QUERY: std::os::raw::c_uint = 0x8865;
    pub const GL_CURRENT_QUERY_ARB: std::os::raw::c_uint = 0x8865;
    pub const GL_CURRENT_RASTER_NORMAL_SGIX: std::os::raw::c_uint = 0x8406;
    pub const GL_CURRENT_SECONDARY_COLOR_EXT: std::os::raw::c_uint = 0x8459;
    pub const GL_CURRENT_TANGENT_EXT: std::os::raw::c_uint = 0x843B;
    pub const GL_CURRENT_TIME_NV: std::os::raw::c_uint = 0x8E28;
    pub const GL_CURRENT_VERTEX_ATTRIB: std::os::raw::c_uint = 0x8626;
    pub const GL_CURRENT_VERTEX_ATTRIB_ARB: std::os::raw::c_uint = 0x8626;
    pub const GL_CURRENT_VERTEX_EXT: std::os::raw::c_uint = 0x87E2;
    pub const GL_CURRENT_VERTEX_WEIGHT_EXT: std::os::raw::c_uint = 0x850B;
    pub const GL_CURRENT_WEIGHT_ARB: std::os::raw::c_uint = 0x86A8;
    pub const GL_CW: std::os::raw::c_uint = 0x0900;
    pub const GL_D3D12_FENCE_VALUE_EXT: std::os::raw::c_uint = 0x9595;
    pub const GL_DARKEN_KHR: std::os::raw::c_uint = 0x9297;
    pub const GL_DARKEN_NV: std::os::raw::c_uint = 0x9297;
    pub const GL_DATA_BUFFER_AMD: std::os::raw::c_uint = 0x9151;
    pub const GL_DEBUG_CALLBACK_FUNCTION: std::os::raw::c_uint = 0x8244;
    pub const GL_DEBUG_CALLBACK_FUNCTION_ARB: std::os::raw::c_uint = 0x8244;
    pub const GL_DEBUG_CALLBACK_USER_PARAM: std::os::raw::c_uint = 0x8245;
    pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB: std::os::raw::c_uint = 0x8245;
    pub const GL_DEBUG_CATEGORY_API_ERROR_AMD: std::os::raw::c_uint = 0x9149;
    pub const GL_DEBUG_CATEGORY_APPLICATION_AMD: std::os::raw::c_uint = 0x914F;
    pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD: std::os::raw::c_uint = 0x914B;
    pub const GL_DEBUG_CATEGORY_OTHER_AMD: std::os::raw::c_uint = 0x9150;
    pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD: std::os::raw::c_uint = 0x914D;
    pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD: std::os::raw::c_uint = 0x914E;
    pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: std::os::raw::c_uint = 0x914C;
    pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: std::os::raw::c_uint = 0x914A;
    pub const GL_DEBUG_GROUP_STACK_DEPTH: std::os::raw::c_uint = 0x826D;
    pub const GL_DEBUG_LOGGED_MESSAGES: std::os::raw::c_uint = 0x9145;
    pub const GL_DEBUG_LOGGED_MESSAGES_AMD: std::os::raw::c_uint = 0x9145;
    pub const GL_DEBUG_LOGGED_MESSAGES_ARB: std::os::raw::c_uint = 0x9145;
    pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: std::os::raw::c_uint = 0x8243;
    pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: std::os::raw::c_uint = 0x8243;
    pub const GL_DEBUG_OUTPUT: std::os::raw::c_uint = 0x92E0;
    pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: std::os::raw::c_uint = 0x8242;
    pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: std::os::raw::c_uint = 0x8242;
    pub const GL_DEBUG_SEVERITY_HIGH: std::os::raw::c_uint = 0x9146;
    pub const GL_DEBUG_SEVERITY_HIGH_AMD: std::os::raw::c_uint = 0x9146;
    pub const GL_DEBUG_SEVERITY_HIGH_ARB: std::os::raw::c_uint = 0x9146;
    pub const GL_DEBUG_SEVERITY_LOW: std::os::raw::c_uint = 0x9148;
    pub const GL_DEBUG_SEVERITY_LOW_AMD: std::os::raw::c_uint = 0x9148;
    pub const GL_DEBUG_SEVERITY_LOW_ARB: std::os::raw::c_uint = 0x9148;
    pub const GL_DEBUG_SEVERITY_MEDIUM: std::os::raw::c_uint = 0x9147;
    pub const GL_DEBUG_SEVERITY_MEDIUM_AMD: std::os::raw::c_uint = 0x9147;
    pub const GL_DEBUG_SEVERITY_MEDIUM_ARB: std::os::raw::c_uint = 0x9147;
    pub const GL_DEBUG_SEVERITY_NOTIFICATION: std::os::raw::c_uint = 0x826B;
    pub const GL_DEBUG_SOURCE_API: std::os::raw::c_uint = 0x8246;
    pub const GL_DEBUG_SOURCE_API_ARB: std::os::raw::c_uint = 0x8246;
    pub const GL_DEBUG_SOURCE_APPLICATION: std::os::raw::c_uint = 0x824A;
    pub const GL_DEBUG_SOURCE_APPLICATION_ARB: std::os::raw::c_uint = 0x824A;
    pub const GL_DEBUG_SOURCE_OTHER: std::os::raw::c_uint = 0x824B;
    pub const GL_DEBUG_SOURCE_OTHER_ARB: std::os::raw::c_uint = 0x824B;
    pub const GL_DEBUG_SOURCE_SHADER_COMPILER: std::os::raw::c_uint = 0x8248;
    pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: std::os::raw::c_uint = 0x8248;
    pub const GL_DEBUG_SOURCE_THIRD_PARTY: std::os::raw::c_uint = 0x8249;
    pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB: std::os::raw::c_uint = 0x8249;
    pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: std::os::raw::c_uint = 0x8247;
    pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: std::os::raw::c_uint = 0x8247;
    pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: std::os::raw::c_uint = 0x824D;
    pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: std::os::raw::c_uint = 0x824D;
    pub const GL_DEBUG_TYPE_ERROR: std::os::raw::c_uint = 0x824C;
    pub const GL_DEBUG_TYPE_ERROR_ARB: std::os::raw::c_uint = 0x824C;
    pub const GL_DEBUG_TYPE_MARKER: std::os::raw::c_uint = 0x8268;
    pub const GL_DEBUG_TYPE_OTHER: std::os::raw::c_uint = 0x8251;
    pub const GL_DEBUG_TYPE_OTHER_ARB: std::os::raw::c_uint = 0x8251;
    pub const GL_DEBUG_TYPE_PERFORMANCE: std::os::raw::c_uint = 0x8250;
    pub const GL_DEBUG_TYPE_PERFORMANCE_ARB: std::os::raw::c_uint = 0x8250;
    pub const GL_DEBUG_TYPE_POP_GROUP: std::os::raw::c_uint = 0x826A;
    pub const GL_DEBUG_TYPE_PORTABILITY: std::os::raw::c_uint = 0x824F;
    pub const GL_DEBUG_TYPE_PORTABILITY_ARB: std::os::raw::c_uint = 0x824F;
    pub const GL_DEBUG_TYPE_PUSH_GROUP: std::os::raw::c_uint = 0x8269;
    pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: std::os::raw::c_uint = 0x824E;
    pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: std::os::raw::c_uint = 0x824E;
    pub const GL_DECODE_EXT: std::os::raw::c_uint = 0x8A49;
    pub const GL_DECR: std::os::raw::c_uint = 0x1E03;
    pub const GL_DECR_WRAP: std::os::raw::c_uint = 0x8508;
    pub const GL_DECR_WRAP_EXT: std::os::raw::c_uint = 0x8508;
    pub const GL_DEDICATED_MEMORY_OBJECT_EXT: std::os::raw::c_uint = 0x9581;
    pub const GL_DEFORMATIONS_MASK_SGIX: std::os::raw::c_uint = 0x8196;
    pub const GL_DELETE_STATUS: std::os::raw::c_uint = 0x8B80;
    pub const GL_DEPENDENT_AR_TEXTURE_2D_NV: std::os::raw::c_uint = 0x86E9;
    pub const GL_DEPENDENT_GB_TEXTURE_2D_NV: std::os::raw::c_uint = 0x86EA;
    pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV: std::os::raw::c_uint = 0x8858;
    pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV: std::os::raw::c_uint = 0x8859;
    pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: std::os::raw::c_uint = 0x885A;
    pub const GL_DEPTH: std::os::raw::c_uint = 0x1801;
    pub const GL_DEPTH24_STENCIL8: std::os::raw::c_uint = 0x88F0;
    pub const GL_DEPTH24_STENCIL8_EXT: std::os::raw::c_uint = 0x88F0;
    pub const GL_DEPTH32F_STENCIL8: std::os::raw::c_uint = 0x8CAD;
    pub const GL_DEPTH32F_STENCIL8_NV: std::os::raw::c_uint = 0x8DAC;
    pub const GL_DEPTH_ATTACHMENT: std::os::raw::c_uint = 0x8D00;
    pub const GL_DEPTH_ATTACHMENT_EXT: std::os::raw::c_uint = 0x8D00;
    pub const GL_DEPTH_BOUNDS_EXT: std::os::raw::c_uint = 0x8891;
    pub const GL_DEPTH_BOUNDS_TEST_EXT: std::os::raw::c_uint = 0x8890;
    pub const GL_DEPTH_BUFFER_BIT: std::os::raw::c_uint = 0x00000100;
    pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV: std::os::raw::c_uint = 0x8DAF;
    pub const GL_DEPTH_CLAMP: std::os::raw::c_uint = 0x864F;
    pub const GL_DEPTH_CLAMP_FAR_AMD: std::os::raw::c_uint = 0x901F;
    pub const GL_DEPTH_CLAMP_NEAR_AMD: std::os::raw::c_uint = 0x901E;
    pub const GL_DEPTH_CLAMP_NV: std::os::raw::c_uint = 0x864F;
    pub const GL_DEPTH_CLEAR_VALUE: std::os::raw::c_uint = 0x0B73;
    pub const GL_DEPTH_COMPONENT: std::os::raw::c_uint = 0x1902;
    pub const GL_DEPTH_COMPONENT16: std::os::raw::c_uint = 0x81A5;
    pub const GL_DEPTH_COMPONENT16_ARB: std::os::raw::c_uint = 0x81A5;
    pub const GL_DEPTH_COMPONENT16_SGIX: std::os::raw::c_uint = 0x81A5;
    pub const GL_DEPTH_COMPONENT24: std::os::raw::c_uint = 0x81A6;
    pub const GL_DEPTH_COMPONENT24_ARB: std::os::raw::c_uint = 0x81A6;
    pub const GL_DEPTH_COMPONENT24_SGIX: std::os::raw::c_uint = 0x81A6;
    pub const GL_DEPTH_COMPONENT32: std::os::raw::c_uint = 0x81A7;
    pub const GL_DEPTH_COMPONENT32F: std::os::raw::c_uint = 0x8CAC;
    pub const GL_DEPTH_COMPONENT32F_NV: std::os::raw::c_uint = 0x8DAB;
    pub const GL_DEPTH_COMPONENT32_ARB: std::os::raw::c_uint = 0x81A7;
    pub const GL_DEPTH_COMPONENT32_SGIX: std::os::raw::c_uint = 0x81A7;
    pub const GL_DEPTH_COMPONENTS: std::os::raw::c_uint = 0x8284;
    pub const GL_DEPTH_FUNC: std::os::raw::c_uint = 0x0B74;
    pub const GL_DEPTH_RANGE: std::os::raw::c_uint = 0x0B70;
    pub const GL_DEPTH_RENDERABLE: std::os::raw::c_uint = 0x8287;
    pub const GL_DEPTH_SAMPLES_NV: std::os::raw::c_uint = 0x932D;
    pub const GL_DEPTH_STENCIL: std::os::raw::c_uint = 0x84F9;
    pub const GL_DEPTH_STENCIL_ATTACHMENT: std::os::raw::c_uint = 0x821A;
    pub const GL_DEPTH_STENCIL_EXT: std::os::raw::c_uint = 0x84F9;
    pub const GL_DEPTH_STENCIL_NV: std::os::raw::c_uint = 0x84F9;
    pub const GL_DEPTH_STENCIL_TEXTURE_MODE: std::os::raw::c_uint = 0x90EA;
    pub const GL_DEPTH_STENCIL_TO_BGRA_NV: std::os::raw::c_uint = 0x886F;
    pub const GL_DEPTH_STENCIL_TO_RGBA_NV: std::os::raw::c_uint = 0x886E;
    pub const GL_DEPTH_TEST: std::os::raw::c_uint = 0x0B71;
    pub const GL_DEPTH_TEXTURE_MODE_ARB: std::os::raw::c_uint = 0x884B;
    pub const GL_DEPTH_WRITEMASK: std::os::raw::c_uint = 0x0B72;
    pub const GL_DETACHED_BUFFERS_NV: std::os::raw::c_uint = 0x95AB;
    pub const GL_DETACHED_MEMORY_INCARNATION_NV: std::os::raw::c_uint = 0x95A9;
    pub const GL_DETACHED_TEXTURES_NV: std::os::raw::c_uint = 0x95AA;
    pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS: std::os::raw::c_uint = 0x8096;
    pub const GL_DETAIL_TEXTURE_2D_SGIS: std::os::raw::c_uint = 0x8095;
    pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS: std::os::raw::c_uint = 0x809C;
    pub const GL_DETAIL_TEXTURE_LEVEL_SGIS: std::os::raw::c_uint = 0x809A;
    pub const GL_DETAIL_TEXTURE_MODE_SGIS: std::os::raw::c_uint = 0x809B;
    pub const GL_DEVICE_LUID_EXT: std::os::raw::c_uint = 0x9599;
    pub const GL_DEVICE_NODE_MASK_EXT: std::os::raw::c_uint = 0x959A;
    pub const GL_DEVICE_UUID_EXT: std::os::raw::c_uint = 0x9597;
    pub const GL_DIFFERENCE_KHR: std::os::raw::c_uint = 0x929E;
    pub const GL_DIFFERENCE_NV: std::os::raw::c_uint = 0x929E;
    pub const GL_DISCARD_ATI: std::os::raw::c_uint = 0x8763;
    pub const GL_DISCARD_NV: std::os::raw::c_uint = 0x8530;
    pub const GL_DISCRETE_AMD: std::os::raw::c_uint = 0x9006;
    pub const GL_DISJOINT_NV: std::os::raw::c_uint = 0x9283;
    pub const GL_DISPATCH_INDIRECT_BUFFER: std::os::raw::c_uint = 0x90EE;
    pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: std::os::raw::c_uint = 0x90EF;
    pub const GL_DISTANCE_ATTENUATION_EXT: std::os::raw::c_uint = 0x8129;
    pub const GL_DISTANCE_ATTENUATION_SGIS: std::os::raw::c_uint = 0x8129;
    pub const GL_DITHER: std::os::raw::c_uint = 0x0BD0;
    pub const GL_DONT_CARE: std::os::raw::c_uint = 0x1100;
    pub const GL_DOT2_ADD_ATI: std::os::raw::c_uint = 0x896C;
    pub const GL_DOT3_ATI: std::os::raw::c_uint = 0x8966;
    pub const GL_DOT3_RGBA_ARB: std::os::raw::c_uint = 0x86AF;
    pub const GL_DOT3_RGBA_EXT: std::os::raw::c_uint = 0x8741;
    pub const GL_DOT3_RGB_ARB: std::os::raw::c_uint = 0x86AE;
    pub const GL_DOT3_RGB_EXT: std::os::raw::c_uint = 0x8740;
    pub const GL_DOT4_ATI: std::os::raw::c_uint = 0x8967;
    pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: std::os::raw::c_uint = 0x885D;
    pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: std::os::raw::c_uint = 0x86F3;
    pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV: std::os::raw::c_uint = 0x86ED;
    pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: std::os::raw::c_uint = 0x86F1;
    pub const GL_DOT_PRODUCT_NV: std::os::raw::c_uint = 0x86EC;
    pub const GL_DOT_PRODUCT_PASS_THROUGH_NV: std::os::raw::c_uint = 0x885B;
    pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV: std::os::raw::c_uint = 0x86F2;
    pub const GL_DOT_PRODUCT_TEXTURE_1D_NV: std::os::raw::c_uint = 0x885C;
    pub const GL_DOT_PRODUCT_TEXTURE_2D_NV: std::os::raw::c_uint = 0x86EE;
    pub const GL_DOT_PRODUCT_TEXTURE_3D_NV: std::os::raw::c_uint = 0x86EF;
    pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: std::os::raw::c_uint = 0x86F0;
    pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x864E;
    pub const GL_DOUBLE: std::os::raw::c_uint = 0x140A;
    pub const GL_DOUBLEBUFFER: std::os::raw::c_uint = 0x0C32;
    pub const GL_DOUBLE_MAT2: std::os::raw::c_uint = 0x8F46;
    pub const GL_DOUBLE_MAT2_EXT: std::os::raw::c_uint = 0x8F46;
    pub const GL_DOUBLE_MAT2x3: std::os::raw::c_uint = 0x8F49;
    pub const GL_DOUBLE_MAT2x3_EXT: std::os::raw::c_uint = 0x8F49;
    pub const GL_DOUBLE_MAT2x4: std::os::raw::c_uint = 0x8F4A;
    pub const GL_DOUBLE_MAT2x4_EXT: std::os::raw::c_uint = 0x8F4A;
    pub const GL_DOUBLE_MAT3: std::os::raw::c_uint = 0x8F47;
    pub const GL_DOUBLE_MAT3_EXT: std::os::raw::c_uint = 0x8F47;
    pub const GL_DOUBLE_MAT3x2: std::os::raw::c_uint = 0x8F4B;
    pub const GL_DOUBLE_MAT3x2_EXT: std::os::raw::c_uint = 0x8F4B;
    pub const GL_DOUBLE_MAT3x4: std::os::raw::c_uint = 0x8F4C;
    pub const GL_DOUBLE_MAT3x4_EXT: std::os::raw::c_uint = 0x8F4C;
    pub const GL_DOUBLE_MAT4: std::os::raw::c_uint = 0x8F48;
    pub const GL_DOUBLE_MAT4_EXT: std::os::raw::c_uint = 0x8F48;
    pub const GL_DOUBLE_MAT4x2: std::os::raw::c_uint = 0x8F4D;
    pub const GL_DOUBLE_MAT4x2_EXT: std::os::raw::c_uint = 0x8F4D;
    pub const GL_DOUBLE_MAT4x3: std::os::raw::c_uint = 0x8F4E;
    pub const GL_DOUBLE_MAT4x3_EXT: std::os::raw::c_uint = 0x8F4E;
    pub const GL_DOUBLE_VEC2: std::os::raw::c_uint = 0x8FFC;
    pub const GL_DOUBLE_VEC2_EXT: std::os::raw::c_uint = 0x8FFC;
    pub const GL_DOUBLE_VEC3: std::os::raw::c_uint = 0x8FFD;
    pub const GL_DOUBLE_VEC3_EXT: std::os::raw::c_uint = 0x8FFD;
    pub const GL_DOUBLE_VEC4: std::os::raw::c_uint = 0x8FFE;
    pub const GL_DOUBLE_VEC4_EXT: std::os::raw::c_uint = 0x8FFE;
    pub const GL_DRAW_ARRAYS_COMMAND_NV: std::os::raw::c_uint = 0x0003;
    pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV: std::os::raw::c_uint = 0x0007;
    pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV: std::os::raw::c_uint = 0x0005;
    pub const GL_DRAW_BUFFER: std::os::raw::c_uint = 0x0C01;
    pub const GL_DRAW_BUFFER0: std::os::raw::c_uint = 0x8825;
    pub const GL_DRAW_BUFFER0_ARB: std::os::raw::c_uint = 0x8825;
    pub const GL_DRAW_BUFFER0_ATI: std::os::raw::c_uint = 0x8825;
    pub const GL_DRAW_BUFFER1: std::os::raw::c_uint = 0x8826;
    pub const GL_DRAW_BUFFER10: std::os::raw::c_uint = 0x882F;
    pub const GL_DRAW_BUFFER10_ARB: std::os::raw::c_uint = 0x882F;
    pub const GL_DRAW_BUFFER10_ATI: std::os::raw::c_uint = 0x882F;
    pub const GL_DRAW_BUFFER11: std::os::raw::c_uint = 0x8830;
    pub const GL_DRAW_BUFFER11_ARB: std::os::raw::c_uint = 0x8830;
    pub const GL_DRAW_BUFFER11_ATI: std::os::raw::c_uint = 0x8830;
    pub const GL_DRAW_BUFFER12: std::os::raw::c_uint = 0x8831;
    pub const GL_DRAW_BUFFER12_ARB: std::os::raw::c_uint = 0x8831;
    pub const GL_DRAW_BUFFER12_ATI: std::os::raw::c_uint = 0x8831;
    pub const GL_DRAW_BUFFER13: std::os::raw::c_uint = 0x8832;
    pub const GL_DRAW_BUFFER13_ARB: std::os::raw::c_uint = 0x8832;
    pub const GL_DRAW_BUFFER13_ATI: std::os::raw::c_uint = 0x8832;
    pub const GL_DRAW_BUFFER14: std::os::raw::c_uint = 0x8833;
    pub const GL_DRAW_BUFFER14_ARB: std::os::raw::c_uint = 0x8833;
    pub const GL_DRAW_BUFFER14_ATI: std::os::raw::c_uint = 0x8833;
    pub const GL_DRAW_BUFFER15: std::os::raw::c_uint = 0x8834;
    pub const GL_DRAW_BUFFER15_ARB: std::os::raw::c_uint = 0x8834;
    pub const GL_DRAW_BUFFER15_ATI: std::os::raw::c_uint = 0x8834;
    pub const GL_DRAW_BUFFER1_ARB: std::os::raw::c_uint = 0x8826;
    pub const GL_DRAW_BUFFER1_ATI: std::os::raw::c_uint = 0x8826;
    pub const GL_DRAW_BUFFER2: std::os::raw::c_uint = 0x8827;
    pub const GL_DRAW_BUFFER2_ARB: std::os::raw::c_uint = 0x8827;
    pub const GL_DRAW_BUFFER2_ATI: std::os::raw::c_uint = 0x8827;
    pub const GL_DRAW_BUFFER3: std::os::raw::c_uint = 0x8828;
    pub const GL_DRAW_BUFFER3_ARB: std::os::raw::c_uint = 0x8828;
    pub const GL_DRAW_BUFFER3_ATI: std::os::raw::c_uint = 0x8828;
    pub const GL_DRAW_BUFFER4: std::os::raw::c_uint = 0x8829;
    pub const GL_DRAW_BUFFER4_ARB: std::os::raw::c_uint = 0x8829;
    pub const GL_DRAW_BUFFER4_ATI: std::os::raw::c_uint = 0x8829;
    pub const GL_DRAW_BUFFER5: std::os::raw::c_uint = 0x882A;
    pub const GL_DRAW_BUFFER5_ARB: std::os::raw::c_uint = 0x882A;
    pub const GL_DRAW_BUFFER5_ATI: std::os::raw::c_uint = 0x882A;
    pub const GL_DRAW_BUFFER6: std::os::raw::c_uint = 0x882B;
    pub const GL_DRAW_BUFFER6_ARB: std::os::raw::c_uint = 0x882B;
    pub const GL_DRAW_BUFFER6_ATI: std::os::raw::c_uint = 0x882B;
    pub const GL_DRAW_BUFFER7: std::os::raw::c_uint = 0x882C;
    pub const GL_DRAW_BUFFER7_ARB: std::os::raw::c_uint = 0x882C;
    pub const GL_DRAW_BUFFER7_ATI: std::os::raw::c_uint = 0x882C;
    pub const GL_DRAW_BUFFER8: std::os::raw::c_uint = 0x882D;
    pub const GL_DRAW_BUFFER8_ARB: std::os::raw::c_uint = 0x882D;
    pub const GL_DRAW_BUFFER8_ATI: std::os::raw::c_uint = 0x882D;
    pub const GL_DRAW_BUFFER9: std::os::raw::c_uint = 0x882E;
    pub const GL_DRAW_BUFFER9_ARB: std::os::raw::c_uint = 0x882E;
    pub const GL_DRAW_BUFFER9_ATI: std::os::raw::c_uint = 0x882E;
    pub const GL_DRAW_ELEMENTS_COMMAND_NV: std::os::raw::c_uint = 0x0002;
    pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV: std::os::raw::c_uint = 0x0006;
    pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV: std::os::raw::c_uint = 0x0004;
    pub const GL_DRAW_FRAMEBUFFER: std::os::raw::c_uint = 0x8CA9;
    pub const GL_DRAW_FRAMEBUFFER_BINDING: std::os::raw::c_uint = 0x8CA6;
    pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8CA6;
    pub const GL_DRAW_FRAMEBUFFER_EXT: std::os::raw::c_uint = 0x8CA9;
    pub const GL_DRAW_INDIRECT_ADDRESS_NV: std::os::raw::c_uint = 0x8F41;
    pub const GL_DRAW_INDIRECT_BUFFER: std::os::raw::c_uint = 0x8F3F;
    pub const GL_DRAW_INDIRECT_BUFFER_BINDING: std::os::raw::c_uint = 0x8F43;
    pub const GL_DRAW_INDIRECT_LENGTH_NV: std::os::raw::c_uint = 0x8F42;
    pub const GL_DRAW_INDIRECT_UNIFIED_NV: std::os::raw::c_uint = 0x8F40;
    pub const GL_DRAW_PIXELS_APPLE: std::os::raw::c_uint = 0x8A0A;
    pub const GL_DRIVER_UUID_EXT: std::os::raw::c_uint = 0x9598;
    pub const GL_DSDT8_MAG8_INTENSITY8_NV: std::os::raw::c_uint = 0x870B;
    pub const GL_DSDT8_MAG8_NV: std::os::raw::c_uint = 0x870A;
    pub const GL_DSDT8_NV: std::os::raw::c_uint = 0x8709;
    pub const GL_DSDT_MAG_INTENSITY_NV: std::os::raw::c_uint = 0x86DC;
    pub const GL_DSDT_MAG_NV: std::os::raw::c_uint = 0x86F6;
    pub const GL_DSDT_MAG_VIB_NV: std::os::raw::c_uint = 0x86F7;
    pub const GL_DSDT_NV: std::os::raw::c_uint = 0x86F5;
    pub const GL_DST_ALPHA: std::os::raw::c_uint = 0x0304;
    pub const GL_DST_ATOP_NV: std::os::raw::c_uint = 0x928F;
    pub const GL_DST_COLOR: std::os::raw::c_uint = 0x0306;
    pub const GL_DST_IN_NV: std::os::raw::c_uint = 0x928B;
    pub const GL_DST_NV: std::os::raw::c_uint = 0x9287;
    pub const GL_DST_OUT_NV: std::os::raw::c_uint = 0x928D;
    pub const GL_DST_OVER_NV: std::os::raw::c_uint = 0x9289;
    pub const GL_DS_BIAS_NV: std::os::raw::c_uint = 0x8716;
    pub const GL_DS_SCALE_NV: std::os::raw::c_uint = 0x8710;
    pub const GL_DT_BIAS_NV: std::os::raw::c_uint = 0x8717;
    pub const GL_DT_SCALE_NV: std::os::raw::c_uint = 0x8711;
    pub const GL_DU8DV8_ATI: std::os::raw::c_uint = 0x877A;
    pub const GL_DUAL_ALPHA12_SGIS: std::os::raw::c_uint = 0x8112;
    pub const GL_DUAL_ALPHA16_SGIS: std::os::raw::c_uint = 0x8113;
    pub const GL_DUAL_ALPHA4_SGIS: std::os::raw::c_uint = 0x8110;
    pub const GL_DUAL_ALPHA8_SGIS: std::os::raw::c_uint = 0x8111;
    pub const GL_DUAL_INTENSITY12_SGIS: std::os::raw::c_uint = 0x811A;
    pub const GL_DUAL_INTENSITY16_SGIS: std::os::raw::c_uint = 0x811B;
    pub const GL_DUAL_INTENSITY4_SGIS: std::os::raw::c_uint = 0x8118;
    pub const GL_DUAL_INTENSITY8_SGIS: std::os::raw::c_uint = 0x8119;
    pub const GL_DUAL_LUMINANCE12_SGIS: std::os::raw::c_uint = 0x8116;
    pub const GL_DUAL_LUMINANCE16_SGIS: std::os::raw::c_uint = 0x8117;
    pub const GL_DUAL_LUMINANCE4_SGIS: std::os::raw::c_uint = 0x8114;
    pub const GL_DUAL_LUMINANCE8_SGIS: std::os::raw::c_uint = 0x8115;
    pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS: std::os::raw::c_uint = 0x811C;
    pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS: std::os::raw::c_uint = 0x811D;
    pub const GL_DUAL_TEXTURE_SELECT_SGIS: std::os::raw::c_uint = 0x8124;
    pub const GL_DUDV_ATI: std::os::raw::c_uint = 0x8779;
    pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0xF2;
    pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0xF4;
    pub const GL_DYNAMIC_ATI: std::os::raw::c_uint = 0x8761;
    pub const GL_DYNAMIC_COPY: std::os::raw::c_uint = 0x88EA;
    pub const GL_DYNAMIC_COPY_ARB: std::os::raw::c_uint = 0x88EA;
    pub const GL_DYNAMIC_DRAW: std::os::raw::c_uint = 0x88E8;
    pub const GL_DYNAMIC_DRAW_ARB: std::os::raw::c_uint = 0x88E8;
    pub const GL_DYNAMIC_READ: std::os::raw::c_uint = 0x88E9;
    pub const GL_DYNAMIC_READ_ARB: std::os::raw::c_uint = 0x88E9;
    pub const GL_DYNAMIC_STORAGE_BIT: std::os::raw::c_uint = 0x0100;
    pub const GL_EDGEFLAG_BIT_PGI: std::os::raw::c_uint = 0x00040000;
    pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F26;
    pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889B;
    pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x808D;
    pub const GL_EDGE_FLAG_ARRAY_EXT: std::os::raw::c_uint = 0x8079;
    pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F30;
    pub const GL_EDGE_FLAG_ARRAY_LIST_IBM: std::os::raw::c_uint = 103075;
    pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103085;
    pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8093;
    pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x808C;
    pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT: std::os::raw::c_uint = 0x932C;
    pub const GL_EIGHTH_BIT_ATI: std::os::raw::c_uint = 0x00000020;
    pub const GL_ELEMENT_ADDRESS_COMMAND_NV: std::os::raw::c_uint = 0x0008;
    pub const GL_ELEMENT_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F29;
    pub const GL_ELEMENT_ARRAY_APPLE: std::os::raw::c_uint = 0x8A0C;
    pub const GL_ELEMENT_ARRAY_ATI: std::os::raw::c_uint = 0x8768;
    pub const GL_ELEMENT_ARRAY_BARRIER_BIT: std::os::raw::c_uint = 0x00000002;
    pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000002;
    pub const GL_ELEMENT_ARRAY_BUFFER: std::os::raw::c_uint = 0x8893;
    pub const GL_ELEMENT_ARRAY_BUFFER_ARB: std::os::raw::c_uint = 0x8893;
    pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: std::os::raw::c_uint = 0x8895;
    pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8895;
    pub const GL_ELEMENT_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F33;
    pub const GL_ELEMENT_ARRAY_POINTER_APPLE: std::os::raw::c_uint = 0x8A0E;
    pub const GL_ELEMENT_ARRAY_POINTER_ATI: std::os::raw::c_uint = 0x876A;
    pub const GL_ELEMENT_ARRAY_TYPE_APPLE: std::os::raw::c_uint = 0x8A0D;
    pub const GL_ELEMENT_ARRAY_TYPE_ATI: std::os::raw::c_uint = 0x8769;
    pub const GL_ELEMENT_ARRAY_UNIFIED_NV: std::os::raw::c_uint = 0x8F1F;
    pub const GL_EMBOSS_CONSTANT_NV: std::os::raw::c_uint = 0x855E;
    pub const GL_EMBOSS_LIGHT_NV: std::os::raw::c_uint = 0x855D;
    pub const GL_EMBOSS_MAP_NV: std::os::raw::c_uint = 0x855F;
    pub const GL_EQUAL: std::os::raw::c_uint = 0x0202;
    pub const GL_EQUIV: std::os::raw::c_uint = 0x1509;
    pub const GL_EVAL_2D_NV: std::os::raw::c_uint = 0x86C0;
    pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV: std::os::raw::c_uint = 0x86C5;
    pub const GL_EVAL_TRIANGULAR_2D_NV: std::os::raw::c_uint = 0x86C1;
    pub const GL_EVAL_VERTEX_ATTRIB0_NV: std::os::raw::c_uint = 0x86C6;
    pub const GL_EVAL_VERTEX_ATTRIB10_NV: std::os::raw::c_uint = 0x86D0;
    pub const GL_EVAL_VERTEX_ATTRIB11_NV: std::os::raw::c_uint = 0x86D1;
    pub const GL_EVAL_VERTEX_ATTRIB12_NV: std::os::raw::c_uint = 0x86D2;
    pub const GL_EVAL_VERTEX_ATTRIB13_NV: std::os::raw::c_uint = 0x86D3;
    pub const GL_EVAL_VERTEX_ATTRIB14_NV: std::os::raw::c_uint = 0x86D4;
    pub const GL_EVAL_VERTEX_ATTRIB15_NV: std::os::raw::c_uint = 0x86D5;
    pub const GL_EVAL_VERTEX_ATTRIB1_NV: std::os::raw::c_uint = 0x86C7;
    pub const GL_EVAL_VERTEX_ATTRIB2_NV: std::os::raw::c_uint = 0x86C8;
    pub const GL_EVAL_VERTEX_ATTRIB3_NV: std::os::raw::c_uint = 0x86C9;
    pub const GL_EVAL_VERTEX_ATTRIB4_NV: std::os::raw::c_uint = 0x86CA;
    pub const GL_EVAL_VERTEX_ATTRIB5_NV: std::os::raw::c_uint = 0x86CB;
    pub const GL_EVAL_VERTEX_ATTRIB6_NV: std::os::raw::c_uint = 0x86CC;
    pub const GL_EVAL_VERTEX_ATTRIB7_NV: std::os::raw::c_uint = 0x86CD;
    pub const GL_EVAL_VERTEX_ATTRIB8_NV: std::os::raw::c_uint = 0x86CE;
    pub const GL_EVAL_VERTEX_ATTRIB9_NV: std::os::raw::c_uint = 0x86CF;
    pub const GL_EXCLUSION_KHR: std::os::raw::c_uint = 0x92A0;
    pub const GL_EXCLUSION_NV: std::os::raw::c_uint = 0x92A0;
    pub const GL_EXCLUSIVE_EXT: std::os::raw::c_uint = 0x8F11;
    pub const GL_EXPAND_NEGATE_NV: std::os::raw::c_uint = 0x8539;
    pub const GL_EXPAND_NORMAL_NV: std::os::raw::c_uint = 0x8538;
    pub const GL_EXTENSIONS: std::os::raw::c_uint = 0x1F03;
    pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: std::os::raw::c_uint = 0x9160;
    pub const GL_EYE_DISTANCE_TO_LINE_SGIS: std::os::raw::c_uint = 0x81F2;
    pub const GL_EYE_DISTANCE_TO_POINT_SGIS: std::os::raw::c_uint = 0x81F0;
    pub const GL_EYE_LINE_SGIS: std::os::raw::c_uint = 0x81F6;
    pub const GL_EYE_PLANE: std::os::raw::c_uint = 0x2502;
    pub const GL_EYE_PLANE_ABSOLUTE_NV: std::os::raw::c_uint = 0x855C;
    pub const GL_EYE_POINT_SGIS: std::os::raw::c_uint = 0x81F4;
    pub const GL_EYE_RADIAL_NV: std::os::raw::c_uint = 0x855B;
    pub const GL_E_TIMES_F_NV: std::os::raw::c_uint = 0x8531;
    pub const GL_FACTOR_MAX_AMD: std::os::raw::c_uint = 0x901D;
    pub const GL_FACTOR_MIN_AMD: std::os::raw::c_uint = 0x901C;
    pub const GL_FAILURE_NV: std::os::raw::c_uint = 0x9030;
    pub const GL_FALSE: std::os::raw::c_uchar = 0;
    pub const GL_FASTEST: std::os::raw::c_uint = 0x1101;
    pub const GL_FENCE_APPLE: std::os::raw::c_uint = 0x8A0B;
    pub const GL_FENCE_CONDITION_NV: std::os::raw::c_uint = 0x84F4;
    pub const GL_FENCE_STATUS_NV: std::os::raw::c_uint = 0x84F3;
    pub const GL_FIELDS_NV: std::os::raw::c_uint = 0x8E27;
    pub const GL_FIELD_LOWER_NV: std::os::raw::c_uint = 0x9023;
    pub const GL_FIELD_UPPER_NV: std::os::raw::c_uint = 0x9022;
    pub const GL_FILE_NAME_NV: std::os::raw::c_uint = 0x9074;
    pub const GL_FILL: std::os::raw::c_uint = 0x1B02;
    pub const GL_FILL_RECTANGLE_NV: std::os::raw::c_uint = 0x933C;
    pub const GL_FILTER: std::os::raw::c_uint = 0x829A;
    pub const GL_FILTER4_SGIS: std::os::raw::c_uint = 0x8146;
    pub const GL_FIRST_TO_REST_NV: std::os::raw::c_uint = 0x90AF;
    pub const GL_FIRST_VERTEX_CONVENTION: std::os::raw::c_uint = 0x8E4D;
    pub const GL_FIRST_VERTEX_CONVENTION_EXT: std::os::raw::c_uint = 0x8E4D;
    pub const GL_FIXED: std::os::raw::c_uint = 0x140C;
    pub const GL_FIXED_OES: std::os::raw::c_uint = 0x140C;
    pub const GL_FIXED_ONLY: std::os::raw::c_uint = 0x891D;
    pub const GL_FIXED_ONLY_ARB: std::os::raw::c_uint = 0x891D;
    pub const GL_FLOAT: std::os::raw::c_uint = 0x1406;
    pub const GL_FLOAT16_MAT2_AMD: std::os::raw::c_uint = 0x91C5;
    pub const GL_FLOAT16_MAT2x3_AMD: std::os::raw::c_uint = 0x91C8;
    pub const GL_FLOAT16_MAT2x4_AMD: std::os::raw::c_uint = 0x91C9;
    pub const GL_FLOAT16_MAT3_AMD: std::os::raw::c_uint = 0x91C6;
    pub const GL_FLOAT16_MAT3x2_AMD: std::os::raw::c_uint = 0x91CA;
    pub const GL_FLOAT16_MAT3x4_AMD: std::os::raw::c_uint = 0x91CB;
    pub const GL_FLOAT16_MAT4_AMD: std::os::raw::c_uint = 0x91C7;
    pub const GL_FLOAT16_MAT4x2_AMD: std::os::raw::c_uint = 0x91CC;
    pub const GL_FLOAT16_MAT4x3_AMD: std::os::raw::c_uint = 0x91CD;
    pub const GL_FLOAT16_NV: std::os::raw::c_uint = 0x8FF8;
    pub const GL_FLOAT16_VEC2_NV: std::os::raw::c_uint = 0x8FF9;
    pub const GL_FLOAT16_VEC3_NV: std::os::raw::c_uint = 0x8FFA;
    pub const GL_FLOAT16_VEC4_NV: std::os::raw::c_uint = 0x8FFB;
    pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: std::os::raw::c_uint = 0x8DAD;
    pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV: std::os::raw::c_uint = 0x8DAD;
    pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV: std::os::raw::c_uint = 0x888D;
    pub const GL_FLOAT_MAT2: std::os::raw::c_uint = 0x8B5A;
    pub const GL_FLOAT_MAT2_ARB: std::os::raw::c_uint = 0x8B5A;
    pub const GL_FLOAT_MAT2x3: std::os::raw::c_uint = 0x8B65;
    pub const GL_FLOAT_MAT2x4: std::os::raw::c_uint = 0x8B66;
    pub const GL_FLOAT_MAT3: std::os::raw::c_uint = 0x8B5B;
    pub const GL_FLOAT_MAT3_ARB: std::os::raw::c_uint = 0x8B5B;
    pub const GL_FLOAT_MAT3x2: std::os::raw::c_uint = 0x8B67;
    pub const GL_FLOAT_MAT3x4: std::os::raw::c_uint = 0x8B68;
    pub const GL_FLOAT_MAT4: std::os::raw::c_uint = 0x8B5C;
    pub const GL_FLOAT_MAT4_ARB: std::os::raw::c_uint = 0x8B5C;
    pub const GL_FLOAT_MAT4x2: std::os::raw::c_uint = 0x8B69;
    pub const GL_FLOAT_MAT4x3: std::os::raw::c_uint = 0x8B6A;
    pub const GL_FLOAT_R16_NV: std::os::raw::c_uint = 0x8884;
    pub const GL_FLOAT_R32_NV: std::os::raw::c_uint = 0x8885;
    pub const GL_FLOAT_RG16_NV: std::os::raw::c_uint = 0x8886;
    pub const GL_FLOAT_RG32_NV: std::os::raw::c_uint = 0x8887;
    pub const GL_FLOAT_RGB16_NV: std::os::raw::c_uint = 0x8888;
    pub const GL_FLOAT_RGB32_NV: std::os::raw::c_uint = 0x8889;
    pub const GL_FLOAT_RGBA16_NV: std::os::raw::c_uint = 0x888A;
    pub const GL_FLOAT_RGBA32_NV: std::os::raw::c_uint = 0x888B;
    pub const GL_FLOAT_RGBA_MODE_NV: std::os::raw::c_uint = 0x888E;
    pub const GL_FLOAT_RGBA_NV: std::os::raw::c_uint = 0x8883;
    pub const GL_FLOAT_RGB_NV: std::os::raw::c_uint = 0x8882;
    pub const GL_FLOAT_RG_NV: std::os::raw::c_uint = 0x8881;
    pub const GL_FLOAT_R_NV: std::os::raw::c_uint = 0x8880;
    pub const GL_FLOAT_VEC2: std::os::raw::c_uint = 0x8B50;
    pub const GL_FLOAT_VEC2_ARB: std::os::raw::c_uint = 0x8B50;
    pub const GL_FLOAT_VEC3: std::os::raw::c_uint = 0x8B51;
    pub const GL_FLOAT_VEC3_ARB: std::os::raw::c_uint = 0x8B51;
    pub const GL_FLOAT_VEC4: std::os::raw::c_uint = 0x8B52;
    pub const GL_FLOAT_VEC4_ARB: std::os::raw::c_uint = 0x8B52;
    pub const GL_FOG: std::os::raw::c_uint = 0x0B60;
    pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889D;
    pub const GL_FOG_COORDINATE_ARRAY_EXT: std::os::raw::c_uint = 0x8457;
    pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM: std::os::raw::c_uint = 103076;
    pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103086;
    pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8456;
    pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x8455;
    pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x8454;
    pub const GL_FOG_COORDINATE_EXT: std::os::raw::c_uint = 0x8451;
    pub const GL_FOG_COORDINATE_SOURCE_EXT: std::os::raw::c_uint = 0x8450;
    pub const GL_FOG_COORD_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F28;
    pub const GL_FOG_COORD_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F32;
    pub const GL_FOG_DISTANCE_MODE_NV: std::os::raw::c_uint = 0x855A;
    pub const GL_FOG_FUNC_POINTS_SGIS: std::os::raw::c_uint = 0x812B;
    pub const GL_FOG_FUNC_SGIS: std::os::raw::c_uint = 0x812A;
    pub const GL_FOG_OFFSET_SGIX: std::os::raw::c_uint = 0x8198;
    pub const GL_FOG_OFFSET_VALUE_SGIX: std::os::raw::c_uint = 0x8199;
    pub const GL_FOG_SPECULAR_TEXTURE_WIN: std::os::raw::c_uint = 0x80EC;
    pub const GL_FONT_ASCENDER_BIT_NV: std::os::raw::c_uint = 0x00200000;
    pub const GL_FONT_DESCENDER_BIT_NV: std::os::raw::c_uint = 0x00400000;
    pub const GL_FONT_GLYPHS_AVAILABLE_NV: std::os::raw::c_uint = 0x9368;
    pub const GL_FONT_HAS_KERNING_BIT_NV: std::os::raw::c_uint = 0x10000000;
    pub const GL_FONT_HEIGHT_BIT_NV: std::os::raw::c_uint = 0x00800000;
    pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: std::os::raw::c_uint = 0x02000000;
    pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: std::os::raw::c_uint = 0x01000000;
    pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV: std::os::raw::c_uint = 0x20000000;
    pub const GL_FONT_TARGET_UNAVAILABLE_NV: std::os::raw::c_uint = 0x9369;
    pub const GL_FONT_UNAVAILABLE_NV: std::os::raw::c_uint = 0x936A;
    pub const GL_FONT_UNDERLINE_POSITION_BIT_NV: std::os::raw::c_uint = 0x04000000;
    pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV: std::os::raw::c_uint = 0x08000000;
    pub const GL_FONT_UNINTELLIGIBLE_NV: std::os::raw::c_uint = 0x936B;
    pub const GL_FONT_UNITS_PER_EM_BIT_NV: std::os::raw::c_uint = 0x00100000;
    pub const GL_FONT_X_MAX_BOUNDS_BIT_NV: std::os::raw::c_uint = 0x00040000;
    pub const GL_FONT_X_MIN_BOUNDS_BIT_NV: std::os::raw::c_uint = 0x00010000;
    pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV: std::os::raw::c_uint = 0x00080000;
    pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV: std::os::raw::c_uint = 0x00020000;
    pub const GL_FORCE_BLUE_TO_ONE_NV: std::os::raw::c_uint = 0x8860;
    pub const GL_FORMAT_SUBSAMPLE_244_244_OML: std::os::raw::c_uint = 0x8983;
    pub const GL_FORMAT_SUBSAMPLE_24_24_OML: std::os::raw::c_uint = 0x8982;
    pub const GL_FRACTIONAL_EVEN: std::os::raw::c_uint = 0x8E7C;
    pub const GL_FRACTIONAL_ODD: std::os::raw::c_uint = 0x8E7B;
    pub const GL_FRAGMENT_COLOR_EXT: std::os::raw::c_uint = 0x834C;
    pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX: std::os::raw::c_uint = 0x8402;
    pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: std::os::raw::c_uint = 0x8403;
    pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX: std::os::raw::c_uint = 0x8401;
    pub const GL_FRAGMENT_COVERAGE_COLOR_NV: std::os::raw::c_uint = 0x92DE;
    pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV: std::os::raw::c_uint = 0x92DD;
    pub const GL_FRAGMENT_DEPTH_EXT: std::os::raw::c_uint = 0x8452;
    pub const GL_FRAGMENT_INPUT_NV: std::os::raw::c_uint = 0x936D;
    pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: std::os::raw::c_uint = 0x8E5D;
    pub const GL_FRAGMENT_LIGHT0_SGIX: std::os::raw::c_uint = 0x840C;
    pub const GL_FRAGMENT_LIGHT1_SGIX: std::os::raw::c_uint = 0x840D;
    pub const GL_FRAGMENT_LIGHT2_SGIX: std::os::raw::c_uint = 0x840E;
    pub const GL_FRAGMENT_LIGHT3_SGIX: std::os::raw::c_uint = 0x840F;
    pub const GL_FRAGMENT_LIGHT4_SGIX: std::os::raw::c_uint = 0x8410;
    pub const GL_FRAGMENT_LIGHT5_SGIX: std::os::raw::c_uint = 0x8411;
    pub const GL_FRAGMENT_LIGHT6_SGIX: std::os::raw::c_uint = 0x8412;
    pub const GL_FRAGMENT_LIGHT7_SGIX: std::os::raw::c_uint = 0x8413;
    pub const GL_FRAGMENT_LIGHTING_SGIX: std::os::raw::c_uint = 0x8400;
    pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: std::os::raw::c_uint = 0x840A;
    pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: std::os::raw::c_uint = 0x8408;
    pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: std::os::raw::c_uint = 0x840B;
    pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: std::os::raw::c_uint = 0x8409;
    pub const GL_FRAGMENT_MATERIAL_EXT: std::os::raw::c_uint = 0x8349;
    pub const GL_FRAGMENT_NORMAL_EXT: std::os::raw::c_uint = 0x834A;
    pub const GL_FRAGMENT_PROGRAM_ARB: std::os::raw::c_uint = 0x8804;
    pub const GL_FRAGMENT_PROGRAM_BINDING_NV: std::os::raw::c_uint = 0x8873;
    pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: std::os::raw::c_uint = 0x8E5D;
    pub const GL_FRAGMENT_PROGRAM_NV: std::os::raw::c_uint = 0x8870;
    pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x8DA4;
    pub const GL_FRAGMENT_SHADER: std::os::raw::c_uint = 0x8B30;
    pub const GL_FRAGMENT_SHADER_ARB: std::os::raw::c_uint = 0x8B30;
    pub const GL_FRAGMENT_SHADER_ATI: std::os::raw::c_uint = 0x8920;
    pub const GL_FRAGMENT_SHADER_BIT: std::os::raw::c_uint = 0x00000002;
    pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: std::os::raw::c_uint = 0x8B8B;
    pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: std::os::raw::c_uint = 0x8B8B;
    pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: std::os::raw::c_uint = 0x8A52;
    pub const GL_FRAGMENT_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x82F4;
    pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB: std::os::raw::c_uint = 0x82F4;
    pub const GL_FRAGMENT_SUBROUTINE: std::os::raw::c_uint = 0x92EC;
    pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92F2;
    pub const GL_FRAGMENT_TEXTURE: std::os::raw::c_uint = 0x829F;
    pub const GL_FRAMEBUFFER: std::os::raw::c_uint = 0x8D40;
    pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: std::os::raw::c_uint = 0x8215;
    pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: std::os::raw::c_uint = 0x8214;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: std::os::raw::c_uint = 0x8210;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: std::os::raw::c_uint = 0x8211;
    pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: std::os::raw::c_uint = 0x8216;
    pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: std::os::raw::c_uint = 0x8213;
    pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: std::os::raw::c_uint = 0x8DA7;
    pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: std::os::raw::c_uint = 0x8DA7;
    pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: std::os::raw::c_uint = 0x8DA7;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: std::os::raw::c_uint = 0x8CD1;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: std::os::raw::c_uint = 0x8CD1;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: std::os::raw::c_uint = 0x8CD0;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: std::os::raw::c_uint = 0x8CD0;
    pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: std::os::raw::c_uint = 0x8212;
    pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: std::os::raw::c_uint = 0x8217;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: std::os::raw::c_uint = 0x8CD4;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: std::os::raw::c_uint = 0x9632;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: std::os::raw::c_uint = 0x8CD3;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: std::os::raw::c_uint = 0x8CD3;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: std::os::raw::c_uint = 0x8CD4;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: std::os::raw::c_uint = 0x8CD4;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: std::os::raw::c_uint = 0x8CD2;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: std::os::raw::c_uint = 0x8CD2;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: std::os::raw::c_uint = 0x9630;
    pub const GL_FRAMEBUFFER_BARRIER_BIT: std::os::raw::c_uint = 0x00000400;
    pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000400;
    pub const GL_FRAMEBUFFER_BINDING: std::os::raw::c_uint = 0x8CA6;
    pub const GL_FRAMEBUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8CA6;
    pub const GL_FRAMEBUFFER_BLEND: std::os::raw::c_uint = 0x828B;
    pub const GL_FRAMEBUFFER_COMPLETE: std::os::raw::c_uint = 0x8CD5;
    pub const GL_FRAMEBUFFER_COMPLETE_EXT: std::os::raw::c_uint = 0x8CD5;
    pub const GL_FRAMEBUFFER_DEFAULT: std::os::raw::c_uint = 0x8218;
    pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: std::os::raw::c_uint = 0x9314;
    pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: std::os::raw::c_uint = 0x9311;
    pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: std::os::raw::c_uint = 0x9312;
    pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: std::os::raw::c_uint = 0x9313;
    pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: std::os::raw::c_uint = 0x9310;
    pub const GL_FRAMEBUFFER_EXT: std::os::raw::c_uint = 0x8D40;
    pub const GL_FRAMEBUFFER_FLIP_Y_MESA: std::os::raw::c_uint = 0x8BBB;
    pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: std::os::raw::c_uint = 0x8CD6;
    pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: std::os::raw::c_uint = 0x8CD6;
    pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: std::os::raw::c_uint = 0x8CD9;
    pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: std::os::raw::c_uint = 0x8CDB;
    pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: std::os::raw::c_uint = 0x8CDB;
    pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: std::os::raw::c_uint = 0x8CDA;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: std::os::raw::c_uint = 0x8DA9;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: std::os::raw::c_uint = 0x8DA9;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: std::os::raw::c_uint = 0x8DA8;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: std::os::raw::c_uint = 0x8DA8;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: std::os::raw::c_uint = 0x8DA8;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: std::os::raw::c_uint = 0x8CD7;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: std::os::raw::c_uint = 0x8CD7;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: std::os::raw::c_uint = 0x8D56;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x8D56;
    pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: std::os::raw::c_uint = 0x8CDC;
    pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: std::os::raw::c_uint = 0x8CDC;
    pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: std::os::raw::c_uint = 0x9633;
    pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: std::os::raw::c_uint = 0x9342;
    pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: std::os::raw::c_uint = 0x9342;
    pub const GL_FRAMEBUFFER_RENDERABLE: std::os::raw::c_uint = 0x8289;
    pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: std::os::raw::c_uint = 0x828A;
    pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: std::os::raw::c_uint = 0x9343;
    pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: std::os::raw::c_uint = 0x9343;
    pub const GL_FRAMEBUFFER_SRGB: std::os::raw::c_uint = 0x8DB9;
    pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: std::os::raw::c_uint = 0x8DBA;
    pub const GL_FRAMEBUFFER_SRGB_EXT: std::os::raw::c_uint = 0x8DB9;
    pub const GL_FRAMEBUFFER_UNDEFINED: std::os::raw::c_uint = 0x8219;
    pub const GL_FRAMEBUFFER_UNSUPPORTED: std::os::raw::c_uint = 0x8CDD;
    pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: std::os::raw::c_uint = 0x8CDD;
    pub const GL_FRAMEZOOM_FACTOR_SGIX: std::os::raw::c_uint = 0x818C;
    pub const GL_FRAMEZOOM_SGIX: std::os::raw::c_uint = 0x818B;
    pub const GL_FRAME_NV: std::os::raw::c_uint = 0x8E26;
    pub const GL_FRONT: std::os::raw::c_uint = 0x0404;
    pub const GL_FRONT_AND_BACK: std::os::raw::c_uint = 0x0408;
    pub const GL_FRONT_FACE: std::os::raw::c_uint = 0x0B46;
    pub const GL_FRONT_FACE_COMMAND_NV: std::os::raw::c_uint = 0x0012;
    pub const GL_FRONT_LEFT: std::os::raw::c_uint = 0x0400;
    pub const GL_FRONT_RIGHT: std::os::raw::c_uint = 0x0401;
    pub const GL_FULL_RANGE_EXT: std::os::raw::c_uint = 0x87E1;
    pub const GL_FULL_STIPPLE_HINT_PGI: std::os::raw::c_uint = 0x1A219;
    pub const GL_FULL_SUPPORT: std::os::raw::c_uint = 0x82B7;
    pub const GL_FUNC_ADD: std::os::raw::c_uint = 0x8006;
    pub const GL_FUNC_ADD_EXT: std::os::raw::c_uint = 0x8006;
    pub const GL_FUNC_REVERSE_SUBTRACT: std::os::raw::c_uint = 0x800B;
    pub const GL_FUNC_REVERSE_SUBTRACT_EXT: std::os::raw::c_uint = 0x800B;
    pub const GL_FUNC_SUBTRACT: std::os::raw::c_uint = 0x800A;
    pub const GL_FUNC_SUBTRACT_EXT: std::os::raw::c_uint = 0x800A;
    pub const GL_GENERATE_MIPMAP_HINT_SGIS: std::os::raw::c_uint = 0x8192;
    pub const GL_GENERATE_MIPMAP_SGIS: std::os::raw::c_uint = 0x8191;
    pub const GL_GENERIC_ATTRIB_NV: std::os::raw::c_uint = 0x8C7D;
    pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX: std::os::raw::c_uint = 0x00000002;
    pub const GL_GEOMETRY_DEFORMATION_SGIX: std::os::raw::c_uint = 0x8194;
    pub const GL_GEOMETRY_INPUT_TYPE: std::os::raw::c_uint = 0x8917;
    pub const GL_GEOMETRY_INPUT_TYPE_ARB: std::os::raw::c_uint = 0x8DDB;
    pub const GL_GEOMETRY_INPUT_TYPE_EXT: std::os::raw::c_uint = 0x8DDB;
    pub const GL_GEOMETRY_OUTPUT_TYPE: std::os::raw::c_uint = 0x8918;
    pub const GL_GEOMETRY_OUTPUT_TYPE_ARB: std::os::raw::c_uint = 0x8DDC;
    pub const GL_GEOMETRY_OUTPUT_TYPE_EXT: std::os::raw::c_uint = 0x8DDC;
    pub const GL_GEOMETRY_PROGRAM_NV: std::os::raw::c_uint = 0x8C26;
    pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x8DA3;
    pub const GL_GEOMETRY_SHADER: std::os::raw::c_uint = 0x8DD9;
    pub const GL_GEOMETRY_SHADER_ARB: std::os::raw::c_uint = 0x8DD9;
    pub const GL_GEOMETRY_SHADER_BIT: std::os::raw::c_uint = 0x00000004;
    pub const GL_GEOMETRY_SHADER_EXT: std::os::raw::c_uint = 0x8DD9;
    pub const GL_GEOMETRY_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x887F;
    pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: std::os::raw::c_uint = 0x82F3;
    pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: std::os::raw::c_uint = 0x82F3;
    pub const GL_GEOMETRY_SUBROUTINE: std::os::raw::c_uint = 0x92EB;
    pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92F1;
    pub const GL_GEOMETRY_TEXTURE: std::os::raw::c_uint = 0x829E;
    pub const GL_GEOMETRY_VERTICES_OUT: std::os::raw::c_uint = 0x8916;
    pub const GL_GEOMETRY_VERTICES_OUT_ARB: std::os::raw::c_uint = 0x8DDA;
    pub const GL_GEOMETRY_VERTICES_OUT_EXT: std::os::raw::c_uint = 0x8DDA;
    pub const GL_GEQUAL: std::os::raw::c_uint = 0x0206;
    pub const GL_GET_TEXTURE_IMAGE_FORMAT: std::os::raw::c_uint = 0x8291;
    pub const GL_GET_TEXTURE_IMAGE_TYPE: std::os::raw::c_uint = 0x8292;
    pub const GL_GLOBAL_ALPHA_FACTOR_SUN: std::os::raw::c_uint = 0x81DA;
    pub const GL_GLOBAL_ALPHA_SUN: std::os::raw::c_uint = 0x81D9;
    pub const GL_GLYPH_HAS_KERNING_BIT_NV: std::os::raw::c_uint = 0x100;
    pub const GL_GLYPH_HEIGHT_BIT_NV: std::os::raw::c_uint = 0x02;
    pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: std::os::raw::c_uint = 0x10;
    pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: std::os::raw::c_uint = 0x04;
    pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: std::os::raw::c_uint = 0x08;
    pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: std::os::raw::c_uint = 0x80;
    pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: std::os::raw::c_uint = 0x20;
    pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: std::os::raw::c_uint = 0x40;
    pub const GL_GLYPH_WIDTH_BIT_NV: std::os::raw::c_uint = 0x01;
    pub const GL_GPU_ADDRESS_NV: std::os::raw::c_uint = 0x8F34;
    pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: std::os::raw::c_uint = 0x9049;
    pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: std::os::raw::c_uint = 0x9047;
    pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: std::os::raw::c_uint = 0x904B;
    pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: std::os::raw::c_uint = 0x904A;
    pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: std::os::raw::c_uint = 0x9048;
    pub const GL_GREATER: std::os::raw::c_uint = 0x0204;
    pub const GL_GREEN: std::os::raw::c_uint = 0x1904;
    pub const GL_GREEN_BIT_ATI: std::os::raw::c_uint = 0x00000002;
    pub const GL_GREEN_INTEGER: std::os::raw::c_uint = 0x8D95;
    pub const GL_GREEN_INTEGER_EXT: std::os::raw::c_uint = 0x8D95;
    pub const GL_GREEN_MAX_CLAMP_INGR: std::os::raw::c_uint = 0x8565;
    pub const GL_GREEN_MIN_CLAMP_INGR: std::os::raw::c_uint = 0x8561;
    pub const GL_GREEN_NV: std::os::raw::c_uint = 0x1904;
    pub const GL_GUILTY_CONTEXT_RESET: std::os::raw::c_uint = 0x8253;
    pub const GL_GUILTY_CONTEXT_RESET_ARB: std::os::raw::c_uint = 0x8253;
    pub const GL_HALF_APPLE: std::os::raw::c_uint = 0x140B;
    pub const GL_HALF_BIAS_NEGATE_NV: std::os::raw::c_uint = 0x853B;
    pub const GL_HALF_BIAS_NORMAL_NV: std::os::raw::c_uint = 0x853A;
    pub const GL_HALF_BIT_ATI: std::os::raw::c_uint = 0x00000008;
    pub const GL_HALF_FLOAT: std::os::raw::c_uint = 0x140B;
    pub const GL_HALF_FLOAT_ARB: std::os::raw::c_uint = 0x140B;
    pub const GL_HALF_FLOAT_NV: std::os::raw::c_uint = 0x140B;
    pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT: std::os::raw::c_uint = 0x958B;
    pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT: std::os::raw::c_uint = 0x958C;
    pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT: std::os::raw::c_uint = 0x9594;
    pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT: std::os::raw::c_uint = 0x958A;
    pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT: std::os::raw::c_uint = 0x9589;
    pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT: std::os::raw::c_uint = 0x9586;
    pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT: std::os::raw::c_uint = 0x9587;
    pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT: std::os::raw::c_uint = 0x9588;
    pub const GL_HARDLIGHT_KHR: std::os::raw::c_uint = 0x929B;
    pub const GL_HARDLIGHT_NV: std::os::raw::c_uint = 0x929B;
    pub const GL_HARDMIX_NV: std::os::raw::c_uint = 0x92A9;
    pub const GL_HIGH_FLOAT: std::os::raw::c_uint = 0x8DF2;
    pub const GL_HIGH_INT: std::os::raw::c_uint = 0x8DF5;
    pub const GL_HILO16_NV: std::os::raw::c_uint = 0x86F8;
    pub const GL_HILO8_NV: std::os::raw::c_uint = 0x885E;
    pub const GL_HILO_NV: std::os::raw::c_uint = 0x86F4;
    pub const GL_HISTOGRAM_ALPHA_SIZE_EXT: std::os::raw::c_uint = 0x802B;
    pub const GL_HISTOGRAM_BLUE_SIZE_EXT: std::os::raw::c_uint = 0x802A;
    pub const GL_HISTOGRAM_EXT: std::os::raw::c_uint = 0x8024;
    pub const GL_HISTOGRAM_FORMAT_EXT: std::os::raw::c_uint = 0x8027;
    pub const GL_HISTOGRAM_GREEN_SIZE_EXT: std::os::raw::c_uint = 0x8029;
    pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT: std::os::raw::c_uint = 0x802C;
    pub const GL_HISTOGRAM_RED_SIZE_EXT: std::os::raw::c_uint = 0x8028;
    pub const GL_HISTOGRAM_SINK_EXT: std::os::raw::c_uint = 0x802D;
    pub const GL_HISTOGRAM_WIDTH_EXT: std::os::raw::c_uint = 0x8026;
    pub const GL_HI_BIAS_NV: std::os::raw::c_uint = 0x8714;
    pub const GL_HI_SCALE_NV: std::os::raw::c_uint = 0x870E;
    pub const GL_HORIZONTAL_LINE_TO_NV: std::os::raw::c_uint = 0x06;
    pub const GL_HSL_COLOR_KHR: std::os::raw::c_uint = 0x92AF;
    pub const GL_HSL_COLOR_NV: std::os::raw::c_uint = 0x92AF;
    pub const GL_HSL_HUE_KHR: std::os::raw::c_uint = 0x92AD;
    pub const GL_HSL_HUE_NV: std::os::raw::c_uint = 0x92AD;
    pub const GL_HSL_LUMINOSITY_KHR: std::os::raw::c_uint = 0x92B0;
    pub const GL_HSL_LUMINOSITY_NV: std::os::raw::c_uint = 0x92B0;
    pub const GL_HSL_SATURATION_KHR: std::os::raw::c_uint = 0x92AE;
    pub const GL_HSL_SATURATION_NV: std::os::raw::c_uint = 0x92AE;
    pub const GL_IDENTITY_NV: std::os::raw::c_uint = 0x862A;
    pub const GL_IGNORE_BORDER_HP: std::os::raw::c_uint = 0x8150;
    pub const GL_IMAGE_1D: std::os::raw::c_uint = 0x904C;
    pub const GL_IMAGE_1D_ARRAY: std::os::raw::c_uint = 0x9052;
    pub const GL_IMAGE_1D_ARRAY_EXT: std::os::raw::c_uint = 0x9052;
    pub const GL_IMAGE_1D_EXT: std::os::raw::c_uint = 0x904C;
    pub const GL_IMAGE_2D: std::os::raw::c_uint = 0x904D;
    pub const GL_IMAGE_2D_ARRAY: std::os::raw::c_uint = 0x9053;
    pub const GL_IMAGE_2D_ARRAY_EXT: std::os::raw::c_uint = 0x9053;
    pub const GL_IMAGE_2D_EXT: std::os::raw::c_uint = 0x904D;
    pub const GL_IMAGE_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9055;
    pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x9056;
    pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: std::os::raw::c_uint = 0x9056;
    pub const GL_IMAGE_2D_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x9055;
    pub const GL_IMAGE_2D_RECT: std::os::raw::c_uint = 0x904F;
    pub const GL_IMAGE_2D_RECT_EXT: std::os::raw::c_uint = 0x904F;
    pub const GL_IMAGE_3D: std::os::raw::c_uint = 0x904E;
    pub const GL_IMAGE_3D_EXT: std::os::raw::c_uint = 0x904E;
    pub const GL_IMAGE_BINDING_ACCESS: std::os::raw::c_uint = 0x8F3E;
    pub const GL_IMAGE_BINDING_ACCESS_EXT: std::os::raw::c_uint = 0x8F3E;
    pub const GL_IMAGE_BINDING_FORMAT: std::os::raw::c_uint = 0x906E;
    pub const GL_IMAGE_BINDING_FORMAT_EXT: std::os::raw::c_uint = 0x906E;
    pub const GL_IMAGE_BINDING_LAYER: std::os::raw::c_uint = 0x8F3D;
    pub const GL_IMAGE_BINDING_LAYERED: std::os::raw::c_uint = 0x8F3C;
    pub const GL_IMAGE_BINDING_LAYERED_EXT: std::os::raw::c_uint = 0x8F3C;
    pub const GL_IMAGE_BINDING_LAYER_EXT: std::os::raw::c_uint = 0x8F3D;
    pub const GL_IMAGE_BINDING_LEVEL: std::os::raw::c_uint = 0x8F3B;
    pub const GL_IMAGE_BINDING_LEVEL_EXT: std::os::raw::c_uint = 0x8F3B;
    pub const GL_IMAGE_BINDING_NAME: std::os::raw::c_uint = 0x8F3A;
    pub const GL_IMAGE_BINDING_NAME_EXT: std::os::raw::c_uint = 0x8F3A;
    pub const GL_IMAGE_BUFFER: std::os::raw::c_uint = 0x9051;
    pub const GL_IMAGE_BUFFER_EXT: std::os::raw::c_uint = 0x9051;
    pub const GL_IMAGE_CLASS_10_10_10_2: std::os::raw::c_uint = 0x82C3;
    pub const GL_IMAGE_CLASS_11_11_10: std::os::raw::c_uint = 0x82C2;
    pub const GL_IMAGE_CLASS_1_X_16: std::os::raw::c_uint = 0x82BE;
    pub const GL_IMAGE_CLASS_1_X_32: std::os::raw::c_uint = 0x82BB;
    pub const GL_IMAGE_CLASS_1_X_8: std::os::raw::c_uint = 0x82C1;
    pub const GL_IMAGE_CLASS_2_X_16: std::os::raw::c_uint = 0x82BD;
    pub const GL_IMAGE_CLASS_2_X_32: std::os::raw::c_uint = 0x82BA;
    pub const GL_IMAGE_CLASS_2_X_8: std::os::raw::c_uint = 0x82C0;
    pub const GL_IMAGE_CLASS_4_X_16: std::os::raw::c_uint = 0x82BC;
    pub const GL_IMAGE_CLASS_4_X_32: std::os::raw::c_uint = 0x82B9;
    pub const GL_IMAGE_CLASS_4_X_8: std::os::raw::c_uint = 0x82BF;
    pub const GL_IMAGE_COMPATIBILITY_CLASS: std::os::raw::c_uint = 0x82A8;
    pub const GL_IMAGE_CUBE: std::os::raw::c_uint = 0x9050;
    pub const GL_IMAGE_CUBE_EXT: std::os::raw::c_uint = 0x9050;
    pub const GL_IMAGE_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x9054;
    pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: std::os::raw::c_uint = 0x9054;
    pub const GL_IMAGE_CUBIC_WEIGHT_HP: std::os::raw::c_uint = 0x815E;
    pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: std::os::raw::c_uint = 0x90C9;
    pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: std::os::raw::c_uint = 0x90C8;
    pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: std::os::raw::c_uint = 0x90C7;
    pub const GL_IMAGE_MAG_FILTER_HP: std::os::raw::c_uint = 0x815C;
    pub const GL_IMAGE_MIN_FILTER_HP: std::os::raw::c_uint = 0x815D;
    pub const GL_IMAGE_PIXEL_FORMAT: std::os::raw::c_uint = 0x82A9;
    pub const GL_IMAGE_PIXEL_TYPE: std::os::raw::c_uint = 0x82AA;
    pub const GL_IMAGE_ROTATE_ANGLE_HP: std::os::raw::c_uint = 0x8159;
    pub const GL_IMAGE_ROTATE_ORIGIN_X_HP: std::os::raw::c_uint = 0x815A;
    pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP: std::os::raw::c_uint = 0x815B;
    pub const GL_IMAGE_SCALE_X_HP: std::os::raw::c_uint = 0x8155;
    pub const GL_IMAGE_SCALE_Y_HP: std::os::raw::c_uint = 0x8156;
    pub const GL_IMAGE_TEXEL_SIZE: std::os::raw::c_uint = 0x82A7;
    pub const GL_IMAGE_TRANSFORM_2D_HP: std::os::raw::c_uint = 0x8161;
    pub const GL_IMAGE_TRANSLATE_X_HP: std::os::raw::c_uint = 0x8157;
    pub const GL_IMAGE_TRANSLATE_Y_HP: std::os::raw::c_uint = 0x8158;
    pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: std::os::raw::c_uint = 0x8B9B;
    pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: std::os::raw::c_uint = 0x8B9B;
    pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: std::os::raw::c_uint = 0x8B9A;
    pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: std::os::raw::c_uint = 0x8B9A;
    pub const GL_INCLUSIVE_EXT: std::os::raw::c_uint = 0x8F10;
    pub const GL_INCR: std::os::raw::c_uint = 0x1E02;
    pub const GL_INCR_WRAP: std::os::raw::c_uint = 0x8507;
    pub const GL_INCR_WRAP_EXT: std::os::raw::c_uint = 0x8507;
    pub const GL_INDEX_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F24;
    pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8899;
    pub const GL_INDEX_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x8087;
    pub const GL_INDEX_ARRAY_EXT: std::os::raw::c_uint = 0x8077;
    pub const GL_INDEX_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2E;
    pub const GL_INDEX_ARRAY_LIST_IBM: std::os::raw::c_uint = 103073;
    pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103083;
    pub const GL_INDEX_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8091;
    pub const GL_INDEX_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x8086;
    pub const GL_INDEX_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x8085;
    pub const GL_INDEX_BIT_PGI: std::os::raw::c_uint = 0x00080000;
    pub const GL_INDEX_MATERIAL_EXT: std::os::raw::c_uint = 0x81B8;
    pub const GL_INDEX_MATERIAL_FACE_EXT: std::os::raw::c_uint = 0x81BA;
    pub const GL_INDEX_MATERIAL_PARAMETER_EXT: std::os::raw::c_uint = 0x81B9;
    pub const GL_INDEX_TEST_EXT: std::os::raw::c_uint = 0x81B5;
    pub const GL_INDEX_TEST_FUNC_EXT: std::os::raw::c_uint = 0x81B6;
    pub const GL_INDEX_TEST_REF_EXT: std::os::raw::c_uint = 0x81B7;
    pub const GL_INFO_LOG_LENGTH: std::os::raw::c_uint = 0x8B84;
    pub const GL_INNOCENT_CONTEXT_RESET: std::os::raw::c_uint = 0x8254;
    pub const GL_INNOCENT_CONTEXT_RESET_ARB: std::os::raw::c_uint = 0x8254;
    pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX: std::os::raw::c_uint = 0x8180;
    pub const GL_INSTRUMENT_MEASUREMENTS_SGIX: std::os::raw::c_uint = 0x8181;
    pub const GL_INT: std::os::raw::c_uint = 0x1404;
    pub const GL_INT16_NV: std::os::raw::c_uint = 0x8FE4;
    pub const GL_INT16_VEC2_NV: std::os::raw::c_uint = 0x8FE5;
    pub const GL_INT16_VEC3_NV: std::os::raw::c_uint = 0x8FE6;
    pub const GL_INT16_VEC4_NV: std::os::raw::c_uint = 0x8FE7;
    pub const GL_INT64_ARB: std::os::raw::c_uint = 0x140E;
    pub const GL_INT64_NV: std::os::raw::c_uint = 0x140E;
    pub const GL_INT64_VEC2_ARB: std::os::raw::c_uint = 0x8FE9;
    pub const GL_INT64_VEC2_NV: std::os::raw::c_uint = 0x8FE9;
    pub const GL_INT64_VEC3_ARB: std::os::raw::c_uint = 0x8FEA;
    pub const GL_INT64_VEC3_NV: std::os::raw::c_uint = 0x8FEA;
    pub const GL_INT64_VEC4_ARB: std::os::raw::c_uint = 0x8FEB;
    pub const GL_INT64_VEC4_NV: std::os::raw::c_uint = 0x8FEB;
    pub const GL_INT8_NV: std::os::raw::c_uint = 0x8FE0;
    pub const GL_INT8_VEC2_NV: std::os::raw::c_uint = 0x8FE1;
    pub const GL_INT8_VEC3_NV: std::os::raw::c_uint = 0x8FE2;
    pub const GL_INT8_VEC4_NV: std::os::raw::c_uint = 0x8FE3;
    pub const GL_INTENSITY12_EXT: std::os::raw::c_uint = 0x804C;
    pub const GL_INTENSITY16F_ARB: std::os::raw::c_uint = 0x881D;
    pub const GL_INTENSITY16I_EXT: std::os::raw::c_uint = 0x8D8B;
    pub const GL_INTENSITY16UI_EXT: std::os::raw::c_uint = 0x8D79;
    pub const GL_INTENSITY16_EXT: std::os::raw::c_uint = 0x804D;
    pub const GL_INTENSITY16_SNORM: std::os::raw::c_uint = 0x901B;
    pub const GL_INTENSITY32F_ARB: std::os::raw::c_uint = 0x8817;
    pub const GL_INTENSITY32I_EXT: std::os::raw::c_uint = 0x8D85;
    pub const GL_INTENSITY32UI_EXT: std::os::raw::c_uint = 0x8D73;
    pub const GL_INTENSITY4_EXT: std::os::raw::c_uint = 0x804A;
    pub const GL_INTENSITY8I_EXT: std::os::raw::c_uint = 0x8D91;
    pub const GL_INTENSITY8UI_EXT: std::os::raw::c_uint = 0x8D7F;
    pub const GL_INTENSITY8_EXT: std::os::raw::c_uint = 0x804B;
    pub const GL_INTENSITY8_SNORM: std::os::raw::c_uint = 0x9017;
    pub const GL_INTENSITY_EXT: std::os::raw::c_uint = 0x8049;
    pub const GL_INTENSITY_FLOAT16_APPLE: std::os::raw::c_uint = 0x881D;
    pub const GL_INTENSITY_FLOAT16_ATI: std::os::raw::c_uint = 0x881D;
    pub const GL_INTENSITY_FLOAT32_APPLE: std::os::raw::c_uint = 0x8817;
    pub const GL_INTENSITY_FLOAT32_ATI: std::os::raw::c_uint = 0x8817;
    pub const GL_INTENSITY_SNORM: std::os::raw::c_uint = 0x9013;
    pub const GL_INTERLACE_OML: std::os::raw::c_uint = 0x8980;
    pub const GL_INTERLACE_READ_INGR: std::os::raw::c_uint = 0x8568;
    pub const GL_INTERLACE_READ_OML: std::os::raw::c_uint = 0x8981;
    pub const GL_INTERLACE_SGIX: std::os::raw::c_uint = 0x8094;
    pub const GL_INTERLEAVED_ATTRIBS: std::os::raw::c_uint = 0x8C8C;
    pub const GL_INTERLEAVED_ATTRIBS_EXT: std::os::raw::c_uint = 0x8C8C;
    pub const GL_INTERLEAVED_ATTRIBS_NV: std::os::raw::c_uint = 0x8C8C;
    pub const GL_INTERNALFORMAT_ALPHA_SIZE: std::os::raw::c_uint = 0x8274;
    pub const GL_INTERNALFORMAT_ALPHA_TYPE: std::os::raw::c_uint = 0x827B;
    pub const GL_INTERNALFORMAT_BLUE_SIZE: std::os::raw::c_uint = 0x8273;
    pub const GL_INTERNALFORMAT_BLUE_TYPE: std::os::raw::c_uint = 0x827A;
    pub const GL_INTERNALFORMAT_DEPTH_SIZE: std::os::raw::c_uint = 0x8275;
    pub const GL_INTERNALFORMAT_DEPTH_TYPE: std::os::raw::c_uint = 0x827C;
    pub const GL_INTERNALFORMAT_GREEN_SIZE: std::os::raw::c_uint = 0x8272;
    pub const GL_INTERNALFORMAT_GREEN_TYPE: std::os::raw::c_uint = 0x8279;
    pub const GL_INTERNALFORMAT_PREFERRED: std::os::raw::c_uint = 0x8270;
    pub const GL_INTERNALFORMAT_RED_SIZE: std::os::raw::c_uint = 0x8271;
    pub const GL_INTERNALFORMAT_RED_TYPE: std::os::raw::c_uint = 0x8278;
    pub const GL_INTERNALFORMAT_SHARED_SIZE: std::os::raw::c_uint = 0x8277;
    pub const GL_INTERNALFORMAT_STENCIL_SIZE: std::os::raw::c_uint = 0x8276;
    pub const GL_INTERNALFORMAT_STENCIL_TYPE: std::os::raw::c_uint = 0x827D;
    pub const GL_INTERNALFORMAT_SUPPORTED: std::os::raw::c_uint = 0x826F;
    pub const GL_INTERPOLATE_ARB: std::os::raw::c_uint = 0x8575;
    pub const GL_INTERPOLATE_EXT: std::os::raw::c_uint = 0x8575;
    pub const GL_INT_2_10_10_10_REV: std::os::raw::c_uint = 0x8D9F;
    pub const GL_INT_IMAGE_1D: std::os::raw::c_uint = 0x9057;
    pub const GL_INT_IMAGE_1D_ARRAY: std::os::raw::c_uint = 0x905D;
    pub const GL_INT_IMAGE_1D_ARRAY_EXT: std::os::raw::c_uint = 0x905D;
    pub const GL_INT_IMAGE_1D_EXT: std::os::raw::c_uint = 0x9057;
    pub const GL_INT_IMAGE_2D: std::os::raw::c_uint = 0x9058;
    pub const GL_INT_IMAGE_2D_ARRAY: std::os::raw::c_uint = 0x905E;
    pub const GL_INT_IMAGE_2D_ARRAY_EXT: std::os::raw::c_uint = 0x905E;
    pub const GL_INT_IMAGE_2D_EXT: std::os::raw::c_uint = 0x9058;
    pub const GL_INT_IMAGE_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9060;
    pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x9061;
    pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: std::os::raw::c_uint = 0x9061;
    pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x9060;
    pub const GL_INT_IMAGE_2D_RECT: std::os::raw::c_uint = 0x905A;
    pub const GL_INT_IMAGE_2D_RECT_EXT: std::os::raw::c_uint = 0x905A;
    pub const GL_INT_IMAGE_3D: std::os::raw::c_uint = 0x9059;
    pub const GL_INT_IMAGE_3D_EXT: std::os::raw::c_uint = 0x9059;
    pub const GL_INT_IMAGE_BUFFER: std::os::raw::c_uint = 0x905C;
    pub const GL_INT_IMAGE_BUFFER_EXT: std::os::raw::c_uint = 0x905C;
    pub const GL_INT_IMAGE_CUBE: std::os::raw::c_uint = 0x905B;
    pub const GL_INT_IMAGE_CUBE_EXT: std::os::raw::c_uint = 0x905B;
    pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x905F;
    pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: std::os::raw::c_uint = 0x905F;
    pub const GL_INT_SAMPLER_1D: std::os::raw::c_uint = 0x8DC9;
    pub const GL_INT_SAMPLER_1D_ARRAY: std::os::raw::c_uint = 0x8DCE;
    pub const GL_INT_SAMPLER_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8DCE;
    pub const GL_INT_SAMPLER_1D_EXT: std::os::raw::c_uint = 0x8DC9;
    pub const GL_INT_SAMPLER_2D: std::os::raw::c_uint = 0x8DCA;
    pub const GL_INT_SAMPLER_2D_ARRAY: std::os::raw::c_uint = 0x8DCF;
    pub const GL_INT_SAMPLER_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8DCF;
    pub const GL_INT_SAMPLER_2D_EXT: std::os::raw::c_uint = 0x8DCA;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9109;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x910C;
    pub const GL_INT_SAMPLER_2D_RECT: std::os::raw::c_uint = 0x8DCD;
    pub const GL_INT_SAMPLER_2D_RECT_EXT: std::os::raw::c_uint = 0x8DCD;
    pub const GL_INT_SAMPLER_3D: std::os::raw::c_uint = 0x8DCB;
    pub const GL_INT_SAMPLER_3D_EXT: std::os::raw::c_uint = 0x8DCB;
    pub const GL_INT_SAMPLER_BUFFER: std::os::raw::c_uint = 0x8DD0;
    pub const GL_INT_SAMPLER_BUFFER_AMD: std::os::raw::c_uint = 0x9002;
    pub const GL_INT_SAMPLER_BUFFER_EXT: std::os::raw::c_uint = 0x8DD0;
    pub const GL_INT_SAMPLER_CUBE: std::os::raw::c_uint = 0x8DCC;
    pub const GL_INT_SAMPLER_CUBE_EXT: std::os::raw::c_uint = 0x8DCC;
    pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x900E;
    pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x900E;
    pub const GL_INT_SAMPLER_RENDERBUFFER_NV: std::os::raw::c_uint = 0x8E57;
    pub const GL_INT_VEC2: std::os::raw::c_uint = 0x8B53;
    pub const GL_INT_VEC2_ARB: std::os::raw::c_uint = 0x8B53;
    pub const GL_INT_VEC3: std::os::raw::c_uint = 0x8B54;
    pub const GL_INT_VEC3_ARB: std::os::raw::c_uint = 0x8B54;
    pub const GL_INT_VEC4: std::os::raw::c_uint = 0x8B55;
    pub const GL_INT_VEC4_ARB: std::os::raw::c_uint = 0x8B55;
    pub const GL_INVALID_ENUM: std::os::raw::c_uint = 0x0500;
    pub const GL_INVALID_FRAMEBUFFER_OPERATION: std::os::raw::c_uint = 0x0506;
    pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: std::os::raw::c_uint = 0x0506;
    pub const GL_INVALID_INDEX: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_INVALID_OPERATION: std::os::raw::c_uint = 0x0502;
    pub const GL_INVALID_VALUE: std::os::raw::c_uint = 0x0501;
    pub const GL_INVARIANT_DATATYPE_EXT: std::os::raw::c_uint = 0x87EB;
    pub const GL_INVARIANT_EXT: std::os::raw::c_uint = 0x87C2;
    pub const GL_INVARIANT_VALUE_EXT: std::os::raw::c_uint = 0x87EA;
    pub const GL_INVERSE_NV: std::os::raw::c_uint = 0x862B;
    pub const GL_INVERSE_TRANSPOSE_NV: std::os::raw::c_uint = 0x862D;
    pub const GL_INVERT: std::os::raw::c_uint = 0x150A;
    pub const GL_INVERTED_SCREEN_W_REND: std::os::raw::c_uint = 0x8491;
    pub const GL_INVERT_OVG_NV: std::os::raw::c_uint = 0x92B4;
    pub const GL_INVERT_RGB_NV: std::os::raw::c_uint = 0x92A3;
    pub const GL_IR_INSTRUMENT1_SGIX: std::os::raw::c_uint = 0x817F;
    pub const GL_ISOLINES: std::os::raw::c_uint = 0x8E7A;
    pub const GL_IS_PER_PATCH: std::os::raw::c_uint = 0x92E7;
    pub const GL_IS_ROW_MAJOR: std::os::raw::c_uint = 0x9300;
    pub const GL_ITALIC_BIT_NV: std::os::raw::c_uint = 0x02;
    pub const GL_IUI_N3F_V2F_EXT: std::os::raw::c_uint = 0x81AF;
    pub const GL_IUI_N3F_V3F_EXT: std::os::raw::c_uint = 0x81B0;
    pub const GL_IUI_V2F_EXT: std::os::raw::c_uint = 0x81AD;
    pub const GL_IUI_V3F_EXT: std::os::raw::c_uint = 0x81AE;
    pub const GL_KEEP: std::os::raw::c_uint = 0x1E00;
    pub const GL_LARGE_CCW_ARC_TO_NV: std::os::raw::c_uint = 0x16;
    pub const GL_LARGE_CW_ARC_TO_NV: std::os::raw::c_uint = 0x18;
    pub const GL_LAST_VERTEX_CONVENTION: std::os::raw::c_uint = 0x8E4E;
    pub const GL_LAST_VERTEX_CONVENTION_EXT: std::os::raw::c_uint = 0x8E4E;
    pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV: std::os::raw::c_uint = 0x9027;
    pub const GL_LAYER_NV: std::os::raw::c_uint = 0x8DAA;
    pub const GL_LAYER_PROVOKING_VERTEX: std::os::raw::c_uint = 0x825E;
    pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT: std::os::raw::c_uint = 0x958E;
    pub const GL_LAYOUT_DEFAULT_INTEL: std::os::raw::c_uint = 0;
    pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT: std::os::raw::c_uint = 0x9531;
    pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT: std::os::raw::c_uint = 0x9530;
    pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT: std::os::raw::c_uint = 0x958F;
    pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT: std::os::raw::c_uint = 0x9590;
    pub const GL_LAYOUT_GENERAL_EXT: std::os::raw::c_uint = 0x958D;
    pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL: std::os::raw::c_uint = 2;
    pub const GL_LAYOUT_LINEAR_INTEL: std::os::raw::c_uint = 1;
    pub const GL_LAYOUT_SHADER_READ_ONLY_EXT: std::os::raw::c_uint = 0x9591;
    pub const GL_LAYOUT_TRANSFER_DST_EXT: std::os::raw::c_uint = 0x9593;
    pub const GL_LAYOUT_TRANSFER_SRC_EXT: std::os::raw::c_uint = 0x9592;
    pub const GL_LEFT: std::os::raw::c_uint = 0x0406;
    pub const GL_LEQUAL: std::os::raw::c_uint = 0x0203;
    pub const GL_LERP_ATI: std::os::raw::c_uint = 0x8969;
    pub const GL_LESS: std::os::raw::c_uint = 0x0201;
    pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX: std::os::raw::c_uint = 0x0800;
    pub const GL_LIGHTEN_KHR: std::os::raw::c_uint = 0x9298;
    pub const GL_LIGHTEN_NV: std::os::raw::c_uint = 0x9298;
    pub const GL_LIGHT_ENV_MODE_SGIX: std::os::raw::c_uint = 0x8407;
    pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT: std::os::raw::c_uint = 0x81F8;
    pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE: std::os::raw::c_uint = 0x85B0;
    pub const GL_LINE: std::os::raw::c_uint = 0x1B01;
    pub const GL_LINEAR: std::os::raw::c_uint = 0x2601;
    pub const GL_LINEARBURN_NV: std::os::raw::c_uint = 0x92A5;
    pub const GL_LINEARDODGE_NV: std::os::raw::c_uint = 0x92A4;
    pub const GL_LINEARLIGHT_NV: std::os::raw::c_uint = 0x92A7;
    pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX: std::os::raw::c_uint = 0x8170;
    pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX: std::os::raw::c_uint = 0x844F;
    pub const GL_LINEAR_DETAIL_ALPHA_SGIS: std::os::raw::c_uint = 0x8098;
    pub const GL_LINEAR_DETAIL_COLOR_SGIS: std::os::raw::c_uint = 0x8099;
    pub const GL_LINEAR_DETAIL_SGIS: std::os::raw::c_uint = 0x8097;
    pub const GL_LINEAR_MIPMAP_LINEAR: std::os::raw::c_uint = 0x2703;
    pub const GL_LINEAR_MIPMAP_NEAREST: std::os::raw::c_uint = 0x2701;
    pub const GL_LINEAR_SHARPEN_ALPHA_SGIS: std::os::raw::c_uint = 0x80AE;
    pub const GL_LINEAR_SHARPEN_COLOR_SGIS: std::os::raw::c_uint = 0x80AF;
    pub const GL_LINEAR_SHARPEN_SGIS: std::os::raw::c_uint = 0x80AD;
    pub const GL_LINEAR_TILING_EXT: std::os::raw::c_uint = 0x9585;
    pub const GL_LINES: std::os::raw::c_uint = 0x0001;
    pub const GL_LINES_ADJACENCY: std::os::raw::c_uint = 0x000A;
    pub const GL_LINES_ADJACENCY_ARB: std::os::raw::c_uint = 0x000A;
    pub const GL_LINES_ADJACENCY_EXT: std::os::raw::c_uint = 0x000A;
    pub const GL_LINE_LOOP: std::os::raw::c_uint = 0x0002;
    pub const GL_LINE_SMOOTH: std::os::raw::c_uint = 0x0B20;
    pub const GL_LINE_SMOOTH_HINT: std::os::raw::c_uint = 0x0C52;
    pub const GL_LINE_STRIP: std::os::raw::c_uint = 0x0003;
    pub const GL_LINE_STRIP_ADJACENCY: std::os::raw::c_uint = 0x000B;
    pub const GL_LINE_STRIP_ADJACENCY_ARB: std::os::raw::c_uint = 0x000B;
    pub const GL_LINE_STRIP_ADJACENCY_EXT: std::os::raw::c_uint = 0x000B;
    pub const GL_LINE_TO_NV: std::os::raw::c_uint = 0x04;
    pub const GL_LINE_WIDTH: std::os::raw::c_uint = 0x0B21;
    pub const GL_LINE_WIDTH_COMMAND_NV: std::os::raw::c_uint = 0x000D;
    pub const GL_LINE_WIDTH_GRANULARITY: std::os::raw::c_uint = 0x0B23;
    pub const GL_LINE_WIDTH_RANGE: std::os::raw::c_uint = 0x0B22;
    pub const GL_LINK_STATUS: std::os::raw::c_uint = 0x8B82;
    pub const GL_LIST_PRIORITY_SGIX: std::os::raw::c_uint = 0x8182;
    pub const GL_LOCAL_CONSTANT_DATATYPE_EXT: std::os::raw::c_uint = 0x87ED;
    pub const GL_LOCAL_CONSTANT_EXT: std::os::raw::c_uint = 0x87C3;
    pub const GL_LOCAL_CONSTANT_VALUE_EXT: std::os::raw::c_uint = 0x87EC;
    pub const GL_LOCAL_EXT: std::os::raw::c_uint = 0x87C4;
    pub const GL_LOCATION: std::os::raw::c_uint = 0x930E;
    pub const GL_LOCATION_COMPONENT: std::os::raw::c_uint = 0x934A;
    pub const GL_LOCATION_INDEX: std::os::raw::c_uint = 0x930F;
    pub const GL_LOGIC_OP_MODE: std::os::raw::c_uint = 0x0BF0;
    pub const GL_LOSE_CONTEXT_ON_RESET: std::os::raw::c_uint = 0x8252;
    pub const GL_LOSE_CONTEXT_ON_RESET_ARB: std::os::raw::c_uint = 0x8252;
    pub const GL_LOWER_LEFT: std::os::raw::c_uint = 0x8CA1;
    pub const GL_LOW_FLOAT: std::os::raw::c_uint = 0x8DF0;
    pub const GL_LOW_INT: std::os::raw::c_uint = 0x8DF3;
    pub const GL_LO_BIAS_NV: std::os::raw::c_uint = 0x8715;
    pub const GL_LO_SCALE_NV: std::os::raw::c_uint = 0x870F;
    pub const GL_LUID_SIZE_EXT: std::os::raw::c_uint = 8;
    pub const GL_LUMINANCE12_ALPHA12_EXT: std::os::raw::c_uint = 0x8047;
    pub const GL_LUMINANCE12_ALPHA4_EXT: std::os::raw::c_uint = 0x8046;
    pub const GL_LUMINANCE12_EXT: std::os::raw::c_uint = 0x8041;
    pub const GL_LUMINANCE16F_ARB: std::os::raw::c_uint = 0x881E;
    pub const GL_LUMINANCE16I_EXT: std::os::raw::c_uint = 0x8D8C;
    pub const GL_LUMINANCE16UI_EXT: std::os::raw::c_uint = 0x8D7A;
    pub const GL_LUMINANCE16_ALPHA16_EXT: std::os::raw::c_uint = 0x8048;
    pub const GL_LUMINANCE16_ALPHA16_SNORM: std::os::raw::c_uint = 0x901A;
    pub const GL_LUMINANCE16_EXT: std::os::raw::c_uint = 0x8042;
    pub const GL_LUMINANCE16_SNORM: std::os::raw::c_uint = 0x9019;
    pub const GL_LUMINANCE32F_ARB: std::os::raw::c_uint = 0x8818;
    pub const GL_LUMINANCE32I_EXT: std::os::raw::c_uint = 0x8D86;
    pub const GL_LUMINANCE32UI_EXT: std::os::raw::c_uint = 0x8D74;
    pub const GL_LUMINANCE4_ALPHA4_EXT: std::os::raw::c_uint = 0x8043;
    pub const GL_LUMINANCE4_EXT: std::os::raw::c_uint = 0x803F;
    pub const GL_LUMINANCE6_ALPHA2_EXT: std::os::raw::c_uint = 0x8044;
    pub const GL_LUMINANCE8I_EXT: std::os::raw::c_uint = 0x8D92;
    pub const GL_LUMINANCE8UI_EXT: std::os::raw::c_uint = 0x8D80;
    pub const GL_LUMINANCE8_ALPHA8_EXT: std::os::raw::c_uint = 0x8045;
    pub const GL_LUMINANCE8_ALPHA8_SNORM: std::os::raw::c_uint = 0x9016;
    pub const GL_LUMINANCE8_EXT: std::os::raw::c_uint = 0x8040;
    pub const GL_LUMINANCE8_SNORM: std::os::raw::c_uint = 0x9015;
    pub const GL_LUMINANCE_ALPHA16F_ARB: std::os::raw::c_uint = 0x881F;
    pub const GL_LUMINANCE_ALPHA16I_EXT: std::os::raw::c_uint = 0x8D8D;
    pub const GL_LUMINANCE_ALPHA16UI_EXT: std::os::raw::c_uint = 0x8D7B;
    pub const GL_LUMINANCE_ALPHA32F_ARB: std::os::raw::c_uint = 0x8819;
    pub const GL_LUMINANCE_ALPHA32I_EXT: std::os::raw::c_uint = 0x8D87;
    pub const GL_LUMINANCE_ALPHA32UI_EXT: std::os::raw::c_uint = 0x8D75;
    pub const GL_LUMINANCE_ALPHA8I_EXT: std::os::raw::c_uint = 0x8D93;
    pub const GL_LUMINANCE_ALPHA8UI_EXT: std::os::raw::c_uint = 0x8D81;
    pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE: std::os::raw::c_uint = 0x881F;
    pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI: std::os::raw::c_uint = 0x881F;
    pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE: std::os::raw::c_uint = 0x8819;
    pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI: std::os::raw::c_uint = 0x8819;
    pub const GL_LUMINANCE_ALPHA_INTEGER_EXT: std::os::raw::c_uint = 0x8D9D;
    pub const GL_LUMINANCE_ALPHA_SNORM: std::os::raw::c_uint = 0x9012;
    pub const GL_LUMINANCE_FLOAT16_APPLE: std::os::raw::c_uint = 0x881E;
    pub const GL_LUMINANCE_FLOAT16_ATI: std::os::raw::c_uint = 0x881E;
    pub const GL_LUMINANCE_FLOAT32_APPLE: std::os::raw::c_uint = 0x8818;
    pub const GL_LUMINANCE_FLOAT32_ATI: std::os::raw::c_uint = 0x8818;
    pub const GL_LUMINANCE_INTEGER_EXT: std::os::raw::c_uint = 0x8D9C;
    pub const GL_LUMINANCE_SNORM: std::os::raw::c_uint = 0x9011;
    pub const GL_MAD_ATI: std::os::raw::c_uint = 0x8968;
    pub const GL_MAGNITUDE_BIAS_NV: std::os::raw::c_uint = 0x8718;
    pub const GL_MAGNITUDE_SCALE_NV: std::os::raw::c_uint = 0x8712;
    pub const GL_MAJOR_VERSION: std::os::raw::c_uint = 0x821B;
    pub const GL_MANUAL_GENERATE_MIPMAP: std::os::raw::c_uint = 0x8294;
    pub const GL_MAP1_BINORMAL_EXT: std::os::raw::c_uint = 0x8446;
    pub const GL_MAP1_TANGENT_EXT: std::os::raw::c_uint = 0x8444;
    pub const GL_MAP1_VERTEX_ATTRIB0_4_NV: std::os::raw::c_uint = 0x8660;
    pub const GL_MAP1_VERTEX_ATTRIB10_4_NV: std::os::raw::c_uint = 0x866A;
    pub const GL_MAP1_VERTEX_ATTRIB11_4_NV: std::os::raw::c_uint = 0x866B;
    pub const GL_MAP1_VERTEX_ATTRIB12_4_NV: std::os::raw::c_uint = 0x866C;
    pub const GL_MAP1_VERTEX_ATTRIB13_4_NV: std::os::raw::c_uint = 0x866D;
    pub const GL_MAP1_VERTEX_ATTRIB14_4_NV: std::os::raw::c_uint = 0x866E;
    pub const GL_MAP1_VERTEX_ATTRIB15_4_NV: std::os::raw::c_uint = 0x866F;
    pub const GL_MAP1_VERTEX_ATTRIB1_4_NV: std::os::raw::c_uint = 0x8661;
    pub const GL_MAP1_VERTEX_ATTRIB2_4_NV: std::os::raw::c_uint = 0x8662;
    pub const GL_MAP1_VERTEX_ATTRIB3_4_NV: std::os::raw::c_uint = 0x8663;
    pub const GL_MAP1_VERTEX_ATTRIB4_4_NV: std::os::raw::c_uint = 0x8664;
    pub const GL_MAP1_VERTEX_ATTRIB5_4_NV: std::os::raw::c_uint = 0x8665;
    pub const GL_MAP1_VERTEX_ATTRIB6_4_NV: std::os::raw::c_uint = 0x8666;
    pub const GL_MAP1_VERTEX_ATTRIB7_4_NV: std::os::raw::c_uint = 0x8667;
    pub const GL_MAP1_VERTEX_ATTRIB8_4_NV: std::os::raw::c_uint = 0x8668;
    pub const GL_MAP1_VERTEX_ATTRIB9_4_NV: std::os::raw::c_uint = 0x8669;
    pub const GL_MAP2_BINORMAL_EXT: std::os::raw::c_uint = 0x8447;
    pub const GL_MAP2_TANGENT_EXT: std::os::raw::c_uint = 0x8445;
    pub const GL_MAP2_VERTEX_ATTRIB0_4_NV: std::os::raw::c_uint = 0x8670;
    pub const GL_MAP2_VERTEX_ATTRIB10_4_NV: std::os::raw::c_uint = 0x867A;
    pub const GL_MAP2_VERTEX_ATTRIB11_4_NV: std::os::raw::c_uint = 0x867B;
    pub const GL_MAP2_VERTEX_ATTRIB12_4_NV: std::os::raw::c_uint = 0x867C;
    pub const GL_MAP2_VERTEX_ATTRIB13_4_NV: std::os::raw::c_uint = 0x867D;
    pub const GL_MAP2_VERTEX_ATTRIB14_4_NV: std::os::raw::c_uint = 0x867E;
    pub const GL_MAP2_VERTEX_ATTRIB15_4_NV: std::os::raw::c_uint = 0x867F;
    pub const GL_MAP2_VERTEX_ATTRIB1_4_NV: std::os::raw::c_uint = 0x8671;
    pub const GL_MAP2_VERTEX_ATTRIB2_4_NV: std::os::raw::c_uint = 0x8672;
    pub const GL_MAP2_VERTEX_ATTRIB3_4_NV: std::os::raw::c_uint = 0x8673;
    pub const GL_MAP2_VERTEX_ATTRIB4_4_NV: std::os::raw::c_uint = 0x8674;
    pub const GL_MAP2_VERTEX_ATTRIB5_4_NV: std::os::raw::c_uint = 0x8675;
    pub const GL_MAP2_VERTEX_ATTRIB6_4_NV: std::os::raw::c_uint = 0x8676;
    pub const GL_MAP2_VERTEX_ATTRIB7_4_NV: std::os::raw::c_uint = 0x8677;
    pub const GL_MAP2_VERTEX_ATTRIB8_4_NV: std::os::raw::c_uint = 0x8678;
    pub const GL_MAP2_VERTEX_ATTRIB9_4_NV: std::os::raw::c_uint = 0x8679;
    pub const GL_MAP_ATTRIB_U_ORDER_NV: std::os::raw::c_uint = 0x86C3;
    pub const GL_MAP_ATTRIB_V_ORDER_NV: std::os::raw::c_uint = 0x86C4;
    pub const GL_MAP_COHERENT_BIT: std::os::raw::c_uint = 0x0080;
    pub const GL_MAP_FLUSH_EXPLICIT_BIT: std::os::raw::c_uint = 0x0010;
    pub const GL_MAP_INVALIDATE_BUFFER_BIT: std::os::raw::c_uint = 0x0008;
    pub const GL_MAP_INVALIDATE_RANGE_BIT: std::os::raw::c_uint = 0x0004;
    pub const GL_MAP_PERSISTENT_BIT: std::os::raw::c_uint = 0x0040;
    pub const GL_MAP_READ_BIT: std::os::raw::c_uint = 0x0001;
    pub const GL_MAP_TESSELLATION_NV: std::os::raw::c_uint = 0x86C2;
    pub const GL_MAP_UNSYNCHRONIZED_BIT: std::os::raw::c_uint = 0x0020;
    pub const GL_MAP_WRITE_BIT: std::os::raw::c_uint = 0x0002;
    pub const GL_MATERIAL_SIDE_HINT_PGI: std::os::raw::c_uint = 0x1A22C;
    pub const GL_MATRIX0_ARB: std::os::raw::c_uint = 0x88C0;
    pub const GL_MATRIX0_NV: std::os::raw::c_uint = 0x8630;
    pub const GL_MATRIX10_ARB: std::os::raw::c_uint = 0x88CA;
    pub const GL_MATRIX11_ARB: std::os::raw::c_uint = 0x88CB;
    pub const GL_MATRIX12_ARB: std::os::raw::c_uint = 0x88CC;
    pub const GL_MATRIX13_ARB: std::os::raw::c_uint = 0x88CD;
    pub const GL_MATRIX14_ARB: std::os::raw::c_uint = 0x88CE;
    pub const GL_MATRIX15_ARB: std::os::raw::c_uint = 0x88CF;
    pub const GL_MATRIX16_ARB: std::os::raw::c_uint = 0x88D0;
    pub const GL_MATRIX17_ARB: std::os::raw::c_uint = 0x88D1;
    pub const GL_MATRIX18_ARB: std::os::raw::c_uint = 0x88D2;
    pub const GL_MATRIX19_ARB: std::os::raw::c_uint = 0x88D3;
    pub const GL_MATRIX1_ARB: std::os::raw::c_uint = 0x88C1;
    pub const GL_MATRIX1_NV: std::os::raw::c_uint = 0x8631;
    pub const GL_MATRIX20_ARB: std::os::raw::c_uint = 0x88D4;
    pub const GL_MATRIX21_ARB: std::os::raw::c_uint = 0x88D5;
    pub const GL_MATRIX22_ARB: std::os::raw::c_uint = 0x88D6;
    pub const GL_MATRIX23_ARB: std::os::raw::c_uint = 0x88D7;
    pub const GL_MATRIX24_ARB: std::os::raw::c_uint = 0x88D8;
    pub const GL_MATRIX25_ARB: std::os::raw::c_uint = 0x88D9;
    pub const GL_MATRIX26_ARB: std::os::raw::c_uint = 0x88DA;
    pub const GL_MATRIX27_ARB: std::os::raw::c_uint = 0x88DB;
    pub const GL_MATRIX28_ARB: std::os::raw::c_uint = 0x88DC;
    pub const GL_MATRIX29_ARB: std::os::raw::c_uint = 0x88DD;
    pub const GL_MATRIX2_ARB: std::os::raw::c_uint = 0x88C2;
    pub const GL_MATRIX2_NV: std::os::raw::c_uint = 0x8632;
    pub const GL_MATRIX30_ARB: std::os::raw::c_uint = 0x88DE;
    pub const GL_MATRIX31_ARB: std::os::raw::c_uint = 0x88DF;
    pub const GL_MATRIX3_ARB: std::os::raw::c_uint = 0x88C3;
    pub const GL_MATRIX3_NV: std::os::raw::c_uint = 0x8633;
    pub const GL_MATRIX4_ARB: std::os::raw::c_uint = 0x88C4;
    pub const GL_MATRIX4_NV: std::os::raw::c_uint = 0x8634;
    pub const GL_MATRIX5_ARB: std::os::raw::c_uint = 0x88C5;
    pub const GL_MATRIX5_NV: std::os::raw::c_uint = 0x8635;
    pub const GL_MATRIX6_ARB: std::os::raw::c_uint = 0x88C6;
    pub const GL_MATRIX6_NV: std::os::raw::c_uint = 0x8636;
    pub const GL_MATRIX7_ARB: std::os::raw::c_uint = 0x88C7;
    pub const GL_MATRIX7_NV: std::os::raw::c_uint = 0x8637;
    pub const GL_MATRIX8_ARB: std::os::raw::c_uint = 0x88C8;
    pub const GL_MATRIX9_ARB: std::os::raw::c_uint = 0x88C9;
    pub const GL_MATRIX_EXT: std::os::raw::c_uint = 0x87C0;
    pub const GL_MATRIX_INDEX_ARRAY_ARB: std::os::raw::c_uint = 0x8844;
    pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB: std::os::raw::c_uint = 0x8849;
    pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB: std::os::raw::c_uint = 0x8846;
    pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB: std::os::raw::c_uint = 0x8848;
    pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB: std::os::raw::c_uint = 0x8847;
    pub const GL_MATRIX_PALETTE_ARB: std::os::raw::c_uint = 0x8840;
    pub const GL_MATRIX_STRIDE: std::os::raw::c_uint = 0x92FF;
    pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: std::os::raw::c_uint = 0x00200000;
    pub const GL_MAT_AMBIENT_BIT_PGI: std::os::raw::c_uint = 0x00100000;
    pub const GL_MAT_COLOR_INDEXES_BIT_PGI: std::os::raw::c_uint = 0x01000000;
    pub const GL_MAT_DIFFUSE_BIT_PGI: std::os::raw::c_uint = 0x00400000;
    pub const GL_MAT_EMISSION_BIT_PGI: std::os::raw::c_uint = 0x00800000;
    pub const GL_MAT_SHININESS_BIT_PGI: std::os::raw::c_uint = 0x02000000;
    pub const GL_MAT_SPECULAR_BIT_PGI: std::os::raw::c_uint = 0x04000000;
    pub const GL_MAX: std::os::raw::c_uint = 0x8008;
    pub const GL_MAX_3D_TEXTURE_SIZE: std::os::raw::c_uint = 0x8073;
    pub const GL_MAX_3D_TEXTURE_SIZE_EXT: std::os::raw::c_uint = 0x8073;
    pub const GL_MAX_4D_TEXTURE_SIZE_SGIS: std::os::raw::c_uint = 0x8138;
    pub const GL_MAX_ACTIVE_LIGHTS_SGIX: std::os::raw::c_uint = 0x8405;
    pub const GL_MAX_ARRAY_TEXTURE_LAYERS: std::os::raw::c_uint = 0x88FF;
    pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT: std::os::raw::c_uint = 0x88FF;
    pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX: std::os::raw::c_uint = 0x8360;
    pub const GL_MAX_ASYNC_HISTOGRAM_SGIX: std::os::raw::c_uint = 0x832D;
    pub const GL_MAX_ASYNC_READ_PIXELS_SGIX: std::os::raw::c_uint = 0x8361;
    pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX: std::os::raw::c_uint = 0x835F;
    pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: std::os::raw::c_uint = 0x92DC;
    pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: std::os::raw::c_uint = 0x92D8;
    pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: std::os::raw::c_uint = 0x8DED;
    pub const GL_MAX_CLIPMAP_DEPTH_SGIX: std::os::raw::c_uint = 0x8177;
    pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: std::os::raw::c_uint = 0x8178;
    pub const GL_MAX_CLIP_DISTANCES: std::os::raw::c_uint = 0x0D32;
    pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV: std::os::raw::c_uint = 0x955F;
    pub const GL_MAX_COLOR_ATTACHMENTS: std::os::raw::c_uint = 0x8CDF;
    pub const GL_MAX_COLOR_ATTACHMENTS_EXT: std::os::raw::c_uint = 0x8CDF;
    pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: std::os::raw::c_uint = 0x91B3;
    pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: std::os::raw::c_uint = 0x91B4;
    pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI: std::os::raw::c_uint = 0x80B3;
    pub const GL_MAX_COLOR_TEXTURE_SAMPLES: std::os::raw::c_uint = 0x910E;
    pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D7;
    pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92D1;
    pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES: std::os::raw::c_uint = 0x82FA;
    pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8266;
    pub const GL_MAX_COMBINED_DIMENSIONS: std::os::raw::c_uint = 0x8282;
    pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8A33;
    pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8A32;
    pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CF;
    pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: std::os::raw::c_uint = 0x8F39;
    pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: std::os::raw::c_uint = 0x8F39;
    pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: std::os::raw::c_uint = 0x8E67;
    pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: std::os::raw::c_uint = 0x8F39;
    pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90DC;
    pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: std::os::raw::c_uint = 0x8E6F;
    pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8E1E;
    pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8E1F;
    pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8B4D;
    pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: std::os::raw::c_uint = 0x8B4D;
    pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8A2E;
    pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8A31;
    pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x8265;
    pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x8264;
    pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: std::os::raw::c_uint = 0x90EB;
    pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: std::os::raw::c_uint = 0x91BF;
    pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x91BD;
    pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90DB;
    pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: std::os::raw::c_uint = 0x8262;
    pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x91BC;
    pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x91BB;
    pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8263;
    pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: std::os::raw::c_uint = 0x9344;
    pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: std::os::raw::c_uint = 0x9345;
    pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: std::os::raw::c_uint = 0x91BE;
    pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: std::os::raw::c_uint = 0x90EB;
    pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: std::os::raw::c_uint = 0x91BF;
    pub const GL_MAX_CONVOLUTION_HEIGHT_EXT: std::os::raw::c_uint = 0x801B;
    pub const GL_MAX_CONVOLUTION_WIDTH_EXT: std::os::raw::c_uint = 0x801A;
    pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: std::os::raw::c_uint = 0x851C;
    pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: std::os::raw::c_uint = 0x851C;
    pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT: std::os::raw::c_uint = 0x851C;
    pub const GL_MAX_CULL_DISTANCES: std::os::raw::c_uint = 0x82F9;
    pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: std::os::raw::c_uint = 0x826C;
    pub const GL_MAX_DEBUG_LOGGED_MESSAGES: std::os::raw::c_uint = 0x9144;
    pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD: std::os::raw::c_uint = 0x9144;
    pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: std::os::raw::c_uint = 0x9144;
    pub const GL_MAX_DEBUG_MESSAGE_LENGTH: std::os::raw::c_uint = 0x9143;
    pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD: std::os::raw::c_uint = 0x9143;
    pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: std::os::raw::c_uint = 0x9143;
    pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV: std::os::raw::c_uint = 0x90D1;
    pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: std::os::raw::c_uint = 0x90D0;
    pub const GL_MAX_DEFORMATION_ORDER_SGIX: std::os::raw::c_uint = 0x8197;
    pub const GL_MAX_DEPTH: std::os::raw::c_uint = 0x8280;
    pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: std::os::raw::c_uint = 0x91B5;
    pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: std::os::raw::c_uint = 0x910F;
    pub const GL_MAX_DETACHED_BUFFERS_NV: std::os::raw::c_uint = 0x95AD;
    pub const GL_MAX_DETACHED_TEXTURES_NV: std::os::raw::c_uint = 0x95AC;
    pub const GL_MAX_DRAW_BUFFERS: std::os::raw::c_uint = 0x8824;
    pub const GL_MAX_DRAW_BUFFERS_ARB: std::os::raw::c_uint = 0x8824;
    pub const GL_MAX_DRAW_BUFFERS_ATI: std::os::raw::c_uint = 0x8824;
    pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV: std::os::raw::c_uint = 0x953D;
    pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: std::os::raw::c_uint = 0x88FC;
    pub const GL_MAX_ELEMENTS_INDICES: std::os::raw::c_uint = 0x80E9;
    pub const GL_MAX_ELEMENTS_INDICES_EXT: std::os::raw::c_uint = 0x80E9;
    pub const GL_MAX_ELEMENTS_VERTICES: std::os::raw::c_uint = 0x80E8;
    pub const GL_MAX_ELEMENTS_VERTICES_EXT: std::os::raw::c_uint = 0x80E8;
    pub const GL_MAX_ELEMENT_INDEX: std::os::raw::c_uint = 0x8D6B;
    pub const GL_MAX_EXT: std::os::raw::c_uint = 0x8008;
    pub const GL_MAX_FOG_FUNC_POINTS_SGIS: std::os::raw::c_uint = 0x812C;
    pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D6;
    pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92D0;
    pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: std::os::raw::c_uint = 0x8DE3;
    pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CE;
    pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: std::os::raw::c_uint = 0x9125;
    pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: std::os::raw::c_uint = 0x8E5C;
    pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: std::os::raw::c_uint = 0x8E5C;
    pub const GL_MAX_FRAGMENT_LIGHTS_SGIX: std::os::raw::c_uint = 0x8404;
    pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: std::os::raw::c_uint = 0x8868;
    pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90DA;
    pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8A2D;
    pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8B49;
    pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: std::os::raw::c_uint = 0x8B49;
    pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: std::os::raw::c_uint = 0x8DFD;
    pub const GL_MAX_FRAMEBUFFER_HEIGHT: std::os::raw::c_uint = 0x9316;
    pub const GL_MAX_FRAMEBUFFER_LAYERS: std::os::raw::c_uint = 0x9317;
    pub const GL_MAX_FRAMEBUFFER_SAMPLES: std::os::raw::c_uint = 0x9318;
    pub const GL_MAX_FRAMEBUFFER_WIDTH: std::os::raw::c_uint = 0x9315;
    pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX: std::os::raw::c_uint = 0x818D;
    pub const GL_MAX_GENERAL_COMBINERS_NV: std::os::raw::c_uint = 0x854D;
    pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D5;
    pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92CF;
    pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: std::os::raw::c_uint = 0x8DE4;
    pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CD;
    pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: std::os::raw::c_uint = 0x9123;
    pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x9124;
    pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: std::os::raw::c_uint = 0x8DE0;
    pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: std::os::raw::c_uint = 0x8DE0;
    pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: std::os::raw::c_uint = 0x8DE0;
    pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: std::os::raw::c_uint = 0x8E5A;
    pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x8E5A;
    pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90D7;
    pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8C29;
    pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: std::os::raw::c_uint = 0x8C29;
    pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: std::os::raw::c_uint = 0x8C29;
    pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x8DE1;
    pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: std::os::raw::c_uint = 0x8DE1;
    pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: std::os::raw::c_uint = 0x8DE1;
    pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8A2C;
    pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8DDF;
    pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: std::os::raw::c_uint = 0x8DDF;
    pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: std::os::raw::c_uint = 0x8DDF;
    pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: std::os::raw::c_uint = 0x8DDD;
    pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT: std::os::raw::c_uint = 0x8DDD;
    pub const GL_MAX_HEIGHT: std::os::raw::c_uint = 0x827F;
    pub const GL_MAX_IMAGE_SAMPLES: std::os::raw::c_uint = 0x906D;
    pub const GL_MAX_IMAGE_SAMPLES_EXT: std::os::raw::c_uint = 0x906D;
    pub const GL_MAX_IMAGE_UNITS: std::os::raw::c_uint = 0x8F38;
    pub const GL_MAX_IMAGE_UNITS_EXT: std::os::raw::c_uint = 0x8F38;
    pub const GL_MAX_INTEGER_SAMPLES: std::os::raw::c_uint = 0x9110;
    pub const GL_MAX_LABEL_LENGTH: std::os::raw::c_uint = 0x82E8;
    pub const GL_MAX_LAYERS: std::os::raw::c_uint = 0x8281;
    pub const GL_MAX_LGPU_GPUS_NVX: std::os::raw::c_uint = 0x92BA;
    pub const GL_MAX_MAP_TESSELLATION_NV: std::os::raw::c_uint = 0x86D6;
    pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: std::os::raw::c_uint = 0x8841;
    pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV: std::os::raw::c_uint = 0x8E65;
    pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: std::os::raw::c_uint = 0x8E64;
    pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV: std::os::raw::c_uint = 0x8E62;
    pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV: std::os::raw::c_uint = 0x9539;
    pub const GL_MAX_MESH_OUTPUT_VERTICES_NV: std::os::raw::c_uint = 0x9538;
    pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV: std::os::raw::c_uint = 0x8E66;
    pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV: std::os::raw::c_uint = 0x8E61;
    pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV: std::os::raw::c_uint = 0x9536;
    pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV: std::os::raw::c_uint = 0x8E60;
    pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV: std::os::raw::c_uint = 0x8E63;
    pub const GL_MAX_MESH_VIEWS_NV: std::os::raw::c_uint = 0x9557;
    pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV: std::os::raw::c_uint = 0x95A2;
    pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV: std::os::raw::c_uint = 0x953B;
    pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV: std::os::raw::c_uint = 0x8E11;
    pub const GL_MAX_NAME_LENGTH: std::os::raw::c_uint = 0x92F6;
    pub const GL_MAX_NUM_ACTIVE_VARIABLES: std::os::raw::c_uint = 0x92F7;
    pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: std::os::raw::c_uint = 0x92F8;
    pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: std::os::raw::c_uint = 0x87CA;
    pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: std::os::raw::c_uint = 0x87CD;
    pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: std::os::raw::c_uint = 0x87CE;
    pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: std::os::raw::c_uint = 0x87CC;
    pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: std::os::raw::c_uint = 0x87CB;
    pub const GL_MAX_PALETTE_MATRICES_ARB: std::os::raw::c_uint = 0x8842;
    pub const GL_MAX_PATCH_VERTICES: std::os::raw::c_uint = 0x8E7D;
    pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: std::os::raw::c_uint = 0x8337;
    pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: std::os::raw::c_uint = 0x87F1;
    pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: std::os::raw::c_uint = 0x88B1;
    pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x880B;
    pub const GL_MAX_PROGRAM_ATTRIBS_ARB: std::os::raw::c_uint = 0x88AD;
    pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV: std::os::raw::c_uint = 0x8908;
    pub const GL_MAX_PROGRAM_CALL_DEPTH_NV: std::os::raw::c_uint = 0x88F5;
    pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: std::os::raw::c_uint = 0x88B5;
    pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: std::os::raw::c_uint = 0x88F4;
    pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV: std::os::raw::c_uint = 0x8DA5;
    pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV: std::os::raw::c_uint = 0x8DA6;
    pub const GL_MAX_PROGRAM_IF_DEPTH_NV: std::os::raw::c_uint = 0x88F6;
    pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x88A1;
    pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: std::os::raw::c_uint = 0x88B4;
    pub const GL_MAX_PROGRAM_LOOP_COUNT_NV: std::os::raw::c_uint = 0x88F8;
    pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV: std::os::raw::c_uint = 0x88F7;
    pub const GL_MAX_PROGRAM_MATRICES_ARB: std::os::raw::c_uint = 0x862F;
    pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: std::os::raw::c_uint = 0x862E;
    pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: std::os::raw::c_uint = 0x88B3;
    pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x880E;
    pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: std::os::raw::c_uint = 0x88AF;
    pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x88A3;
    pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: std::os::raw::c_uint = 0x88AB;
    pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: std::os::raw::c_uint = 0x88A7;
    pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: std::os::raw::c_uint = 0x8810;
    pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x880F;
    pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV: std::os::raw::c_uint = 0x8C27;
    pub const GL_MAX_PROGRAM_PARAMETERS_ARB: std::os::raw::c_uint = 0x88A9;
    pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: std::os::raw::c_uint = 0x8DA0;
    pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: std::os::raw::c_uint = 0x8DA1;
    pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV: std::os::raw::c_uint = 0x86D8;
    pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV: std::os::raw::c_uint = 0x8909;
    pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV: std::os::raw::c_uint = 0x8F45;
    pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: std::os::raw::c_uint = 0x8F44;
    pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: std::os::raw::c_uint = 0x88A5;
    pub const GL_MAX_PROGRAM_TEXEL_OFFSET: std::os::raw::c_uint = 0x8905;
    pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT: std::os::raw::c_uint = 0x8905;
    pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV: std::os::raw::c_uint = 0x8905;
    pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: std::os::raw::c_uint = 0x8F9F;
    pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: std::os::raw::c_uint = 0x8E5F;
    pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: std::os::raw::c_uint = 0x8E5F;
    pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: std::os::raw::c_uint = 0x8E5F;
    pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: std::os::raw::c_uint = 0x880D;
    pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x880C;
    pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: std::os::raw::c_uint = 0x8C28;
    pub const GL_MAX_RASTER_SAMPLES_EXT: std::os::raw::c_uint = 0x9329;
    pub const GL_MAX_RATIONAL_EVAL_ORDER_NV: std::os::raw::c_uint = 0x86D7;
    pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: std::os::raw::c_uint = 0x84F8;
    pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB: std::os::raw::c_uint = 0x84F8;
    pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV: std::os::raw::c_uint = 0x84F8;
    pub const GL_MAX_RENDERBUFFER_SIZE: std::os::raw::c_uint = 0x84E8;
    pub const GL_MAX_RENDERBUFFER_SIZE_EXT: std::os::raw::c_uint = 0x84E8;
    pub const GL_MAX_SAMPLES: std::os::raw::c_uint = 0x8D57;
    pub const GL_MAX_SAMPLES_EXT: std::os::raw::c_uint = 0x8D57;
    pub const GL_MAX_SAMPLE_MASK_WORDS: std::os::raw::c_uint = 0x8E59;
    pub const GL_MAX_SAMPLE_MASK_WORDS_NV: std::os::raw::c_uint = 0x8E59;
    pub const GL_MAX_SERVER_WAIT_TIMEOUT: std::os::raw::c_uint = 0x9111;
    pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV: std::os::raw::c_uint = 0x8F35;
    pub const GL_MAX_SHADER_COMPILER_THREADS_ARB: std::os::raw::c_uint = 0x91B0;
    pub const GL_MAX_SHADER_COMPILER_THREADS_KHR: std::os::raw::c_uint = 0x91B0;
    pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: std::os::raw::c_uint = 0x90DE;
    pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: std::os::raw::c_uint = 0x90DD;
    pub const GL_MAX_SHININESS_NV: std::os::raw::c_uint = 0x8504;
    pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD: std::os::raw::c_uint = 0x9199;
    pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB: std::os::raw::c_uint = 0x9199;
    pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS: std::os::raw::c_uint = 0x919A;
    pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: std::os::raw::c_uint = 0x919A;
    pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD: std::os::raw::c_uint = 0x9198;
    pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB: std::os::raw::c_uint = 0x9198;
    pub const GL_MAX_SPOT_EXPONENT_NV: std::os::raw::c_uint = 0x8505;
    pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: std::os::raw::c_uint = 0x9349;
    pub const GL_MAX_SUBROUTINES: std::os::raw::c_uint = 0x8DE7;
    pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: std::os::raw::c_uint = 0x8DE8;
    pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV: std::os::raw::c_uint = 0x8E6D;
    pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: std::os::raw::c_uint = 0x8E6C;
    pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV: std::os::raw::c_uint = 0x8E6A;
    pub const GL_MAX_TASK_OUTPUT_COUNT_NV: std::os::raw::c_uint = 0x953A;
    pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV: std::os::raw::c_uint = 0x8E6E;
    pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV: std::os::raw::c_uint = 0x8E69;
    pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV: std::os::raw::c_uint = 0x9537;
    pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV: std::os::raw::c_uint = 0x8E68;
    pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV: std::os::raw::c_uint = 0x8E6B;
    pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV: std::os::raw::c_uint = 0x95A3;
    pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV: std::os::raw::c_uint = 0x953C;
    pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D3;
    pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92CD;
    pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CB;
    pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: std::os::raw::c_uint = 0x886C;
    pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x8E83;
    pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90D8;
    pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8E81;
    pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x8E85;
    pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8E89;
    pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8E7F;
    pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D4;
    pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92CE;
    pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CC;
    pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: std::os::raw::c_uint = 0x886D;
    pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x8E86;
    pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90D9;
    pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8E82;
    pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8E8A;
    pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8E80;
    pub const GL_MAX_TESS_GEN_LEVEL: std::os::raw::c_uint = 0x8E7E;
    pub const GL_MAX_TESS_PATCH_COMPONENTS: std::os::raw::c_uint = 0x8E84;
    pub const GL_MAX_TEXTURE_BUFFER_SIZE: std::os::raw::c_uint = 0x8C2B;
    pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB: std::os::raw::c_uint = 0x8C2B;
    pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT: std::os::raw::c_uint = 0x8C2B;
    pub const GL_MAX_TEXTURE_COORDS_ARB: std::os::raw::c_uint = 0x8871;
    pub const GL_MAX_TEXTURE_COORDS_NV: std::os::raw::c_uint = 0x8871;
    pub const GL_MAX_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8872;
    pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: std::os::raw::c_uint = 0x8872;
    pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV: std::os::raw::c_uint = 0x8872;
    pub const GL_MAX_TEXTURE_LOD_BIAS: std::os::raw::c_uint = 0x84FD;
    pub const GL_MAX_TEXTURE_LOD_BIAS_EXT: std::os::raw::c_uint = 0x84FD;
    pub const GL_MAX_TEXTURE_MAX_ANISOTROPY: std::os::raw::c_uint = 0x84FF;
    pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: std::os::raw::c_uint = 0x84FF;
    pub const GL_MAX_TEXTURE_SIZE: std::os::raw::c_uint = 0x0D33;
    pub const GL_MAX_TEXTURE_UNITS_ARB: std::os::raw::c_uint = 0x84E2;
    pub const GL_MAX_TRACK_MATRICES_NV: std::os::raw::c_uint = 0x862F;
    pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV: std::os::raw::c_uint = 0x862E;
    pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: std::os::raw::c_uint = 0x8E70;
    pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: std::os::raw::c_uint = 0x8C8A;
    pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: std::os::raw::c_uint = 0x8C8A;
    pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: std::os::raw::c_uint = 0x8C8A;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: std::os::raw::c_uint = 0x8C8B;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: std::os::raw::c_uint = 0x8C8B;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: std::os::raw::c_uint = 0x8C8B;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: std::os::raw::c_uint = 0x8C80;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: std::os::raw::c_uint = 0x8C80;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: std::os::raw::c_uint = 0x8C80;
    pub const GL_MAX_UNIFORM_BLOCK_SIZE: std::os::raw::c_uint = 0x8A30;
    pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: std::os::raw::c_uint = 0x8A2F;
    pub const GL_MAX_UNIFORM_LOCATIONS: std::os::raw::c_uint = 0x826E;
    pub const GL_MAX_VARYING_COMPONENTS: std::os::raw::c_uint = 0x8B4B;
    pub const GL_MAX_VARYING_COMPONENTS_EXT: std::os::raw::c_uint = 0x8B4B;
    pub const GL_MAX_VARYING_FLOATS: std::os::raw::c_uint = 0x8B4B;
    pub const GL_MAX_VARYING_FLOATS_ARB: std::os::raw::c_uint = 0x8B4B;
    pub const GL_MAX_VARYING_VECTORS: std::os::raw::c_uint = 0x8DFC;
    pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: std::os::raw::c_uint = 0x8520;
    pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: std::os::raw::c_uint = 0x92D2;
    pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: std::os::raw::c_uint = 0x92CC;
    pub const GL_MAX_VERTEX_ATTRIBS: std::os::raw::c_uint = 0x8869;
    pub const GL_MAX_VERTEX_ATTRIBS_ARB: std::os::raw::c_uint = 0x8869;
    pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: std::os::raw::c_uint = 0x82DA;
    pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: std::os::raw::c_uint = 0x82D9;
    pub const GL_MAX_VERTEX_ATTRIB_STRIDE: std::os::raw::c_uint = 0x82E5;
    pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT: std::os::raw::c_uint = 0x8DE2;
    pub const GL_MAX_VERTEX_HINT_PGI: std::os::raw::c_uint = 0x1A22D;
    pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: std::os::raw::c_uint = 0x90CA;
    pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: std::os::raw::c_uint = 0x9122;
    pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: std::os::raw::c_uint = 0x87C5;
    pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT: std::os::raw::c_uint = 0x87C7;
    pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT: std::os::raw::c_uint = 0x87C9;
    pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: std::os::raw::c_uint = 0x87C8;
    pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: std::os::raw::c_uint = 0x90D6;
    pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT: std::os::raw::c_uint = 0x87C6;
    pub const GL_MAX_VERTEX_STREAMS: std::os::raw::c_uint = 0x8E71;
    pub const GL_MAX_VERTEX_STREAMS_ATI: std::os::raw::c_uint = 0x876B;
    pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: std::os::raw::c_uint = 0x8B4C;
    pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: std::os::raw::c_uint = 0x8B4C;
    pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: std::os::raw::c_uint = 0x8A2B;
    pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: std::os::raw::c_uint = 0x8B4A;
    pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: std::os::raw::c_uint = 0x8B4A;
    pub const GL_MAX_VERTEX_UNIFORM_VECTORS: std::os::raw::c_uint = 0x8DFB;
    pub const GL_MAX_VERTEX_UNITS_ARB: std::os::raw::c_uint = 0x86A4;
    pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: std::os::raw::c_uint = 0x8DDE;
    pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT: std::os::raw::c_uint = 0x8DDE;
    pub const GL_MAX_VIEWPORTS: std::os::raw::c_uint = 0x825B;
    pub const GL_MAX_VIEWPORT_DIMS: std::os::raw::c_uint = 0x0D3A;
    pub const GL_MAX_VIEWS_OVR: std::os::raw::c_uint = 0x9631;
    pub const GL_MAX_WIDTH: std::os::raw::c_uint = 0x827E;
    pub const GL_MAX_WINDOW_RECTANGLES_EXT: std::os::raw::c_uint = 0x8F14;
    pub const GL_MEDIUM_FLOAT: std::os::raw::c_uint = 0x8DF1;
    pub const GL_MEDIUM_INT: std::os::raw::c_uint = 0x8DF4;
    pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV: std::os::raw::c_uint = 0x95A6;
    pub const GL_MEMORY_ATTACHABLE_NV: std::os::raw::c_uint = 0x95A8;
    pub const GL_MEMORY_ATTACHABLE_SIZE_NV: std::os::raw::c_uint = 0x95A7;
    pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: std::os::raw::c_uint = 0x9543;
    pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: std::os::raw::c_uint = 0x92DF;
    pub const GL_MESH_OUTPUT_TYPE_NV: std::os::raw::c_uint = 0x957B;
    pub const GL_MESH_PRIMITIVES_OUT_NV: std::os::raw::c_uint = 0x957A;
    pub const GL_MESH_SHADER_BIT_NV: std::os::raw::c_uint = 0x00000040;
    pub const GL_MESH_SHADER_NV: std::os::raw::c_uint = 0x9559;
    pub const GL_MESH_SUBROUTINE_NV: std::os::raw::c_uint = 0x957C;
    pub const GL_MESH_SUBROUTINE_UNIFORM_NV: std::os::raw::c_uint = 0x957E;
    pub const GL_MESH_VERTICES_OUT_NV: std::os::raw::c_uint = 0x9579;
    pub const GL_MESH_WORK_GROUP_SIZE_NV: std::os::raw::c_uint = 0x953E;
    pub const GL_MIN: std::os::raw::c_uint = 0x8007;
    pub const GL_MINMAX_EXT: std::os::raw::c_uint = 0x802E;
    pub const GL_MINMAX_FORMAT_EXT: std::os::raw::c_uint = 0x802F;
    pub const GL_MINMAX_SINK_EXT: std::os::raw::c_uint = 0x8030;
    pub const GL_MINOR_VERSION: std::os::raw::c_uint = 0x821C;
    pub const GL_MINUS_CLAMPED_NV: std::os::raw::c_uint = 0x92B3;
    pub const GL_MINUS_NV: std::os::raw::c_uint = 0x929F;
    pub const GL_MIN_EXT: std::os::raw::c_uint = 0x8007;
    pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: std::os::raw::c_uint = 0x8E5B;
    pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: std::os::raw::c_uint = 0x8E5B;
    pub const GL_MIN_LOD_WARNING_AMD: std::os::raw::c_uint = 0x919C;
    pub const GL_MIN_MAP_BUFFER_ALIGNMENT: std::os::raw::c_uint = 0x90BC;
    pub const GL_MIN_PROGRAM_TEXEL_OFFSET: std::os::raw::c_uint = 0x8904;
    pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT: std::os::raw::c_uint = 0x8904;
    pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV: std::os::raw::c_uint = 0x8904;
    pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: std::os::raw::c_uint = 0x8E5E;
    pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: std::os::raw::c_uint = 0x8E5E;
    pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: std::os::raw::c_uint = 0x8E5E;
    pub const GL_MIN_SAMPLE_SHADING_VALUE: std::os::raw::c_uint = 0x8C37;
    pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: std::os::raw::c_uint = 0x8C37;
    pub const GL_MIN_SPARSE_LEVEL_AMD: std::os::raw::c_uint = 0x919B;
    pub const GL_MIPMAP: std::os::raw::c_uint = 0x8293;
    pub const GL_MIRRORED_REPEAT: std::os::raw::c_uint = 0x8370;
    pub const GL_MIRRORED_REPEAT_ARB: std::os::raw::c_uint = 0x8370;
    pub const GL_MIRRORED_REPEAT_IBM: std::os::raw::c_uint = 0x8370;
    pub const GL_MIRROR_CLAMP_ATI: std::os::raw::c_uint = 0x8742;
    pub const GL_MIRROR_CLAMP_EXT: std::os::raw::c_uint = 0x8742;
    pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: std::os::raw::c_uint = 0x8912;
    pub const GL_MIRROR_CLAMP_TO_EDGE: std::os::raw::c_uint = 0x8743;
    pub const GL_MIRROR_CLAMP_TO_EDGE_ATI: std::os::raw::c_uint = 0x8743;
    pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: std::os::raw::c_uint = 0x8743;
    pub const GL_MITER_REVERT_NV: std::os::raw::c_uint = 0x90A7;
    pub const GL_MITER_TRUNCATE_NV: std::os::raw::c_uint = 0x90A8;
    pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV: std::os::raw::c_uint = 0x932F;
    pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV: std::os::raw::c_uint = 0x9330;
    pub const GL_MODELVIEW0_ARB: std::os::raw::c_uint = 0x1700;
    pub const GL_MODELVIEW0_EXT: std::os::raw::c_uint = 0x1700;
    pub const GL_MODELVIEW0_MATRIX_EXT: std::os::raw::c_uint = 0x0BA6;
    pub const GL_MODELVIEW0_STACK_DEPTH_EXT: std::os::raw::c_uint = 0x0BA3;
    pub const GL_MODELVIEW10_ARB: std::os::raw::c_uint = 0x872A;
    pub const GL_MODELVIEW11_ARB: std::os::raw::c_uint = 0x872B;
    pub const GL_MODELVIEW12_ARB: std::os::raw::c_uint = 0x872C;
    pub const GL_MODELVIEW13_ARB: std::os::raw::c_uint = 0x872D;
    pub const GL_MODELVIEW14_ARB: std::os::raw::c_uint = 0x872E;
    pub const GL_MODELVIEW15_ARB: std::os::raw::c_uint = 0x872F;
    pub const GL_MODELVIEW16_ARB: std::os::raw::c_uint = 0x8730;
    pub const GL_MODELVIEW17_ARB: std::os::raw::c_uint = 0x8731;
    pub const GL_MODELVIEW18_ARB: std::os::raw::c_uint = 0x8732;
    pub const GL_MODELVIEW19_ARB: std::os::raw::c_uint = 0x8733;
    pub const GL_MODELVIEW1_ARB: std::os::raw::c_uint = 0x850A;
    pub const GL_MODELVIEW1_EXT: std::os::raw::c_uint = 0x850A;
    pub const GL_MODELVIEW1_MATRIX_EXT: std::os::raw::c_uint = 0x8506;
    pub const GL_MODELVIEW1_STACK_DEPTH_EXT: std::os::raw::c_uint = 0x8502;
    pub const GL_MODELVIEW20_ARB: std::os::raw::c_uint = 0x8734;
    pub const GL_MODELVIEW21_ARB: std::os::raw::c_uint = 0x8735;
    pub const GL_MODELVIEW22_ARB: std::os::raw::c_uint = 0x8736;
    pub const GL_MODELVIEW23_ARB: std::os::raw::c_uint = 0x8737;
    pub const GL_MODELVIEW24_ARB: std::os::raw::c_uint = 0x8738;
    pub const GL_MODELVIEW25_ARB: std::os::raw::c_uint = 0x8739;
    pub const GL_MODELVIEW26_ARB: std::os::raw::c_uint = 0x873A;
    pub const GL_MODELVIEW27_ARB: std::os::raw::c_uint = 0x873B;
    pub const GL_MODELVIEW28_ARB: std::os::raw::c_uint = 0x873C;
    pub const GL_MODELVIEW29_ARB: std::os::raw::c_uint = 0x873D;
    pub const GL_MODELVIEW2_ARB: std::os::raw::c_uint = 0x8722;
    pub const GL_MODELVIEW30_ARB: std::os::raw::c_uint = 0x873E;
    pub const GL_MODELVIEW31_ARB: std::os::raw::c_uint = 0x873F;
    pub const GL_MODELVIEW3_ARB: std::os::raw::c_uint = 0x8723;
    pub const GL_MODELVIEW4_ARB: std::os::raw::c_uint = 0x8724;
    pub const GL_MODELVIEW5_ARB: std::os::raw::c_uint = 0x8725;
    pub const GL_MODELVIEW6_ARB: std::os::raw::c_uint = 0x8726;
    pub const GL_MODELVIEW7_ARB: std::os::raw::c_uint = 0x8727;
    pub const GL_MODELVIEW8_ARB: std::os::raw::c_uint = 0x8728;
    pub const GL_MODELVIEW9_ARB: std::os::raw::c_uint = 0x8729;
    pub const GL_MODELVIEW_PROJECTION_NV: std::os::raw::c_uint = 0x8629;
    pub const GL_MODULATE_ADD_ATI: std::os::raw::c_uint = 0x8744;
    pub const GL_MODULATE_SIGNED_ADD_ATI: std::os::raw::c_uint = 0x8745;
    pub const GL_MODULATE_SUBTRACT_ATI: std::os::raw::c_uint = 0x8746;
    pub const GL_MOVE_TO_CONTINUES_NV: std::os::raw::c_uint = 0x90B6;
    pub const GL_MOVE_TO_NV: std::os::raw::c_uint = 0x02;
    pub const GL_MOVE_TO_RESETS_NV: std::os::raw::c_uint = 0x90B5;
    pub const GL_MOV_ATI: std::os::raw::c_uint = 0x8961;
    pub const GL_MULTICAST_GPUS_NV: std::os::raw::c_uint = 0x92BA;
    pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV: std::os::raw::c_uint = 0x9549;
    pub const GL_MULTIPLY_KHR: std::os::raw::c_uint = 0x9294;
    pub const GL_MULTIPLY_NV: std::os::raw::c_uint = 0x9294;
    pub const GL_MULTISAMPLE: std::os::raw::c_uint = 0x809D;
    pub const GL_MULTISAMPLES_NV: std::os::raw::c_uint = 0x9371;
    pub const GL_MULTISAMPLE_3DFX: std::os::raw::c_uint = 0x86B2;
    pub const GL_MULTISAMPLE_ARB: std::os::raw::c_uint = 0x809D;
    pub const GL_MULTISAMPLE_BIT_3DFX: std::os::raw::c_uint = 0x20000000;
    pub const GL_MULTISAMPLE_BIT_ARB: std::os::raw::c_uint = 0x20000000;
    pub const GL_MULTISAMPLE_BIT_EXT: std::os::raw::c_uint = 0x20000000;
    pub const GL_MULTISAMPLE_COVERAGE_MODES_NV: std::os::raw::c_uint = 0x8E12;
    pub const GL_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x809D;
    pub const GL_MULTISAMPLE_FILTER_HINT_NV: std::os::raw::c_uint = 0x8534;
    pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: std::os::raw::c_uint = 0x9382;
    pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB: std::os::raw::c_uint = 0x9381;
    pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: std::os::raw::c_uint = 0x932B;
    pub const GL_MULTISAMPLE_SGIS: std::os::raw::c_uint = 0x809D;
    pub const GL_MUL_ATI: std::os::raw::c_uint = 0x8964;
    pub const GL_MVP_MATRIX_EXT: std::os::raw::c_uint = 0x87E3;
    pub const GL_NAMED_STRING_LENGTH_ARB: std::os::raw::c_uint = 0x8DE9;
    pub const GL_NAMED_STRING_TYPE_ARB: std::os::raw::c_uint = 0x8DEA;
    pub const GL_NAME_LENGTH: std::os::raw::c_uint = 0x92F9;
    pub const GL_NAND: std::os::raw::c_uint = 0x150E;
    pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI: std::os::raw::c_uint = 0x1A203;
    pub const GL_NATIVE_GRAPHICS_END_HINT_PGI: std::os::raw::c_uint = 0x1A204;
    pub const GL_NATIVE_GRAPHICS_HANDLE_PGI: std::os::raw::c_uint = 0x1A202;
    pub const GL_NEAREST: std::os::raw::c_uint = 0x2600;
    pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX: std::os::raw::c_uint = 0x844E;
    pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX: std::os::raw::c_uint = 0x844D;
    pub const GL_NEAREST_MIPMAP_LINEAR: std::os::raw::c_uint = 0x2702;
    pub const GL_NEAREST_MIPMAP_NEAREST: std::os::raw::c_uint = 0x2700;
    pub const GL_NEGATE_BIT_ATI: std::os::raw::c_uint = 0x00000004;
    pub const GL_NEGATIVE_ONE_EXT: std::os::raw::c_uint = 0x87DF;
    pub const GL_NEGATIVE_ONE_TO_ONE: std::os::raw::c_uint = 0x935E;
    pub const GL_NEGATIVE_W_EXT: std::os::raw::c_uint = 0x87DC;
    pub const GL_NEGATIVE_X_EXT: std::os::raw::c_uint = 0x87D9;
    pub const GL_NEGATIVE_Y_EXT: std::os::raw::c_uint = 0x87DA;
    pub const GL_NEGATIVE_Z_EXT: std::os::raw::c_uint = 0x87DB;
    pub const GL_NEVER: std::os::raw::c_uint = 0x0200;
    pub const GL_NEXT_BUFFER_NV: std::os::raw::c_int = -2;
    pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: std::os::raw::c_uint = 0x9025;
    pub const GL_NICEST: std::os::raw::c_uint = 0x1102;
    pub const GL_NONE: std::os::raw::c_uint = 0;
    pub const GL_NOOP: std::os::raw::c_uint = 0x1505;
    pub const GL_NOP_COMMAND_NV: std::os::raw::c_uint = 0x0001;
    pub const GL_NOR: std::os::raw::c_uint = 0x1508;
    pub const GL_NORMALIZED_RANGE_EXT: std::os::raw::c_uint = 0x87E0;
    pub const GL_NORMAL_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F22;
    pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8897;
    pub const GL_NORMAL_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x8080;
    pub const GL_NORMAL_ARRAY_EXT: std::os::raw::c_uint = 0x8075;
    pub const GL_NORMAL_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2C;
    pub const GL_NORMAL_ARRAY_LIST_IBM: std::os::raw::c_uint = 103071;
    pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103081;
    pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: std::os::raw::c_uint = 0x83F6;
    pub const GL_NORMAL_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x808F;
    pub const GL_NORMAL_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x807F;
    pub const GL_NORMAL_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x807E;
    pub const GL_NORMAL_BIT_PGI: std::os::raw::c_uint = 0x08000000;
    pub const GL_NORMAL_MAP_ARB: std::os::raw::c_uint = 0x8511;
    pub const GL_NORMAL_MAP_EXT: std::os::raw::c_uint = 0x8511;
    pub const GL_NORMAL_MAP_NV: std::os::raw::c_uint = 0x8511;
    pub const GL_NOTEQUAL: std::os::raw::c_uint = 0x0205;
    pub const GL_NO_ERROR: std::os::raw::c_uint = 0;
    pub const GL_NO_RESET_NOTIFICATION: std::os::raw::c_uint = 0x8261;
    pub const GL_NO_RESET_NOTIFICATION_ARB: std::os::raw::c_uint = 0x8261;
    pub const GL_NUM_ACTIVE_VARIABLES: std::os::raw::c_uint = 0x9304;
    pub const GL_NUM_COMPATIBLE_SUBROUTINES: std::os::raw::c_uint = 0x8E4A;
    pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: std::os::raw::c_uint = 0x86A2;
    pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: std::os::raw::c_uint = 0x86A2;
    pub const GL_NUM_DEVICE_UUIDS_EXT: std::os::raw::c_uint = 0x9596;
    pub const GL_NUM_EXTENSIONS: std::os::raw::c_uint = 0x821D;
    pub const GL_NUM_FILL_STREAMS_NV: std::os::raw::c_uint = 0x8E29;
    pub const GL_NUM_FRAGMENT_CONSTANTS_ATI: std::os::raw::c_uint = 0x896F;
    pub const GL_NUM_FRAGMENT_REGISTERS_ATI: std::os::raw::c_uint = 0x896E;
    pub const GL_NUM_GENERAL_COMBINERS_NV: std::os::raw::c_uint = 0x854E;
    pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: std::os::raw::c_uint = 0x8973;
    pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI: std::os::raw::c_uint = 0x8971;
    pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI: std::os::raw::c_uint = 0x8972;
    pub const GL_NUM_LOOPBACK_COMPONENTS_ATI: std::os::raw::c_uint = 0x8974;
    pub const GL_NUM_PASSES_ATI: std::os::raw::c_uint = 0x8970;
    pub const GL_NUM_PROGRAM_BINARY_FORMATS: std::os::raw::c_uint = 0x87FE;
    pub const GL_NUM_SAMPLE_COUNTS: std::os::raw::c_uint = 0x9380;
    pub const GL_NUM_SHADER_BINARY_FORMATS: std::os::raw::c_uint = 0x8DF9;
    pub const GL_NUM_SHADING_LANGUAGE_VERSIONS: std::os::raw::c_uint = 0x82E9;
    pub const GL_NUM_SPARSE_LEVELS_ARB: std::os::raw::c_uint = 0x91AA;
    pub const GL_NUM_SPIR_V_EXTENSIONS: std::os::raw::c_uint = 0x9554;
    pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: std::os::raw::c_uint = 0x91B6;
    pub const GL_NUM_TILING_TYPES_EXT: std::os::raw::c_uint = 0x9582;
    pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV: std::os::raw::c_uint = 0x9024;
    pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB: std::os::raw::c_uint = 0x91A8;
    pub const GL_NUM_WINDOW_RECTANGLES_EXT: std::os::raw::c_uint = 0x8F15;
    pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: std::os::raw::c_uint = 0x8B89;
    pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: std::os::raw::c_uint = 0x8B8A;
    pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: std::os::raw::c_uint = 0x8B86;
    pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: std::os::raw::c_uint = 0x8B87;
    pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: std::os::raw::c_uint = 0x8B85;
    pub const GL_OBJECT_BUFFER_SIZE_ATI: std::os::raw::c_uint = 0x8764;
    pub const GL_OBJECT_BUFFER_USAGE_ATI: std::os::raw::c_uint = 0x8765;
    pub const GL_OBJECT_COMPILE_STATUS_ARB: std::os::raw::c_uint = 0x8B81;
    pub const GL_OBJECT_DELETE_STATUS_ARB: std::os::raw::c_uint = 0x8B80;
    pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS: std::os::raw::c_uint = 0x81F3;
    pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS: std::os::raw::c_uint = 0x81F1;
    pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: std::os::raw::c_uint = 0x8B84;
    pub const GL_OBJECT_LINE_SGIS: std::os::raw::c_uint = 0x81F7;
    pub const GL_OBJECT_LINK_STATUS_ARB: std::os::raw::c_uint = 0x8B82;
    pub const GL_OBJECT_POINT_SGIS: std::os::raw::c_uint = 0x81F5;
    pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: std::os::raw::c_uint = 0x8B88;
    pub const GL_OBJECT_SUBTYPE_ARB: std::os::raw::c_uint = 0x8B4F;
    pub const GL_OBJECT_TYPE: std::os::raw::c_uint = 0x9112;
    pub const GL_OBJECT_TYPE_ARB: std::os::raw::c_uint = 0x8B4E;
    pub const GL_OBJECT_VALIDATE_STATUS_ARB: std::os::raw::c_uint = 0x8B83;
    pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD: std::os::raw::c_uint = 0x874F;
    pub const GL_OCCLUSION_TEST_HP: std::os::raw::c_uint = 0x8165;
    pub const GL_OCCLUSION_TEST_RESULT_HP: std::os::raw::c_uint = 0x8166;
    pub const GL_OFFSET: std::os::raw::c_uint = 0x92FC;
    pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: std::os::raw::c_uint = 0x8856;
    pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x8857;
    pub const GL_OFFSET_HILO_TEXTURE_2D_NV: std::os::raw::c_uint = 0x8854;
    pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x8855;
    pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV: std::os::raw::c_uint = 0x8850;
    pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: std::os::raw::c_uint = 0x8851;
    pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x8852;
    pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: std::os::raw::c_uint = 0x8853;
    pub const GL_OFFSET_TEXTURE_2D_BIAS_NV: std::os::raw::c_uint = 0x86E3;
    pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV: std::os::raw::c_uint = 0x86E1;
    pub const GL_OFFSET_TEXTURE_2D_NV: std::os::raw::c_uint = 0x86E8;
    pub const GL_OFFSET_TEXTURE_2D_SCALE_NV: std::os::raw::c_uint = 0x86E2;
    pub const GL_OFFSET_TEXTURE_BIAS_NV: std::os::raw::c_uint = 0x86E3;
    pub const GL_OFFSET_TEXTURE_MATRIX_NV: std::os::raw::c_uint = 0x86E1;
    pub const GL_OFFSET_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x864C;
    pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV: std::os::raw::c_uint = 0x864D;
    pub const GL_OFFSET_TEXTURE_SCALE_NV: std::os::raw::c_uint = 0x86E2;
    pub const GL_ONE: std::os::raw::c_uint = 1;
    pub const GL_ONE_EXT: std::os::raw::c_uint = 0x87DE;
    pub const GL_ONE_MINUS_CONSTANT_ALPHA: std::os::raw::c_uint = 0x8004;
    pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT: std::os::raw::c_uint = 0x8004;
    pub const GL_ONE_MINUS_CONSTANT_COLOR: std::os::raw::c_uint = 0x8002;
    pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT: std::os::raw::c_uint = 0x8002;
    pub const GL_ONE_MINUS_DST_ALPHA: std::os::raw::c_uint = 0x0305;
    pub const GL_ONE_MINUS_DST_COLOR: std::os::raw::c_uint = 0x0307;
    pub const GL_ONE_MINUS_SRC1_ALPHA: std::os::raw::c_uint = 0x88FB;
    pub const GL_ONE_MINUS_SRC1_COLOR: std::os::raw::c_uint = 0x88FA;
    pub const GL_ONE_MINUS_SRC_ALPHA: std::os::raw::c_uint = 0x0303;
    pub const GL_ONE_MINUS_SRC_COLOR: std::os::raw::c_uint = 0x0301;
    pub const GL_OPERAND0_ALPHA_ARB: std::os::raw::c_uint = 0x8598;
    pub const GL_OPERAND0_ALPHA_EXT: std::os::raw::c_uint = 0x8598;
    pub const GL_OPERAND0_RGB_ARB: std::os::raw::c_uint = 0x8590;
    pub const GL_OPERAND0_RGB_EXT: std::os::raw::c_uint = 0x8590;
    pub const GL_OPERAND1_ALPHA_ARB: std::os::raw::c_uint = 0x8599;
    pub const GL_OPERAND1_ALPHA_EXT: std::os::raw::c_uint = 0x8599;
    pub const GL_OPERAND1_RGB_ARB: std::os::raw::c_uint = 0x8591;
    pub const GL_OPERAND1_RGB_EXT: std::os::raw::c_uint = 0x8591;
    pub const GL_OPERAND2_ALPHA_ARB: std::os::raw::c_uint = 0x859A;
    pub const GL_OPERAND2_ALPHA_EXT: std::os::raw::c_uint = 0x859A;
    pub const GL_OPERAND2_RGB_ARB: std::os::raw::c_uint = 0x8592;
    pub const GL_OPERAND2_RGB_EXT: std::os::raw::c_uint = 0x8592;
    pub const GL_OPERAND3_ALPHA_NV: std::os::raw::c_uint = 0x859B;
    pub const GL_OPERAND3_RGB_NV: std::os::raw::c_uint = 0x8593;
    pub const GL_OPTIMAL_TILING_EXT: std::os::raw::c_uint = 0x9584;
    pub const GL_OP_ADD_EXT: std::os::raw::c_uint = 0x8787;
    pub const GL_OP_CLAMP_EXT: std::os::raw::c_uint = 0x878E;
    pub const GL_OP_CROSS_PRODUCT_EXT: std::os::raw::c_uint = 0x8797;
    pub const GL_OP_DOT3_EXT: std::os::raw::c_uint = 0x8784;
    pub const GL_OP_DOT4_EXT: std::os::raw::c_uint = 0x8785;
    pub const GL_OP_EXP_BASE_2_EXT: std::os::raw::c_uint = 0x8791;
    pub const GL_OP_FLOOR_EXT: std::os::raw::c_uint = 0x878F;
    pub const GL_OP_FRAC_EXT: std::os::raw::c_uint = 0x8789;
    pub const GL_OP_INDEX_EXT: std::os::raw::c_uint = 0x8782;
    pub const GL_OP_LOG_BASE_2_EXT: std::os::raw::c_uint = 0x8792;
    pub const GL_OP_MADD_EXT: std::os::raw::c_uint = 0x8788;
    pub const GL_OP_MAX_EXT: std::os::raw::c_uint = 0x878A;
    pub const GL_OP_MIN_EXT: std::os::raw::c_uint = 0x878B;
    pub const GL_OP_MOV_EXT: std::os::raw::c_uint = 0x8799;
    pub const GL_OP_MULTIPLY_MATRIX_EXT: std::os::raw::c_uint = 0x8798;
    pub const GL_OP_MUL_EXT: std::os::raw::c_uint = 0x8786;
    pub const GL_OP_NEGATE_EXT: std::os::raw::c_uint = 0x8783;
    pub const GL_OP_POWER_EXT: std::os::raw::c_uint = 0x8793;
    pub const GL_OP_RECIP_EXT: std::os::raw::c_uint = 0x8794;
    pub const GL_OP_RECIP_SQRT_EXT: std::os::raw::c_uint = 0x8795;
    pub const GL_OP_ROUND_EXT: std::os::raw::c_uint = 0x8790;
    pub const GL_OP_SET_GE_EXT: std::os::raw::c_uint = 0x878C;
    pub const GL_OP_SET_LT_EXT: std::os::raw::c_uint = 0x878D;
    pub const GL_OP_SUB_EXT: std::os::raw::c_uint = 0x8796;
    pub const GL_OR: std::os::raw::c_uint = 0x1507;
    pub const GL_OR_INVERTED: std::os::raw::c_uint = 0x150D;
    pub const GL_OR_REVERSE: std::os::raw::c_uint = 0x150B;
    pub const GL_OUTPUT_COLOR0_EXT: std::os::raw::c_uint = 0x879B;
    pub const GL_OUTPUT_COLOR1_EXT: std::os::raw::c_uint = 0x879C;
    pub const GL_OUTPUT_FOG_EXT: std::os::raw::c_uint = 0x87BD;
    pub const GL_OUTPUT_TEXTURE_COORD0_EXT: std::os::raw::c_uint = 0x879D;
    pub const GL_OUTPUT_TEXTURE_COORD10_EXT: std::os::raw::c_uint = 0x87A7;
    pub const GL_OUTPUT_TEXTURE_COORD11_EXT: std::os::raw::c_uint = 0x87A8;
    pub const GL_OUTPUT_TEXTURE_COORD12_EXT: std::os::raw::c_uint = 0x87A9;
    pub const GL_OUTPUT_TEXTURE_COORD13_EXT: std::os::raw::c_uint = 0x87AA;
    pub const GL_OUTPUT_TEXTURE_COORD14_EXT: std::os::raw::c_uint = 0x87AB;
    pub const GL_OUTPUT_TEXTURE_COORD15_EXT: std::os::raw::c_uint = 0x87AC;
    pub const GL_OUTPUT_TEXTURE_COORD16_EXT: std::os::raw::c_uint = 0x87AD;
    pub const GL_OUTPUT_TEXTURE_COORD17_EXT: std::os::raw::c_uint = 0x87AE;
    pub const GL_OUTPUT_TEXTURE_COORD18_EXT: std::os::raw::c_uint = 0x87AF;
    pub const GL_OUTPUT_TEXTURE_COORD19_EXT: std::os::raw::c_uint = 0x87B0;
    pub const GL_OUTPUT_TEXTURE_COORD1_EXT: std::os::raw::c_uint = 0x879E;
    pub const GL_OUTPUT_TEXTURE_COORD20_EXT: std::os::raw::c_uint = 0x87B1;
    pub const GL_OUTPUT_TEXTURE_COORD21_EXT: std::os::raw::c_uint = 0x87B2;
    pub const GL_OUTPUT_TEXTURE_COORD22_EXT: std::os::raw::c_uint = 0x87B3;
    pub const GL_OUTPUT_TEXTURE_COORD23_EXT: std::os::raw::c_uint = 0x87B4;
    pub const GL_OUTPUT_TEXTURE_COORD24_EXT: std::os::raw::c_uint = 0x87B5;
    pub const GL_OUTPUT_TEXTURE_COORD25_EXT: std::os::raw::c_uint = 0x87B6;
    pub const GL_OUTPUT_TEXTURE_COORD26_EXT: std::os::raw::c_uint = 0x87B7;
    pub const GL_OUTPUT_TEXTURE_COORD27_EXT: std::os::raw::c_uint = 0x87B8;
    pub const GL_OUTPUT_TEXTURE_COORD28_EXT: std::os::raw::c_uint = 0x87B9;
    pub const GL_OUTPUT_TEXTURE_COORD29_EXT: std::os::raw::c_uint = 0x87BA;
    pub const GL_OUTPUT_TEXTURE_COORD2_EXT: std::os::raw::c_uint = 0x879F;
    pub const GL_OUTPUT_TEXTURE_COORD30_EXT: std::os::raw::c_uint = 0x87BB;
    pub const GL_OUTPUT_TEXTURE_COORD31_EXT: std::os::raw::c_uint = 0x87BC;
    pub const GL_OUTPUT_TEXTURE_COORD3_EXT: std::os::raw::c_uint = 0x87A0;
    pub const GL_OUTPUT_TEXTURE_COORD4_EXT: std::os::raw::c_uint = 0x87A1;
    pub const GL_OUTPUT_TEXTURE_COORD5_EXT: std::os::raw::c_uint = 0x87A2;
    pub const GL_OUTPUT_TEXTURE_COORD6_EXT: std::os::raw::c_uint = 0x87A3;
    pub const GL_OUTPUT_TEXTURE_COORD7_EXT: std::os::raw::c_uint = 0x87A4;
    pub const GL_OUTPUT_TEXTURE_COORD8_EXT: std::os::raw::c_uint = 0x87A5;
    pub const GL_OUTPUT_TEXTURE_COORD9_EXT: std::os::raw::c_uint = 0x87A6;
    pub const GL_OUTPUT_VERTEX_EXT: std::os::raw::c_uint = 0x879A;
    pub const GL_OUT_OF_MEMORY: std::os::raw::c_uint = 0x0505;
    pub const GL_OVERLAY_KHR: std::os::raw::c_uint = 0x9296;
    pub const GL_OVERLAY_NV: std::os::raw::c_uint = 0x9296;
    pub const GL_PACK_ALIGNMENT: std::os::raw::c_uint = 0x0D05;
    pub const GL_PACK_CMYK_HINT_EXT: std::os::raw::c_uint = 0x800E;
    pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: std::os::raw::c_uint = 0x912D;
    pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: std::os::raw::c_uint = 0x912C;
    pub const GL_PACK_COMPRESSED_BLOCK_SIZE: std::os::raw::c_uint = 0x912E;
    pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: std::os::raw::c_uint = 0x912B;
    pub const GL_PACK_IMAGE_DEPTH_SGIS: std::os::raw::c_uint = 0x8131;
    pub const GL_PACK_IMAGE_HEIGHT: std::os::raw::c_uint = 0x806C;
    pub const GL_PACK_IMAGE_HEIGHT_EXT: std::os::raw::c_uint = 0x806C;
    pub const GL_PACK_INVERT_MESA: std::os::raw::c_uint = 0x8758;
    pub const GL_PACK_LSB_FIRST: std::os::raw::c_uint = 0x0D01;
    pub const GL_PACK_RESAMPLE_OML: std::os::raw::c_uint = 0x8984;
    pub const GL_PACK_RESAMPLE_SGIX: std::os::raw::c_uint = 0x842E;
    pub const GL_PACK_ROW_BYTES_APPLE: std::os::raw::c_uint = 0x8A15;
    pub const GL_PACK_ROW_LENGTH: std::os::raw::c_uint = 0x0D02;
    pub const GL_PACK_SKIP_IMAGES: std::os::raw::c_uint = 0x806B;
    pub const GL_PACK_SKIP_IMAGES_EXT: std::os::raw::c_uint = 0x806B;
    pub const GL_PACK_SKIP_PIXELS: std::os::raw::c_uint = 0x0D04;
    pub const GL_PACK_SKIP_ROWS: std::os::raw::c_uint = 0x0D03;
    pub const GL_PACK_SKIP_VOLUMES_SGIS: std::os::raw::c_uint = 0x8130;
    pub const GL_PACK_SUBSAMPLE_RATE_SGIX: std::os::raw::c_uint = 0x85A0;
    pub const GL_PACK_SWAP_BYTES: std::os::raw::c_uint = 0x0D00;
    pub const GL_PALETTE4_R5_G6_B5_OES: std::os::raw::c_uint = 0x8B92;
    pub const GL_PALETTE4_RGB5_A1_OES: std::os::raw::c_uint = 0x8B94;
    pub const GL_PALETTE4_RGB8_OES: std::os::raw::c_uint = 0x8B90;
    pub const GL_PALETTE4_RGBA4_OES: std::os::raw::c_uint = 0x8B93;
    pub const GL_PALETTE4_RGBA8_OES: std::os::raw::c_uint = 0x8B91;
    pub const GL_PALETTE8_R5_G6_B5_OES: std::os::raw::c_uint = 0x8B97;
    pub const GL_PALETTE8_RGB5_A1_OES: std::os::raw::c_uint = 0x8B99;
    pub const GL_PALETTE8_RGB8_OES: std::os::raw::c_uint = 0x8B95;
    pub const GL_PALETTE8_RGBA4_OES: std::os::raw::c_uint = 0x8B98;
    pub const GL_PALETTE8_RGBA8_OES: std::os::raw::c_uint = 0x8B96;
    pub const GL_PARALLEL_ARRAYS_INTEL: std::os::raw::c_uint = 0x83F4;
    pub const GL_PARAMETER_BUFFER: std::os::raw::c_uint = 0x80EE;
    pub const GL_PARAMETER_BUFFER_ARB: std::os::raw::c_uint = 0x80EE;
    pub const GL_PARAMETER_BUFFER_BINDING: std::os::raw::c_uint = 0x80EF;
    pub const GL_PARAMETER_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x80EF;
    pub const GL_PARTIAL_SUCCESS_NV: std::os::raw::c_uint = 0x902E;
    pub const GL_PASS_THROUGH_NV: std::os::raw::c_uint = 0x86E6;
    pub const GL_PATCHES: std::os::raw::c_uint = 0x000E;
    pub const GL_PATCH_DEFAULT_INNER_LEVEL: std::os::raw::c_uint = 0x8E73;
    pub const GL_PATCH_DEFAULT_OUTER_LEVEL: std::os::raw::c_uint = 0x8E74;
    pub const GL_PATCH_VERTICES: std::os::raw::c_uint = 0x8E72;
    pub const GL_PATH_CLIENT_LENGTH_NV: std::os::raw::c_uint = 0x907F;
    pub const GL_PATH_COMMAND_COUNT_NV: std::os::raw::c_uint = 0x909D;
    pub const GL_PATH_COMPUTED_LENGTH_NV: std::os::raw::c_uint = 0x90A0;
    pub const GL_PATH_COORD_COUNT_NV: std::os::raw::c_uint = 0x909E;
    pub const GL_PATH_COVER_DEPTH_FUNC_NV: std::os::raw::c_uint = 0x90BF;
    pub const GL_PATH_DASH_ARRAY_COUNT_NV: std::os::raw::c_uint = 0x909F;
    pub const GL_PATH_DASH_CAPS_NV: std::os::raw::c_uint = 0x907B;
    pub const GL_PATH_DASH_OFFSET_NV: std::os::raw::c_uint = 0x907E;
    pub const GL_PATH_DASH_OFFSET_RESET_NV: std::os::raw::c_uint = 0x90B4;
    pub const GL_PATH_END_CAPS_NV: std::os::raw::c_uint = 0x9076;
    pub const GL_PATH_ERROR_POSITION_NV: std::os::raw::c_uint = 0x90AB;
    pub const GL_PATH_FILL_BOUNDING_BOX_NV: std::os::raw::c_uint = 0x90A1;
    pub const GL_PATH_FILL_COVER_MODE_NV: std::os::raw::c_uint = 0x9082;
    pub const GL_PATH_FILL_MASK_NV: std::os::raw::c_uint = 0x9081;
    pub const GL_PATH_FILL_MODE_NV: std::os::raw::c_uint = 0x9080;
    pub const GL_PATH_FORMAT_PS_NV: std::os::raw::c_uint = 0x9071;
    pub const GL_PATH_FORMAT_SVG_NV: std::os::raw::c_uint = 0x9070;
    pub const GL_PATH_GEN_COEFF_NV: std::os::raw::c_uint = 0x90B1;
    pub const GL_PATH_GEN_COMPONENTS_NV: std::os::raw::c_uint = 0x90B3;
    pub const GL_PATH_GEN_MODE_NV: std::os::raw::c_uint = 0x90B0;
    pub const GL_PATH_INITIAL_DASH_CAP_NV: std::os::raw::c_uint = 0x907C;
    pub const GL_PATH_INITIAL_END_CAP_NV: std::os::raw::c_uint = 0x9077;
    pub const GL_PATH_JOIN_STYLE_NV: std::os::raw::c_uint = 0x9079;
    pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV: std::os::raw::c_uint = 0x0D36;
    pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV: std::os::raw::c_uint = 0x0D38;
    pub const GL_PATH_MITER_LIMIT_NV: std::os::raw::c_uint = 0x907A;
    pub const GL_PATH_MODELVIEW_MATRIX_NV: std::os::raw::c_uint = 0x0BA6;
    pub const GL_PATH_MODELVIEW_NV: std::os::raw::c_uint = 0x1700;
    pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV: std::os::raw::c_uint = 0x0BA3;
    pub const GL_PATH_OBJECT_BOUNDING_BOX_NV: std::os::raw::c_uint = 0x908A;
    pub const GL_PATH_PROJECTION_MATRIX_NV: std::os::raw::c_uint = 0x0BA7;
    pub const GL_PATH_PROJECTION_NV: std::os::raw::c_uint = 0x1701;
    pub const GL_PATH_PROJECTION_STACK_DEPTH_NV: std::os::raw::c_uint = 0x0BA4;
    pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: std::os::raw::c_uint = 0x90BD;
    pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: std::os::raw::c_uint = 0x90BE;
    pub const GL_PATH_STENCIL_FUNC_NV: std::os::raw::c_uint = 0x90B7;
    pub const GL_PATH_STENCIL_REF_NV: std::os::raw::c_uint = 0x90B8;
    pub const GL_PATH_STENCIL_VALUE_MASK_NV: std::os::raw::c_uint = 0x90B9;
    pub const GL_PATH_STROKE_BOUNDING_BOX_NV: std::os::raw::c_uint = 0x90A2;
    pub const GL_PATH_STROKE_COVER_MODE_NV: std::os::raw::c_uint = 0x9083;
    pub const GL_PATH_STROKE_MASK_NV: std::os::raw::c_uint = 0x9084;
    pub const GL_PATH_STROKE_WIDTH_NV: std::os::raw::c_uint = 0x9075;
    pub const GL_PATH_TERMINAL_DASH_CAP_NV: std::os::raw::c_uint = 0x907D;
    pub const GL_PATH_TERMINAL_END_CAP_NV: std::os::raw::c_uint = 0x9078;
    pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: std::os::raw::c_uint = 0x84E3;
    pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV: std::os::raw::c_uint = 0x84E4;
    pub const GL_PERCENTAGE_AMD: std::os::raw::c_uint = 0x8BC3;
    pub const GL_PERFMON_RESULT_AMD: std::os::raw::c_uint = 0x8BC6;
    pub const GL_PERFMON_RESULT_AVAILABLE_AMD: std::os::raw::c_uint = 0x8BC4;
    pub const GL_PERFMON_RESULT_SIZE_AMD: std::os::raw::c_uint = 0x8BC5;
    pub const GL_PERFORMANCE_MONITOR_AMD: std::os::raw::c_uint = 0x9152;
    pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: std::os::raw::c_uint = 0x94FC;
    pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: std::os::raw::c_uint = 0x94FB;
    pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: std::os::raw::c_uint = 0x94FA;
    pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: std::os::raw::c_uint = 0x94F8;
    pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: std::os::raw::c_uint = 0x94F9;
    pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: std::os::raw::c_uint = 0x94FF;
    pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: std::os::raw::c_uint = 0x94F1;
    pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: std::os::raw::c_uint = 0x94F2;
    pub const GL_PERFQUERY_COUNTER_EVENT_INTEL: std::os::raw::c_uint = 0x94F0;
    pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: std::os::raw::c_uint = 0x94FE;
    pub const GL_PERFQUERY_COUNTER_RAW_INTEL: std::os::raw::c_uint = 0x94F4;
    pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: std::os::raw::c_uint = 0x94F3;
    pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: std::os::raw::c_uint = 0x94F5;
    pub const GL_PERFQUERY_DONOT_FLUSH_INTEL: std::os::raw::c_uint = 0x83F9;
    pub const GL_PERFQUERY_FLUSH_INTEL: std::os::raw::c_uint = 0x83FA;
    pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: std::os::raw::c_uint = 0x00000001;
    pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: std::os::raw::c_uint = 0x9500;
    pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: std::os::raw::c_uint = 0x94FD;
    pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL: std::os::raw::c_uint = 0x00000000;
    pub const GL_PERFQUERY_WAIT_INTEL: std::os::raw::c_uint = 0x83FB;
    pub const GL_PERTURB_EXT: std::os::raw::c_uint = 0x85AE;
    pub const GL_PER_GPU_STORAGE_BIT_NV: std::os::raw::c_uint = 0x0800;
    pub const GL_PER_GPU_STORAGE_NV: std::os::raw::c_uint = 0x9548;
    pub const GL_PER_STAGE_CONSTANTS_NV: std::os::raw::c_uint = 0x8535;
    pub const GL_PHONG_HINT_WIN: std::os::raw::c_uint = 0x80EB;
    pub const GL_PHONG_WIN: std::os::raw::c_uint = 0x80EA;
    pub const GL_PINLIGHT_NV: std::os::raw::c_uint = 0x92A8;
    pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD: std::os::raw::c_uint = 0x91AE;
    pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD: std::os::raw::c_uint = 0x91AF;
    pub const GL_PIXEL_BUFFER_BARRIER_BIT: std::os::raw::c_uint = 0x00000080;
    pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000080;
    pub const GL_PIXEL_COUNTER_BITS_NV: std::os::raw::c_uint = 0x8864;
    pub const GL_PIXEL_COUNT_AVAILABLE_NV: std::os::raw::c_uint = 0x8867;
    pub const GL_PIXEL_COUNT_NV: std::os::raw::c_uint = 0x8866;
    pub const GL_PIXEL_CUBIC_WEIGHT_EXT: std::os::raw::c_uint = 0x8333;
    pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: std::os::raw::c_uint = 0x8355;
    pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS: std::os::raw::c_uint = 0x8354;
    pub const GL_PIXEL_GROUP_COLOR_SGIS: std::os::raw::c_uint = 0x8356;
    pub const GL_PIXEL_MAG_FILTER_EXT: std::os::raw::c_uint = 0x8331;
    pub const GL_PIXEL_MIN_FILTER_EXT: std::os::raw::c_uint = 0x8332;
    pub const GL_PIXEL_PACK_BUFFER: std::os::raw::c_uint = 0x88EB;
    pub const GL_PIXEL_PACK_BUFFER_ARB: std::os::raw::c_uint = 0x88EB;
    pub const GL_PIXEL_PACK_BUFFER_BINDING: std::os::raw::c_uint = 0x88ED;
    pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x88ED;
    pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT: std::os::raw::c_uint = 0x88ED;
    pub const GL_PIXEL_PACK_BUFFER_EXT: std::os::raw::c_uint = 0x88EB;
    pub const GL_PIXEL_SUBSAMPLE_2424_SGIX: std::os::raw::c_uint = 0x85A3;
    pub const GL_PIXEL_SUBSAMPLE_4242_SGIX: std::os::raw::c_uint = 0x85A4;
    pub const GL_PIXEL_SUBSAMPLE_4444_SGIX: std::os::raw::c_uint = 0x85A2;
    pub const GL_PIXEL_TEXTURE_SGIS: std::os::raw::c_uint = 0x8353;
    pub const GL_PIXEL_TEX_GEN_MODE_SGIX: std::os::raw::c_uint = 0x832B;
    pub const GL_PIXEL_TEX_GEN_SGIX: std::os::raw::c_uint = 0x8139;
    pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX: std::os::raw::c_uint = 0x813E;
    pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX: std::os::raw::c_uint = 0x813F;
    pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX: std::os::raw::c_uint = 0x8145;
    pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX: std::os::raw::c_uint = 0x8144;
    pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX: std::os::raw::c_uint = 0x8143;
    pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX: std::os::raw::c_uint = 0x8142;
    pub const GL_PIXEL_TILE_HEIGHT_SGIX: std::os::raw::c_uint = 0x8141;
    pub const GL_PIXEL_TILE_WIDTH_SGIX: std::os::raw::c_uint = 0x8140;
    pub const GL_PIXEL_TRANSFORM_2D_EXT: std::os::raw::c_uint = 0x8330;
    pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT: std::os::raw::c_uint = 0x8338;
    pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: std::os::raw::c_uint = 0x8336;
    pub const GL_PIXEL_UNPACK_BUFFER: std::os::raw::c_uint = 0x88EC;
    pub const GL_PIXEL_UNPACK_BUFFER_ARB: std::os::raw::c_uint = 0x88EC;
    pub const GL_PIXEL_UNPACK_BUFFER_BINDING: std::os::raw::c_uint = 0x88EF;
    pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x88EF;
    pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT: std::os::raw::c_uint = 0x88EF;
    pub const GL_PIXEL_UNPACK_BUFFER_EXT: std::os::raw::c_uint = 0x88EC;
    pub const GL_PLUS_CLAMPED_ALPHA_NV: std::os::raw::c_uint = 0x92B2;
    pub const GL_PLUS_CLAMPED_NV: std::os::raw::c_uint = 0x92B1;
    pub const GL_PLUS_DARKER_NV: std::os::raw::c_uint = 0x9292;
    pub const GL_PLUS_NV: std::os::raw::c_uint = 0x9291;
    pub const GL_PN_TRIANGLES_ATI: std::os::raw::c_uint = 0x87F0;
    pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI: std::os::raw::c_uint = 0x87F3;
    pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: std::os::raw::c_uint = 0x87F7;
    pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: std::os::raw::c_uint = 0x87F8;
    pub const GL_PN_TRIANGLES_POINT_MODE_ATI: std::os::raw::c_uint = 0x87F2;
    pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI: std::os::raw::c_uint = 0x87F6;
    pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI: std::os::raw::c_uint = 0x87F5;
    pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI: std::os::raw::c_uint = 0x87F4;
    pub const GL_POINT: std::os::raw::c_uint = 0x1B00;
    pub const GL_POINTS: std::os::raw::c_uint = 0x0000;
    pub const GL_POINT_DISTANCE_ATTENUATION_ARB: std::os::raw::c_uint = 0x8129;
    pub const GL_POINT_FADE_THRESHOLD_SIZE: std::os::raw::c_uint = 0x8128;
    pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB: std::os::raw::c_uint = 0x8128;
    pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT: std::os::raw::c_uint = 0x8128;
    pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS: std::os::raw::c_uint = 0x8128;
    pub const GL_POINT_SIZE: std::os::raw::c_uint = 0x0B11;
    pub const GL_POINT_SIZE_GRANULARITY: std::os::raw::c_uint = 0x0B13;
    pub const GL_POINT_SIZE_MAX_ARB: std::os::raw::c_uint = 0x8127;
    pub const GL_POINT_SIZE_MAX_EXT: std::os::raw::c_uint = 0x8127;
    pub const GL_POINT_SIZE_MAX_SGIS: std::os::raw::c_uint = 0x8127;
    pub const GL_POINT_SIZE_MIN_ARB: std::os::raw::c_uint = 0x8126;
    pub const GL_POINT_SIZE_MIN_EXT: std::os::raw::c_uint = 0x8126;
    pub const GL_POINT_SIZE_MIN_SGIS: std::os::raw::c_uint = 0x8126;
    pub const GL_POINT_SIZE_RANGE: std::os::raw::c_uint = 0x0B12;
    pub const GL_POINT_SPRITE_ARB: std::os::raw::c_uint = 0x8861;
    pub const GL_POINT_SPRITE_COORD_ORIGIN: std::os::raw::c_uint = 0x8CA0;
    pub const GL_POINT_SPRITE_NV: std::os::raw::c_uint = 0x8861;
    pub const GL_POINT_SPRITE_R_MODE_NV: std::os::raw::c_uint = 0x8863;
    pub const GL_POLYGON_MODE: std::os::raw::c_uint = 0x0B40;
    pub const GL_POLYGON_OFFSET_BIAS_EXT: std::os::raw::c_uint = 0x8039;
    pub const GL_POLYGON_OFFSET_CLAMP: std::os::raw::c_uint = 0x8E1B;
    pub const GL_POLYGON_OFFSET_CLAMP_EXT: std::os::raw::c_uint = 0x8E1B;
    pub const GL_POLYGON_OFFSET_COMMAND_NV: std::os::raw::c_uint = 0x000E;
    pub const GL_POLYGON_OFFSET_EXT: std::os::raw::c_uint = 0x8037;
    pub const GL_POLYGON_OFFSET_FACTOR: std::os::raw::c_uint = 0x8038;
    pub const GL_POLYGON_OFFSET_FACTOR_EXT: std::os::raw::c_uint = 0x8038;
    pub const GL_POLYGON_OFFSET_FILL: std::os::raw::c_uint = 0x8037;
    pub const GL_POLYGON_OFFSET_LINE: std::os::raw::c_uint = 0x2A02;
    pub const GL_POLYGON_OFFSET_POINT: std::os::raw::c_uint = 0x2A01;
    pub const GL_POLYGON_OFFSET_UNITS: std::os::raw::c_uint = 0x2A00;
    pub const GL_POLYGON_SMOOTH: std::os::raw::c_uint = 0x0B41;
    pub const GL_POLYGON_SMOOTH_HINT: std::os::raw::c_uint = 0x0C53;
    pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI: std::os::raw::c_uint = 0x80BB;
    pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI: std::os::raw::c_uint = 0x80B7;
    pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI: std::os::raw::c_uint = 0x80BA;
    pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI: std::os::raw::c_uint = 0x80B6;
    pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D2;
    pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI: std::os::raw::c_uint = 0x80B9;
    pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI: std::os::raw::c_uint = 0x80B5;
    pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI: std::os::raw::c_uint = 0x80B8;
    pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI: std::os::raw::c_uint = 0x80B4;
    pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT: std::os::raw::c_uint = 0x8023;
    pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT: std::os::raw::c_uint = 0x801F;
    pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT: std::os::raw::c_uint = 0x8022;
    pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT: std::os::raw::c_uint = 0x801E;
    pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D1;
    pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT: std::os::raw::c_uint = 0x8021;
    pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT: std::os::raw::c_uint = 0x801D;
    pub const GL_POST_CONVOLUTION_RED_BIAS_EXT: std::os::raw::c_uint = 0x8020;
    pub const GL_POST_CONVOLUTION_RED_SCALE_EXT: std::os::raw::c_uint = 0x801C;
    pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: std::os::raw::c_uint = 0x8162;
    pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: std::os::raw::c_uint = 0x817B;
    pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX: std::os::raw::c_uint = 0x8179;
    pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: std::os::raw::c_uint = 0x817C;
    pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX: std::os::raw::c_uint = 0x817A;
    pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI: std::os::raw::c_uint = 0x1A1F8;
    pub const GL_PRESENT_DURATION_NV: std::os::raw::c_uint = 0x8E2B;
    pub const GL_PRESENT_TIME_NV: std::os::raw::c_uint = 0x8E2A;
    pub const GL_PRESERVE_ATI: std::os::raw::c_uint = 0x8762;
    pub const GL_PREVIOUS_ARB: std::os::raw::c_uint = 0x8578;
    pub const GL_PREVIOUS_EXT: std::os::raw::c_uint = 0x8578;
    pub const GL_PREVIOUS_TEXTURE_INPUT_NV: std::os::raw::c_uint = 0x86E4;
    pub const GL_PRIMARY_COLOR_ARB: std::os::raw::c_uint = 0x8577;
    pub const GL_PRIMARY_COLOR_EXT: std::os::raw::c_uint = 0x8577;
    pub const GL_PRIMARY_COLOR_NV: std::os::raw::c_uint = 0x852C;
    pub const GL_PRIMITIVES_GENERATED: std::os::raw::c_uint = 0x8C87;
    pub const GL_PRIMITIVES_GENERATED_EXT: std::os::raw::c_uint = 0x8C87;
    pub const GL_PRIMITIVES_GENERATED_NV: std::os::raw::c_uint = 0x8C87;
    pub const GL_PRIMITIVES_SUBMITTED: std::os::raw::c_uint = 0x82EF;
    pub const GL_PRIMITIVES_SUBMITTED_ARB: std::os::raw::c_uint = 0x82EF;
    pub const GL_PRIMITIVE_BOUNDING_BOX_ARB: std::os::raw::c_uint = 0x92BE;
    pub const GL_PRIMITIVE_ID_NV: std::os::raw::c_uint = 0x8C7C;
    pub const GL_PRIMITIVE_RESTART: std::os::raw::c_uint = 0x8F9D;
    pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: std::os::raw::c_uint = 0x8D69;
    pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED: std::os::raw::c_uint = 0x8221;
    pub const GL_PRIMITIVE_RESTART_INDEX: std::os::raw::c_uint = 0x8F9E;
    pub const GL_PRIMITIVE_RESTART_INDEX_NV: std::os::raw::c_uint = 0x8559;
    pub const GL_PRIMITIVE_RESTART_NV: std::os::raw::c_uint = 0x8558;
    pub const GL_PROGRAM: std::os::raw::c_uint = 0x82E2;
    pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB: std::os::raw::c_uint = 0x9341;
    pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV: std::os::raw::c_uint = 0x9341;
    pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: std::os::raw::c_uint = 0x9340;
    pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: std::os::raw::c_uint = 0x9340;
    pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: std::os::raw::c_uint = 0x88B0;
    pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x8805;
    pub const GL_PROGRAM_ATTRIBS_ARB: std::os::raw::c_uint = 0x88AC;
    pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV: std::os::raw::c_uint = 0x8906;
    pub const GL_PROGRAM_BINARY_FORMATS: std::os::raw::c_uint = 0x87FF;
    pub const GL_PROGRAM_BINARY_FORMAT_MESA: std::os::raw::c_uint = 0x875F;
    pub const GL_PROGRAM_BINARY_LENGTH: std::os::raw::c_uint = 0x8741;
    pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: std::os::raw::c_uint = 0x8257;
    pub const GL_PROGRAM_BINDING_ARB: std::os::raw::c_uint = 0x8677;
    pub const GL_PROGRAM_ERROR_POSITION_ARB: std::os::raw::c_uint = 0x864B;
    pub const GL_PROGRAM_ERROR_POSITION_NV: std::os::raw::c_uint = 0x864B;
    pub const GL_PROGRAM_ERROR_STRING_ARB: std::os::raw::c_uint = 0x8874;
    pub const GL_PROGRAM_ERROR_STRING_NV: std::os::raw::c_uint = 0x8874;
    pub const GL_PROGRAM_FORMAT_ARB: std::os::raw::c_uint = 0x8876;
    pub const GL_PROGRAM_FORMAT_ASCII_ARB: std::os::raw::c_uint = 0x8875;
    pub const GL_PROGRAM_INPUT: std::os::raw::c_uint = 0x92E3;
    pub const GL_PROGRAM_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x88A0;
    pub const GL_PROGRAM_LENGTH_ARB: std::os::raw::c_uint = 0x8627;
    pub const GL_PROGRAM_LENGTH_NV: std::os::raw::c_uint = 0x8627;
    pub const GL_PROGRAM_MATRIX_EXT: std::os::raw::c_uint = 0x8E2D;
    pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT: std::os::raw::c_uint = 0x8E2F;
    pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: std::os::raw::c_uint = 0x88B2;
    pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x8808;
    pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: std::os::raw::c_uint = 0x88AE;
    pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x88A2;
    pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: std::os::raw::c_uint = 0x88AA;
    pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: std::os::raw::c_uint = 0x88A6;
    pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: std::os::raw::c_uint = 0x880A;
    pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x8809;
    pub const GL_PROGRAM_OBJECT_ARB: std::os::raw::c_uint = 0x8B40;
    pub const GL_PROGRAM_OBJECT_EXT: std::os::raw::c_uint = 0x8B40;
    pub const GL_PROGRAM_OUTPUT: std::os::raw::c_uint = 0x92E4;
    pub const GL_PROGRAM_PARAMETERS_ARB: std::os::raw::c_uint = 0x88A8;
    pub const GL_PROGRAM_PARAMETER_NV: std::os::raw::c_uint = 0x8644;
    pub const GL_PROGRAM_PIPELINE: std::os::raw::c_uint = 0x82E4;
    pub const GL_PROGRAM_PIPELINE_BINDING: std::os::raw::c_uint = 0x825A;
    pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: std::os::raw::c_uint = 0x8A4F;
    pub const GL_PROGRAM_POINT_SIZE: std::os::raw::c_uint = 0x8642;
    pub const GL_PROGRAM_POINT_SIZE_ARB: std::os::raw::c_uint = 0x8642;
    pub const GL_PROGRAM_POINT_SIZE_EXT: std::os::raw::c_uint = 0x8642;
    pub const GL_PROGRAM_RESIDENT_NV: std::os::raw::c_uint = 0x8647;
    pub const GL_PROGRAM_RESULT_COMPONENTS_NV: std::os::raw::c_uint = 0x8907;
    pub const GL_PROGRAM_SEPARABLE: std::os::raw::c_uint = 0x8258;
    pub const GL_PROGRAM_STRING_ARB: std::os::raw::c_uint = 0x8628;
    pub const GL_PROGRAM_STRING_NV: std::os::raw::c_uint = 0x8628;
    pub const GL_PROGRAM_TARGET_NV: std::os::raw::c_uint = 0x8646;
    pub const GL_PROGRAM_TEMPORARIES_ARB: std::os::raw::c_uint = 0x88A4;
    pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: std::os::raw::c_uint = 0x8807;
    pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: std::os::raw::c_uint = 0x8806;
    pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: std::os::raw::c_uint = 0x88B6;
    pub const GL_PROTECTED_MEMORY_OBJECT_EXT: std::os::raw::c_uint = 0x959B;
    pub const GL_PROVOKING_VERTEX: std::os::raw::c_uint = 0x8E4F;
    pub const GL_PROVOKING_VERTEX_EXT: std::os::raw::c_uint = 0x8E4F;
    pub const GL_PROXY_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D3;
    pub const GL_PROXY_HISTOGRAM_EXT: std::os::raw::c_uint = 0x8025;
    pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D5;
    pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80D4;
    pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: std::os::raw::c_uint = 0x8163;
    pub const GL_PROXY_TEXTURE_1D: std::os::raw::c_uint = 0x8063;
    pub const GL_PROXY_TEXTURE_1D_ARRAY: std::os::raw::c_uint = 0x8C19;
    pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8C19;
    pub const GL_PROXY_TEXTURE_1D_EXT: std::os::raw::c_uint = 0x8063;
    pub const GL_PROXY_TEXTURE_1D_STACK_MESAX: std::os::raw::c_uint = 0x875B;
    pub const GL_PROXY_TEXTURE_2D: std::os::raw::c_uint = 0x8064;
    pub const GL_PROXY_TEXTURE_2D_ARRAY: std::os::raw::c_uint = 0x8C1B;
    pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8C1B;
    pub const GL_PROXY_TEXTURE_2D_EXT: std::os::raw::c_uint = 0x8064;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9101;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x9103;
    pub const GL_PROXY_TEXTURE_2D_STACK_MESAX: std::os::raw::c_uint = 0x875C;
    pub const GL_PROXY_TEXTURE_3D: std::os::raw::c_uint = 0x8070;
    pub const GL_PROXY_TEXTURE_3D_EXT: std::os::raw::c_uint = 0x8070;
    pub const GL_PROXY_TEXTURE_4D_SGIS: std::os::raw::c_uint = 0x8135;
    pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80BD;
    pub const GL_PROXY_TEXTURE_CUBE_MAP: std::os::raw::c_uint = 0x851B;
    pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: std::os::raw::c_uint = 0x851B;
    pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x900B;
    pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x900B;
    pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT: std::os::raw::c_uint = 0x851B;
    pub const GL_PROXY_TEXTURE_RECTANGLE: std::os::raw::c_uint = 0x84F7;
    pub const GL_PROXY_TEXTURE_RECTANGLE_ARB: std::os::raw::c_uint = 0x84F7;
    pub const GL_PROXY_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x84F7;
    pub const GL_PURGEABLE_APPLE: std::os::raw::c_uint = 0x8A1D;
    pub const GL_PURGED_CONTEXT_RESET_NV: std::os::raw::c_uint = 0x92BB;
    pub const GL_QUADRATIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0A;
    pub const GL_QUADS: std::os::raw::c_uint = 0x0007;
    pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: std::os::raw::c_uint = 0x8E4C;
    pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: std::os::raw::c_uint = 0x8E4C;
    pub const GL_QUAD_ALPHA4_SGIS: std::os::raw::c_uint = 0x811E;
    pub const GL_QUAD_ALPHA8_SGIS: std::os::raw::c_uint = 0x811F;
    pub const GL_QUAD_INTENSITY4_SGIS: std::os::raw::c_uint = 0x8122;
    pub const GL_QUAD_INTENSITY8_SGIS: std::os::raw::c_uint = 0x8123;
    pub const GL_QUAD_LUMINANCE4_SGIS: std::os::raw::c_uint = 0x8120;
    pub const GL_QUAD_LUMINANCE8_SGIS: std::os::raw::c_uint = 0x8121;
    pub const GL_QUAD_MESH_SUN: std::os::raw::c_uint = 0x8614;
    pub const GL_QUAD_TEXTURE_SELECT_SGIS: std::os::raw::c_uint = 0x8125;
    pub const GL_QUARTER_BIT_ATI: std::os::raw::c_uint = 0x00000010;
    pub const GL_QUERY: std::os::raw::c_uint = 0x82E3;
    pub const GL_QUERY_ALL_EVENT_BITS_AMD: std::os::raw::c_uint = 0xFFFFFFFF;
    pub const GL_QUERY_BUFFER: std::os::raw::c_uint = 0x9192;
    pub const GL_QUERY_BUFFER_AMD: std::os::raw::c_uint = 0x9192;
    pub const GL_QUERY_BUFFER_BARRIER_BIT: std::os::raw::c_uint = 0x00008000;
    pub const GL_QUERY_BUFFER_BINDING: std::os::raw::c_uint = 0x9193;
    pub const GL_QUERY_BUFFER_BINDING_AMD: std::os::raw::c_uint = 0x9193;
    pub const GL_QUERY_BY_REGION_NO_WAIT: std::os::raw::c_uint = 0x8E16;
    pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED: std::os::raw::c_uint = 0x8E1A;
    pub const GL_QUERY_BY_REGION_NO_WAIT_NV: std::os::raw::c_uint = 0x8E16;
    pub const GL_QUERY_BY_REGION_WAIT: std::os::raw::c_uint = 0x8E15;
    pub const GL_QUERY_BY_REGION_WAIT_INVERTED: std::os::raw::c_uint = 0x8E19;
    pub const GL_QUERY_BY_REGION_WAIT_NV: std::os::raw::c_uint = 0x8E15;
    pub const GL_QUERY_COUNTER_BITS: std::os::raw::c_uint = 0x8864;
    pub const GL_QUERY_COUNTER_BITS_ARB: std::os::raw::c_uint = 0x8864;
    pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD: std::os::raw::c_uint = 0x00000008;
    pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD: std::os::raw::c_uint = 0x00000002;
    pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD: std::os::raw::c_uint = 0x00000001;
    pub const GL_QUERY_NO_WAIT: std::os::raw::c_uint = 0x8E14;
    pub const GL_QUERY_NO_WAIT_INVERTED: std::os::raw::c_uint = 0x8E18;
    pub const GL_QUERY_NO_WAIT_NV: std::os::raw::c_uint = 0x8E14;
    pub const GL_QUERY_OBJECT_AMD: std::os::raw::c_uint = 0x9153;
    pub const GL_QUERY_OBJECT_EXT: std::os::raw::c_uint = 0x9153;
    pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV: std::os::raw::c_uint = 0x9547;
    pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV: std::os::raw::c_uint = 0x9542;
    pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV: std::os::raw::c_uint = 0x9546;
    pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV: std::os::raw::c_uint = 0x9544;
    pub const GL_QUERY_RESOURCE_TEXTURE_NV: std::os::raw::c_uint = 0x9545;
    pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV: std::os::raw::c_uint = 0x9540;
    pub const GL_QUERY_RESULT: std::os::raw::c_uint = 0x8866;
    pub const GL_QUERY_RESULT_ARB: std::os::raw::c_uint = 0x8866;
    pub const GL_QUERY_RESULT_AVAILABLE: std::os::raw::c_uint = 0x8867;
    pub const GL_QUERY_RESULT_AVAILABLE_ARB: std::os::raw::c_uint = 0x8867;
    pub const GL_QUERY_RESULT_NO_WAIT: std::os::raw::c_uint = 0x9194;
    pub const GL_QUERY_RESULT_NO_WAIT_AMD: std::os::raw::c_uint = 0x9194;
    pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD: std::os::raw::c_uint = 0x00000004;
    pub const GL_QUERY_TARGET: std::os::raw::c_uint = 0x82EA;
    pub const GL_QUERY_WAIT: std::os::raw::c_uint = 0x8E13;
    pub const GL_QUERY_WAIT_INVERTED: std::os::raw::c_uint = 0x8E17;
    pub const GL_QUERY_WAIT_NV: std::os::raw::c_uint = 0x8E13;
    pub const GL_R11F_G11F_B10F: std::os::raw::c_uint = 0x8C3A;
    pub const GL_R11F_G11F_B10F_EXT: std::os::raw::c_uint = 0x8C3A;
    pub const GL_R16: std::os::raw::c_uint = 0x822A;
    pub const GL_R16F: std::os::raw::c_uint = 0x822D;
    pub const GL_R16I: std::os::raw::c_uint = 0x8233;
    pub const GL_R16UI: std::os::raw::c_uint = 0x8234;
    pub const GL_R16_SNORM: std::os::raw::c_uint = 0x8F98;
    pub const GL_R1UI_C3F_V3F_SUN: std::os::raw::c_uint = 0x85C6;
    pub const GL_R1UI_C4F_N3F_V3F_SUN: std::os::raw::c_uint = 0x85C8;
    pub const GL_R1UI_C4UB_V3F_SUN: std::os::raw::c_uint = 0x85C5;
    pub const GL_R1UI_N3F_V3F_SUN: std::os::raw::c_uint = 0x85C7;
    pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN: std::os::raw::c_uint = 0x85CB;
    pub const GL_R1UI_T2F_N3F_V3F_SUN: std::os::raw::c_uint = 0x85CA;
    pub const GL_R1UI_T2F_V3F_SUN: std::os::raw::c_uint = 0x85C9;
    pub const GL_R1UI_V3F_SUN: std::os::raw::c_uint = 0x85C4;
    pub const GL_R32F: std::os::raw::c_uint = 0x822E;
    pub const GL_R32I: std::os::raw::c_uint = 0x8235;
    pub const GL_R32UI: std::os::raw::c_uint = 0x8236;
    pub const GL_R3_G3_B2: std::os::raw::c_uint = 0x2A10;
    pub const GL_R8: std::os::raw::c_uint = 0x8229;
    pub const GL_R8I: std::os::raw::c_uint = 0x8231;
    pub const GL_R8UI: std::os::raw::c_uint = 0x8232;
    pub const GL_R8_SNORM: std::os::raw::c_uint = 0x8F94;
    pub const GL_RASTERIZER_DISCARD: std::os::raw::c_uint = 0x8C89;
    pub const GL_RASTERIZER_DISCARD_EXT: std::os::raw::c_uint = 0x8C89;
    pub const GL_RASTERIZER_DISCARD_NV: std::os::raw::c_uint = 0x8C89;
    pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT: std::os::raw::c_uint = 0x932A;
    pub const GL_RASTER_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x9327;
    pub const GL_RASTER_POSITION_UNCLIPPED_IBM: std::os::raw::c_uint = 0x19262;
    pub const GL_RASTER_SAMPLES_EXT: std::os::raw::c_uint = 0x9328;
    pub const GL_READ_BUFFER: std::os::raw::c_uint = 0x0C02;
    pub const GL_READ_FRAMEBUFFER: std::os::raw::c_uint = 0x8CA8;
    pub const GL_READ_FRAMEBUFFER_BINDING: std::os::raw::c_uint = 0x8CAA;
    pub const GL_READ_FRAMEBUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8CAA;
    pub const GL_READ_FRAMEBUFFER_EXT: std::os::raw::c_uint = 0x8CA8;
    pub const GL_READ_ONLY: std::os::raw::c_uint = 0x88B8;
    pub const GL_READ_ONLY_ARB: std::os::raw::c_uint = 0x88B8;
    pub const GL_READ_PIXELS: std::os::raw::c_uint = 0x828C;
    pub const GL_READ_PIXELS_FORMAT: std::os::raw::c_uint = 0x828D;
    pub const GL_READ_PIXELS_TYPE: std::os::raw::c_uint = 0x828E;
    pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV: std::os::raw::c_uint = 0x887B;
    pub const GL_READ_PIXEL_DATA_RANGE_NV: std::os::raw::c_uint = 0x8879;
    pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV: std::os::raw::c_uint = 0x887D;
    pub const GL_READ_WRITE: std::os::raw::c_uint = 0x88BA;
    pub const GL_READ_WRITE_ARB: std::os::raw::c_uint = 0x88BA;
    pub const GL_RECLAIM_MEMORY_HINT_PGI: std::os::raw::c_uint = 0x1A1FE;
    pub const GL_RECT_NV: std::os::raw::c_uint = 0xF6;
    pub const GL_RED: std::os::raw::c_uint = 0x1903;
    pub const GL_REDUCE_EXT: std::os::raw::c_uint = 0x8016;
    pub const GL_RED_BIT_ATI: std::os::raw::c_uint = 0x00000001;
    pub const GL_RED_INTEGER: std::os::raw::c_uint = 0x8D94;
    pub const GL_RED_INTEGER_EXT: std::os::raw::c_uint = 0x8D94;
    pub const GL_RED_MAX_CLAMP_INGR: std::os::raw::c_uint = 0x8564;
    pub const GL_RED_MIN_CLAMP_INGR: std::os::raw::c_uint = 0x8560;
    pub const GL_RED_NV: std::os::raw::c_uint = 0x1903;
    pub const GL_RED_SNORM: std::os::raw::c_uint = 0x8F90;
    pub const GL_REFERENCED_BY_COMPUTE_SHADER: std::os::raw::c_uint = 0x930B;
    pub const GL_REFERENCED_BY_FRAGMENT_SHADER: std::os::raw::c_uint = 0x930A;
    pub const GL_REFERENCED_BY_GEOMETRY_SHADER: std::os::raw::c_uint = 0x9309;
    pub const GL_REFERENCED_BY_MESH_SHADER_NV: std::os::raw::c_uint = 0x95A0;
    pub const GL_REFERENCED_BY_TASK_SHADER_NV: std::os::raw::c_uint = 0x95A1;
    pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: std::os::raw::c_uint = 0x9307;
    pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: std::os::raw::c_uint = 0x9308;
    pub const GL_REFERENCED_BY_VERTEX_SHADER: std::os::raw::c_uint = 0x9306;
    pub const GL_REFERENCE_PLANE_EQUATION_SGIX: std::os::raw::c_uint = 0x817E;
    pub const GL_REFERENCE_PLANE_SGIX: std::os::raw::c_uint = 0x817D;
    pub const GL_REFLECTION_MAP_ARB: std::os::raw::c_uint = 0x8512;
    pub const GL_REFLECTION_MAP_EXT: std::os::raw::c_uint = 0x8512;
    pub const GL_REFLECTION_MAP_NV: std::os::raw::c_uint = 0x8512;
    pub const GL_REGISTER_COMBINERS_NV: std::os::raw::c_uint = 0x8522;
    pub const GL_REG_0_ATI: std::os::raw::c_uint = 0x8921;
    pub const GL_REG_10_ATI: std::os::raw::c_uint = 0x892B;
    pub const GL_REG_11_ATI: std::os::raw::c_uint = 0x892C;
    pub const GL_REG_12_ATI: std::os::raw::c_uint = 0x892D;
    pub const GL_REG_13_ATI: std::os::raw::c_uint = 0x892E;
    pub const GL_REG_14_ATI: std::os::raw::c_uint = 0x892F;
    pub const GL_REG_15_ATI: std::os::raw::c_uint = 0x8930;
    pub const GL_REG_16_ATI: std::os::raw::c_uint = 0x8931;
    pub const GL_REG_17_ATI: std::os::raw::c_uint = 0x8932;
    pub const GL_REG_18_ATI: std::os::raw::c_uint = 0x8933;
    pub const GL_REG_19_ATI: std::os::raw::c_uint = 0x8934;
    pub const GL_REG_1_ATI: std::os::raw::c_uint = 0x8922;
    pub const GL_REG_20_ATI: std::os::raw::c_uint = 0x8935;
    pub const GL_REG_21_ATI: std::os::raw::c_uint = 0x8936;
    pub const GL_REG_22_ATI: std::os::raw::c_uint = 0x8937;
    pub const GL_REG_23_ATI: std::os::raw::c_uint = 0x8938;
    pub const GL_REG_24_ATI: std::os::raw::c_uint = 0x8939;
    pub const GL_REG_25_ATI: std::os::raw::c_uint = 0x893A;
    pub const GL_REG_26_ATI: std::os::raw::c_uint = 0x893B;
    pub const GL_REG_27_ATI: std::os::raw::c_uint = 0x893C;
    pub const GL_REG_28_ATI: std::os::raw::c_uint = 0x893D;
    pub const GL_REG_29_ATI: std::os::raw::c_uint = 0x893E;
    pub const GL_REG_2_ATI: std::os::raw::c_uint = 0x8923;
    pub const GL_REG_30_ATI: std::os::raw::c_uint = 0x893F;
    pub const GL_REG_31_ATI: std::os::raw::c_uint = 0x8940;
    pub const GL_REG_3_ATI: std::os::raw::c_uint = 0x8924;
    pub const GL_REG_4_ATI: std::os::raw::c_uint = 0x8925;
    pub const GL_REG_5_ATI: std::os::raw::c_uint = 0x8926;
    pub const GL_REG_6_ATI: std::os::raw::c_uint = 0x8927;
    pub const GL_REG_7_ATI: std::os::raw::c_uint = 0x8928;
    pub const GL_REG_8_ATI: std::os::raw::c_uint = 0x8929;
    pub const GL_REG_9_ATI: std::os::raw::c_uint = 0x892A;
    pub const GL_RELATIVE_ARC_TO_NV: std::os::raw::c_uint = 0xFF;
    pub const GL_RELATIVE_CONIC_CURVE_TO_NV: std::os::raw::c_uint = 0x1B;
    pub const GL_RELATIVE_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0D;
    pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV: std::os::raw::c_uint = 0x07;
    pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV: std::os::raw::c_uint = 0x17;
    pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV: std::os::raw::c_uint = 0x19;
    pub const GL_RELATIVE_LINE_TO_NV: std::os::raw::c_uint = 0x05;
    pub const GL_RELATIVE_MOVE_TO_NV: std::os::raw::c_uint = 0x03;
    pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0B;
    pub const GL_RELATIVE_RECT_NV: std::os::raw::c_uint = 0xF7;
    pub const GL_RELATIVE_ROUNDED_RECT2_NV: std::os::raw::c_uint = 0xEB;
    pub const GL_RELATIVE_ROUNDED_RECT4_NV: std::os::raw::c_uint = 0xED;
    pub const GL_RELATIVE_ROUNDED_RECT8_NV: std::os::raw::c_uint = 0xEF;
    pub const GL_RELATIVE_ROUNDED_RECT_NV: std::os::raw::c_uint = 0xE9;
    pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV: std::os::raw::c_uint = 0x13;
    pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV: std::os::raw::c_uint = 0x15;
    pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0x11;
    pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0F;
    pub const GL_RELATIVE_VERTICAL_LINE_TO_NV: std::os::raw::c_uint = 0x09;
    pub const GL_RELEASED_APPLE: std::os::raw::c_uint = 0x8A19;
    pub const GL_RENDERBUFFER: std::os::raw::c_uint = 0x8D41;
    pub const GL_RENDERBUFFER_ALPHA_SIZE: std::os::raw::c_uint = 0x8D53;
    pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: std::os::raw::c_uint = 0x8D53;
    pub const GL_RENDERBUFFER_BINDING: std::os::raw::c_uint = 0x8CA7;
    pub const GL_RENDERBUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8CA7;
    pub const GL_RENDERBUFFER_BLUE_SIZE: std::os::raw::c_uint = 0x8D52;
    pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: std::os::raw::c_uint = 0x8D52;
    pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV: std::os::raw::c_uint = 0x8E10;
    pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV: std::os::raw::c_uint = 0x8CAB;
    pub const GL_RENDERBUFFER_DEPTH_SIZE: std::os::raw::c_uint = 0x8D54;
    pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: std::os::raw::c_uint = 0x8D54;
    pub const GL_RENDERBUFFER_EXT: std::os::raw::c_uint = 0x8D41;
    pub const GL_RENDERBUFFER_FREE_MEMORY_ATI: std::os::raw::c_uint = 0x87FD;
    pub const GL_RENDERBUFFER_GREEN_SIZE: std::os::raw::c_uint = 0x8D51;
    pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: std::os::raw::c_uint = 0x8D51;
    pub const GL_RENDERBUFFER_HEIGHT: std::os::raw::c_uint = 0x8D43;
    pub const GL_RENDERBUFFER_HEIGHT_EXT: std::os::raw::c_uint = 0x8D43;
    pub const GL_RENDERBUFFER_INTERNAL_FORMAT: std::os::raw::c_uint = 0x8D44;
    pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: std::os::raw::c_uint = 0x8D44;
    pub const GL_RENDERBUFFER_RED_SIZE: std::os::raw::c_uint = 0x8D50;
    pub const GL_RENDERBUFFER_RED_SIZE_EXT: std::os::raw::c_uint = 0x8D50;
    pub const GL_RENDERBUFFER_SAMPLES: std::os::raw::c_uint = 0x8CAB;
    pub const GL_RENDERBUFFER_SAMPLES_EXT: std::os::raw::c_uint = 0x8CAB;
    pub const GL_RENDERBUFFER_STENCIL_SIZE: std::os::raw::c_uint = 0x8D55;
    pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: std::os::raw::c_uint = 0x8D55;
    pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD: std::os::raw::c_uint = 0x91B2;
    pub const GL_RENDERBUFFER_WIDTH: std::os::raw::c_uint = 0x8D42;
    pub const GL_RENDERBUFFER_WIDTH_EXT: std::os::raw::c_uint = 0x8D42;
    pub const GL_RENDERER: std::os::raw::c_uint = 0x1F01;
    pub const GL_RENDER_GPU_MASK_NV: std::os::raw::c_uint = 0x9558;
    pub const GL_REPEAT: std::os::raw::c_uint = 0x2901;
    pub const GL_REPLACE: std::os::raw::c_uint = 0x1E01;
    pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN: std::os::raw::c_uint = 0x85C3;
    pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN: std::os::raw::c_uint = 0x85C2;
    pub const GL_REPLACEMENT_CODE_ARRAY_SUN: std::os::raw::c_uint = 0x85C0;
    pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN: std::os::raw::c_uint = 0x85C1;
    pub const GL_REPLACEMENT_CODE_SUN: std::os::raw::c_uint = 0x81D8;
    pub const GL_REPLACE_EXT: std::os::raw::c_uint = 0x8062;
    pub const GL_REPLACE_MIDDLE_SUN: std::os::raw::c_uint = 0x0002;
    pub const GL_REPLACE_OLDEST_SUN: std::os::raw::c_uint = 0x0003;
    pub const GL_REPLACE_VALUE_AMD: std::os::raw::c_uint = 0x874B;
    pub const GL_REPLICATE_BORDER_HP: std::os::raw::c_uint = 0x8153;
    pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV: std::os::raw::c_uint = 0x937F;
    pub const GL_RESAMPLE_AVERAGE_OML: std::os::raw::c_uint = 0x8988;
    pub const GL_RESAMPLE_DECIMATE_OML: std::os::raw::c_uint = 0x8989;
    pub const GL_RESAMPLE_DECIMATE_SGIX: std::os::raw::c_uint = 0x8430;
    pub const GL_RESAMPLE_REPLICATE_OML: std::os::raw::c_uint = 0x8986;
    pub const GL_RESAMPLE_REPLICATE_SGIX: std::os::raw::c_uint = 0x8433;
    pub const GL_RESAMPLE_ZERO_FILL_OML: std::os::raw::c_uint = 0x8987;
    pub const GL_RESAMPLE_ZERO_FILL_SGIX: std::os::raw::c_uint = 0x8434;
    pub const GL_RESCALE_NORMAL_EXT: std::os::raw::c_uint = 0x803A;
    pub const GL_RESET_NOTIFICATION_STRATEGY: std::os::raw::c_uint = 0x8256;
    pub const GL_RESET_NOTIFICATION_STRATEGY_ARB: std::os::raw::c_uint = 0x8256;
    pub const GL_RESTART_PATH_NV: std::os::raw::c_uint = 0xF0;
    pub const GL_RESTART_SUN: std::os::raw::c_uint = 0x0001;
    pub const GL_RETAINED_APPLE: std::os::raw::c_uint = 0x8A1B;
    pub const GL_RG: std::os::raw::c_uint = 0x8227;
    pub const GL_RG16: std::os::raw::c_uint = 0x822C;
    pub const GL_RG16F: std::os::raw::c_uint = 0x822F;
    pub const GL_RG16I: std::os::raw::c_uint = 0x8239;
    pub const GL_RG16UI: std::os::raw::c_uint = 0x823A;
    pub const GL_RG16_SNORM: std::os::raw::c_uint = 0x8F99;
    pub const GL_RG32F: std::os::raw::c_uint = 0x8230;
    pub const GL_RG32I: std::os::raw::c_uint = 0x823B;
    pub const GL_RG32UI: std::os::raw::c_uint = 0x823C;
    pub const GL_RG8: std::os::raw::c_uint = 0x822B;
    pub const GL_RG8I: std::os::raw::c_uint = 0x8237;
    pub const GL_RG8UI: std::os::raw::c_uint = 0x8238;
    pub const GL_RG8_SNORM: std::os::raw::c_uint = 0x8F95;
    pub const GL_RGB: std::os::raw::c_uint = 0x1907;
    pub const GL_RGB10: std::os::raw::c_uint = 0x8052;
    pub const GL_RGB10_A2: std::os::raw::c_uint = 0x8059;
    pub const GL_RGB10_A2UI: std::os::raw::c_uint = 0x906F;
    pub const GL_RGB10_A2_EXT: std::os::raw::c_uint = 0x8059;
    pub const GL_RGB10_EXT: std::os::raw::c_uint = 0x8052;
    pub const GL_RGB12: std::os::raw::c_uint = 0x8053;
    pub const GL_RGB12_EXT: std::os::raw::c_uint = 0x8053;
    pub const GL_RGB16: std::os::raw::c_uint = 0x8054;
    pub const GL_RGB16F: std::os::raw::c_uint = 0x881B;
    pub const GL_RGB16F_ARB: std::os::raw::c_uint = 0x881B;
    pub const GL_RGB16I: std::os::raw::c_uint = 0x8D89;
    pub const GL_RGB16I_EXT: std::os::raw::c_uint = 0x8D89;
    pub const GL_RGB16UI: std::os::raw::c_uint = 0x8D77;
    pub const GL_RGB16UI_EXT: std::os::raw::c_uint = 0x8D77;
    pub const GL_RGB16_EXT: std::os::raw::c_uint = 0x8054;
    pub const GL_RGB16_SNORM: std::os::raw::c_uint = 0x8F9A;
    pub const GL_RGB2_EXT: std::os::raw::c_uint = 0x804E;
    pub const GL_RGB32F: std::os::raw::c_uint = 0x8815;
    pub const GL_RGB32F_ARB: std::os::raw::c_uint = 0x8815;
    pub const GL_RGB32I: std::os::raw::c_uint = 0x8D83;
    pub const GL_RGB32I_EXT: std::os::raw::c_uint = 0x8D83;
    pub const GL_RGB32UI: std::os::raw::c_uint = 0x8D71;
    pub const GL_RGB32UI_EXT: std::os::raw::c_uint = 0x8D71;
    pub const GL_RGB4: std::os::raw::c_uint = 0x804F;
    pub const GL_RGB4_EXT: std::os::raw::c_uint = 0x804F;
    pub const GL_RGB4_S3TC: std::os::raw::c_uint = 0x83A1;
    pub const GL_RGB5: std::os::raw::c_uint = 0x8050;
    pub const GL_RGB565: std::os::raw::c_uint = 0x8D62;
    pub const GL_RGB5_A1: std::os::raw::c_uint = 0x8057;
    pub const GL_RGB5_A1_EXT: std::os::raw::c_uint = 0x8057;
    pub const GL_RGB5_EXT: std::os::raw::c_uint = 0x8050;
    pub const GL_RGB8: std::os::raw::c_uint = 0x8051;
    pub const GL_RGB8I: std::os::raw::c_uint = 0x8D8F;
    pub const GL_RGB8I_EXT: std::os::raw::c_uint = 0x8D8F;
    pub const GL_RGB8UI: std::os::raw::c_uint = 0x8D7D;
    pub const GL_RGB8UI_EXT: std::os::raw::c_uint = 0x8D7D;
    pub const GL_RGB8_EXT: std::os::raw::c_uint = 0x8051;
    pub const GL_RGB8_SNORM: std::os::raw::c_uint = 0x8F96;
    pub const GL_RGB9_E5: std::os::raw::c_uint = 0x8C3D;
    pub const GL_RGB9_E5_EXT: std::os::raw::c_uint = 0x8C3D;
    pub const GL_RGBA: std::os::raw::c_uint = 0x1908;
    pub const GL_RGBA12: std::os::raw::c_uint = 0x805A;
    pub const GL_RGBA12_EXT: std::os::raw::c_uint = 0x805A;
    pub const GL_RGBA16: std::os::raw::c_uint = 0x805B;
    pub const GL_RGBA16F: std::os::raw::c_uint = 0x881A;
    pub const GL_RGBA16F_ARB: std::os::raw::c_uint = 0x881A;
    pub const GL_RGBA16I: std::os::raw::c_uint = 0x8D88;
    pub const GL_RGBA16I_EXT: std::os::raw::c_uint = 0x8D88;
    pub const GL_RGBA16UI: std::os::raw::c_uint = 0x8D76;
    pub const GL_RGBA16UI_EXT: std::os::raw::c_uint = 0x8D76;
    pub const GL_RGBA16_EXT: std::os::raw::c_uint = 0x805B;
    pub const GL_RGBA16_SNORM: std::os::raw::c_uint = 0x8F9B;
    pub const GL_RGBA2: std::os::raw::c_uint = 0x8055;
    pub const GL_RGBA2_EXT: std::os::raw::c_uint = 0x8055;
    pub const GL_RGBA32F: std::os::raw::c_uint = 0x8814;
    pub const GL_RGBA32F_ARB: std::os::raw::c_uint = 0x8814;
    pub const GL_RGBA32I: std::os::raw::c_uint = 0x8D82;
    pub const GL_RGBA32I_EXT: std::os::raw::c_uint = 0x8D82;
    pub const GL_RGBA32UI: std::os::raw::c_uint = 0x8D70;
    pub const GL_RGBA32UI_EXT: std::os::raw::c_uint = 0x8D70;
    pub const GL_RGBA4: std::os::raw::c_uint = 0x8056;
    pub const GL_RGBA4_DXT5_S3TC: std::os::raw::c_uint = 0x83A5;
    pub const GL_RGBA4_EXT: std::os::raw::c_uint = 0x8056;
    pub const GL_RGBA4_S3TC: std::os::raw::c_uint = 0x83A3;
    pub const GL_RGBA8: std::os::raw::c_uint = 0x8058;
    pub const GL_RGBA8I: std::os::raw::c_uint = 0x8D8E;
    pub const GL_RGBA8I_EXT: std::os::raw::c_uint = 0x8D8E;
    pub const GL_RGBA8UI: std::os::raw::c_uint = 0x8D7C;
    pub const GL_RGBA8UI_EXT: std::os::raw::c_uint = 0x8D7C;
    pub const GL_RGBA8_EXT: std::os::raw::c_uint = 0x8058;
    pub const GL_RGBA8_SNORM: std::os::raw::c_uint = 0x8F97;
    pub const GL_RGBA_DXT5_S3TC: std::os::raw::c_uint = 0x83A4;
    pub const GL_RGBA_FLOAT16_APPLE: std::os::raw::c_uint = 0x881A;
    pub const GL_RGBA_FLOAT16_ATI: std::os::raw::c_uint = 0x881A;
    pub const GL_RGBA_FLOAT32_APPLE: std::os::raw::c_uint = 0x8814;
    pub const GL_RGBA_FLOAT32_ATI: std::os::raw::c_uint = 0x8814;
    pub const GL_RGBA_FLOAT_MODE_ARB: std::os::raw::c_uint = 0x8820;
    pub const GL_RGBA_FLOAT_MODE_ATI: std::os::raw::c_uint = 0x8820;
    pub const GL_RGBA_INTEGER: std::os::raw::c_uint = 0x8D99;
    pub const GL_RGBA_INTEGER_EXT: std::os::raw::c_uint = 0x8D99;
    pub const GL_RGBA_INTEGER_MODE_EXT: std::os::raw::c_uint = 0x8D9E;
    pub const GL_RGBA_S3TC: std::os::raw::c_uint = 0x83A2;
    pub const GL_RGBA_SIGNED_COMPONENTS_EXT: std::os::raw::c_uint = 0x8C3C;
    pub const GL_RGBA_SNORM: std::os::raw::c_uint = 0x8F93;
    pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: std::os::raw::c_uint = 0x86D9;
    pub const GL_RGB_422_APPLE: std::os::raw::c_uint = 0x8A1F;
    pub const GL_RGB_FLOAT16_APPLE: std::os::raw::c_uint = 0x881B;
    pub const GL_RGB_FLOAT16_ATI: std::os::raw::c_uint = 0x881B;
    pub const GL_RGB_FLOAT32_APPLE: std::os::raw::c_uint = 0x8815;
    pub const GL_RGB_FLOAT32_ATI: std::os::raw::c_uint = 0x8815;
    pub const GL_RGB_INTEGER: std::os::raw::c_uint = 0x8D98;
    pub const GL_RGB_INTEGER_EXT: std::os::raw::c_uint = 0x8D98;
    pub const GL_RGB_RAW_422_APPLE: std::os::raw::c_uint = 0x8A51;
    pub const GL_RGB_S3TC: std::os::raw::c_uint = 0x83A0;
    pub const GL_RGB_SCALE_ARB: std::os::raw::c_uint = 0x8573;
    pub const GL_RGB_SCALE_EXT: std::os::raw::c_uint = 0x8573;
    pub const GL_RGB_SNORM: std::os::raw::c_uint = 0x8F92;
    pub const GL_RG_INTEGER: std::os::raw::c_uint = 0x8228;
    pub const GL_RG_SNORM: std::os::raw::c_uint = 0x8F91;
    pub const GL_RIGHT: std::os::raw::c_uint = 0x0407;
    pub const GL_ROUNDED_RECT2_NV: std::os::raw::c_uint = 0xEA;
    pub const GL_ROUNDED_RECT4_NV: std::os::raw::c_uint = 0xEC;
    pub const GL_ROUNDED_RECT8_NV: std::os::raw::c_uint = 0xEE;
    pub const GL_ROUNDED_RECT_NV: std::os::raw::c_uint = 0xE8;
    pub const GL_ROUND_NV: std::os::raw::c_uint = 0x90A4;
    pub const GL_SAMPLER: std::os::raw::c_uint = 0x82E6;
    pub const GL_SAMPLER_1D: std::os::raw::c_uint = 0x8B5D;
    pub const GL_SAMPLER_1D_ARB: std::os::raw::c_uint = 0x8B5D;
    pub const GL_SAMPLER_1D_ARRAY: std::os::raw::c_uint = 0x8DC0;
    pub const GL_SAMPLER_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8DC0;
    pub const GL_SAMPLER_1D_ARRAY_SHADOW: std::os::raw::c_uint = 0x8DC3;
    pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT: std::os::raw::c_uint = 0x8DC3;
    pub const GL_SAMPLER_1D_SHADOW: std::os::raw::c_uint = 0x8B61;
    pub const GL_SAMPLER_1D_SHADOW_ARB: std::os::raw::c_uint = 0x8B61;
    pub const GL_SAMPLER_2D: std::os::raw::c_uint = 0x8B5E;
    pub const GL_SAMPLER_2D_ARB: std::os::raw::c_uint = 0x8B5E;
    pub const GL_SAMPLER_2D_ARRAY: std::os::raw::c_uint = 0x8DC1;
    pub const GL_SAMPLER_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8DC1;
    pub const GL_SAMPLER_2D_ARRAY_SHADOW: std::os::raw::c_uint = 0x8DC4;
    pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT: std::os::raw::c_uint = 0x8DC4;
    pub const GL_SAMPLER_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9108;
    pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x910B;
    pub const GL_SAMPLER_2D_RECT: std::os::raw::c_uint = 0x8B63;
    pub const GL_SAMPLER_2D_RECT_ARB: std::os::raw::c_uint = 0x8B63;
    pub const GL_SAMPLER_2D_RECT_SHADOW: std::os::raw::c_uint = 0x8B64;
    pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: std::os::raw::c_uint = 0x8B64;
    pub const GL_SAMPLER_2D_SHADOW: std::os::raw::c_uint = 0x8B62;
    pub const GL_SAMPLER_2D_SHADOW_ARB: std::os::raw::c_uint = 0x8B62;
    pub const GL_SAMPLER_3D: std::os::raw::c_uint = 0x8B5F;
    pub const GL_SAMPLER_3D_ARB: std::os::raw::c_uint = 0x8B5F;
    pub const GL_SAMPLER_BINDING: std::os::raw::c_uint = 0x8919;
    pub const GL_SAMPLER_BUFFER: std::os::raw::c_uint = 0x8DC2;
    pub const GL_SAMPLER_BUFFER_AMD: std::os::raw::c_uint = 0x9001;
    pub const GL_SAMPLER_BUFFER_EXT: std::os::raw::c_uint = 0x8DC2;
    pub const GL_SAMPLER_CUBE: std::os::raw::c_uint = 0x8B60;
    pub const GL_SAMPLER_CUBE_ARB: std::os::raw::c_uint = 0x8B60;
    pub const GL_SAMPLER_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x900C;
    pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x900C;
    pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: std::os::raw::c_uint = 0x900D;
    pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: std::os::raw::c_uint = 0x900D;
    pub const GL_SAMPLER_CUBE_SHADOW: std::os::raw::c_uint = 0x8DC5;
    pub const GL_SAMPLER_CUBE_SHADOW_EXT: std::os::raw::c_uint = 0x8DC5;
    pub const GL_SAMPLER_OBJECT_AMD: std::os::raw::c_uint = 0x9155;
    pub const GL_SAMPLER_RENDERBUFFER_NV: std::os::raw::c_uint = 0x8E56;
    pub const GL_SAMPLES: std::os::raw::c_uint = 0x80A9;
    pub const GL_SAMPLES_3DFX: std::os::raw::c_uint = 0x86B4;
    pub const GL_SAMPLES_ARB: std::os::raw::c_uint = 0x80A9;
    pub const GL_SAMPLES_EXT: std::os::raw::c_uint = 0x80A9;
    pub const GL_SAMPLES_PASSED: std::os::raw::c_uint = 0x8914;
    pub const GL_SAMPLES_PASSED_ARB: std::os::raw::c_uint = 0x8914;
    pub const GL_SAMPLES_SGIS: std::os::raw::c_uint = 0x80A9;
    pub const GL_SAMPLE_ALPHA_TO_COVERAGE: std::os::raw::c_uint = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: std::os::raw::c_uint = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_MASK_EXT: std::os::raw::c_uint = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS: std::os::raw::c_uint = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_ONE: std::os::raw::c_uint = 0x809F;
    pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: std::os::raw::c_uint = 0x809F;
    pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: std::os::raw::c_uint = 0x809F;
    pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS: std::os::raw::c_uint = 0x809F;
    pub const GL_SAMPLE_BUFFERS: std::os::raw::c_uint = 0x80A8;
    pub const GL_SAMPLE_BUFFERS_3DFX: std::os::raw::c_uint = 0x86B3;
    pub const GL_SAMPLE_BUFFERS_ARB: std::os::raw::c_uint = 0x80A8;
    pub const GL_SAMPLE_BUFFERS_EXT: std::os::raw::c_uint = 0x80A8;
    pub const GL_SAMPLE_BUFFERS_SGIS: std::os::raw::c_uint = 0x80A8;
    pub const GL_SAMPLE_COVERAGE: std::os::raw::c_uint = 0x80A0;
    pub const GL_SAMPLE_COVERAGE_ARB: std::os::raw::c_uint = 0x80A0;
    pub const GL_SAMPLE_COVERAGE_INVERT: std::os::raw::c_uint = 0x80AB;
    pub const GL_SAMPLE_COVERAGE_INVERT_ARB: std::os::raw::c_uint = 0x80AB;
    pub const GL_SAMPLE_COVERAGE_VALUE: std::os::raw::c_uint = 0x80AA;
    pub const GL_SAMPLE_COVERAGE_VALUE_ARB: std::os::raw::c_uint = 0x80AA;
    pub const GL_SAMPLE_LOCATION_ARB: std::os::raw::c_uint = 0x8E50;
    pub const GL_SAMPLE_LOCATION_NV: std::os::raw::c_uint = 0x8E50;
    pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: std::os::raw::c_uint = 0x933F;
    pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: std::os::raw::c_uint = 0x933F;
    pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: std::os::raw::c_uint = 0x933E;
    pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: std::os::raw::c_uint = 0x933E;
    pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: std::os::raw::c_uint = 0x933D;
    pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV: std::os::raw::c_uint = 0x933D;
    pub const GL_SAMPLE_MASK: std::os::raw::c_uint = 0x8E51;
    pub const GL_SAMPLE_MASK_EXT: std::os::raw::c_uint = 0x80A0;
    pub const GL_SAMPLE_MASK_INVERT_EXT: std::os::raw::c_uint = 0x80AB;
    pub const GL_SAMPLE_MASK_INVERT_SGIS: std::os::raw::c_uint = 0x80AB;
    pub const GL_SAMPLE_MASK_NV: std::os::raw::c_uint = 0x8E51;
    pub const GL_SAMPLE_MASK_SGIS: std::os::raw::c_uint = 0x80A0;
    pub const GL_SAMPLE_MASK_VALUE: std::os::raw::c_uint = 0x8E52;
    pub const GL_SAMPLE_MASK_VALUE_EXT: std::os::raw::c_uint = 0x80AA;
    pub const GL_SAMPLE_MASK_VALUE_NV: std::os::raw::c_uint = 0x8E52;
    pub const GL_SAMPLE_MASK_VALUE_SGIS: std::os::raw::c_uint = 0x80AA;
    pub const GL_SAMPLE_PATTERN_EXT: std::os::raw::c_uint = 0x80AC;
    pub const GL_SAMPLE_PATTERN_SGIS: std::os::raw::c_uint = 0x80AC;
    pub const GL_SAMPLE_POSITION: std::os::raw::c_uint = 0x8E50;
    pub const GL_SAMPLE_POSITION_NV: std::os::raw::c_uint = 0x8E50;
    pub const GL_SAMPLE_SHADING: std::os::raw::c_uint = 0x8C36;
    pub const GL_SAMPLE_SHADING_ARB: std::os::raw::c_uint = 0x8C36;
    pub const GL_SATURATE_BIT_ATI: std::os::raw::c_uint = 0x00000040;
    pub const GL_SCALAR_EXT: std::os::raw::c_uint = 0x87BE;
    pub const GL_SCALEBIAS_HINT_SGIX: std::os::raw::c_uint = 0x8322;
    pub const GL_SCALED_RESOLVE_FASTEST_EXT: std::os::raw::c_uint = 0x90BA;
    pub const GL_SCALED_RESOLVE_NICEST_EXT: std::os::raw::c_uint = 0x90BB;
    pub const GL_SCALE_BY_FOUR_NV: std::os::raw::c_uint = 0x853F;
    pub const GL_SCALE_BY_ONE_HALF_NV: std::os::raw::c_uint = 0x8540;
    pub const GL_SCALE_BY_TWO_NV: std::os::raw::c_uint = 0x853E;
    pub const GL_SCISSOR_BOX: std::os::raw::c_uint = 0x0C10;
    pub const GL_SCISSOR_BOX_EXCLUSIVE_NV: std::os::raw::c_uint = 0x9556;
    pub const GL_SCISSOR_COMMAND_NV: std::os::raw::c_uint = 0x0011;
    pub const GL_SCISSOR_TEST: std::os::raw::c_uint = 0x0C11;
    pub const GL_SCISSOR_TEST_EXCLUSIVE_NV: std::os::raw::c_uint = 0x9555;
    pub const GL_SCREEN_COORDINATES_REND: std::os::raw::c_uint = 0x8490;
    pub const GL_SCREEN_KHR: std::os::raw::c_uint = 0x9295;
    pub const GL_SCREEN_NV: std::os::raw::c_uint = 0x9295;
    pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F27;
    pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889C;
    pub const GL_SECONDARY_COLOR_ARRAY_EXT: std::os::raw::c_uint = 0x845E;
    pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F31;
    pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM: std::os::raw::c_uint = 103077;
    pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103087;
    pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x845D;
    pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT: std::os::raw::c_uint = 0x845A;
    pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x845C;
    pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x845B;
    pub const GL_SECONDARY_COLOR_NV: std::os::raw::c_uint = 0x852D;
    pub const GL_SECONDARY_INTERPOLATOR_ATI: std::os::raw::c_uint = 0x896D;
    pub const GL_SEPARABLE_2D_EXT: std::os::raw::c_uint = 0x8012;
    pub const GL_SEPARATE_ATTRIBS: std::os::raw::c_uint = 0x8C8D;
    pub const GL_SEPARATE_ATTRIBS_EXT: std::os::raw::c_uint = 0x8C8D;
    pub const GL_SEPARATE_ATTRIBS_NV: std::os::raw::c_uint = 0x8C8D;
    pub const GL_SEPARATE_SPECULAR_COLOR_EXT: std::os::raw::c_uint = 0x81FA;
    pub const GL_SET: std::os::raw::c_uint = 0x150F;
    pub const GL_SET_AMD: std::os::raw::c_uint = 0x874A;
    pub const GL_SHADER: std::os::raw::c_uint = 0x82E1;
    pub const GL_SHADER_BINARY_FORMATS: std::os::raw::c_uint = 0x8DF8;
    pub const GL_SHADER_BINARY_FORMAT_SPIR_V: std::os::raw::c_uint = 0x9551;
    pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB: std::os::raw::c_uint = 0x9551;
    pub const GL_SHADER_COMPILER: std::os::raw::c_uint = 0x8DFA;
    pub const GL_SHADER_CONSISTENT_NV: std::os::raw::c_uint = 0x86DD;
    pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: std::os::raw::c_uint = 0x00000010;
    pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: std::os::raw::c_uint = 0x00000020;
    pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000020;
    pub const GL_SHADER_IMAGE_ATOMIC: std::os::raw::c_uint = 0x82A6;
    pub const GL_SHADER_IMAGE_LOAD: std::os::raw::c_uint = 0x82A4;
    pub const GL_SHADER_IMAGE_STORE: std::os::raw::c_uint = 0x82A5;
    pub const GL_SHADER_INCLUDE_ARB: std::os::raw::c_uint = 0x8DAE;
    pub const GL_SHADER_OBJECT_ARB: std::os::raw::c_uint = 0x8B48;
    pub const GL_SHADER_OBJECT_EXT: std::os::raw::c_uint = 0x8B48;
    pub const GL_SHADER_OPERATION_NV: std::os::raw::c_uint = 0x86DF;
    pub const GL_SHADER_SOURCE_LENGTH: std::os::raw::c_uint = 0x8B88;
    pub const GL_SHADER_STORAGE_BARRIER_BIT: std::os::raw::c_uint = 0x00002000;
    pub const GL_SHADER_STORAGE_BLOCK: std::os::raw::c_uint = 0x92E6;
    pub const GL_SHADER_STORAGE_BUFFER: std::os::raw::c_uint = 0x90D2;
    pub const GL_SHADER_STORAGE_BUFFER_BINDING: std::os::raw::c_uint = 0x90D3;
    pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: std::os::raw::c_uint = 0x90DF;
    pub const GL_SHADER_STORAGE_BUFFER_SIZE: std::os::raw::c_uint = 0x90D5;
    pub const GL_SHADER_STORAGE_BUFFER_START: std::os::raw::c_uint = 0x90D4;
    pub const GL_SHADER_TYPE: std::os::raw::c_uint = 0x8B4F;
    pub const GL_SHADING_LANGUAGE_VERSION: std::os::raw::c_uint = 0x8B8C;
    pub const GL_SHADING_LANGUAGE_VERSION_ARB: std::os::raw::c_uint = 0x8B8C;
    pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: std::os::raw::c_uint = 0x956F;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: std::os::raw::c_uint = 0x9566;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: std::os::raw::c_uint = 0x9567;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: std::os::raw::c_uint = 0x9568;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: std::os::raw::c_uint = 0x9569;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: std::os::raw::c_uint = 0x956A;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: std::os::raw::c_uint = 0x956B;
    pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: std::os::raw::c_uint = 0x9565;
    pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: std::os::raw::c_uint = 0x956C;
    pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: std::os::raw::c_uint = 0x956D;
    pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: std::os::raw::c_uint = 0x956E;
    pub const GL_SHADING_RATE_IMAGE_BINDING_NV: std::os::raw::c_uint = 0x955B;
    pub const GL_SHADING_RATE_IMAGE_NV: std::os::raw::c_uint = 0x9563;
    pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV: std::os::raw::c_uint = 0x955E;
    pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: std::os::raw::c_uint = 0x955D;
    pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: std::os::raw::c_uint = 0x955C;
    pub const GL_SHADING_RATE_NO_INVOCATIONS_NV: std::os::raw::c_uint = 0x9564;
    pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: std::os::raw::c_uint = 0x95AE;
    pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: std::os::raw::c_uint = 0x95AF;
    pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: std::os::raw::c_uint = 0x95B0;
    pub const GL_SHADOW_AMBIENT_SGIX: std::os::raw::c_uint = 0x80BF;
    pub const GL_SHADOW_ATTENUATION_EXT: std::os::raw::c_uint = 0x834E;
    pub const GL_SHARED_EDGE_NV: std::os::raw::c_uint = 0xC0;
    pub const GL_SHARED_TEXTURE_PALETTE_EXT: std::os::raw::c_uint = 0x81FB;
    pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS: std::os::raw::c_uint = 0x80B0;
    pub const GL_SHORT: std::os::raw::c_uint = 0x1402;
    pub const GL_SIGNALED: std::os::raw::c_uint = 0x9119;
    pub const GL_SIGNED_ALPHA8_NV: std::os::raw::c_uint = 0x8706;
    pub const GL_SIGNED_ALPHA_NV: std::os::raw::c_uint = 0x8705;
    pub const GL_SIGNED_HILO16_NV: std::os::raw::c_uint = 0x86FA;
    pub const GL_SIGNED_HILO8_NV: std::os::raw::c_uint = 0x885F;
    pub const GL_SIGNED_HILO_NV: std::os::raw::c_uint = 0x86F9;
    pub const GL_SIGNED_IDENTITY_NV: std::os::raw::c_uint = 0x853C;
    pub const GL_SIGNED_INTENSITY8_NV: std::os::raw::c_uint = 0x8708;
    pub const GL_SIGNED_INTENSITY_NV: std::os::raw::c_uint = 0x8707;
    pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV: std::os::raw::c_uint = 0x8704;
    pub const GL_SIGNED_LUMINANCE8_NV: std::os::raw::c_uint = 0x8702;
    pub const GL_SIGNED_LUMINANCE_ALPHA_NV: std::os::raw::c_uint = 0x8703;
    pub const GL_SIGNED_LUMINANCE_NV: std::os::raw::c_uint = 0x8701;
    pub const GL_SIGNED_NEGATE_NV: std::os::raw::c_uint = 0x853D;
    pub const GL_SIGNED_NORMALIZED: std::os::raw::c_uint = 0x8F9C;
    pub const GL_SIGNED_RGB8_NV: std::os::raw::c_uint = 0x86FF;
    pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV: std::os::raw::c_uint = 0x870D;
    pub const GL_SIGNED_RGBA8_NV: std::os::raw::c_uint = 0x86FC;
    pub const GL_SIGNED_RGBA_NV: std::os::raw::c_uint = 0x86FB;
    pub const GL_SIGNED_RGB_NV: std::os::raw::c_uint = 0x86FE;
    pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV: std::os::raw::c_uint = 0x870C;
    pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: std::os::raw::c_uint = 0x82AC;
    pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: std::os::raw::c_uint = 0x82AE;
    pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: std::os::raw::c_uint = 0x82AD;
    pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: std::os::raw::c_uint = 0x82AF;
    pub const GL_SINGLE_COLOR_EXT: std::os::raw::c_uint = 0x81F9;
    pub const GL_SKIP_COMPONENTS1_NV: std::os::raw::c_int = -6;
    pub const GL_SKIP_COMPONENTS2_NV: std::os::raw::c_int = -5;
    pub const GL_SKIP_COMPONENTS3_NV: std::os::raw::c_int = -4;
    pub const GL_SKIP_COMPONENTS4_NV: std::os::raw::c_int = -3;
    pub const GL_SKIP_DECODE_EXT: std::os::raw::c_uint = 0x8A4A;
    pub const GL_SKIP_MISSING_GLYPH_NV: std::os::raw::c_uint = 0x90A9;
    pub const GL_SLICE_ACCUM_SUN: std::os::raw::c_uint = 0x85CC;
    pub const GL_SLUMINANCE8_ALPHA8_EXT: std::os::raw::c_uint = 0x8C45;
    pub const GL_SLUMINANCE8_EXT: std::os::raw::c_uint = 0x8C47;
    pub const GL_SLUMINANCE_ALPHA_EXT: std::os::raw::c_uint = 0x8C44;
    pub const GL_SLUMINANCE_EXT: std::os::raw::c_uint = 0x8C46;
    pub const GL_SMALL_CCW_ARC_TO_NV: std::os::raw::c_uint = 0x12;
    pub const GL_SMALL_CW_ARC_TO_NV: std::os::raw::c_uint = 0x14;
    pub const GL_SMOOTH_CUBIC_CURVE_TO_NV: std::os::raw::c_uint = 0x10;
    pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: std::os::raw::c_uint = 0x0B23;
    pub const GL_SMOOTH_LINE_WIDTH_RANGE: std::os::raw::c_uint = 0x0B22;
    pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: std::os::raw::c_uint = 0x0B13;
    pub const GL_SMOOTH_POINT_SIZE_RANGE: std::os::raw::c_uint = 0x0B12;
    pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV: std::os::raw::c_uint = 0x0E;
    pub const GL_SM_COUNT_NV: std::os::raw::c_uint = 0x933B;
    pub const GL_SOFTLIGHT_KHR: std::os::raw::c_uint = 0x929C;
    pub const GL_SOFTLIGHT_NV: std::os::raw::c_uint = 0x929C;
    pub const GL_SOURCE0_ALPHA_ARB: std::os::raw::c_uint = 0x8588;
    pub const GL_SOURCE0_ALPHA_EXT: std::os::raw::c_uint = 0x8588;
    pub const GL_SOURCE0_RGB_ARB: std::os::raw::c_uint = 0x8580;
    pub const GL_SOURCE0_RGB_EXT: std::os::raw::c_uint = 0x8580;
    pub const GL_SOURCE1_ALPHA: std::os::raw::c_uint = 0x8589;
    pub const GL_SOURCE1_ALPHA_ARB: std::os::raw::c_uint = 0x8589;
    pub const GL_SOURCE1_ALPHA_EXT: std::os::raw::c_uint = 0x8589;
    pub const GL_SOURCE1_RGB_ARB: std::os::raw::c_uint = 0x8581;
    pub const GL_SOURCE1_RGB_EXT: std::os::raw::c_uint = 0x8581;
    pub const GL_SOURCE2_ALPHA_ARB: std::os::raw::c_uint = 0x858A;
    pub const GL_SOURCE2_ALPHA_EXT: std::os::raw::c_uint = 0x858A;
    pub const GL_SOURCE2_RGB_ARB: std::os::raw::c_uint = 0x8582;
    pub const GL_SOURCE2_RGB_EXT: std::os::raw::c_uint = 0x8582;
    pub const GL_SOURCE3_ALPHA_NV: std::os::raw::c_uint = 0x858B;
    pub const GL_SOURCE3_RGB_NV: std::os::raw::c_uint = 0x8583;
    pub const GL_SPARE0_NV: std::os::raw::c_uint = 0x852E;
    pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV: std::os::raw::c_uint = 0x8532;
    pub const GL_SPARE1_NV: std::os::raw::c_uint = 0x852F;
    pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB: std::os::raw::c_uint = 0x82F8;
    pub const GL_SPARSE_STORAGE_BIT_ARB: std::os::raw::c_uint = 0x0400;
    pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: std::os::raw::c_uint = 0x91A9;
    pub const GL_SPIR_V_BINARY: std::os::raw::c_uint = 0x9552;
    pub const GL_SPIR_V_BINARY_ARB: std::os::raw::c_uint = 0x9552;
    pub const GL_SPIR_V_EXTENSIONS: std::os::raw::c_uint = 0x9553;
    pub const GL_SPRITE_AXIAL_SGIX: std::os::raw::c_uint = 0x814C;
    pub const GL_SPRITE_AXIS_SGIX: std::os::raw::c_uint = 0x814A;
    pub const GL_SPRITE_EYE_ALIGNED_SGIX: std::os::raw::c_uint = 0x814E;
    pub const GL_SPRITE_MODE_SGIX: std::os::raw::c_uint = 0x8149;
    pub const GL_SPRITE_OBJECT_ALIGNED_SGIX: std::os::raw::c_uint = 0x814D;
    pub const GL_SPRITE_SGIX: std::os::raw::c_uint = 0x8148;
    pub const GL_SPRITE_TRANSLATION_SGIX: std::os::raw::c_uint = 0x814B;
    pub const GL_SQUARE_NV: std::os::raw::c_uint = 0x90A3;
    pub const GL_SR8_EXT: std::os::raw::c_uint = 0x8FBD;
    pub const GL_SRC1_ALPHA: std::os::raw::c_uint = 0x8589;
    pub const GL_SRC1_COLOR: std::os::raw::c_uint = 0x88F9;
    pub const GL_SRC_ALPHA: std::os::raw::c_uint = 0x0302;
    pub const GL_SRC_ALPHA_SATURATE: std::os::raw::c_uint = 0x0308;
    pub const GL_SRC_ATOP_NV: std::os::raw::c_uint = 0x928E;
    pub const GL_SRC_COLOR: std::os::raw::c_uint = 0x0300;
    pub const GL_SRC_IN_NV: std::os::raw::c_uint = 0x928A;
    pub const GL_SRC_NV: std::os::raw::c_uint = 0x9286;
    pub const GL_SRC_OUT_NV: std::os::raw::c_uint = 0x928C;
    pub const GL_SRC_OVER_NV: std::os::raw::c_uint = 0x9288;
    pub const GL_SRGB: std::os::raw::c_uint = 0x8C40;
    pub const GL_SRGB8: std::os::raw::c_uint = 0x8C41;
    pub const GL_SRGB8_ALPHA8: std::os::raw::c_uint = 0x8C43;
    pub const GL_SRGB8_ALPHA8_EXT: std::os::raw::c_uint = 0x8C43;
    pub const GL_SRGB8_EXT: std::os::raw::c_uint = 0x8C41;
    pub const GL_SRGB_ALPHA: std::os::raw::c_uint = 0x8C42;
    pub const GL_SRGB_ALPHA_EXT: std::os::raw::c_uint = 0x8C42;
    pub const GL_SRGB_DECODE_ARB: std::os::raw::c_uint = 0x8299;
    pub const GL_SRGB_EXT: std::os::raw::c_uint = 0x8C40;
    pub const GL_SRGB_READ: std::os::raw::c_uint = 0x8297;
    pub const GL_SRGB_WRITE: std::os::raw::c_uint = 0x8298;
    pub const GL_STACK_OVERFLOW: std::os::raw::c_uint = 0x0503;
    pub const GL_STACK_UNDERFLOW: std::os::raw::c_uint = 0x0504;
    pub const GL_STANDARD_FONT_FORMAT_NV: std::os::raw::c_uint = 0x936C;
    pub const GL_STANDARD_FONT_NAME_NV: std::os::raw::c_uint = 0x9072;
    pub const GL_STATIC_ATI: std::os::raw::c_uint = 0x8760;
    pub const GL_STATIC_COPY: std::os::raw::c_uint = 0x88E6;
    pub const GL_STATIC_COPY_ARB: std::os::raw::c_uint = 0x88E6;
    pub const GL_STATIC_DRAW: std::os::raw::c_uint = 0x88E4;
    pub const GL_STATIC_DRAW_ARB: std::os::raw::c_uint = 0x88E4;
    pub const GL_STATIC_READ: std::os::raw::c_uint = 0x88E5;
    pub const GL_STATIC_READ_ARB: std::os::raw::c_uint = 0x88E5;
    pub const GL_STATIC_VERTEX_ARRAY_IBM: std::os::raw::c_uint = 103061;
    pub const GL_STENCIL: std::os::raw::c_uint = 0x1802;
    pub const GL_STENCIL_ATTACHMENT: std::os::raw::c_uint = 0x8D20;
    pub const GL_STENCIL_ATTACHMENT_EXT: std::os::raw::c_uint = 0x8D20;
    pub const GL_STENCIL_BACK_FAIL: std::os::raw::c_uint = 0x8801;
    pub const GL_STENCIL_BACK_FAIL_ATI: std::os::raw::c_uint = 0x8801;
    pub const GL_STENCIL_BACK_FUNC: std::os::raw::c_uint = 0x8800;
    pub const GL_STENCIL_BACK_FUNC_ATI: std::os::raw::c_uint = 0x8800;
    pub const GL_STENCIL_BACK_OP_VALUE_AMD: std::os::raw::c_uint = 0x874D;
    pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: std::os::raw::c_uint = 0x8802;
    pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI: std::os::raw::c_uint = 0x8802;
    pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: std::os::raw::c_uint = 0x8803;
    pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI: std::os::raw::c_uint = 0x8803;
    pub const GL_STENCIL_BACK_REF: std::os::raw::c_uint = 0x8CA3;
    pub const GL_STENCIL_BACK_VALUE_MASK: std::os::raw::c_uint = 0x8CA4;
    pub const GL_STENCIL_BACK_WRITEMASK: std::os::raw::c_uint = 0x8CA5;
    pub const GL_STENCIL_BUFFER_BIT: std::os::raw::c_uint = 0x00000400;
    pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT: std::os::raw::c_uint = 0x88F3;
    pub const GL_STENCIL_CLEAR_VALUE: std::os::raw::c_uint = 0x0B91;
    pub const GL_STENCIL_COMPONENTS: std::os::raw::c_uint = 0x8285;
    pub const GL_STENCIL_FAIL: std::os::raw::c_uint = 0x0B94;
    pub const GL_STENCIL_FUNC: std::os::raw::c_uint = 0x0B92;
    pub const GL_STENCIL_INDEX: std::os::raw::c_uint = 0x1901;
    pub const GL_STENCIL_INDEX1: std::os::raw::c_uint = 0x8D46;
    pub const GL_STENCIL_INDEX16: std::os::raw::c_uint = 0x8D49;
    pub const GL_STENCIL_INDEX16_EXT: std::os::raw::c_uint = 0x8D49;
    pub const GL_STENCIL_INDEX1_EXT: std::os::raw::c_uint = 0x8D46;
    pub const GL_STENCIL_INDEX4: std::os::raw::c_uint = 0x8D47;
    pub const GL_STENCIL_INDEX4_EXT: std::os::raw::c_uint = 0x8D47;
    pub const GL_STENCIL_INDEX8: std::os::raw::c_uint = 0x8D48;
    pub const GL_STENCIL_INDEX8_EXT: std::os::raw::c_uint = 0x8D48;
    pub const GL_STENCIL_OP_VALUE_AMD: std::os::raw::c_uint = 0x874C;
    pub const GL_STENCIL_PASS_DEPTH_FAIL: std::os::raw::c_uint = 0x0B95;
    pub const GL_STENCIL_PASS_DEPTH_PASS: std::os::raw::c_uint = 0x0B96;
    pub const GL_STENCIL_REF: std::os::raw::c_uint = 0x0B97;
    pub const GL_STENCIL_REF_COMMAND_NV: std::os::raw::c_uint = 0x000C;
    pub const GL_STENCIL_RENDERABLE: std::os::raw::c_uint = 0x8288;
    pub const GL_STENCIL_SAMPLES_NV: std::os::raw::c_uint = 0x932E;
    pub const GL_STENCIL_TAG_BITS_EXT: std::os::raw::c_uint = 0x88F2;
    pub const GL_STENCIL_TEST: std::os::raw::c_uint = 0x0B90;
    pub const GL_STENCIL_TEST_TWO_SIDE_EXT: std::os::raw::c_uint = 0x8910;
    pub const GL_STENCIL_VALUE_MASK: std::os::raw::c_uint = 0x0B93;
    pub const GL_STENCIL_WRITEMASK: std::os::raw::c_uint = 0x0B98;
    pub const GL_STEREO: std::os::raw::c_uint = 0x0C33;
    pub const GL_STORAGE_CACHED_APPLE: std::os::raw::c_uint = 0x85BE;
    pub const GL_STORAGE_CLIENT_APPLE: std::os::raw::c_uint = 0x85B4;
    pub const GL_STORAGE_PRIVATE_APPLE: std::os::raw::c_uint = 0x85BD;
    pub const GL_STORAGE_SHARED_APPLE: std::os::raw::c_uint = 0x85BF;
    pub const GL_STREAM_COPY: std::os::raw::c_uint = 0x88E2;
    pub const GL_STREAM_COPY_ARB: std::os::raw::c_uint = 0x88E2;
    pub const GL_STREAM_DRAW: std::os::raw::c_uint = 0x88E0;
    pub const GL_STREAM_DRAW_ARB: std::os::raw::c_uint = 0x88E0;
    pub const GL_STREAM_RASTERIZATION_AMD: std::os::raw::c_uint = 0x91A0;
    pub const GL_STREAM_READ: std::os::raw::c_uint = 0x88E1;
    pub const GL_STREAM_READ_ARB: std::os::raw::c_uint = 0x88E1;
    pub const GL_STRICT_DEPTHFUNC_HINT_PGI: std::os::raw::c_uint = 0x1A216;
    pub const GL_STRICT_LIGHTING_HINT_PGI: std::os::raw::c_uint = 0x1A217;
    pub const GL_STRICT_SCISSOR_HINT_PGI: std::os::raw::c_uint = 0x1A218;
    pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: std::os::raw::c_uint = 0x00000004;
    pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR: std::os::raw::c_uint = 0x00000008;
    pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR: std::os::raw::c_uint = 0x00000001;
    pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: std::os::raw::c_uint = 0x00000040;
    pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: std::os::raw::c_uint = 0x00000100;
    pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR: std::os::raw::c_uint = 0x00000080;
    pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: std::os::raw::c_uint = 0x00000010;
    pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: std::os::raw::c_uint = 0x00000020;
    pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR: std::os::raw::c_uint = 0x00000002;
    pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR: std::os::raw::c_uint = 0x9535;
    pub const GL_SUBGROUP_SIZE_KHR: std::os::raw::c_uint = 0x9532;
    pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR: std::os::raw::c_uint = 0x9534;
    pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR: std::os::raw::c_uint = 0x9533;
    pub const GL_SUBPIXEL_BITS: std::os::raw::c_uint = 0x0D50;
    pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV: std::os::raw::c_uint = 0x9347;
    pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: std::os::raw::c_uint = 0x9348;
    pub const GL_SUBSAMPLE_DISTANCE_AMD: std::os::raw::c_uint = 0x883F;
    pub const GL_SUBTRACT_ARB: std::os::raw::c_uint = 0x84E7;
    pub const GL_SUB_ATI: std::os::raw::c_uint = 0x8965;
    pub const GL_SUCCESS_NV: std::os::raw::c_uint = 0x902F;
    pub const GL_SUPERSAMPLE_SCALE_X_NV: std::os::raw::c_uint = 0x9372;
    pub const GL_SUPERSAMPLE_SCALE_Y_NV: std::os::raw::c_uint = 0x9373;
    pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD: std::os::raw::c_uint = 0x91B7;
    pub const GL_SURFACE_MAPPED_NV: std::os::raw::c_uint = 0x8700;
    pub const GL_SURFACE_REGISTERED_NV: std::os::raw::c_uint = 0x86FD;
    pub const GL_SURFACE_STATE_NV: std::os::raw::c_uint = 0x86EB;
    pub const GL_SWIZZLE_STQ_ATI: std::os::raw::c_uint = 0x8977;
    pub const GL_SWIZZLE_STQ_DQ_ATI: std::os::raw::c_uint = 0x8979;
    pub const GL_SWIZZLE_STRQ_ATI: std::os::raw::c_uint = 0x897A;
    pub const GL_SWIZZLE_STRQ_DQ_ATI: std::os::raw::c_uint = 0x897B;
    pub const GL_SWIZZLE_STR_ATI: std::os::raw::c_uint = 0x8976;
    pub const GL_SWIZZLE_STR_DR_ATI: std::os::raw::c_uint = 0x8978;
    pub const GL_SYNC_CL_EVENT_ARB: std::os::raw::c_uint = 0x8240;
    pub const GL_SYNC_CL_EVENT_COMPLETE_ARB: std::os::raw::c_uint = 0x8241;
    pub const GL_SYNC_CONDITION: std::os::raw::c_uint = 0x9113;
    pub const GL_SYNC_FENCE: std::os::raw::c_uint = 0x9116;
    pub const GL_SYNC_FLAGS: std::os::raw::c_uint = 0x9115;
    pub const GL_SYNC_FLUSH_COMMANDS_BIT: std::os::raw::c_uint = 0x00000001;
    pub const GL_SYNC_GPU_COMMANDS_COMPLETE: std::os::raw::c_uint = 0x9117;
    pub const GL_SYNC_STATUS: std::os::raw::c_uint = 0x9114;
    pub const GL_SYNC_X11_FENCE_EXT: std::os::raw::c_uint = 0x90E1;
    pub const GL_SYSTEM_FONT_NAME_NV: std::os::raw::c_uint = 0x9073;
    pub const GL_T2F_IUI_N3F_V2F_EXT: std::os::raw::c_uint = 0x81B3;
    pub const GL_T2F_IUI_N3F_V3F_EXT: std::os::raw::c_uint = 0x81B4;
    pub const GL_T2F_IUI_V2F_EXT: std::os::raw::c_uint = 0x81B1;
    pub const GL_T2F_IUI_V3F_EXT: std::os::raw::c_uint = 0x81B2;
    pub const GL_TABLE_TOO_LARGE_EXT: std::os::raw::c_uint = 0x8031;
    pub const GL_TANGENT_ARRAY_EXT: std::os::raw::c_uint = 0x8439;
    pub const GL_TANGENT_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8442;
    pub const GL_TANGENT_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x843F;
    pub const GL_TANGENT_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x843E;
    pub const GL_TASK_SHADER_BIT_NV: std::os::raw::c_uint = 0x00000080;
    pub const GL_TASK_SHADER_NV: std::os::raw::c_uint = 0x955A;
    pub const GL_TASK_SUBROUTINE_NV: std::os::raw::c_uint = 0x957D;
    pub const GL_TASK_SUBROUTINE_UNIFORM_NV: std::os::raw::c_uint = 0x957F;
    pub const GL_TASK_WORK_GROUP_SIZE_NV: std::os::raw::c_uint = 0x953F;
    pub const GL_TERMINATE_SEQUENCE_COMMAND_NV: std::os::raw::c_uint = 0x0000;
    pub const GL_TESSELLATION_FACTOR_AMD: std::os::raw::c_uint = 0x9005;
    pub const GL_TESSELLATION_MODE_AMD: std::os::raw::c_uint = 0x9004;
    pub const GL_TESS_CONTROL_OUTPUT_VERTICES: std::os::raw::c_uint = 0x8E75;
    pub const GL_TESS_CONTROL_PROGRAM_NV: std::os::raw::c_uint = 0x891E;
    pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x8C74;
    pub const GL_TESS_CONTROL_SHADER: std::os::raw::c_uint = 0x8E88;
    pub const GL_TESS_CONTROL_SHADER_BIT: std::os::raw::c_uint = 0x00000008;
    pub const GL_TESS_CONTROL_SHADER_PATCHES: std::os::raw::c_uint = 0x82F1;
    pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB: std::os::raw::c_uint = 0x82F1;
    pub const GL_TESS_CONTROL_SUBROUTINE: std::os::raw::c_uint = 0x92E9;
    pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92EF;
    pub const GL_TESS_CONTROL_TEXTURE: std::os::raw::c_uint = 0x829C;
    pub const GL_TESS_EVALUATION_PROGRAM_NV: std::os::raw::c_uint = 0x891F;
    pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x8C75;
    pub const GL_TESS_EVALUATION_SHADER: std::os::raw::c_uint = 0x8E87;
    pub const GL_TESS_EVALUATION_SHADER_BIT: std::os::raw::c_uint = 0x00000010;
    pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x82F2;
    pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB: std::os::raw::c_uint = 0x82F2;
    pub const GL_TESS_EVALUATION_SUBROUTINE: std::os::raw::c_uint = 0x92EA;
    pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92F0;
    pub const GL_TESS_EVALUATION_TEXTURE: std::os::raw::c_uint = 0x829D;
    pub const GL_TESS_GEN_MODE: std::os::raw::c_uint = 0x8E76;
    pub const GL_TESS_GEN_POINT_MODE: std::os::raw::c_uint = 0x8E79;
    pub const GL_TESS_GEN_SPACING: std::os::raw::c_uint = 0x8E77;
    pub const GL_TESS_GEN_VERTEX_ORDER: std::os::raw::c_uint = 0x8E78;
    pub const GL_TEXCOORD1_BIT_PGI: std::os::raw::c_uint = 0x10000000;
    pub const GL_TEXCOORD2_BIT_PGI: std::os::raw::c_uint = 0x20000000;
    pub const GL_TEXCOORD3_BIT_PGI: std::os::raw::c_uint = 0x40000000;
    pub const GL_TEXCOORD4_BIT_PGI: std::os::raw::c_uint = 0x80000000;
    pub const GL_TEXTURE: std::os::raw::c_uint = 0x1702;
    pub const GL_TEXTURE0: std::os::raw::c_uint = 0x84C0;
    pub const GL_TEXTURE0_ARB: std::os::raw::c_uint = 0x84C0;
    pub const GL_TEXTURE1: std::os::raw::c_uint = 0x84C1;
    pub const GL_TEXTURE10: std::os::raw::c_uint = 0x84CA;
    pub const GL_TEXTURE10_ARB: std::os::raw::c_uint = 0x84CA;
    pub const GL_TEXTURE11: std::os::raw::c_uint = 0x84CB;
    pub const GL_TEXTURE11_ARB: std::os::raw::c_uint = 0x84CB;
    pub const GL_TEXTURE12: std::os::raw::c_uint = 0x84CC;
    pub const GL_TEXTURE12_ARB: std::os::raw::c_uint = 0x84CC;
    pub const GL_TEXTURE13: std::os::raw::c_uint = 0x84CD;
    pub const GL_TEXTURE13_ARB: std::os::raw::c_uint = 0x84CD;
    pub const GL_TEXTURE14: std::os::raw::c_uint = 0x84CE;
    pub const GL_TEXTURE14_ARB: std::os::raw::c_uint = 0x84CE;
    pub const GL_TEXTURE15: std::os::raw::c_uint = 0x84CF;
    pub const GL_TEXTURE15_ARB: std::os::raw::c_uint = 0x84CF;
    pub const GL_TEXTURE16: std::os::raw::c_uint = 0x84D0;
    pub const GL_TEXTURE16_ARB: std::os::raw::c_uint = 0x84D0;
    pub const GL_TEXTURE17: std::os::raw::c_uint = 0x84D1;
    pub const GL_TEXTURE17_ARB: std::os::raw::c_uint = 0x84D1;
    pub const GL_TEXTURE18: std::os::raw::c_uint = 0x84D2;
    pub const GL_TEXTURE18_ARB: std::os::raw::c_uint = 0x84D2;
    pub const GL_TEXTURE19: std::os::raw::c_uint = 0x84D3;
    pub const GL_TEXTURE19_ARB: std::os::raw::c_uint = 0x84D3;
    pub const GL_TEXTURE1_ARB: std::os::raw::c_uint = 0x84C1;
    pub const GL_TEXTURE2: std::os::raw::c_uint = 0x84C2;
    pub const GL_TEXTURE20: std::os::raw::c_uint = 0x84D4;
    pub const GL_TEXTURE20_ARB: std::os::raw::c_uint = 0x84D4;
    pub const GL_TEXTURE21: std::os::raw::c_uint = 0x84D5;
    pub const GL_TEXTURE21_ARB: std::os::raw::c_uint = 0x84D5;
    pub const GL_TEXTURE22: std::os::raw::c_uint = 0x84D6;
    pub const GL_TEXTURE22_ARB: std::os::raw::c_uint = 0x84D6;
    pub const GL_TEXTURE23: std::os::raw::c_uint = 0x84D7;
    pub const GL_TEXTURE23_ARB: std::os::raw::c_uint = 0x84D7;
    pub const GL_TEXTURE24: std::os::raw::c_uint = 0x84D8;
    pub const GL_TEXTURE24_ARB: std::os::raw::c_uint = 0x84D8;
    pub const GL_TEXTURE25: std::os::raw::c_uint = 0x84D9;
    pub const GL_TEXTURE25_ARB: std::os::raw::c_uint = 0x84D9;
    pub const GL_TEXTURE26: std::os::raw::c_uint = 0x84DA;
    pub const GL_TEXTURE26_ARB: std::os::raw::c_uint = 0x84DA;
    pub const GL_TEXTURE27: std::os::raw::c_uint = 0x84DB;
    pub const GL_TEXTURE27_ARB: std::os::raw::c_uint = 0x84DB;
    pub const GL_TEXTURE28: std::os::raw::c_uint = 0x84DC;
    pub const GL_TEXTURE28_ARB: std::os::raw::c_uint = 0x84DC;
    pub const GL_TEXTURE29: std::os::raw::c_uint = 0x84DD;
    pub const GL_TEXTURE29_ARB: std::os::raw::c_uint = 0x84DD;
    pub const GL_TEXTURE2_ARB: std::os::raw::c_uint = 0x84C2;
    pub const GL_TEXTURE3: std::os::raw::c_uint = 0x84C3;
    pub const GL_TEXTURE30: std::os::raw::c_uint = 0x84DE;
    pub const GL_TEXTURE30_ARB: std::os::raw::c_uint = 0x84DE;
    pub const GL_TEXTURE31: std::os::raw::c_uint = 0x84DF;
    pub const GL_TEXTURE31_ARB: std::os::raw::c_uint = 0x84DF;
    pub const GL_TEXTURE3_ARB: std::os::raw::c_uint = 0x84C3;
    pub const GL_TEXTURE4: std::os::raw::c_uint = 0x84C4;
    pub const GL_TEXTURE4_ARB: std::os::raw::c_uint = 0x84C4;
    pub const GL_TEXTURE5: std::os::raw::c_uint = 0x84C5;
    pub const GL_TEXTURE5_ARB: std::os::raw::c_uint = 0x84C5;
    pub const GL_TEXTURE6: std::os::raw::c_uint = 0x84C6;
    pub const GL_TEXTURE6_ARB: std::os::raw::c_uint = 0x84C6;
    pub const GL_TEXTURE7: std::os::raw::c_uint = 0x84C7;
    pub const GL_TEXTURE7_ARB: std::os::raw::c_uint = 0x84C7;
    pub const GL_TEXTURE8: std::os::raw::c_uint = 0x84C8;
    pub const GL_TEXTURE8_ARB: std::os::raw::c_uint = 0x84C8;
    pub const GL_TEXTURE9: std::os::raw::c_uint = 0x84C9;
    pub const GL_TEXTURE9_ARB: std::os::raw::c_uint = 0x84C9;
    pub const GL_TEXTURE_1D: std::os::raw::c_uint = 0x0DE0;
    pub const GL_TEXTURE_1D_ARRAY: std::os::raw::c_uint = 0x8C18;
    pub const GL_TEXTURE_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8C18;
    pub const GL_TEXTURE_1D_BINDING_EXT: std::os::raw::c_uint = 0x8068;
    pub const GL_TEXTURE_1D_STACK_BINDING_MESAX: std::os::raw::c_uint = 0x875D;
    pub const GL_TEXTURE_1D_STACK_MESAX: std::os::raw::c_uint = 0x8759;
    pub const GL_TEXTURE_2D: std::os::raw::c_uint = 0x0DE1;
    pub const GL_TEXTURE_2D_ARRAY: std::os::raw::c_uint = 0x8C1A;
    pub const GL_TEXTURE_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8C1A;
    pub const GL_TEXTURE_2D_BINDING_EXT: std::os::raw::c_uint = 0x8069;
    pub const GL_TEXTURE_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9100;
    pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x9102;
    pub const GL_TEXTURE_2D_STACK_BINDING_MESAX: std::os::raw::c_uint = 0x875E;
    pub const GL_TEXTURE_2D_STACK_MESAX: std::os::raw::c_uint = 0x875A;
    pub const GL_TEXTURE_3D: std::os::raw::c_uint = 0x806F;
    pub const GL_TEXTURE_3D_BINDING_EXT: std::os::raw::c_uint = 0x806A;
    pub const GL_TEXTURE_3D_EXT: std::os::raw::c_uint = 0x806F;
    pub const GL_TEXTURE_4DSIZE_SGIS: std::os::raw::c_uint = 0x8136;
    pub const GL_TEXTURE_4D_BINDING_SGIS: std::os::raw::c_uint = 0x814F;
    pub const GL_TEXTURE_4D_SGIS: std::os::raw::c_uint = 0x8134;
    pub const GL_TEXTURE_ALPHA_SIZE: std::os::raw::c_uint = 0x805F;
    pub const GL_TEXTURE_ALPHA_SIZE_EXT: std::os::raw::c_uint = 0x805F;
    pub const GL_TEXTURE_ALPHA_TYPE: std::os::raw::c_uint = 0x8C13;
    pub const GL_TEXTURE_ALPHA_TYPE_ARB: std::os::raw::c_uint = 0x8C13;
    pub const GL_TEXTURE_APPLICATION_MODE_EXT: std::os::raw::c_uint = 0x834F;
    pub const GL_TEXTURE_BASE_LEVEL: std::os::raw::c_uint = 0x813C;
    pub const GL_TEXTURE_BASE_LEVEL_SGIS: std::os::raw::c_uint = 0x813C;
    pub const GL_TEXTURE_BINDING_1D: std::os::raw::c_uint = 0x8068;
    pub const GL_TEXTURE_BINDING_1D_ARRAY: std::os::raw::c_uint = 0x8C1C;
    pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8C1C;
    pub const GL_TEXTURE_BINDING_2D: std::os::raw::c_uint = 0x8069;
    pub const GL_TEXTURE_BINDING_2D_ARRAY: std::os::raw::c_uint = 0x8C1D;
    pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8C1D;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: std::os::raw::c_uint = 0x9104;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x9105;
    pub const GL_TEXTURE_BINDING_3D: std::os::raw::c_uint = 0x806A;
    pub const GL_TEXTURE_BINDING_BUFFER: std::os::raw::c_uint = 0x8C2C;
    pub const GL_TEXTURE_BINDING_BUFFER_ARB: std::os::raw::c_uint = 0x8C2C;
    pub const GL_TEXTURE_BINDING_BUFFER_EXT: std::os::raw::c_uint = 0x8C2C;
    pub const GL_TEXTURE_BINDING_CUBE_MAP: std::os::raw::c_uint = 0x8514;
    pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: std::os::raw::c_uint = 0x8514;
    pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x900A;
    pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x900A;
    pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT: std::os::raw::c_uint = 0x8514;
    pub const GL_TEXTURE_BINDING_RECTANGLE: std::os::raw::c_uint = 0x84F6;
    pub const GL_TEXTURE_BINDING_RECTANGLE_ARB: std::os::raw::c_uint = 0x84F6;
    pub const GL_TEXTURE_BINDING_RECTANGLE_NV: std::os::raw::c_uint = 0x84F6;
    pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV: std::os::raw::c_uint = 0x8E53;
    pub const GL_TEXTURE_BLUE_SIZE: std::os::raw::c_uint = 0x805E;
    pub const GL_TEXTURE_BLUE_SIZE_EXT: std::os::raw::c_uint = 0x805E;
    pub const GL_TEXTURE_BLUE_TYPE: std::os::raw::c_uint = 0x8C12;
    pub const GL_TEXTURE_BLUE_TYPE_ARB: std::os::raw::c_uint = 0x8C12;
    pub const GL_TEXTURE_BORDER_COLOR: std::os::raw::c_uint = 0x1004;
    pub const GL_TEXTURE_BORDER_VALUES_NV: std::os::raw::c_uint = 0x871A;
    pub const GL_TEXTURE_BUFFER: std::os::raw::c_uint = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_ARB: std::os::raw::c_uint = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_BINDING: std::os::raw::c_uint = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: std::os::raw::c_uint = 0x8C2D;
    pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: std::os::raw::c_uint = 0x8C2D;
    pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: std::os::raw::c_uint = 0x8C2D;
    pub const GL_TEXTURE_BUFFER_EXT: std::os::raw::c_uint = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_FORMAT_ARB: std::os::raw::c_uint = 0x8C2E;
    pub const GL_TEXTURE_BUFFER_FORMAT_EXT: std::os::raw::c_uint = 0x8C2E;
    pub const GL_TEXTURE_BUFFER_OFFSET: std::os::raw::c_uint = 0x919D;
    pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: std::os::raw::c_uint = 0x919F;
    pub const GL_TEXTURE_BUFFER_SIZE: std::os::raw::c_uint = 0x919E;
    pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX: std::os::raw::c_uint = 0x8171;
    pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX: std::os::raw::c_uint = 0x8176;
    pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX: std::os::raw::c_uint = 0x8172;
    pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: std::os::raw::c_uint = 0x8175;
    pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX: std::os::raw::c_uint = 0x8173;
    pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: std::os::raw::c_uint = 0x8174;
    pub const GL_TEXTURE_COLOR_SAMPLES_NV: std::os::raw::c_uint = 0x9046;
    pub const GL_TEXTURE_COLOR_TABLE_SGI: std::os::raw::c_uint = 0x80BC;
    pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS: std::os::raw::c_uint = 0x81EF;
    pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: std::os::raw::c_uint = 0x80BF;
    pub const GL_TEXTURE_COMPARE_FUNC: std::os::raw::c_uint = 0x884D;
    pub const GL_TEXTURE_COMPARE_FUNC_ARB: std::os::raw::c_uint = 0x884D;
    pub const GL_TEXTURE_COMPARE_MODE: std::os::raw::c_uint = 0x884C;
    pub const GL_TEXTURE_COMPARE_MODE_ARB: std::os::raw::c_uint = 0x884C;
    pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX: std::os::raw::c_uint = 0x819B;
    pub const GL_TEXTURE_COMPARE_SGIX: std::os::raw::c_uint = 0x819A;
    pub const GL_TEXTURE_COMPRESSED: std::os::raw::c_uint = 0x86A1;
    pub const GL_TEXTURE_COMPRESSED_ARB: std::os::raw::c_uint = 0x86A1;
    pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: std::os::raw::c_uint = 0x82B2;
    pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: std::os::raw::c_uint = 0x82B3;
    pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: std::os::raw::c_uint = 0x82B1;
    pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: std::os::raw::c_uint = 0x86A0;
    pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: std::os::raw::c_uint = 0x86A0;
    pub const GL_TEXTURE_COMPRESSION_HINT: std::os::raw::c_uint = 0x84EF;
    pub const GL_TEXTURE_COMPRESSION_HINT_ARB: std::os::raw::c_uint = 0x84EF;
    pub const GL_TEXTURE_CONSTANT_DATA_SUNX: std::os::raw::c_uint = 0x81D6;
    pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F25;
    pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889A;
    pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x808B;
    pub const GL_TEXTURE_COORD_ARRAY_EXT: std::os::raw::c_uint = 0x8078;
    pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2F;
    pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM: std::os::raw::c_uint = 103074;
    pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103084;
    pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: std::os::raw::c_uint = 0x83F8;
    pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8092;
    pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT: std::os::raw::c_uint = 0x8088;
    pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x808A;
    pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x8089;
    pub const GL_TEXTURE_COORD_NV: std::os::raw::c_uint = 0x8C79;
    pub const GL_TEXTURE_COVERAGE_SAMPLES_NV: std::os::raw::c_uint = 0x9045;
    pub const GL_TEXTURE_CUBE_MAP: std::os::raw::c_uint = 0x8513;
    pub const GL_TEXTURE_CUBE_MAP_ARB: std::os::raw::c_uint = 0x8513;
    pub const GL_TEXTURE_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x9009;
    pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x9009;
    pub const GL_TEXTURE_CUBE_MAP_EXT: std::os::raw::c_uint = 0x8513;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: std::os::raw::c_uint = 0x8516;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: std::os::raw::c_uint = 0x8516;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: std::os::raw::c_uint = 0x8516;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: std::os::raw::c_uint = 0x8518;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: std::os::raw::c_uint = 0x8518;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: std::os::raw::c_uint = 0x8518;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: std::os::raw::c_uint = 0x851A;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: std::os::raw::c_uint = 0x851A;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: std::os::raw::c_uint = 0x851A;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: std::os::raw::c_uint = 0x8515;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: std::os::raw::c_uint = 0x8515;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT: std::os::raw::c_uint = 0x8515;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: std::os::raw::c_uint = 0x8517;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: std::os::raw::c_uint = 0x8517;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: std::os::raw::c_uint = 0x8517;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: std::os::raw::c_uint = 0x8519;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: std::os::raw::c_uint = 0x8519;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: std::os::raw::c_uint = 0x8519;
    pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: std::os::raw::c_uint = 0x884F;
    pub const GL_TEXTURE_DEFORMATION_BIT_SGIX: std::os::raw::c_uint = 0x00000001;
    pub const GL_TEXTURE_DEFORMATION_SGIX: std::os::raw::c_uint = 0x8195;
    pub const GL_TEXTURE_DEPTH: std::os::raw::c_uint = 0x8071;
    pub const GL_TEXTURE_DEPTH_EXT: std::os::raw::c_uint = 0x8071;
    pub const GL_TEXTURE_DEPTH_SIZE: std::os::raw::c_uint = 0x884A;
    pub const GL_TEXTURE_DEPTH_SIZE_ARB: std::os::raw::c_uint = 0x884A;
    pub const GL_TEXTURE_DEPTH_TYPE: std::os::raw::c_uint = 0x8C16;
    pub const GL_TEXTURE_DEPTH_TYPE_ARB: std::os::raw::c_uint = 0x8C16;
    pub const GL_TEXTURE_DS_SIZE_NV: std::os::raw::c_uint = 0x871D;
    pub const GL_TEXTURE_DT_SIZE_NV: std::os::raw::c_uint = 0x871E;
    pub const GL_TEXTURE_ENV_BIAS_SGIX: std::os::raw::c_uint = 0x80BE;
    pub const GL_TEXTURE_FETCH_BARRIER_BIT: std::os::raw::c_uint = 0x00000008;
    pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000008;
    pub const GL_TEXTURE_FILTER4_SIZE_SGIS: std::os::raw::c_uint = 0x8147;
    pub const GL_TEXTURE_FILTER_CONTROL_EXT: std::os::raw::c_uint = 0x8500;
    pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: std::os::raw::c_uint = 0x9107;
    pub const GL_TEXTURE_FLOAT_COMPONENTS_NV: std::os::raw::c_uint = 0x888C;
    pub const GL_TEXTURE_FREE_MEMORY_ATI: std::os::raw::c_uint = 0x87FC;
    pub const GL_TEXTURE_GATHER: std::os::raw::c_uint = 0x82A2;
    pub const GL_TEXTURE_GATHER_SHADOW: std::os::raw::c_uint = 0x82A3;
    pub const GL_TEXTURE_GEQUAL_R_SGIX: std::os::raw::c_uint = 0x819D;
    pub const GL_TEXTURE_GREEN_SIZE: std::os::raw::c_uint = 0x805D;
    pub const GL_TEXTURE_GREEN_SIZE_EXT: std::os::raw::c_uint = 0x805D;
    pub const GL_TEXTURE_GREEN_TYPE: std::os::raw::c_uint = 0x8C11;
    pub const GL_TEXTURE_GREEN_TYPE_ARB: std::os::raw::c_uint = 0x8C11;
    pub const GL_TEXTURE_HEIGHT: std::os::raw::c_uint = 0x1001;
    pub const GL_TEXTURE_HI_SIZE_NV: std::os::raw::c_uint = 0x871B;
    pub const GL_TEXTURE_IMAGE_FORMAT: std::os::raw::c_uint = 0x828F;
    pub const GL_TEXTURE_IMAGE_TYPE: std::os::raw::c_uint = 0x8290;
    pub const GL_TEXTURE_IMMUTABLE_FORMAT: std::os::raw::c_uint = 0x912F;
    pub const GL_TEXTURE_IMMUTABLE_LEVELS: std::os::raw::c_uint = 0x82DF;
    pub const GL_TEXTURE_INDEX_SIZE_EXT: std::os::raw::c_uint = 0x80ED;
    pub const GL_TEXTURE_INTENSITY_SIZE_EXT: std::os::raw::c_uint = 0x8061;
    pub const GL_TEXTURE_INTENSITY_TYPE_ARB: std::os::raw::c_uint = 0x8C15;
    pub const GL_TEXTURE_INTERNAL_FORMAT: std::os::raw::c_uint = 0x1003;
    pub const GL_TEXTURE_LEQUAL_R_SGIX: std::os::raw::c_uint = 0x819C;
    pub const GL_TEXTURE_LIGHTING_MODE_HP: std::os::raw::c_uint = 0x8167;
    pub const GL_TEXTURE_LIGHT_EXT: std::os::raw::c_uint = 0x8350;
    pub const GL_TEXTURE_LOD_BIAS: std::os::raw::c_uint = 0x8501;
    pub const GL_TEXTURE_LOD_BIAS_EXT: std::os::raw::c_uint = 0x8501;
    pub const GL_TEXTURE_LOD_BIAS_R_SGIX: std::os::raw::c_uint = 0x8190;
    pub const GL_TEXTURE_LOD_BIAS_S_SGIX: std::os::raw::c_uint = 0x818E;
    pub const GL_TEXTURE_LOD_BIAS_T_SGIX: std::os::raw::c_uint = 0x818F;
    pub const GL_TEXTURE_LO_SIZE_NV: std::os::raw::c_uint = 0x871C;
    pub const GL_TEXTURE_LUMINANCE_SIZE_EXT: std::os::raw::c_uint = 0x8060;
    pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: std::os::raw::c_uint = 0x8C14;
    pub const GL_TEXTURE_MAG_FILTER: std::os::raw::c_uint = 0x2800;
    pub const GL_TEXTURE_MAG_SIZE_NV: std::os::raw::c_uint = 0x871F;
    pub const GL_TEXTURE_MATERIAL_FACE_EXT: std::os::raw::c_uint = 0x8351;
    pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT: std::os::raw::c_uint = 0x8352;
    pub const GL_TEXTURE_MAX_ANISOTROPY: std::os::raw::c_uint = 0x84FE;
    pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: std::os::raw::c_uint = 0x84FE;
    pub const GL_TEXTURE_MAX_CLAMP_R_SGIX: std::os::raw::c_uint = 0x836B;
    pub const GL_TEXTURE_MAX_CLAMP_S_SGIX: std::os::raw::c_uint = 0x8369;
    pub const GL_TEXTURE_MAX_CLAMP_T_SGIX: std::os::raw::c_uint = 0x836A;
    pub const GL_TEXTURE_MAX_LEVEL: std::os::raw::c_uint = 0x813D;
    pub const GL_TEXTURE_MAX_LEVEL_SGIS: std::os::raw::c_uint = 0x813D;
    pub const GL_TEXTURE_MAX_LOD: std::os::raw::c_uint = 0x813B;
    pub const GL_TEXTURE_MAX_LOD_SGIS: std::os::raw::c_uint = 0x813B;
    pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL: std::os::raw::c_uint = 0x83FF;
    pub const GL_TEXTURE_MIN_FILTER: std::os::raw::c_uint = 0x2801;
    pub const GL_TEXTURE_MIN_LOD: std::os::raw::c_uint = 0x813A;
    pub const GL_TEXTURE_MIN_LOD_SGIS: std::os::raw::c_uint = 0x813A;
    pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX: std::os::raw::c_uint = 0x812E;
    pub const GL_TEXTURE_NORMAL_EXT: std::os::raw::c_uint = 0x85AF;
    pub const GL_TEXTURE_POST_SPECULAR_HP: std::os::raw::c_uint = 0x8168;
    pub const GL_TEXTURE_PRE_SPECULAR_HP: std::os::raw::c_uint = 0x8169;
    pub const GL_TEXTURE_PRIORITY_EXT: std::os::raw::c_uint = 0x8066;
    pub const GL_TEXTURE_RANGE_LENGTH_APPLE: std::os::raw::c_uint = 0x85B7;
    pub const GL_TEXTURE_RANGE_POINTER_APPLE: std::os::raw::c_uint = 0x85B8;
    pub const GL_TEXTURE_RECTANGLE: std::os::raw::c_uint = 0x84F5;
    pub const GL_TEXTURE_RECTANGLE_ARB: std::os::raw::c_uint = 0x84F5;
    pub const GL_TEXTURE_RECTANGLE_NV: std::os::raw::c_uint = 0x84F5;
    pub const GL_TEXTURE_REDUCTION_MODE_ARB: std::os::raw::c_uint = 0x9366;
    pub const GL_TEXTURE_REDUCTION_MODE_EXT: std::os::raw::c_uint = 0x9366;
    pub const GL_TEXTURE_RED_SIZE: std::os::raw::c_uint = 0x805C;
    pub const GL_TEXTURE_RED_SIZE_EXT: std::os::raw::c_uint = 0x805C;
    pub const GL_TEXTURE_RED_TYPE: std::os::raw::c_uint = 0x8C10;
    pub const GL_TEXTURE_RED_TYPE_ARB: std::os::raw::c_uint = 0x8C10;
    pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: std::os::raw::c_uint = 0x8E54;
    pub const GL_TEXTURE_RENDERBUFFER_NV: std::os::raw::c_uint = 0x8E55;
    pub const GL_TEXTURE_RESIDENT_EXT: std::os::raw::c_uint = 0x8067;
    pub const GL_TEXTURE_SAMPLES: std::os::raw::c_uint = 0x9106;
    pub const GL_TEXTURE_SHADER_NV: std::os::raw::c_uint = 0x86DE;
    pub const GL_TEXTURE_SHADOW: std::os::raw::c_uint = 0x82A1;
    pub const GL_TEXTURE_SHARED_SIZE: std::os::raw::c_uint = 0x8C3F;
    pub const GL_TEXTURE_SHARED_SIZE_EXT: std::os::raw::c_uint = 0x8C3F;
    pub const GL_TEXTURE_SPARSE_ARB: std::os::raw::c_uint = 0x91A6;
    pub const GL_TEXTURE_SRGB_DECODE_EXT: std::os::raw::c_uint = 0x8A48;
    pub const GL_TEXTURE_STENCIL_SIZE: std::os::raw::c_uint = 0x88F1;
    pub const GL_TEXTURE_STENCIL_SIZE_EXT: std::os::raw::c_uint = 0x88F1;
    pub const GL_TEXTURE_STORAGE_HINT_APPLE: std::os::raw::c_uint = 0x85BC;
    pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD: std::os::raw::c_uint = 0x00000001;
    pub const GL_TEXTURE_SWIZZLE_A: std::os::raw::c_uint = 0x8E45;
    pub const GL_TEXTURE_SWIZZLE_A_EXT: std::os::raw::c_uint = 0x8E45;
    pub const GL_TEXTURE_SWIZZLE_B: std::os::raw::c_uint = 0x8E44;
    pub const GL_TEXTURE_SWIZZLE_B_EXT: std::os::raw::c_uint = 0x8E44;
    pub const GL_TEXTURE_SWIZZLE_G: std::os::raw::c_uint = 0x8E43;
    pub const GL_TEXTURE_SWIZZLE_G_EXT: std::os::raw::c_uint = 0x8E43;
    pub const GL_TEXTURE_SWIZZLE_R: std::os::raw::c_uint = 0x8E42;
    pub const GL_TEXTURE_SWIZZLE_RGBA: std::os::raw::c_uint = 0x8E46;
    pub const GL_TEXTURE_SWIZZLE_RGBA_EXT: std::os::raw::c_uint = 0x8E46;
    pub const GL_TEXTURE_SWIZZLE_R_EXT: std::os::raw::c_uint = 0x8E42;
    pub const GL_TEXTURE_TARGET: std::os::raw::c_uint = 0x1006;
    pub const GL_TEXTURE_TILING_EXT: std::os::raw::c_uint = 0x9580;
    pub const GL_TEXTURE_TOO_LARGE_EXT: std::os::raw::c_uint = 0x8065;
    pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV: std::os::raw::c_uint = 0x888F;
    pub const GL_TEXTURE_UPDATE_BARRIER_BIT: std::os::raw::c_uint = 0x00000100;
    pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000100;
    pub const GL_TEXTURE_VIEW: std::os::raw::c_uint = 0x82B5;
    pub const GL_TEXTURE_VIEW_MIN_LAYER: std::os::raw::c_uint = 0x82DD;
    pub const GL_TEXTURE_VIEW_MIN_LEVEL: std::os::raw::c_uint = 0x82DB;
    pub const GL_TEXTURE_VIEW_NUM_LAYERS: std::os::raw::c_uint = 0x82DE;
    pub const GL_TEXTURE_VIEW_NUM_LEVELS: std::os::raw::c_uint = 0x82DC;
    pub const GL_TEXTURE_WIDTH: std::os::raw::c_uint = 0x1000;
    pub const GL_TEXTURE_WRAP_Q_SGIS: std::os::raw::c_uint = 0x8137;
    pub const GL_TEXTURE_WRAP_R: std::os::raw::c_uint = 0x8072;
    pub const GL_TEXTURE_WRAP_R_EXT: std::os::raw::c_uint = 0x8072;
    pub const GL_TEXTURE_WRAP_S: std::os::raw::c_uint = 0x2802;
    pub const GL_TEXTURE_WRAP_T: std::os::raw::c_uint = 0x2803;
    pub const GL_TEXT_FRAGMENT_SHADER_ATI: std::os::raw::c_uint = 0x8200;
    pub const GL_TILE_RASTER_ORDER_FIXED_MESA: std::os::raw::c_uint = 0x8BB8;
    pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA: std::os::raw::c_uint = 0x8BB9;
    pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA: std::os::raw::c_uint = 0x8BBA;
    pub const GL_TILING_TYPES_EXT: std::os::raw::c_uint = 0x9583;
    pub const GL_TIMEOUT_EXPIRED: std::os::raw::c_uint = 0x911B;
    pub const GL_TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
    pub const GL_TIMESTAMP: std::os::raw::c_uint = 0x8E28;
    pub const GL_TIME_ELAPSED: std::os::raw::c_uint = 0x88BF;
    pub const GL_TIME_ELAPSED_EXT: std::os::raw::c_uint = 0x88BF;
    pub const GL_TOP_LEVEL_ARRAY_SIZE: std::os::raw::c_uint = 0x930C;
    pub const GL_TOP_LEVEL_ARRAY_STRIDE: std::os::raw::c_uint = 0x930D;
    pub const GL_TRACK_MATRIX_NV: std::os::raw::c_uint = 0x8648;
    pub const GL_TRACK_MATRIX_TRANSFORM_NV: std::os::raw::c_uint = 0x8649;
    pub const GL_TRANSFORM_FEEDBACK: std::os::raw::c_uint = 0x8E22;
    pub const GL_TRANSFORM_FEEDBACK_ACTIVE: std::os::raw::c_uint = 0x8E24;
    pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV: std::os::raw::c_uint = 0x8C7E;
    pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: std::os::raw::c_uint = 0x00000800;
    pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000800;
    pub const GL_TRANSFORM_FEEDBACK_BINDING: std::os::raw::c_uint = 0x8E25;
    pub const GL_TRANSFORM_FEEDBACK_BINDING_NV: std::os::raw::c_uint = 0x8E25;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER: std::os::raw::c_uint = 0x8C8E;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: std::os::raw::c_uint = 0x8E24;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: std::os::raw::c_uint = 0x8E24;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: std::os::raw::c_uint = 0x8C8F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8C8F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: std::os::raw::c_uint = 0x8C8F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT: std::os::raw::c_uint = 0x8C8E;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: std::os::raw::c_uint = 0x934B;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: std::os::raw::c_uint = 0x8C7F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: std::os::raw::c_uint = 0x8C7F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV: std::os::raw::c_uint = 0x8C7F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV: std::os::raw::c_uint = 0x8C8E;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: std::os::raw::c_uint = 0x8E23;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: std::os::raw::c_uint = 0x8E23;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: std::os::raw::c_uint = 0x8C85;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: std::os::raw::c_uint = 0x8C85;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: std::os::raw::c_uint = 0x8C85;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: std::os::raw::c_uint = 0x8C84;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: std::os::raw::c_uint = 0x8C84;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV: std::os::raw::c_uint = 0x8C84;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: std::os::raw::c_uint = 0x934C;
    pub const GL_TRANSFORM_FEEDBACK_NV: std::os::raw::c_uint = 0x8E22;
    pub const GL_TRANSFORM_FEEDBACK_OVERFLOW: std::os::raw::c_uint = 0x82EC;
    pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB: std::os::raw::c_uint = 0x82EC;
    pub const GL_TRANSFORM_FEEDBACK_PAUSED: std::os::raw::c_uint = 0x8E23;
    pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: std::os::raw::c_uint = 0x8C88;
    pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: std::os::raw::c_uint = 0x8C88;
    pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: std::os::raw::c_uint = 0x8C88;
    pub const GL_TRANSFORM_FEEDBACK_RECORD_NV: std::os::raw::c_uint = 0x8C86;
    pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW: std::os::raw::c_uint = 0x82ED;
    pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB: std::os::raw::c_uint = 0x82ED;
    pub const GL_TRANSFORM_FEEDBACK_VARYING: std::os::raw::c_uint = 0x92F4;
    pub const GL_TRANSFORM_FEEDBACK_VARYINGS: std::os::raw::c_uint = 0x8C83;
    pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT: std::os::raw::c_uint = 0x8C83;
    pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV: std::os::raw::c_uint = 0x8C83;
    pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: std::os::raw::c_uint = 0x8C76;
    pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: std::os::raw::c_uint = 0x8C76;
    pub const GL_TRANSFORM_HINT_APPLE: std::os::raw::c_uint = 0x85B1;
    pub const GL_TRANSLATE_2D_NV: std::os::raw::c_uint = 0x9090;
    pub const GL_TRANSLATE_3D_NV: std::os::raw::c_uint = 0x9091;
    pub const GL_TRANSLATE_X_NV: std::os::raw::c_uint = 0x908E;
    pub const GL_TRANSLATE_Y_NV: std::os::raw::c_uint = 0x908F;
    pub const GL_TRANSPOSE_AFFINE_2D_NV: std::os::raw::c_uint = 0x9096;
    pub const GL_TRANSPOSE_AFFINE_3D_NV: std::os::raw::c_uint = 0x9098;
    pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: std::os::raw::c_uint = 0x84E6;
    pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: std::os::raw::c_uint = 0x88B7;
    pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: std::os::raw::c_uint = 0x84E3;
    pub const GL_TRANSPOSE_NV: std::os::raw::c_uint = 0x862C;
    pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT: std::os::raw::c_uint = 0x8E2E;
    pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: std::os::raw::c_uint = 0x84E4;
    pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: std::os::raw::c_uint = 0x84E5;
    pub const GL_TRIANGLES: std::os::raw::c_uint = 0x0004;
    pub const GL_TRIANGLES_ADJACENCY: std::os::raw::c_uint = 0x000C;
    pub const GL_TRIANGLES_ADJACENCY_ARB: std::os::raw::c_uint = 0x000C;
    pub const GL_TRIANGLES_ADJACENCY_EXT: std::os::raw::c_uint = 0x000C;
    pub const GL_TRIANGLE_FAN: std::os::raw::c_uint = 0x0006;
    pub const GL_TRIANGLE_LIST_SUN: std::os::raw::c_uint = 0x81D7;
    pub const GL_TRIANGLE_MESH_SUN: std::os::raw::c_uint = 0x8615;
    pub const GL_TRIANGLE_STRIP: std::os::raw::c_uint = 0x0005;
    pub const GL_TRIANGLE_STRIP_ADJACENCY: std::os::raw::c_uint = 0x000D;
    pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB: std::os::raw::c_uint = 0x000D;
    pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: std::os::raw::c_uint = 0x000D;
    pub const GL_TRIANGULAR_NV: std::os::raw::c_uint = 0x90A5;
    pub const GL_TRUE: std::os::raw::c_uchar = 1;
    pub const GL_TYPE: std::os::raw::c_uint = 0x92FA;
    pub const GL_UNCORRELATED_NV: std::os::raw::c_uint = 0x9282;
    pub const GL_UNDEFINED_APPLE: std::os::raw::c_uint = 0x8A1C;
    pub const GL_UNDEFINED_VERTEX: std::os::raw::c_uint = 0x8260;
    pub const GL_UNIFORM: std::os::raw::c_uint = 0x92E1;
    pub const GL_UNIFORM_ADDRESS_COMMAND_NV: std::os::raw::c_uint = 0x000A;
    pub const GL_UNIFORM_ARRAY_STRIDE: std::os::raw::c_uint = 0x8A3C;
    pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: std::os::raw::c_uint = 0x92DA;
    pub const GL_UNIFORM_BARRIER_BIT: std::os::raw::c_uint = 0x00000004;
    pub const GL_UNIFORM_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000004;
    pub const GL_UNIFORM_BLOCK: std::os::raw::c_uint = 0x92E2;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: std::os::raw::c_uint = 0x8A42;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: std::os::raw::c_uint = 0x8A43;
    pub const GL_UNIFORM_BLOCK_BINDING: std::os::raw::c_uint = 0x8A3F;
    pub const GL_UNIFORM_BLOCK_DATA_SIZE: std::os::raw::c_uint = 0x8A40;
    pub const GL_UNIFORM_BLOCK_INDEX: std::os::raw::c_uint = 0x8A3A;
    pub const GL_UNIFORM_BLOCK_NAME_LENGTH: std::os::raw::c_uint = 0x8A41;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: std::os::raw::c_uint = 0x90EC;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: std::os::raw::c_uint = 0x8A46;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: std::os::raw::c_uint = 0x8A45;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: std::os::raw::c_uint = 0x959C;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: std::os::raw::c_uint = 0x959D;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: std::os::raw::c_uint = 0x84F0;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: std::os::raw::c_uint = 0x84F1;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: std::os::raw::c_uint = 0x8A44;
    pub const GL_UNIFORM_BUFFER: std::os::raw::c_uint = 0x8A11;
    pub const GL_UNIFORM_BUFFER_ADDRESS_NV: std::os::raw::c_uint = 0x936F;
    pub const GL_UNIFORM_BUFFER_BINDING: std::os::raw::c_uint = 0x8A28;
    pub const GL_UNIFORM_BUFFER_BINDING_EXT: std::os::raw::c_uint = 0x8DEF;
    pub const GL_UNIFORM_BUFFER_EXT: std::os::raw::c_uint = 0x8DEE;
    pub const GL_UNIFORM_BUFFER_LENGTH_NV: std::os::raw::c_uint = 0x9370;
    pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: std::os::raw::c_uint = 0x8A34;
    pub const GL_UNIFORM_BUFFER_SIZE: std::os::raw::c_uint = 0x8A2A;
    pub const GL_UNIFORM_BUFFER_START: std::os::raw::c_uint = 0x8A29;
    pub const GL_UNIFORM_BUFFER_UNIFIED_NV: std::os::raw::c_uint = 0x936E;
    pub const GL_UNIFORM_IS_ROW_MAJOR: std::os::raw::c_uint = 0x8A3E;
    pub const GL_UNIFORM_MATRIX_STRIDE: std::os::raw::c_uint = 0x8A3D;
    pub const GL_UNIFORM_NAME_LENGTH: std::os::raw::c_uint = 0x8A39;
    pub const GL_UNIFORM_OFFSET: std::os::raw::c_uint = 0x8A3B;
    pub const GL_UNIFORM_SIZE: std::os::raw::c_uint = 0x8A38;
    pub const GL_UNIFORM_TYPE: std::os::raw::c_uint = 0x8A37;
    pub const GL_UNKNOWN_CONTEXT_RESET: std::os::raw::c_uint = 0x8255;
    pub const GL_UNKNOWN_CONTEXT_RESET_ARB: std::os::raw::c_uint = 0x8255;
    pub const GL_UNPACK_ALIGNMENT: std::os::raw::c_uint = 0x0CF5;
    pub const GL_UNPACK_CLIENT_STORAGE_APPLE: std::os::raw::c_uint = 0x85B2;
    pub const GL_UNPACK_CMYK_HINT_EXT: std::os::raw::c_uint = 0x800F;
    pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: std::os::raw::c_uint = 0x9129;
    pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: std::os::raw::c_uint = 0x9128;
    pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: std::os::raw::c_uint = 0x912A;
    pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: std::os::raw::c_uint = 0x9127;
    pub const GL_UNPACK_CONSTANT_DATA_SUNX: std::os::raw::c_uint = 0x81D5;
    pub const GL_UNPACK_IMAGE_DEPTH_SGIS: std::os::raw::c_uint = 0x8133;
    pub const GL_UNPACK_IMAGE_HEIGHT: std::os::raw::c_uint = 0x806E;
    pub const GL_UNPACK_IMAGE_HEIGHT_EXT: std::os::raw::c_uint = 0x806E;
    pub const GL_UNPACK_LSB_FIRST: std::os::raw::c_uint = 0x0CF1;
    pub const GL_UNPACK_RESAMPLE_OML: std::os::raw::c_uint = 0x8985;
    pub const GL_UNPACK_RESAMPLE_SGIX: std::os::raw::c_uint = 0x842F;
    pub const GL_UNPACK_ROW_BYTES_APPLE: std::os::raw::c_uint = 0x8A16;
    pub const GL_UNPACK_ROW_LENGTH: std::os::raw::c_uint = 0x0CF2;
    pub const GL_UNPACK_SKIP_IMAGES: std::os::raw::c_uint = 0x806D;
    pub const GL_UNPACK_SKIP_IMAGES_EXT: std::os::raw::c_uint = 0x806D;
    pub const GL_UNPACK_SKIP_PIXELS: std::os::raw::c_uint = 0x0CF4;
    pub const GL_UNPACK_SKIP_ROWS: std::os::raw::c_uint = 0x0CF3;
    pub const GL_UNPACK_SKIP_VOLUMES_SGIS: std::os::raw::c_uint = 0x8132;
    pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX: std::os::raw::c_uint = 0x85A1;
    pub const GL_UNPACK_SWAP_BYTES: std::os::raw::c_uint = 0x0CF0;
    pub const GL_UNSIGNALED: std::os::raw::c_uint = 0x9118;
    pub const GL_UNSIGNED_BYTE: std::os::raw::c_uint = 0x1401;
    pub const GL_UNSIGNED_BYTE_2_3_3_REV: std::os::raw::c_uint = 0x8362;
    pub const GL_UNSIGNED_BYTE_3_3_2: std::os::raw::c_uint = 0x8032;
    pub const GL_UNSIGNED_BYTE_3_3_2_EXT: std::os::raw::c_uint = 0x8032;
    pub const GL_UNSIGNED_IDENTITY_NV: std::os::raw::c_uint = 0x8536;
    pub const GL_UNSIGNED_INT: std::os::raw::c_uint = 0x1405;
    pub const GL_UNSIGNED_INT16_NV: std::os::raw::c_uint = 0x8FF0;
    pub const GL_UNSIGNED_INT16_VEC2_NV: std::os::raw::c_uint = 0x8FF1;
    pub const GL_UNSIGNED_INT16_VEC3_NV: std::os::raw::c_uint = 0x8FF2;
    pub const GL_UNSIGNED_INT16_VEC4_NV: std::os::raw::c_uint = 0x8FF3;
    pub const GL_UNSIGNED_INT64_AMD: std::os::raw::c_uint = 0x8BC2;
    pub const GL_UNSIGNED_INT64_ARB: std::os::raw::c_uint = 0x140F;
    pub const GL_UNSIGNED_INT64_NV: std::os::raw::c_uint = 0x140F;
    pub const GL_UNSIGNED_INT64_VEC2_ARB: std::os::raw::c_uint = 0x8FF5;
    pub const GL_UNSIGNED_INT64_VEC2_NV: std::os::raw::c_uint = 0x8FF5;
    pub const GL_UNSIGNED_INT64_VEC3_ARB: std::os::raw::c_uint = 0x8FF6;
    pub const GL_UNSIGNED_INT64_VEC3_NV: std::os::raw::c_uint = 0x8FF6;
    pub const GL_UNSIGNED_INT64_VEC4_ARB: std::os::raw::c_uint = 0x8FF7;
    pub const GL_UNSIGNED_INT64_VEC4_NV: std::os::raw::c_uint = 0x8FF7;
    pub const GL_UNSIGNED_INT8_NV: std::os::raw::c_uint = 0x8FEC;
    pub const GL_UNSIGNED_INT8_VEC2_NV: std::os::raw::c_uint = 0x8FED;
    pub const GL_UNSIGNED_INT8_VEC3_NV: std::os::raw::c_uint = 0x8FEE;
    pub const GL_UNSIGNED_INT8_VEC4_NV: std::os::raw::c_uint = 0x8FEF;
    pub const GL_UNSIGNED_INT_10F_11F_11F_REV: std::os::raw::c_uint = 0x8C3B;
    pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT: std::os::raw::c_uint = 0x8C3B;
    pub const GL_UNSIGNED_INT_10_10_10_2: std::os::raw::c_uint = 0x8036;
    pub const GL_UNSIGNED_INT_10_10_10_2_EXT: std::os::raw::c_uint = 0x8036;
    pub const GL_UNSIGNED_INT_24_8: std::os::raw::c_uint = 0x84FA;
    pub const GL_UNSIGNED_INT_24_8_EXT: std::os::raw::c_uint = 0x84FA;
    pub const GL_UNSIGNED_INT_24_8_NV: std::os::raw::c_uint = 0x84FA;
    pub const GL_UNSIGNED_INT_2_10_10_10_REV: std::os::raw::c_uint = 0x8368;
    pub const GL_UNSIGNED_INT_5_9_9_9_REV: std::os::raw::c_uint = 0x8C3E;
    pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT: std::os::raw::c_uint = 0x8C3E;
    pub const GL_UNSIGNED_INT_8_8_8_8: std::os::raw::c_uint = 0x8035;
    pub const GL_UNSIGNED_INT_8_8_8_8_EXT: std::os::raw::c_uint = 0x8035;
    pub const GL_UNSIGNED_INT_8_8_8_8_REV: std::os::raw::c_uint = 0x8367;
    pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV: std::os::raw::c_uint = 0x86DB;
    pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: std::os::raw::c_uint = 0x92DB;
    pub const GL_UNSIGNED_INT_IMAGE_1D: std::os::raw::c_uint = 0x9062;
    pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: std::os::raw::c_uint = 0x9068;
    pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: std::os::raw::c_uint = 0x9068;
    pub const GL_UNSIGNED_INT_IMAGE_1D_EXT: std::os::raw::c_uint = 0x9062;
    pub const GL_UNSIGNED_INT_IMAGE_2D: std::os::raw::c_uint = 0x9063;
    pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: std::os::raw::c_uint = 0x9069;
    pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: std::os::raw::c_uint = 0x9069;
    pub const GL_UNSIGNED_INT_IMAGE_2D_EXT: std::os::raw::c_uint = 0x9063;
    pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: std::os::raw::c_uint = 0x906B;
    pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x906C;
    pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: std::os::raw::c_uint = 0x906C;
    pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: std::os::raw::c_uint = 0x906B;
    pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: std::os::raw::c_uint = 0x9065;
    pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT: std::os::raw::c_uint = 0x9065;
    pub const GL_UNSIGNED_INT_IMAGE_3D: std::os::raw::c_uint = 0x9064;
    pub const GL_UNSIGNED_INT_IMAGE_3D_EXT: std::os::raw::c_uint = 0x9064;
    pub const GL_UNSIGNED_INT_IMAGE_BUFFER: std::os::raw::c_uint = 0x9067;
    pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT: std::os::raw::c_uint = 0x9067;
    pub const GL_UNSIGNED_INT_IMAGE_CUBE: std::os::raw::c_uint = 0x9066;
    pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT: std::os::raw::c_uint = 0x9066;
    pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x906A;
    pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: std::os::raw::c_uint = 0x906A;
    pub const GL_UNSIGNED_INT_S8_S8_8_8_NV: std::os::raw::c_uint = 0x86DA;
    pub const GL_UNSIGNED_INT_SAMPLER_1D: std::os::raw::c_uint = 0x8DD1;
    pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: std::os::raw::c_uint = 0x8DD6;
    pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: std::os::raw::c_uint = 0x8DD6;
    pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT: std::os::raw::c_uint = 0x8DD1;
    pub const GL_UNSIGNED_INT_SAMPLER_2D: std::os::raw::c_uint = 0x8DD2;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: std::os::raw::c_uint = 0x8DD7;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: std::os::raw::c_uint = 0x8DD7;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT: std::os::raw::c_uint = 0x8DD2;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: std::os::raw::c_uint = 0x910A;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: std::os::raw::c_uint = 0x910D;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: std::os::raw::c_uint = 0x8DD5;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT: std::os::raw::c_uint = 0x8DD5;
    pub const GL_UNSIGNED_INT_SAMPLER_3D: std::os::raw::c_uint = 0x8DD3;
    pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT: std::os::raw::c_uint = 0x8DD3;
    pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: std::os::raw::c_uint = 0x8DD8;
    pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD: std::os::raw::c_uint = 0x9003;
    pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: std::os::raw::c_uint = 0x8DD8;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE: std::os::raw::c_uint = 0x8DD4;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT: std::os::raw::c_uint = 0x8DD4;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: std::os::raw::c_uint = 0x900F;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: std::os::raw::c_uint = 0x900F;
    pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: std::os::raw::c_uint = 0x8E58;
    pub const GL_UNSIGNED_INT_VEC2: std::os::raw::c_uint = 0x8DC6;
    pub const GL_UNSIGNED_INT_VEC2_EXT: std::os::raw::c_uint = 0x8DC6;
    pub const GL_UNSIGNED_INT_VEC3: std::os::raw::c_uint = 0x8DC7;
    pub const GL_UNSIGNED_INT_VEC3_EXT: std::os::raw::c_uint = 0x8DC7;
    pub const GL_UNSIGNED_INT_VEC4: std::os::raw::c_uint = 0x8DC8;
    pub const GL_UNSIGNED_INT_VEC4_EXT: std::os::raw::c_uint = 0x8DC8;
    pub const GL_UNSIGNED_INVERT_NV: std::os::raw::c_uint = 0x8537;
    pub const GL_UNSIGNED_NORMALIZED: std::os::raw::c_uint = 0x8C17;
    pub const GL_UNSIGNED_NORMALIZED_ARB: std::os::raw::c_uint = 0x8C17;
    pub const GL_UNSIGNED_SHORT: std::os::raw::c_uint = 0x1403;
    pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: std::os::raw::c_uint = 0x8366;
    pub const GL_UNSIGNED_SHORT_4_4_4_4: std::os::raw::c_uint = 0x8033;
    pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT: std::os::raw::c_uint = 0x8033;
    pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: std::os::raw::c_uint = 0x8365;
    pub const GL_UNSIGNED_SHORT_5_5_5_1: std::os::raw::c_uint = 0x8034;
    pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT: std::os::raw::c_uint = 0x8034;
    pub const GL_UNSIGNED_SHORT_5_6_5: std::os::raw::c_uint = 0x8363;
    pub const GL_UNSIGNED_SHORT_5_6_5_REV: std::os::raw::c_uint = 0x8364;
    pub const GL_UNSIGNED_SHORT_8_8_APPLE: std::os::raw::c_uint = 0x85BA;
    pub const GL_UNSIGNED_SHORT_8_8_MESA: std::os::raw::c_uint = 0x85BA;
    pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: std::os::raw::c_uint = 0x85BB;
    pub const GL_UNSIGNED_SHORT_8_8_REV_MESA: std::os::raw::c_uint = 0x85BB;
    pub const GL_UPLOAD_GPU_MASK_NVX: std::os::raw::c_uint = 0x954A;
    pub const GL_UPPER_LEFT: std::os::raw::c_uint = 0x8CA2;
    pub const GL_USE_MISSING_GLYPH_NV: std::os::raw::c_uint = 0x90AA;
    pub const GL_UTF16_NV: std::os::raw::c_uint = 0x909B;
    pub const GL_UTF8_NV: std::os::raw::c_uint = 0x909A;
    pub const GL_UUID_SIZE_EXT: std::os::raw::c_uint = 16;
    pub const GL_VALIDATE_STATUS: std::os::raw::c_uint = 0x8B83;
    pub const GL_VARIABLE_A_NV: std::os::raw::c_uint = 0x8523;
    pub const GL_VARIABLE_B_NV: std::os::raw::c_uint = 0x8524;
    pub const GL_VARIABLE_C_NV: std::os::raw::c_uint = 0x8525;
    pub const GL_VARIABLE_D_NV: std::os::raw::c_uint = 0x8526;
    pub const GL_VARIABLE_E_NV: std::os::raw::c_uint = 0x8527;
    pub const GL_VARIABLE_F_NV: std::os::raw::c_uint = 0x8528;
    pub const GL_VARIABLE_G_NV: std::os::raw::c_uint = 0x8529;
    pub const GL_VARIANT_ARRAY_EXT: std::os::raw::c_uint = 0x87E8;
    pub const GL_VARIANT_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x87E9;
    pub const GL_VARIANT_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x87E6;
    pub const GL_VARIANT_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x87E7;
    pub const GL_VARIANT_DATATYPE_EXT: std::os::raw::c_uint = 0x87E5;
    pub const GL_VARIANT_EXT: std::os::raw::c_uint = 0x87C1;
    pub const GL_VARIANT_VALUE_EXT: std::os::raw::c_uint = 0x87E4;
    pub const GL_VBO_FREE_MEMORY_ATI: std::os::raw::c_uint = 0x87FB;
    pub const GL_VECTOR_EXT: std::os::raw::c_uint = 0x87BF;
    pub const GL_VENDOR: std::os::raw::c_uint = 0x1F00;
    pub const GL_VERSION: std::os::raw::c_uint = 0x1F02;
    pub const GL_VERTEX23_BIT_PGI: std::os::raw::c_uint = 0x00000004;
    pub const GL_VERTEX4_BIT_PGI: std::os::raw::c_uint = 0x00000008;
    pub const GL_VERTEX_ARRAY: std::os::raw::c_uint = 0x8074;
    pub const GL_VERTEX_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F21;
    pub const GL_VERTEX_ARRAY_BINDING: std::os::raw::c_uint = 0x85B5;
    pub const GL_VERTEX_ARRAY_BINDING_APPLE: std::os::raw::c_uint = 0x85B5;
    pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x8896;
    pub const GL_VERTEX_ARRAY_COUNT_EXT: std::os::raw::c_uint = 0x807D;
    pub const GL_VERTEX_ARRAY_EXT: std::os::raw::c_uint = 0x8074;
    pub const GL_VERTEX_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2B;
    pub const GL_VERTEX_ARRAY_LIST_IBM: std::os::raw::c_uint = 103070;
    pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM: std::os::raw::c_uint = 103080;
    pub const GL_VERTEX_ARRAY_OBJECT_AMD: std::os::raw::c_uint = 0x9154;
    pub const GL_VERTEX_ARRAY_OBJECT_EXT: std::os::raw::c_uint = 0x9154;
    pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: std::os::raw::c_uint = 0x83F5;
    pub const GL_VERTEX_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x808E;
    pub const GL_VERTEX_ARRAY_RANGE_APPLE: std::os::raw::c_uint = 0x851D;
    pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE: std::os::raw::c_uint = 0x851E;
    pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV: std::os::raw::c_uint = 0x851E;
    pub const GL_VERTEX_ARRAY_RANGE_NV: std::os::raw::c_uint = 0x851D;
    pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE: std::os::raw::c_uint = 0x8521;
    pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV: std::os::raw::c_uint = 0x8521;
    pub const GL_VERTEX_ARRAY_RANGE_VALID_NV: std::os::raw::c_uint = 0x851F;
    pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: std::os::raw::c_uint = 0x8533;
    pub const GL_VERTEX_ARRAY_SIZE_EXT: std::os::raw::c_uint = 0x807A;
    pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE: std::os::raw::c_uint = 0x851F;
    pub const GL_VERTEX_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x807C;
    pub const GL_VERTEX_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x807B;
    pub const GL_VERTEX_ATTRIB_ARRAY0_NV: std::os::raw::c_uint = 0x8650;
    pub const GL_VERTEX_ATTRIB_ARRAY10_NV: std::os::raw::c_uint = 0x865A;
    pub const GL_VERTEX_ATTRIB_ARRAY11_NV: std::os::raw::c_uint = 0x865B;
    pub const GL_VERTEX_ATTRIB_ARRAY12_NV: std::os::raw::c_uint = 0x865C;
    pub const GL_VERTEX_ATTRIB_ARRAY13_NV: std::os::raw::c_uint = 0x865D;
    pub const GL_VERTEX_ATTRIB_ARRAY14_NV: std::os::raw::c_uint = 0x865E;
    pub const GL_VERTEX_ATTRIB_ARRAY15_NV: std::os::raw::c_uint = 0x865F;
    pub const GL_VERTEX_ATTRIB_ARRAY1_NV: std::os::raw::c_uint = 0x8651;
    pub const GL_VERTEX_ATTRIB_ARRAY2_NV: std::os::raw::c_uint = 0x8652;
    pub const GL_VERTEX_ATTRIB_ARRAY3_NV: std::os::raw::c_uint = 0x8653;
    pub const GL_VERTEX_ATTRIB_ARRAY4_NV: std::os::raw::c_uint = 0x8654;
    pub const GL_VERTEX_ATTRIB_ARRAY5_NV: std::os::raw::c_uint = 0x8655;
    pub const GL_VERTEX_ATTRIB_ARRAY6_NV: std::os::raw::c_uint = 0x8656;
    pub const GL_VERTEX_ATTRIB_ARRAY7_NV: std::os::raw::c_uint = 0x8657;
    pub const GL_VERTEX_ATTRIB_ARRAY8_NV: std::os::raw::c_uint = 0x8658;
    pub const GL_VERTEX_ATTRIB_ARRAY9_NV: std::os::raw::c_uint = 0x8659;
    pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV: std::os::raw::c_uint = 0x8F20;
    pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: std::os::raw::c_uint = 0x00000001;
    pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: std::os::raw::c_uint = 0x00000001;
    pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: std::os::raw::c_uint = 0x889F;
    pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889F;
    pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: std::os::raw::c_uint = 0x88FE;
    pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: std::os::raw::c_uint = 0x88FE;
    pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: std::os::raw::c_uint = 0x8622;
    pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: std::os::raw::c_uint = 0x8622;
    pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: std::os::raw::c_uint = 0x88FD;
    pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT: std::os::raw::c_uint = 0x88FD;
    pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV: std::os::raw::c_uint = 0x88FD;
    pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV: std::os::raw::c_uint = 0x8F2A;
    pub const GL_VERTEX_ATTRIB_ARRAY_LONG: std::os::raw::c_uint = 0x874E;
    pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: std::os::raw::c_uint = 0x886A;
    pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: std::os::raw::c_uint = 0x886A;
    pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: std::os::raw::c_uint = 0x8645;
    pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: std::os::raw::c_uint = 0x8645;
    pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: std::os::raw::c_uint = 0x8623;
    pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: std::os::raw::c_uint = 0x8623;
    pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: std::os::raw::c_uint = 0x8624;
    pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: std::os::raw::c_uint = 0x8624;
    pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: std::os::raw::c_uint = 0x8625;
    pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: std::os::raw::c_uint = 0x8625;
    pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV: std::os::raw::c_uint = 0x8F1E;
    pub const GL_VERTEX_ATTRIB_BINDING: std::os::raw::c_uint = 0x82D4;
    pub const GL_VERTEX_ATTRIB_MAP1_APPLE: std::os::raw::c_uint = 0x8A00;
    pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE: std::os::raw::c_uint = 0x8A03;
    pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: std::os::raw::c_uint = 0x8A05;
    pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE: std::os::raw::c_uint = 0x8A04;
    pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE: std::os::raw::c_uint = 0x8A02;
    pub const GL_VERTEX_ATTRIB_MAP2_APPLE: std::os::raw::c_uint = 0x8A01;
    pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE: std::os::raw::c_uint = 0x8A07;
    pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: std::os::raw::c_uint = 0x8A09;
    pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE: std::os::raw::c_uint = 0x8A08;
    pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE: std::os::raw::c_uint = 0x8A06;
    pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: std::os::raw::c_uint = 0x82D5;
    pub const GL_VERTEX_BINDING_BUFFER: std::os::raw::c_uint = 0x8F4F;
    pub const GL_VERTEX_BINDING_DIVISOR: std::os::raw::c_uint = 0x82D6;
    pub const GL_VERTEX_BINDING_OFFSET: std::os::raw::c_uint = 0x82D7;
    pub const GL_VERTEX_BINDING_STRIDE: std::os::raw::c_uint = 0x82D8;
    pub const GL_VERTEX_BLEND_ARB: std::os::raw::c_uint = 0x86A7;
    pub const GL_VERTEX_CONSISTENT_HINT_PGI: std::os::raw::c_uint = 0x1A22B;
    pub const GL_VERTEX_DATA_HINT_PGI: std::os::raw::c_uint = 0x1A22A;
    pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD: std::os::raw::c_uint = 0x91A4;
    pub const GL_VERTEX_ID_NV: std::os::raw::c_uint = 0x8C7B;
    pub const GL_VERTEX_ID_SWIZZLE_AMD: std::os::raw::c_uint = 0x91A5;
    pub const GL_VERTEX_PRECLIP_HINT_SGIX: std::os::raw::c_uint = 0x83EF;
    pub const GL_VERTEX_PRECLIP_SGIX: std::os::raw::c_uint = 0x83EE;
    pub const GL_VERTEX_PROGRAM_ARB: std::os::raw::c_uint = 0x8620;
    pub const GL_VERTEX_PROGRAM_BINDING_NV: std::os::raw::c_uint = 0x864A;
    pub const GL_VERTEX_PROGRAM_NV: std::os::raw::c_uint = 0x8620;
    pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV: std::os::raw::c_uint = 0x8DA2;
    pub const GL_VERTEX_PROGRAM_POINT_SIZE: std::os::raw::c_uint = 0x8642;
    pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: std::os::raw::c_uint = 0x8642;
    pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV: std::os::raw::c_uint = 0x8642;
    pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: std::os::raw::c_uint = 0x8643;
    pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV: std::os::raw::c_uint = 0x8643;
    pub const GL_VERTEX_SHADER: std::os::raw::c_uint = 0x8B31;
    pub const GL_VERTEX_SHADER_ARB: std::os::raw::c_uint = 0x8B31;
    pub const GL_VERTEX_SHADER_BINDING_EXT: std::os::raw::c_uint = 0x8781;
    pub const GL_VERTEX_SHADER_BIT: std::os::raw::c_uint = 0x00000001;
    pub const GL_VERTEX_SHADER_EXT: std::os::raw::c_uint = 0x8780;
    pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT: std::os::raw::c_uint = 0x87CF;
    pub const GL_VERTEX_SHADER_INVARIANTS_EXT: std::os::raw::c_uint = 0x87D1;
    pub const GL_VERTEX_SHADER_INVOCATIONS: std::os::raw::c_uint = 0x82F0;
    pub const GL_VERTEX_SHADER_INVOCATIONS_ARB: std::os::raw::c_uint = 0x82F0;
    pub const GL_VERTEX_SHADER_LOCALS_EXT: std::os::raw::c_uint = 0x87D3;
    pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: std::os::raw::c_uint = 0x87D2;
    pub const GL_VERTEX_SHADER_OPTIMIZED_EXT: std::os::raw::c_uint = 0x87D4;
    pub const GL_VERTEX_SHADER_VARIANTS_EXT: std::os::raw::c_uint = 0x87D0;
    pub const GL_VERTEX_SOURCE_ATI: std::os::raw::c_uint = 0x8774;
    pub const GL_VERTEX_STATE_PROGRAM_NV: std::os::raw::c_uint = 0x8621;
    pub const GL_VERTEX_STREAM0_ATI: std::os::raw::c_uint = 0x876C;
    pub const GL_VERTEX_STREAM1_ATI: std::os::raw::c_uint = 0x876D;
    pub const GL_VERTEX_STREAM2_ATI: std::os::raw::c_uint = 0x876E;
    pub const GL_VERTEX_STREAM3_ATI: std::os::raw::c_uint = 0x876F;
    pub const GL_VERTEX_STREAM4_ATI: std::os::raw::c_uint = 0x8770;
    pub const GL_VERTEX_STREAM5_ATI: std::os::raw::c_uint = 0x8771;
    pub const GL_VERTEX_STREAM6_ATI: std::os::raw::c_uint = 0x8772;
    pub const GL_VERTEX_STREAM7_ATI: std::os::raw::c_uint = 0x8773;
    pub const GL_VERTEX_SUBROUTINE: std::os::raw::c_uint = 0x92E8;
    pub const GL_VERTEX_SUBROUTINE_UNIFORM: std::os::raw::c_uint = 0x92EE;
    pub const GL_VERTEX_TEXTURE: std::os::raw::c_uint = 0x829B;
    pub const GL_VERTEX_WEIGHTING_EXT: std::os::raw::c_uint = 0x8509;
    pub const GL_VERTEX_WEIGHT_ARRAY_EXT: std::os::raw::c_uint = 0x850C;
    pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT: std::os::raw::c_uint = 0x8510;
    pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT: std::os::raw::c_uint = 0x850D;
    pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT: std::os::raw::c_uint = 0x850F;
    pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: std::os::raw::c_uint = 0x850E;
    pub const GL_VERTICAL_LINE_TO_NV: std::os::raw::c_uint = 0x08;
    pub const GL_VERTICES_SUBMITTED: std::os::raw::c_uint = 0x82EE;
    pub const GL_VERTICES_SUBMITTED_ARB: std::os::raw::c_uint = 0x82EE;
    pub const GL_VIBRANCE_BIAS_NV: std::os::raw::c_uint = 0x8719;
    pub const GL_VIBRANCE_SCALE_NV: std::os::raw::c_uint = 0x8713;
    pub const GL_VIDEO_BUFFER_BINDING_NV: std::os::raw::c_uint = 0x9021;
    pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV: std::os::raw::c_uint = 0x902D;
    pub const GL_VIDEO_BUFFER_NV: std::os::raw::c_uint = 0x9020;
    pub const GL_VIDEO_BUFFER_PITCH_NV: std::os::raw::c_uint = 0x9028;
    pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: std::os::raw::c_uint = 0x903B;
    pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: std::os::raw::c_uint = 0x903A;
    pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV: std::os::raw::c_uint = 0x9039;
    pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV: std::os::raw::c_uint = 0x9038;
    pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV: std::os::raw::c_uint = 0x903C;
    pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV: std::os::raw::c_uint = 0x9026;
    pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV: std::os::raw::c_uint = 0x9029;
    pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV: std::os::raw::c_uint = 0x902A;
    pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV: std::os::raw::c_uint = 0x902B;
    pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV: std::os::raw::c_uint = 0x902C;
    pub const GL_VIEWPORT: std::os::raw::c_uint = 0x0BA2;
    pub const GL_VIEWPORT_BOUNDS_RANGE: std::os::raw::c_uint = 0x825D;
    pub const GL_VIEWPORT_COMMAND_NV: std::os::raw::c_uint = 0x0010;
    pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: std::os::raw::c_uint = 0x825F;
    pub const GL_VIEWPORT_POSITION_W_SCALE_NV: std::os::raw::c_uint = 0x937C;
    pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: std::os::raw::c_uint = 0x937D;
    pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: std::os::raw::c_uint = 0x937E;
    pub const GL_VIEWPORT_SUBPIXEL_BITS: std::os::raw::c_uint = 0x825C;
    pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV: std::os::raw::c_uint = 0x9357;
    pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV: std::os::raw::c_uint = 0x9351;
    pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: std::os::raw::c_uint = 0x9353;
    pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: std::os::raw::c_uint = 0x9355;
    pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV: std::os::raw::c_uint = 0x9356;
    pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV: std::os::raw::c_uint = 0x9350;
    pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV: std::os::raw::c_uint = 0x9352;
    pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV: std::os::raw::c_uint = 0x9354;
    pub const GL_VIEWPORT_SWIZZLE_W_NV: std::os::raw::c_uint = 0x935B;
    pub const GL_VIEWPORT_SWIZZLE_X_NV: std::os::raw::c_uint = 0x9358;
    pub const GL_VIEWPORT_SWIZZLE_Y_NV: std::os::raw::c_uint = 0x9359;
    pub const GL_VIEWPORT_SWIZZLE_Z_NV: std::os::raw::c_uint = 0x935A;
    pub const GL_VIEW_CLASS_128_BITS: std::os::raw::c_uint = 0x82C4;
    pub const GL_VIEW_CLASS_16_BITS: std::os::raw::c_uint = 0x82CA;
    pub const GL_VIEW_CLASS_24_BITS: std::os::raw::c_uint = 0x82C9;
    pub const GL_VIEW_CLASS_32_BITS: std::os::raw::c_uint = 0x82C8;
    pub const GL_VIEW_CLASS_48_BITS: std::os::raw::c_uint = 0x82C7;
    pub const GL_VIEW_CLASS_64_BITS: std::os::raw::c_uint = 0x82C6;
    pub const GL_VIEW_CLASS_8_BITS: std::os::raw::c_uint = 0x82CB;
    pub const GL_VIEW_CLASS_96_BITS: std::os::raw::c_uint = 0x82C5;
    pub const GL_VIEW_CLASS_ASTC_10x10_RGBA: std::os::raw::c_uint = 0x9393;
    pub const GL_VIEW_CLASS_ASTC_10x5_RGBA: std::os::raw::c_uint = 0x9390;
    pub const GL_VIEW_CLASS_ASTC_10x6_RGBA: std::os::raw::c_uint = 0x9391;
    pub const GL_VIEW_CLASS_ASTC_10x8_RGBA: std::os::raw::c_uint = 0x9392;
    pub const GL_VIEW_CLASS_ASTC_12x10_RGBA: std::os::raw::c_uint = 0x9394;
    pub const GL_VIEW_CLASS_ASTC_12x12_RGBA: std::os::raw::c_uint = 0x9395;
    pub const GL_VIEW_CLASS_ASTC_4x4_RGBA: std::os::raw::c_uint = 0x9388;
    pub const GL_VIEW_CLASS_ASTC_5x4_RGBA: std::os::raw::c_uint = 0x9389;
    pub const GL_VIEW_CLASS_ASTC_5x5_RGBA: std::os::raw::c_uint = 0x938A;
    pub const GL_VIEW_CLASS_ASTC_6x5_RGBA: std::os::raw::c_uint = 0x938B;
    pub const GL_VIEW_CLASS_ASTC_6x6_RGBA: std::os::raw::c_uint = 0x938C;
    pub const GL_VIEW_CLASS_ASTC_8x5_RGBA: std::os::raw::c_uint = 0x938D;
    pub const GL_VIEW_CLASS_ASTC_8x6_RGBA: std::os::raw::c_uint = 0x938E;
    pub const GL_VIEW_CLASS_ASTC_8x8_RGBA: std::os::raw::c_uint = 0x938F;
    pub const GL_VIEW_CLASS_BPTC_FLOAT: std::os::raw::c_uint = 0x82D3;
    pub const GL_VIEW_CLASS_BPTC_UNORM: std::os::raw::c_uint = 0x82D2;
    pub const GL_VIEW_CLASS_EAC_R11: std::os::raw::c_uint = 0x9383;
    pub const GL_VIEW_CLASS_EAC_RG11: std::os::raw::c_uint = 0x9384;
    pub const GL_VIEW_CLASS_ETC2_EAC_RGBA: std::os::raw::c_uint = 0x9387;
    pub const GL_VIEW_CLASS_ETC2_RGB: std::os::raw::c_uint = 0x9385;
    pub const GL_VIEW_CLASS_ETC2_RGBA: std::os::raw::c_uint = 0x9386;
    pub const GL_VIEW_CLASS_RGTC1_RED: std::os::raw::c_uint = 0x82D0;
    pub const GL_VIEW_CLASS_RGTC2_RG: std::os::raw::c_uint = 0x82D1;
    pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: std::os::raw::c_uint = 0x82CC;
    pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: std::os::raw::c_uint = 0x82CD;
    pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: std::os::raw::c_uint = 0x82CE;
    pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: std::os::raw::c_uint = 0x82CF;
    pub const GL_VIEW_COMPATIBILITY_CLASS: std::os::raw::c_uint = 0x82B6;
    pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB: std::os::raw::c_uint = 0x91A7;
    pub const GL_VIRTUAL_PAGE_SIZE_X_AMD: std::os::raw::c_uint = 0x9195;
    pub const GL_VIRTUAL_PAGE_SIZE_X_ARB: std::os::raw::c_uint = 0x9195;
    pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD: std::os::raw::c_uint = 0x9196;
    pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB: std::os::raw::c_uint = 0x9196;
    pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD: std::os::raw::c_uint = 0x9197;
    pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB: std::os::raw::c_uint = 0x9197;
    pub const GL_VIVIDLIGHT_NV: std::os::raw::c_uint = 0x92A6;
    pub const GL_VOLATILE_APPLE: std::os::raw::c_uint = 0x8A1A;
    pub const GL_WAIT_FAILED: std::os::raw::c_uint = 0x911D;
    pub const GL_WARPS_PER_SM_NV: std::os::raw::c_uint = 0x933A;
    pub const GL_WARP_SIZE_NV: std::os::raw::c_uint = 0x9339;
    pub const GL_WEIGHTED_AVERAGE_ARB: std::os::raw::c_uint = 0x9367;
    pub const GL_WEIGHTED_AVERAGE_EXT: std::os::raw::c_uint = 0x9367;
    pub const GL_WEIGHT_ARRAY_ARB: std::os::raw::c_uint = 0x86AD;
    pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: std::os::raw::c_uint = 0x889E;
    pub const GL_WEIGHT_ARRAY_POINTER_ARB: std::os::raw::c_uint = 0x86AC;
    pub const GL_WEIGHT_ARRAY_SIZE_ARB: std::os::raw::c_uint = 0x86AB;
    pub const GL_WEIGHT_ARRAY_STRIDE_ARB: std::os::raw::c_uint = 0x86AA;
    pub const GL_WEIGHT_ARRAY_TYPE_ARB: std::os::raw::c_uint = 0x86A9;
    pub const GL_WEIGHT_SUM_UNITY_ARB: std::os::raw::c_uint = 0x86A6;
    pub const GL_WIDE_LINE_HINT_PGI: std::os::raw::c_uint = 0x1A222;
    pub const GL_WINDOW_RECTANGLE_EXT: std::os::raw::c_uint = 0x8F12;
    pub const GL_WINDOW_RECTANGLE_MODE_EXT: std::os::raw::c_uint = 0x8F13;
    pub const GL_WRAP_BORDER_SUN: std::os::raw::c_uint = 0x81D4;
    pub const GL_WRITE_DISCARD_NV: std::os::raw::c_uint = 0x88BE;
    pub const GL_WRITE_ONLY: std::os::raw::c_uint = 0x88B9;
    pub const GL_WRITE_ONLY_ARB: std::os::raw::c_uint = 0x88B9;
    pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV: std::os::raw::c_uint = 0x887A;
    pub const GL_WRITE_PIXEL_DATA_RANGE_NV: std::os::raw::c_uint = 0x8878;
    pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV: std::os::raw::c_uint = 0x887C;
    pub const GL_W_EXT: std::os::raw::c_uint = 0x87D8;
    pub const GL_XOR: std::os::raw::c_uint = 0x1506;
    pub const GL_XOR_NV: std::os::raw::c_uint = 0x1506;
    pub const GL_X_EXT: std::os::raw::c_uint = 0x87D5;
    pub const GL_YCBAYCR8A_4224_NV: std::os::raw::c_uint = 0x9032;
    pub const GL_YCBCR_422_APPLE: std::os::raw::c_uint = 0x85B9;
    pub const GL_YCBCR_MESA: std::os::raw::c_uint = 0x8757;
    pub const GL_YCBYCR8_422_NV: std::os::raw::c_uint = 0x9031;
    pub const GL_YCRCBA_SGIX: std::os::raw::c_uint = 0x8319;
    pub const GL_YCRCB_422_SGIX: std::os::raw::c_uint = 0x81BB;
    pub const GL_YCRCB_444_SGIX: std::os::raw::c_uint = 0x81BC;
    pub const GL_YCRCB_SGIX: std::os::raw::c_uint = 0x8318;
    pub const GL_Y_EXT: std::os::raw::c_uint = 0x87D6;
    pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: std::os::raw::c_uint = 0x9036;
    pub const GL_Z4Y12Z4CB12Z4CR12_444_NV: std::os::raw::c_uint = 0x9037;
    pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: std::os::raw::c_uint = 0x9035;
    pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: std::os::raw::c_uint = 0x9034;
    pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: std::os::raw::c_uint = 0x9033;
    pub const GL_ZERO: std::os::raw::c_uint = 0;
    pub const GL_ZERO_EXT: std::os::raw::c_uint = 0x87DD;
    pub const GL_ZERO_TO_ONE: std::os::raw::c_uint = 0x935F;
    pub const GL_Z_EXT: std::os::raw::c_uint = 0x87D7;
}

pub mod functions {
    #![allow(non_snake_case, unused_variables, dead_code)]

    use std;
    use std::mem;
    use super::storage;
    use super::types::*;

     #[inline] pub unsafe fn AccumxOES(op: GLenum, value: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::AccumxOES.ptr)(op, value) }
     #[inline] pub unsafe fn AcquireKeyedMutexWin32EXT(memory: GLuint, key: GLuint64, timeout: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLuint64, GLuint) -> GLboolean>(storage::AcquireKeyedMutexWin32EXT.ptr)(memory, key, timeout) }
     #[inline] pub unsafe fn ActiveProgramEXT(program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::ActiveProgramEXT.ptr)(program) }
     #[inline] pub unsafe fn ActiveShaderProgram(pipeline: GLuint, program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::ActiveShaderProgram.ptr)(pipeline, program) }
     #[inline] pub unsafe fn ActiveStencilFaceEXT(face: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ActiveStencilFaceEXT.ptr)(face) }
     #[inline] pub unsafe fn ActiveTexture(texture: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ActiveTexture.ptr)(texture) }
     #[inline] pub unsafe fn ActiveTextureARB(texture: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ActiveTextureARB.ptr)(texture) }
     #[inline] pub unsafe fn ActiveVaryingNV(program: GLuint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> ()>(storage::ActiveVaryingNV.ptr)(program, name) }
     #[inline] pub unsafe fn AlphaFragmentOp1ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::AlphaFragmentOp1ATI.ptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod) }
     #[inline] pub unsafe fn AlphaFragmentOp2ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::AlphaFragmentOp2ATI.ptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) }
     #[inline] pub unsafe fn AlphaFragmentOp3ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::AlphaFragmentOp3ATI.ptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) }
     #[inline] pub unsafe fn AlphaFuncxOES(func: GLenum, ref_: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::AlphaFuncxOES.ptr)(func, ref_) }
     #[inline] pub unsafe fn AlphaToCoverageDitherControlNV(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::AlphaToCoverageDitherControlNV.ptr)(mode) }
     #[inline] pub unsafe fn ApplyFramebufferAttachmentCMAAINTEL() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ApplyFramebufferAttachmentCMAAINTEL.ptr)() }
     #[inline] pub unsafe fn ApplyTextureEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ApplyTextureEXT.ptr)(mode) }
     #[inline] pub unsafe fn AreProgramsResidentNV(n: GLsizei, programs: *const GLuint, residences: *mut GLboolean) -> GLboolean { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *mut GLboolean) -> GLboolean>(storage::AreProgramsResidentNV.ptr)(n, programs, residences) }
     #[inline] pub unsafe fn AreTexturesResidentEXT(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *mut GLboolean) -> GLboolean>(storage::AreTexturesResidentEXT.ptr)(n, textures, residences) }
     #[inline] pub unsafe fn ArrayElement(i: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::ArrayElement.ptr)(i) }
     #[inline] pub unsafe fn ArrayElementEXT(i: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::ArrayElementEXT.ptr)(i) }
     #[inline] pub unsafe fn ArrayObjectATI(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) -> ()>(storage::ArrayObjectATI.ptr)(array, size, type_, stride, buffer, offset) }
     #[inline] pub unsafe fn AsyncCopyBufferSubDataNVX(waitSemaphoreCount: GLsizei, waitSemaphoreArray: *const GLuint, fenceValueArray: *const GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: *const GLuint, signalValueArray: *const GLuint64) -> GLuint { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, *const GLuint, *const GLuint64) -> GLuint>(storage::AsyncCopyBufferSubDataNVX.ptr)(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) }
     #[inline] pub unsafe fn AsyncCopyImageSubDataNVX(waitSemaphoreCount: GLsizei, waitSemaphoreArray: *const GLuint, waitValueArray: *const GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: *const GLuint, signalValueArray: *const GLuint64) -> GLuint { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, *const GLuint, *const GLuint64) -> GLuint>(storage::AsyncCopyImageSubDataNVX.ptr)(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) }
     #[inline] pub unsafe fn AsyncMarkerSGIX(marker: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::AsyncMarkerSGIX.ptr)(marker) }
     #[inline] pub unsafe fn AttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLhandleARB) -> ()>(storage::AttachObjectARB.ptr)(containerObj, obj) }
     #[inline] pub unsafe fn AttachShader(program: GLuint, shader: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::AttachShader.ptr)(program, shader) }
     #[inline] pub unsafe fn BeginConditionalRender(id: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::BeginConditionalRender.ptr)(id, mode) }
     #[inline] pub unsafe fn BeginConditionalRenderNV(id: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::BeginConditionalRenderNV.ptr)(id, mode) }
     #[inline] pub unsafe fn BeginConditionalRenderNVX(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BeginConditionalRenderNVX.ptr)(id) }
     #[inline] pub unsafe fn BeginFragmentShaderATI() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::BeginFragmentShaderATI.ptr)() }
     #[inline] pub unsafe fn BeginOcclusionQueryNV(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BeginOcclusionQueryNV.ptr)(id) }
     #[inline] pub unsafe fn BeginPerfMonitorAMD(monitor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BeginPerfMonitorAMD.ptr)(monitor) }
     #[inline] pub unsafe fn BeginPerfQueryINTEL(queryHandle: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BeginPerfQueryINTEL.ptr)(queryHandle) }
     #[inline] pub unsafe fn BeginQuery(target: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BeginQuery.ptr)(target, id) }
     #[inline] pub unsafe fn BeginQueryARB(target: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BeginQueryARB.ptr)(target, id) }
     #[inline] pub unsafe fn BeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::BeginQueryIndexed.ptr)(target, index, id) }
     #[inline] pub unsafe fn BeginTransformFeedback(primitiveMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::BeginTransformFeedback.ptr)(primitiveMode) }
     #[inline] pub unsafe fn BeginTransformFeedbackEXT(primitiveMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::BeginTransformFeedbackEXT.ptr)(primitiveMode) }
     #[inline] pub unsafe fn BeginTransformFeedbackNV(primitiveMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::BeginTransformFeedbackNV.ptr)(primitiveMode) }
     #[inline] pub unsafe fn BeginVertexShaderEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::BeginVertexShaderEXT.ptr)() }
     #[inline] pub unsafe fn BeginVideoCaptureNV(video_capture_slot: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BeginVideoCaptureNV.ptr)(video_capture_slot) }
     #[inline] pub unsafe fn BindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const GLchar) -> ()>(storage::BindAttribLocation.ptr)(program, index, name) }
     #[inline] pub unsafe fn BindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLuint, *const GLcharARB) -> ()>(storage::BindAttribLocationARB.ptr)(programObj, index, name) }
     #[inline] pub unsafe fn BindBuffer(target: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindBuffer.ptr)(target, buffer) }
     #[inline] pub unsafe fn BindBufferARB(target: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindBufferARB.ptr)(target, buffer) }
     #[inline] pub unsafe fn BindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::BindBufferBase.ptr)(target, index, buffer) }
     #[inline] pub unsafe fn BindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::BindBufferBaseEXT.ptr)(target, index, buffer) }
     #[inline] pub unsafe fn BindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::BindBufferBaseNV.ptr)(target, index, buffer) }
     #[inline] pub unsafe fn BindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLintptr) -> ()>(storage::BindBufferOffsetEXT.ptr)(target, index, buffer, offset) }
     #[inline] pub unsafe fn BindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLintptr) -> ()>(storage::BindBufferOffsetNV.ptr)(target, index, buffer, offset) }
     #[inline] pub unsafe fn BindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::BindBufferRange.ptr)(target, index, buffer, offset, size) }
     #[inline] pub unsafe fn BindBufferRangeEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::BindBufferRangeEXT.ptr)(target, index, buffer, offset, size) }
     #[inline] pub unsafe fn BindBufferRangeNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::BindBufferRangeNV.ptr)(target, index, buffer, offset, size) }
     #[inline] pub unsafe fn BindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLuint) -> ()>(storage::BindBuffersBase.ptr)(target, first, count, buffers) }
     #[inline] pub unsafe fn BindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, sizes: *const GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLuint, *const GLintptr, *const GLsizeiptr) -> ()>(storage::BindBuffersRange.ptr)(target, first, count, buffers, offsets, sizes) }
     #[inline] pub unsafe fn BindFragDataLocation(program: GLuint, color: GLuint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const GLchar) -> ()>(storage::BindFragDataLocation.ptr)(program, color, name) }
     #[inline] pub unsafe fn BindFragDataLocationEXT(program: GLuint, color: GLuint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const GLchar) -> ()>(storage::BindFragDataLocationEXT.ptr)(program, color, name) }
     #[inline] pub unsafe fn BindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, *const GLchar) -> ()>(storage::BindFragDataLocationIndexed.ptr)(program, colorNumber, index, name) }
     #[inline] pub unsafe fn BindFragmentShaderATI(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindFragmentShaderATI.ptr)(id) }
     #[inline] pub unsafe fn BindFramebuffer(target: GLenum, framebuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindFramebuffer.ptr)(target, framebuffer) }
     #[inline] pub unsafe fn BindFramebufferEXT(target: GLenum, framebuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindFramebufferEXT.ptr)(target, framebuffer) }
     #[inline] pub unsafe fn BindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> ()>(storage::BindImageTexture.ptr)(unit, texture, level, layered, layer, access, format) }
     #[inline] pub unsafe fn BindImageTextureEXT(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) -> ()>(storage::BindImageTextureEXT.ptr)(index, texture, level, layered, layer, access, format) }
     #[inline] pub unsafe fn BindImageTextures(first: GLuint, count: GLsizei, textures: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint) -> ()>(storage::BindImageTextures.ptr)(first, count, textures) }
     #[inline] pub unsafe fn BindLightParameterEXT(light: GLenum, value: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> GLuint>(storage::BindLightParameterEXT.ptr)(light, value) }
     #[inline] pub unsafe fn BindMaterialParameterEXT(face: GLenum, value: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> GLuint>(storage::BindMaterialParameterEXT.ptr)(face, value) }
     #[inline] pub unsafe fn BindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint) -> ()>(storage::BindMultiTextureEXT.ptr)(texunit, target, texture) }
     #[inline] pub unsafe fn BindParameterEXT(value: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum) -> GLuint>(storage::BindParameterEXT.ptr)(value) }
     #[inline] pub unsafe fn BindProgramARB(target: GLenum, program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindProgramARB.ptr)(target, program) }
     #[inline] pub unsafe fn BindProgramNV(target: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindProgramNV.ptr)(target, id) }
     #[inline] pub unsafe fn BindProgramPipeline(pipeline: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindProgramPipeline.ptr)(pipeline) }
     #[inline] pub unsafe fn BindRenderbuffer(target: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindRenderbuffer.ptr)(target, renderbuffer) }
     #[inline] pub unsafe fn BindRenderbufferEXT(target: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindRenderbufferEXT.ptr)(target, renderbuffer) }
     #[inline] pub unsafe fn BindSampler(unit: GLuint, sampler: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::BindSampler.ptr)(unit, sampler) }
     #[inline] pub unsafe fn BindSamplers(first: GLuint, count: GLsizei, samplers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint) -> ()>(storage::BindSamplers.ptr)(first, count, samplers) }
     #[inline] pub unsafe fn BindShadingRateImageNV(texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindShadingRateImageNV.ptr)(texture) }
     #[inline] pub unsafe fn BindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum) -> GLuint>(storage::BindTexGenParameterEXT.ptr)(unit, coord, value) }
     #[inline] pub unsafe fn BindTexture(target: GLenum, texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindTexture.ptr)(target, texture) }
     #[inline] pub unsafe fn BindTextureEXT(target: GLenum, texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindTextureEXT.ptr)(target, texture) }
     #[inline] pub unsafe fn BindTextureUnit(unit: GLuint, texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::BindTextureUnit.ptr)(unit, texture) }
     #[inline] pub unsafe fn BindTextureUnitParameterEXT(unit: GLenum, value: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> GLuint>(storage::BindTextureUnitParameterEXT.ptr)(unit, value) }
     #[inline] pub unsafe fn BindTextures(first: GLuint, count: GLsizei, textures: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint) -> ()>(storage::BindTextures.ptr)(first, count, textures) }
     #[inline] pub unsafe fn BindTransformFeedback(target: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindTransformFeedback.ptr)(target, id) }
     #[inline] pub unsafe fn BindTransformFeedbackNV(target: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::BindTransformFeedbackNV.ptr)(target, id) }
     #[inline] pub unsafe fn BindVertexArray(array: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindVertexArray.ptr)(array) }
     #[inline] pub unsafe fn BindVertexArrayAPPLE(array: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindVertexArrayAPPLE.ptr)(array) }
     #[inline] pub unsafe fn BindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLintptr, GLsizei) -> ()>(storage::BindVertexBuffer.ptr)(bindingindex, buffer, offset, stride) }
     #[inline] pub unsafe fn BindVertexBuffers(first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint, *const GLintptr, *const GLsizei) -> ()>(storage::BindVertexBuffers.ptr)(first, count, buffers, offsets, strides) }
     #[inline] pub unsafe fn BindVertexShaderEXT(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::BindVertexShaderEXT.ptr)(id) }
     #[inline] pub unsafe fn BindVideoCaptureStreamBufferNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLintptrARB) -> ()>(storage::BindVideoCaptureStreamBufferNV.ptr)(video_capture_slot, stream, frame_region, offset) }
     #[inline] pub unsafe fn BindVideoCaptureStreamTextureNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLenum, GLuint) -> ()>(storage::BindVideoCaptureStreamTextureNV.ptr)(video_capture_slot, stream, frame_region, target, texture) }
     #[inline] pub unsafe fn Binormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::Binormal3bEXT.ptr)(bx, by, bz) }
     #[inline] pub unsafe fn Binormal3bvEXT(v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::Binormal3bvEXT.ptr)(v) }
     #[inline] pub unsafe fn Binormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::Binormal3dEXT.ptr)(bx, by, bz) }
     #[inline] pub unsafe fn Binormal3dvEXT(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::Binormal3dvEXT.ptr)(v) }
     #[inline] pub unsafe fn Binormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::Binormal3fEXT.ptr)(bx, by, bz) }
     #[inline] pub unsafe fn Binormal3fvEXT(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::Binormal3fvEXT.ptr)(v) }
     #[inline] pub unsafe fn Binormal3iEXT(bx: GLint, by: GLint, bz: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::Binormal3iEXT.ptr)(bx, by, bz) }
     #[inline] pub unsafe fn Binormal3ivEXT(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::Binormal3ivEXT.ptr)(v) }
     #[inline] pub unsafe fn Binormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::Binormal3sEXT.ptr)(bx, by, bz) }
     #[inline] pub unsafe fn Binormal3svEXT(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::Binormal3svEXT.ptr)(v) }
     #[inline] pub unsafe fn BinormalPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::BinormalPointerEXT.ptr)(type_, stride, pointer) }
     #[inline] pub unsafe fn BitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, *const GLubyte) -> ()>(storage::BitmapxOES.ptr)(width, height, xorig, yorig, xmove, ymove, bitmap) }
     #[inline] pub unsafe fn BlendBarrier() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::BlendBarrier.ptr)() }
     #[inline] pub unsafe fn BlendBarrierKHR() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::BlendBarrierKHR.ptr)() }
     #[inline] pub unsafe fn BlendBarrierNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::BlendBarrierNV.ptr)() }
     #[inline] pub unsafe fn BlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::BlendColor.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn BlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::BlendColorEXT.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn BlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::BlendColorxOES.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn BlendEquation(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::BlendEquation.ptr)(mode) }
     #[inline] pub unsafe fn BlendEquationEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::BlendEquationEXT.ptr)(mode) }
     #[inline] pub unsafe fn BlendEquationIndexedAMD(buf: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::BlendEquationIndexedAMD.ptr)(buf, mode) }
     #[inline] pub unsafe fn BlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::BlendEquationSeparate.ptr)(modeRGB, modeAlpha) }
     #[inline] pub unsafe fn BlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::BlendEquationSeparateEXT.ptr)(modeRGB, modeAlpha) }
     #[inline] pub unsafe fn BlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendEquationSeparateIndexedAMD.ptr)(buf, modeRGB, modeAlpha) }
     #[inline] pub unsafe fn BlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendEquationSeparatei.ptr)(buf, modeRGB, modeAlpha) }
     #[inline] pub unsafe fn BlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendEquationSeparateiARB.ptr)(buf, modeRGB, modeAlpha) }
     #[inline] pub unsafe fn BlendEquationi(buf: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::BlendEquationi.ptr)(buf, mode) }
     #[inline] pub unsafe fn BlendEquationiARB(buf: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::BlendEquationiARB.ptr)(buf, mode) }
     #[inline] pub unsafe fn BlendFunc(sfactor: GLenum, dfactor: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::BlendFunc.ptr)(sfactor, dfactor) }
     #[inline] pub unsafe fn BlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendFuncIndexedAMD.ptr)(buf, src, dst) }
     #[inline] pub unsafe fn BlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparate.ptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) }
     #[inline] pub unsafe fn BlendFuncSeparateEXT(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparateEXT.ptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) }
     #[inline] pub unsafe fn BlendFuncSeparateINGR(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparateINGR.ptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) }
     #[inline] pub unsafe fn BlendFuncSeparateIndexedAMD(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparateIndexedAMD.ptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) }
     #[inline] pub unsafe fn BlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparatei.ptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) }
     #[inline] pub unsafe fn BlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::BlendFuncSeparateiARB.ptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) }
     #[inline] pub unsafe fn BlendFunci(buf: GLuint, src: GLenum, dst: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendFunci.ptr)(buf, src, dst) }
     #[inline] pub unsafe fn BlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum) -> ()>(storage::BlendFunciARB.ptr)(buf, src, dst) }
     #[inline] pub unsafe fn BlendParameteriNV(pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::BlendParameteriNV.ptr)(pname, value) }
     #[inline] pub unsafe fn BlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> ()>(storage::BlitFramebuffer.ptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
     #[inline] pub unsafe fn BlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> ()>(storage::BlitFramebufferEXT.ptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
     #[inline] pub unsafe fn BlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> ()>(storage::BlitNamedFramebuffer.ptr)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
     #[inline] pub unsafe fn BufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint64EXT, GLsizeiptr) -> ()>(storage::BufferAddressRangeNV.ptr)(pname, index, address, length) }
     #[inline] pub unsafe fn BufferAttachMemoryNV(target: GLenum, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint64) -> ()>(storage::BufferAttachMemoryNV.ptr)(target, memory, offset) }
     #[inline] pub unsafe fn BufferData(target: GLenum, size: GLsizeiptr, data: *const std::os::raw::c_void, usage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizeiptr, *const std::os::raw::c_void, GLenum) -> ()>(storage::BufferData.ptr)(target, size, data, usage) }
     #[inline] pub unsafe fn BufferDataARB(target: GLenum, size: GLsizeiptrARB, data: *const std::os::raw::c_void, usage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizeiptrARB, *const std::os::raw::c_void, GLenum) -> ()>(storage::BufferDataARB.ptr)(target, size, data, usage) }
     #[inline] pub unsafe fn BufferPageCommitmentARB(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr, GLboolean) -> ()>(storage::BufferPageCommitmentARB.ptr)(target, offset, size, commit) }
     #[inline] pub unsafe fn BufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::BufferParameteriAPPLE.ptr)(target, pname, param) }
     #[inline] pub unsafe fn BufferStorage(target: GLenum, size: GLsizeiptr, data: *const std::os::raw::c_void, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizeiptr, *const std::os::raw::c_void, GLbitfield) -> ()>(storage::BufferStorage.ptr)(target, size, data, flags) }
     #[inline] pub unsafe fn BufferStorageExternalEXT(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) -> ()>(storage::BufferStorageExternalEXT.ptr)(target, offset, size, clientBuffer, flags) }
     #[inline] pub unsafe fn BufferStorageMemEXT(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizeiptr, GLuint, GLuint64) -> ()>(storage::BufferStorageMemEXT.ptr)(target, size, memory, offset) }
     #[inline] pub unsafe fn BufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr, *const std::os::raw::c_void) -> ()>(storage::BufferSubData.ptr)(target, offset, size, data) }
     #[inline] pub unsafe fn BufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptrARB, GLsizeiptrARB, *const std::os::raw::c_void) -> ()>(storage::BufferSubDataARB.ptr)(target, offset, size, data) }
     #[inline] pub unsafe fn CallCommandListNV(list: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::CallCommandListNV.ptr)(list) }
     #[inline] pub unsafe fn CheckFramebufferStatus(target: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLenum) -> GLenum>(storage::CheckFramebufferStatus.ptr)(target) }
     #[inline] pub unsafe fn CheckFramebufferStatusEXT(target: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLenum) -> GLenum>(storage::CheckFramebufferStatusEXT.ptr)(target) }
     #[inline] pub unsafe fn CheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> GLenum>(storage::CheckNamedFramebufferStatus.ptr)(framebuffer, target) }
     #[inline] pub unsafe fn CheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> GLenum>(storage::CheckNamedFramebufferStatusEXT.ptr)(framebuffer, target) }
     #[inline] pub unsafe fn ClampColor(target: GLenum, clamp: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::ClampColor.ptr)(target, clamp) }
     #[inline] pub unsafe fn ClampColorARB(target: GLenum, clamp: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::ClampColorARB.ptr)(target, clamp) }
     #[inline] pub unsafe fn Clear(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::Clear.ptr)(mask) }
     #[inline] pub unsafe fn ClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::ClearAccumxOES.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearBufferData.ptr)(target, internalformat, format, type_, data) }
     #[inline] pub unsafe fn ClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearBufferSubData.ptr)(target, internalformat, offset, size, format, type_, data) }
     #[inline] pub unsafe fn ClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLfloat, GLint) -> ()>(storage::ClearBufferfi.ptr)(buffer, drawbuffer, depth, stencil) }
     #[inline] pub unsafe fn ClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const GLfloat) -> ()>(storage::ClearBufferfv.ptr)(buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const GLint) -> ()>(storage::ClearBufferiv.ptr)(buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const GLuint) -> ()>(storage::ClearBufferuiv.ptr)(buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ClearColor.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint) -> ()>(storage::ClearColorIiEXT.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ClearColorIuiEXT.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::ClearColorxOES.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ClearDepth(depth: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble) -> ()>(storage::ClearDepth.ptr)(depth) }
     #[inline] pub unsafe fn ClearDepthdNV(depth: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble) -> ()>(storage::ClearDepthdNV.ptr)(depth) }
     #[inline] pub unsafe fn ClearDepthf(d: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::ClearDepthf.ptr)(d) }
     #[inline] pub unsafe fn ClearDepthfOES(depth: GLclampf) -> () { mem::transmute::<_, extern "system" fn(GLclampf) -> ()>(storage::ClearDepthfOES.ptr)(depth) }
     #[inline] pub unsafe fn ClearDepthxOES(depth: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::ClearDepthxOES.ptr)(depth) }
     #[inline] pub unsafe fn ClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearNamedBufferData.ptr)(buffer, internalformat, format, type_, data) }
     #[inline] pub unsafe fn ClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearNamedBufferDataEXT.ptr)(buffer, internalformat, format, type_, data) }
     #[inline] pub unsafe fn ClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearNamedBufferSubData.ptr)(buffer, internalformat, offset, size, format, type_, data) }
     #[inline] pub unsafe fn ClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearNamedBufferSubDataEXT.ptr)(buffer, internalformat, offset, size, format, type_, data) }
     #[inline] pub unsafe fn ClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLfloat, GLint) -> ()>(storage::ClearNamedFramebufferfi.ptr)(framebuffer, buffer, drawbuffer, depth, stencil) }
     #[inline] pub unsafe fn ClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, *const GLfloat) -> ()>(storage::ClearNamedFramebufferfv.ptr)(framebuffer, buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, *const GLint) -> ()>(storage::ClearNamedFramebufferiv.ptr)(framebuffer, buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, *const GLuint) -> ()>(storage::ClearNamedFramebufferuiv.ptr)(framebuffer, buffer, drawbuffer, value) }
     #[inline] pub unsafe fn ClearStencil(s: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::ClearStencil.ptr)(s) }
     #[inline] pub unsafe fn ClearTexImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearTexImage.ptr)(texture, level, format, type_, data) }
     #[inline] pub unsafe fn ClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ClearTexSubImage.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, data) }
     #[inline] pub unsafe fn ClientActiveTexture(texture: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ClientActiveTexture.ptr)(texture) }
     #[inline] pub unsafe fn ClientActiveTextureARB(texture: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ClientActiveTextureARB.ptr)(texture) }
     #[inline] pub unsafe fn ClientActiveVertexStreamATI(stream: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ClientActiveVertexStreamATI.ptr)(stream) }
     #[inline] pub unsafe fn ClientAttribDefaultEXT(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::ClientAttribDefaultEXT.ptr)(mask) }
     #[inline] pub unsafe fn ClientWaitSemaphoreui64NVX(fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLuint64) -> ()>(storage::ClientWaitSemaphoreui64NVX.ptr)(fenceObjectCount, semaphoreArray, fenceValueArray) }
     #[inline] pub unsafe fn ClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { mem::transmute::<_, extern "system" fn(GLsync, GLbitfield, GLuint64) -> GLenum>(storage::ClientWaitSync.ptr)(sync, flags, timeout) }
     #[inline] pub unsafe fn ClipControl(origin: GLenum, depth: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::ClipControl.ptr)(origin, depth) }
     #[inline] pub unsafe fn ClipPlanefOES(plane: GLenum, equation: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::ClipPlanefOES.ptr)(plane, equation) }
     #[inline] pub unsafe fn ClipPlanexOES(plane: GLenum, equation: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::ClipPlanexOES.ptr)(plane, equation) }
     #[inline] pub unsafe fn Color3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::Color3fVertex3fSUN.ptr)(r, g, b, x, y, z) }
     #[inline] pub unsafe fn Color3fVertex3fvSUN(c: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat) -> ()>(storage::Color3fVertex3fvSUN.ptr)(c, v) }
     #[inline] pub unsafe fn Color3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::Color3hNV.ptr)(red, green, blue) }
     #[inline] pub unsafe fn Color3hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Color3hvNV.ptr)(v) }
     #[inline] pub unsafe fn Color3xOES(red: GLfixed, green: GLfixed, blue: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::Color3xOES.ptr)(red, green, blue) }
     #[inline] pub unsafe fn Color3xvOES(components: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Color3xvOES.ptr)(components) }
     #[inline] pub unsafe fn Color4fNormal3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::Color4fNormal3fVertex3fSUN.ptr)(r, g, b, a, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn Color4fNormal3fVertex3fvSUN(c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::Color4fNormal3fVertex3fvSUN.ptr)(c, n, v) }
     #[inline] pub unsafe fn Color4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::Color4hNV.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn Color4hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Color4hvNV.ptr)(v) }
     #[inline] pub unsafe fn Color4ubVertex2fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) -> ()>(storage::Color4ubVertex2fSUN.ptr)(r, g, b, a, x, y) }
     #[inline] pub unsafe fn Color4ubVertex2fvSUN(c: *const GLubyte, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLubyte, *const GLfloat) -> ()>(storage::Color4ubVertex2fvSUN.ptr)(c, v) }
     #[inline] pub unsafe fn Color4ubVertex3fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> ()>(storage::Color4ubVertex3fSUN.ptr)(r, g, b, a, x, y, z) }
     #[inline] pub unsafe fn Color4ubVertex3fvSUN(c: *const GLubyte, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLubyte, *const GLfloat) -> ()>(storage::Color4ubVertex3fvSUN.ptr)(c, v) }
     #[inline] pub unsafe fn Color4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::Color4xOES.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn Color4xvOES(components: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Color4xvOES.ptr)(components) }
     #[inline] pub unsafe fn ColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei) -> ()>(storage::ColorFormatNV.ptr)(size, type_, stride) }
     #[inline] pub unsafe fn ColorFragmentOp1ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ColorFragmentOp1ATI.ptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) }
     #[inline] pub unsafe fn ColorFragmentOp2ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ColorFragmentOp2ATI.ptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) }
     #[inline] pub unsafe fn ColorFragmentOp3ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ColorFragmentOp3ATI.ptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) }
     #[inline] pub unsafe fn ColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLboolean, GLboolean, GLboolean, GLboolean) -> ()>(storage::ColorMask.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn ColorMaskIndexedEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> ()>(storage::ColorMaskIndexedEXT.ptr)(index, r, g, b, a) }
     #[inline] pub unsafe fn ColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> ()>(storage::ColorMaski.ptr)(index, r, g, b, a) }
     #[inline] pub unsafe fn ColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, GLsizei, *const std::os::raw::c_void) -> ()>(storage::ColorPointerEXT.ptr)(size, type_, stride, count, pointer) }
     #[inline] pub unsafe fn ColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::ColorPointerListIBM.ptr)(size, type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn ColorPointervINTEL(size: GLint, type_: GLenum, pointer: *const *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, *const *const std::os::raw::c_void) -> ()>(storage::ColorPointervINTEL.ptr)(size, type_, pointer) }
     #[inline] pub unsafe fn ColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ColorSubTable.ptr)(target, start, count, format, type_, data) }
     #[inline] pub unsafe fn ColorSubTableEXT(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ColorSubTableEXT.ptr)(target, start, count, format, type_, data) }
     #[inline] pub unsafe fn ColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ColorTable.ptr)(target, internalformat, width, format, type_, table) }
     #[inline] pub unsafe fn ColorTableEXT(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ColorTableEXT.ptr)(target, internalFormat, width, format, type_, table) }
     #[inline] pub unsafe fn ColorTableParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::ColorTableParameterfv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::ColorTableParameterfvSGI.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ColorTableParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::ColorTableParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::ColorTableParameterivSGI.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ColorTableSGI(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ColorTableSGI.ptr)(target, internalformat, width, format, type_, table) }
     #[inline] pub unsafe fn CombinerInputNV(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::CombinerInputNV.ptr)(stage, portion, variable, input, mapping, componentUsage) }
     #[inline] pub unsafe fn CombinerOutputNV(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) -> ()>(storage::CombinerOutputNV.ptr)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) }
     #[inline] pub unsafe fn CombinerParameterfNV(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::CombinerParameterfNV.ptr)(pname, param) }
     #[inline] pub unsafe fn CombinerParameterfvNV(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::CombinerParameterfvNV.ptr)(pname, params) }
     #[inline] pub unsafe fn CombinerParameteriNV(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::CombinerParameteriNV.ptr)(pname, param) }
     #[inline] pub unsafe fn CombinerParameterivNV(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::CombinerParameterivNV.ptr)(pname, params) }
     #[inline] pub unsafe fn CombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::CombinerStageParameterfvNV.ptr)(stage, pname, params) }
     #[inline] pub unsafe fn CommandListSegmentsNV(list: GLuint, segments: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::CommandListSegmentsNV.ptr)(list, segments) }
     #[inline] pub unsafe fn CompileCommandListNV(list: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::CompileCommandListNV.ptr)(list) }
     #[inline] pub unsafe fn CompileShader(shader: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::CompileShader.ptr)(shader) }
     #[inline] pub unsafe fn CompileShaderARB(shaderObj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB) -> ()>(storage::CompileShaderARB.ptr)(shaderObj) }
     #[inline] pub unsafe fn CompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: *const *const GLchar, length: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const *const GLchar, *const GLint) -> ()>(storage::CompileShaderIncludeARB.ptr)(shader, count, path, length) }
     #[inline] pub unsafe fn CompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexImage1DEXT.ptr)(texunit, target, level, internalformat, width, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexImage2DEXT.ptr)(texunit, target, level, internalformat, width, height, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexImage3DEXT.ptr)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexSubImage1DEXT.ptr)(texunit, target, level, xoffset, width, format, imageSize, bits) }
     #[inline] pub unsafe fn CompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexSubImage2DEXT.ptr)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) }
     #[inline] pub unsafe fn CompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedMultiTexSubImage3DEXT.ptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage1D.ptr)(target, level, internalformat, width, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexImage1DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage1DARB.ptr)(target, level, internalformat, width, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage2D.ptr)(target, level, internalformat, width, height, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexImage2DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage2DARB.ptr)(target, level, internalformat, width, height, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage3D.ptr)(target, level, internalformat, width, height, depth, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexImage3DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexImage3DARB.ptr)(target, level, internalformat, width, height, depth, border, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage1D.ptr)(target, level, xoffset, width, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage1DARB(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage1DARB.ptr)(target, level, xoffset, width, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage2D.ptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage2DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage2DARB.ptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage3D.ptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTexSubImage3DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTexSubImage3DARB.ptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureImage1DEXT.ptr)(texture, target, level, internalformat, width, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureImage2DEXT.ptr)(texture, target, level, internalformat, width, height, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureImage3DEXT.ptr)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage1D.ptr)(texture, level, xoffset, width, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage1DEXT.ptr)(texture, target, level, xoffset, width, format, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage2D.ptr)(texture, level, xoffset, yoffset, width, height, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage2DEXT.ptr)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) }
     #[inline] pub unsafe fn CompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage3D.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
     #[inline] pub unsafe fn CompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::CompressedTextureSubImage3DEXT.ptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) }
     #[inline] pub unsafe fn ConservativeRasterParameterfNV(pname: GLenum, value: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::ConservativeRasterParameterfNV.ptr)(pname, value) }
     #[inline] pub unsafe fn ConservativeRasterParameteriNV(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::ConservativeRasterParameteriNV.ptr)(pname, param) }
     #[inline] pub unsafe fn ConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ConvolutionFilter1D.ptr)(target, internalformat, width, format, type_, image) }
     #[inline] pub unsafe fn ConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ConvolutionFilter1DEXT.ptr)(target, internalformat, width, format, type_, image) }
     #[inline] pub unsafe fn ConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ConvolutionFilter2D.ptr)(target, internalformat, width, height, format, type_, image) }
     #[inline] pub unsafe fn ConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::ConvolutionFilter2DEXT.ptr)(target, internalformat, width, height, format, type_, image) }
     #[inline] pub unsafe fn ConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::ConvolutionParameterf.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::ConvolutionParameterfEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::ConvolutionParameterfv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::ConvolutionParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::ConvolutionParameteri.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::ConvolutionParameteriEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::ConvolutionParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::ConvolutionParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::ConvolutionParameterxOES.ptr)(target, pname, param) }
     #[inline] pub unsafe fn ConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::ConvolutionParameterxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn CopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> ()>(storage::CopyBufferSubData.ptr)(readTarget, writeTarget, readOffset, writeOffset, size) }
     #[inline] pub unsafe fn CopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLint, GLint, GLsizei) -> ()>(storage::CopyColorSubTable.ptr)(target, start, x, y, width) }
     #[inline] pub unsafe fn CopyColorSubTableEXT(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLint, GLint, GLsizei) -> ()>(storage::CopyColorSubTableEXT.ptr)(target, start, x, y, width) }
     #[inline] pub unsafe fn CopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei) -> ()>(storage::CopyColorTable.ptr)(target, internalformat, x, y, width) }
     #[inline] pub unsafe fn CopyColorTableSGI(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei) -> ()>(storage::CopyColorTableSGI.ptr)(target, internalformat, x, y, width) }
     #[inline] pub unsafe fn CopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei) -> ()>(storage::CopyConvolutionFilter1D.ptr)(target, internalformat, x, y, width) }
     #[inline] pub unsafe fn CopyConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei) -> ()>(storage::CopyConvolutionFilter1DEXT.ptr)(target, internalformat, x, y, width) }
     #[inline] pub unsafe fn CopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyConvolutionFilter2D.ptr)(target, internalformat, x, y, width, height) }
     #[inline] pub unsafe fn CopyConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyConvolutionFilter2DEXT.ptr)(target, internalformat, x, y, width, height) }
     #[inline] pub unsafe fn CopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> ()>(storage::CopyImageSubData.ptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) }
     #[inline] pub unsafe fn CopyImageSubDataNV(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> ()>(storage::CopyImageSubDataNV.ptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) }
     #[inline] pub unsafe fn CopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> ()>(storage::CopyMultiTexImage1DEXT.ptr)(texunit, target, level, internalformat, x, y, width, border) }
     #[inline] pub unsafe fn CopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> ()>(storage::CopyMultiTexImage2DEXT.ptr)(texunit, target, level, internalformat, x, y, width, height, border) }
     #[inline] pub unsafe fn CopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) -> ()>(storage::CopyMultiTexSubImage1DEXT.ptr)(texunit, target, level, xoffset, x, y, width) }
     #[inline] pub unsafe fn CopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyMultiTexSubImage2DEXT.ptr)(texunit, target, level, xoffset, yoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyMultiTexSubImage3DEXT.ptr)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) -> ()>(storage::CopyNamedBufferSubData.ptr)(readBuffer, writeBuffer, readOffset, writeOffset, size) }
     #[inline] pub unsafe fn CopyPathNV(resultPath: GLuint, srcPath: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::CopyPathNV.ptr)(resultPath, srcPath) }
     #[inline] pub unsafe fn CopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> ()>(storage::CopyTexImage1D.ptr)(target, level, internalformat, x, y, width, border) }
     #[inline] pub unsafe fn CopyTexImage1DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> ()>(storage::CopyTexImage1DEXT.ptr)(target, level, internalformat, x, y, width, border) }
     #[inline] pub unsafe fn CopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> ()>(storage::CopyTexImage2D.ptr)(target, level, internalformat, x, y, width, height, border) }
     #[inline] pub unsafe fn CopyTexImage2DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> ()>(storage::CopyTexImage2DEXT.ptr)(target, level, internalformat, x, y, width, height, border) }
     #[inline] pub unsafe fn CopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei) -> ()>(storage::CopyTexSubImage1D.ptr)(target, level, xoffset, x, y, width) }
     #[inline] pub unsafe fn CopyTexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei) -> ()>(storage::CopyTexSubImage1DEXT.ptr)(target, level, xoffset, x, y, width) }
     #[inline] pub unsafe fn CopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTexSubImage2D.ptr)(target, level, xoffset, yoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTexSubImage2DEXT.ptr)(target, level, xoffset, yoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTexSubImage3D.ptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTexSubImage3DEXT.ptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> ()>(storage::CopyTextureImage1DEXT.ptr)(texture, target, level, internalformat, x, y, width, border) }
     #[inline] pub unsafe fn CopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> ()>(storage::CopyTextureImage2DEXT.ptr)(texture, target, level, internalformat, x, y, width, height, border) }
     #[inline] pub unsafe fn CopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei) -> ()>(storage::CopyTextureSubImage1D.ptr)(texture, level, xoffset, x, y, width) }
     #[inline] pub unsafe fn CopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) -> ()>(storage::CopyTextureSubImage1DEXT.ptr)(texture, target, level, xoffset, x, y, width) }
     #[inline] pub unsafe fn CopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTextureSubImage2D.ptr)(texture, level, xoffset, yoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTextureSubImage2DEXT.ptr)(texture, target, level, xoffset, yoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTextureSubImage3D.ptr)(texture, level, xoffset, yoffset, zoffset, x, y, width, height) }
     #[inline] pub unsafe fn CopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::CopyTextureSubImage3DEXT.ptr)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) }
     #[inline] pub unsafe fn CoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLenum, GLenum, *const GLfloat) -> ()>(storage::CoverFillPathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) }
     #[inline] pub unsafe fn CoverFillPathNV(path: GLuint, coverMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::CoverFillPathNV.ptr)(path, coverMode) }
     #[inline] pub unsafe fn CoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLenum, GLenum, *const GLfloat) -> ()>(storage::CoverStrokePathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) }
     #[inline] pub unsafe fn CoverStrokePathNV(path: GLuint, coverMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::CoverStrokePathNV.ptr)(path, coverMode) }
     #[inline] pub unsafe fn CoverageModulationNV(components: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::CoverageModulationNV.ptr)(components) }
     #[inline] pub unsafe fn CoverageModulationTableNV(n: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLfloat) -> ()>(storage::CoverageModulationTableNV.ptr)(n, v) }
     #[inline] pub unsafe fn CreateBuffers(n: GLsizei, buffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateBuffers.ptr)(n, buffers) }
     #[inline] pub unsafe fn CreateCommandListsNV(n: GLsizei, lists: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateCommandListsNV.ptr)(n, lists) }
     #[inline] pub unsafe fn CreateFramebuffers(n: GLsizei, framebuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateFramebuffers.ptr)(n, framebuffers) }
     #[inline] pub unsafe fn CreateMemoryObjectsEXT(n: GLsizei, memoryObjects: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateMemoryObjectsEXT.ptr)(n, memoryObjects) }
     #[inline] pub unsafe fn CreatePerfQueryINTEL(queryId: GLuint, queryHandle: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLuint) -> ()>(storage::CreatePerfQueryINTEL.ptr)(queryId, queryHandle) }
     #[inline] pub unsafe fn CreateProgram() -> GLuint { mem::transmute::<_, extern "system" fn() -> GLuint>(storage::CreateProgram.ptr)() }
     #[inline] pub unsafe fn CreateProgramObjectARB() -> GLhandleARB { mem::transmute::<_, extern "system" fn() -> GLhandleARB>(storage::CreateProgramObjectARB.ptr)() }
     #[inline] pub unsafe fn CreateProgramPipelines(n: GLsizei, pipelines: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateProgramPipelines.ptr)(n, pipelines) }
     #[inline] pub unsafe fn CreateProgressFenceNVX() -> GLuint { mem::transmute::<_, extern "system" fn() -> GLuint>(storage::CreateProgressFenceNVX.ptr)() }
     #[inline] pub unsafe fn CreateQueries(target: GLenum, n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *mut GLuint) -> ()>(storage::CreateQueries.ptr)(target, n, ids) }
     #[inline] pub unsafe fn CreateRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateRenderbuffers.ptr)(n, renderbuffers) }
     #[inline] pub unsafe fn CreateSamplers(n: GLsizei, samplers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateSamplers.ptr)(n, samplers) }
     #[inline] pub unsafe fn CreateShader(type_: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum) -> GLuint>(storage::CreateShader.ptr)(type_) }
     #[inline] pub unsafe fn CreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB { mem::transmute::<_, extern "system" fn(GLenum) -> GLhandleARB>(storage::CreateShaderObjectARB.ptr)(shaderType) }
     #[inline] pub unsafe fn CreateShaderProgramEXT(type_: GLenum, string: *const GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, *const GLchar) -> GLuint>(storage::CreateShaderProgramEXT.ptr)(type_, string) }
     #[inline] pub unsafe fn CreateShaderProgramv(type_: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const *const GLchar) -> GLuint>(storage::CreateShaderProgramv.ptr)(type_, count, strings) }
     #[inline] pub unsafe fn CreateStatesNV(n: GLsizei, states: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateStatesNV.ptr)(n, states) }
     #[inline] pub unsafe fn CreateSyncFromCLeventARB(context: *mut _cl_context, event: *mut _cl_event, flags: GLbitfield) -> GLsync { mem::transmute::<_, extern "system" fn(*mut _cl_context, *mut _cl_event, GLbitfield) -> GLsync>(storage::CreateSyncFromCLeventARB.ptr)(context, event, flags) }
     #[inline] pub unsafe fn CreateTextures(target: GLenum, n: GLsizei, textures: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *mut GLuint) -> ()>(storage::CreateTextures.ptr)(target, n, textures) }
     #[inline] pub unsafe fn CreateTransformFeedbacks(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateTransformFeedbacks.ptr)(n, ids) }
     #[inline] pub unsafe fn CreateVertexArrays(n: GLsizei, arrays: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::CreateVertexArrays.ptr)(n, arrays) }
     #[inline] pub unsafe fn CullFace(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::CullFace.ptr)(mode) }
     #[inline] pub unsafe fn CullParameterdvEXT(pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLdouble) -> ()>(storage::CullParameterdvEXT.ptr)(pname, params) }
     #[inline] pub unsafe fn CullParameterfvEXT(pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::CullParameterfvEXT.ptr)(pname, params) }
     #[inline] pub unsafe fn CurrentPaletteMatrixARB(index: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::CurrentPaletteMatrixARB.ptr)(index) }
     #[inline] pub unsafe fn DebugMessageCallback(callback: GLDEBUGPROC, userParam: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLDEBUGPROC, *const std::os::raw::c_void) -> ()>(storage::DebugMessageCallback.ptr)(callback, userParam) }
     #[inline] pub unsafe fn DebugMessageCallbackAMD(callback: GLDEBUGPROCAMD, userParam: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLDEBUGPROCAMD, *mut std::os::raw::c_void) -> ()>(storage::DebugMessageCallbackAMD.ptr)(callback, userParam) }
     #[inline] pub unsafe fn DebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLDEBUGPROCARB, *const std::os::raw::c_void) -> ()>(storage::DebugMessageCallbackARB.ptr)(callback, userParam) }
     #[inline] pub unsafe fn DebugMessageControl(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLsizei, *const GLuint, GLboolean) -> ()>(storage::DebugMessageControl.ptr)(source, type_, severity, count, ids, enabled) }
     #[inline] pub unsafe fn DebugMessageControlARB(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLsizei, *const GLuint, GLboolean) -> ()>(storage::DebugMessageControlARB.ptr)(source, type_, severity, count, ids, enabled) }
     #[inline] pub unsafe fn DebugMessageEnableAMD(category: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, *const GLuint, GLboolean) -> ()>(storage::DebugMessageEnableAMD.ptr)(category, severity, count, ids, enabled) }
     #[inline] pub unsafe fn DebugMessageInsert(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLenum, GLsizei, *const GLchar) -> ()>(storage::DebugMessageInsert.ptr)(source, type_, id, severity, length, buf) }
     #[inline] pub unsafe fn DebugMessageInsertAMD(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLsizei, *const GLchar) -> ()>(storage::DebugMessageInsertAMD.ptr)(category, severity, id, length, buf) }
     #[inline] pub unsafe fn DebugMessageInsertARB(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLenum, GLsizei, *const GLchar) -> ()>(storage::DebugMessageInsertARB.ptr)(source, type_, id, severity, length, buf) }
     #[inline] pub unsafe fn DeformSGIX(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::DeformSGIX.ptr)(mask) }
     #[inline] pub unsafe fn DeformationMap3dSGIX(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, *const GLdouble) -> ()>(storage::DeformationMap3dSGIX.ptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) }
     #[inline] pub unsafe fn DeformationMap3fSGIX(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, *const GLfloat) -> ()>(storage::DeformationMap3fSGIX.ptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) }
     #[inline] pub unsafe fn DeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei) -> ()>(storage::DeleteAsyncMarkersSGIX.ptr)(marker, range) }
     #[inline] pub unsafe fn DeleteBuffers(n: GLsizei, buffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteBuffers.ptr)(n, buffers) }
     #[inline] pub unsafe fn DeleteBuffersARB(n: GLsizei, buffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteBuffersARB.ptr)(n, buffers) }
     #[inline] pub unsafe fn DeleteCommandListsNV(n: GLsizei, lists: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteCommandListsNV.ptr)(n, lists) }
     #[inline] pub unsafe fn DeleteFencesAPPLE(n: GLsizei, fences: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteFencesAPPLE.ptr)(n, fences) }
     #[inline] pub unsafe fn DeleteFencesNV(n: GLsizei, fences: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteFencesNV.ptr)(n, fences) }
     #[inline] pub unsafe fn DeleteFragmentShaderATI(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DeleteFragmentShaderATI.ptr)(id) }
     #[inline] pub unsafe fn DeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteFramebuffers.ptr)(n, framebuffers) }
     #[inline] pub unsafe fn DeleteFramebuffersEXT(n: GLsizei, framebuffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteFramebuffersEXT.ptr)(n, framebuffers) }
     #[inline] pub unsafe fn DeleteMemoryObjectsEXT(n: GLsizei, memoryObjects: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteMemoryObjectsEXT.ptr)(n, memoryObjects) }
     #[inline] pub unsafe fn DeleteNamedStringARB(namelen: GLint, name: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLchar) -> ()>(storage::DeleteNamedStringARB.ptr)(namelen, name) }
     #[inline] pub unsafe fn DeleteNamesAMD(identifier: GLenum, num: GLuint, names: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLuint) -> ()>(storage::DeleteNamesAMD.ptr)(identifier, num, names) }
     #[inline] pub unsafe fn DeleteObjectARB(obj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB) -> ()>(storage::DeleteObjectARB.ptr)(obj) }
     #[inline] pub unsafe fn DeleteOcclusionQueriesNV(n: GLsizei, ids: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteOcclusionQueriesNV.ptr)(n, ids) }
     #[inline] pub unsafe fn DeletePathsNV(path: GLuint, range: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei) -> ()>(storage::DeletePathsNV.ptr)(path, range) }
     #[inline] pub unsafe fn DeletePerfMonitorsAMD(n: GLsizei, monitors: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::DeletePerfMonitorsAMD.ptr)(n, monitors) }
     #[inline] pub unsafe fn DeletePerfQueryINTEL(queryHandle: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DeletePerfQueryINTEL.ptr)(queryHandle) }
     #[inline] pub unsafe fn DeleteProgram(program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DeleteProgram.ptr)(program) }
     #[inline] pub unsafe fn DeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteProgramPipelines.ptr)(n, pipelines) }
     #[inline] pub unsafe fn DeleteProgramsARB(n: GLsizei, programs: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteProgramsARB.ptr)(n, programs) }
     #[inline] pub unsafe fn DeleteProgramsNV(n: GLsizei, programs: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteProgramsNV.ptr)(n, programs) }
     #[inline] pub unsafe fn DeleteQueries(n: GLsizei, ids: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteQueries.ptr)(n, ids) }
     #[inline] pub unsafe fn DeleteQueriesARB(n: GLsizei, ids: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteQueriesARB.ptr)(n, ids) }
     #[inline] pub unsafe fn DeleteQueryResourceTagNV(n: GLsizei, tagIds: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLint) -> ()>(storage::DeleteQueryResourceTagNV.ptr)(n, tagIds) }
     #[inline] pub unsafe fn DeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteRenderbuffers.ptr)(n, renderbuffers) }
     #[inline] pub unsafe fn DeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteRenderbuffersEXT.ptr)(n, renderbuffers) }
     #[inline] pub unsafe fn DeleteSamplers(count: GLsizei, samplers: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteSamplers.ptr)(count, samplers) }
     #[inline] pub unsafe fn DeleteSemaphoresEXT(n: GLsizei, semaphores: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteSemaphoresEXT.ptr)(n, semaphores) }
     #[inline] pub unsafe fn DeleteShader(shader: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DeleteShader.ptr)(shader) }
     #[inline] pub unsafe fn DeleteStatesNV(n: GLsizei, states: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteStatesNV.ptr)(n, states) }
     #[inline] pub unsafe fn DeleteSync(sync: GLsync) -> () { mem::transmute::<_, extern "system" fn(GLsync) -> ()>(storage::DeleteSync.ptr)(sync) }
     #[inline] pub unsafe fn DeleteTextures(n: GLsizei, textures: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteTextures.ptr)(n, textures) }
     #[inline] pub unsafe fn DeleteTexturesEXT(n: GLsizei, textures: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteTexturesEXT.ptr)(n, textures) }
     #[inline] pub unsafe fn DeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteTransformFeedbacks.ptr)(n, ids) }
     #[inline] pub unsafe fn DeleteTransformFeedbacksNV(n: GLsizei, ids: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteTransformFeedbacksNV.ptr)(n, ids) }
     #[inline] pub unsafe fn DeleteVertexArrays(n: GLsizei, arrays: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteVertexArrays.ptr)(n, arrays) }
     #[inline] pub unsafe fn DeleteVertexArraysAPPLE(n: GLsizei, arrays: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::DeleteVertexArraysAPPLE.ptr)(n, arrays) }
     #[inline] pub unsafe fn DeleteVertexShaderEXT(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DeleteVertexShaderEXT.ptr)(id) }
     #[inline] pub unsafe fn DepthBoundsEXT(zmin: GLclampd, zmax: GLclampd) -> () { mem::transmute::<_, extern "system" fn(GLclampd, GLclampd) -> ()>(storage::DepthBoundsEXT.ptr)(zmin, zmax) }
     #[inline] pub unsafe fn DepthBoundsdNV(zmin: GLdouble, zmax: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::DepthBoundsdNV.ptr)(zmin, zmax) }
     #[inline] pub unsafe fn DepthFunc(func: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::DepthFunc.ptr)(func) }
     #[inline] pub unsafe fn DepthMask(flag: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLboolean) -> ()>(storage::DepthMask.ptr)(flag) }
     #[inline] pub unsafe fn DepthRange(n: GLdouble, f: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::DepthRange.ptr)(n, f) }
     #[inline] pub unsafe fn DepthRangeArrayv(first: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLdouble) -> ()>(storage::DepthRangeArrayv.ptr)(first, count, v) }
     #[inline] pub unsafe fn DepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::DepthRangeIndexed.ptr)(index, n, f) }
     #[inline] pub unsafe fn DepthRangedNV(zNear: GLdouble, zFar: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::DepthRangedNV.ptr)(zNear, zFar) }
     #[inline] pub unsafe fn DepthRangef(n: GLfloat, f: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::DepthRangef.ptr)(n, f) }
     #[inline] pub unsafe fn DepthRangefOES(n: GLclampf, f: GLclampf) -> () { mem::transmute::<_, extern "system" fn(GLclampf, GLclampf) -> ()>(storage::DepthRangefOES.ptr)(n, f) }
     #[inline] pub unsafe fn DepthRangexOES(n: GLfixed, f: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::DepthRangexOES.ptr)(n, f) }
     #[inline] pub unsafe fn DetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLhandleARB) -> ()>(storage::DetachObjectARB.ptr)(containerObj, attachedObj) }
     #[inline] pub unsafe fn DetachShader(program: GLuint, shader: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::DetachShader.ptr)(program, shader) }
     #[inline] pub unsafe fn DetailTexFuncSGIS(target: GLenum, n: GLsizei, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLfloat) -> ()>(storage::DetailTexFuncSGIS.ptr)(target, n, points) }
     #[inline] pub unsafe fn Disable(cap: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::Disable.ptr)(cap) }
     #[inline] pub unsafe fn DisableClientStateIndexedEXT(array: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::DisableClientStateIndexedEXT.ptr)(array, index) }
     #[inline] pub unsafe fn DisableClientStateiEXT(array: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::DisableClientStateiEXT.ptr)(array, index) }
     #[inline] pub unsafe fn DisableIndexedEXT(target: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::DisableIndexedEXT.ptr)(target, index) }
     #[inline] pub unsafe fn DisableVariantClientStateEXT(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DisableVariantClientStateEXT.ptr)(id) }
     #[inline] pub unsafe fn DisableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::DisableVertexArrayAttrib.ptr)(vaobj, index) }
     #[inline] pub unsafe fn DisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::DisableVertexArrayAttribEXT.ptr)(vaobj, index) }
     #[inline] pub unsafe fn DisableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::DisableVertexArrayEXT.ptr)(vaobj, array) }
     #[inline] pub unsafe fn DisableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::DisableVertexAttribAPPLE.ptr)(index, pname) }
     #[inline] pub unsafe fn DisableVertexAttribArray(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DisableVertexAttribArray.ptr)(index) }
     #[inline] pub unsafe fn DisableVertexAttribArrayARB(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::DisableVertexAttribArrayARB.ptr)(index) }
     #[inline] pub unsafe fn Disablei(target: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::Disablei.ptr)(target, index) }
     #[inline] pub unsafe fn DispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::DispatchCompute.ptr)(num_groups_x, num_groups_y, num_groups_z) }
     #[inline] pub unsafe fn DispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::DispatchComputeGroupSizeARB.ptr)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) }
     #[inline] pub unsafe fn DispatchComputeIndirect(indirect: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLintptr) -> ()>(storage::DispatchComputeIndirect.ptr)(indirect) }
     #[inline] pub unsafe fn DrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei) -> ()>(storage::DrawArrays.ptr)(mode, first, count) }
     #[inline] pub unsafe fn DrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei) -> ()>(storage::DrawArraysEXT.ptr)(mode, first, count) }
     #[inline] pub unsafe fn DrawArraysIndirect(mode: GLenum, indirect: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void) -> ()>(storage::DrawArraysIndirect.ptr)(mode, indirect) }
     #[inline] pub unsafe fn DrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, GLsizei) -> ()>(storage::DrawArraysInstanced.ptr)(mode, first, count, instancecount) }
     #[inline] pub unsafe fn DrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, GLsizei) -> ()>(storage::DrawArraysInstancedARB.ptr)(mode, first, count, primcount) }
     #[inline] pub unsafe fn DrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, GLsizei, GLuint) -> ()>(storage::DrawArraysInstancedBaseInstance.ptr)(mode, first, count, instancecount, baseinstance) }
     #[inline] pub unsafe fn DrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, GLsizei) -> ()>(storage::DrawArraysInstancedEXT.ptr)(mode, start, count, primcount) }
     #[inline] pub unsafe fn DrawBuffer(buf: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::DrawBuffer.ptr)(buf) }
     #[inline] pub unsafe fn DrawBuffers(n: GLsizei, bufs: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLenum) -> ()>(storage::DrawBuffers.ptr)(n, bufs) }
     #[inline] pub unsafe fn DrawBuffersARB(n: GLsizei, bufs: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLenum) -> ()>(storage::DrawBuffersARB.ptr)(n, bufs) }
     #[inline] pub unsafe fn DrawBuffersATI(n: GLsizei, bufs: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLenum) -> ()>(storage::DrawBuffersATI.ptr)(n, bufs) }
     #[inline] pub unsafe fn DrawCommandsAddressNV(primitiveMode: GLenum, indirects: *const GLuint64, sizes: *const GLsizei, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLuint64, *const GLsizei, GLuint) -> ()>(storage::DrawCommandsAddressNV.ptr)(primitiveMode, indirects, sizes, count) }
     #[inline] pub unsafe fn DrawCommandsNV(primitiveMode: GLenum, buffer: GLuint, indirects: *const GLintptr, sizes: *const GLsizei, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLintptr, *const GLsizei, GLuint) -> ()>(storage::DrawCommandsNV.ptr)(primitiveMode, buffer, indirects, sizes, count) }
     #[inline] pub unsafe fn DrawCommandsStatesAddressNV(indirects: *const GLuint64, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(*const GLuint64, *const GLsizei, *const GLuint, *const GLuint, GLuint) -> ()>(storage::DrawCommandsStatesAddressNV.ptr)(indirects, sizes, states, fbos, count) }
     #[inline] pub unsafe fn DrawCommandsStatesNV(buffer: GLuint, indirects: *const GLintptr, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLintptr, *const GLsizei, *const GLuint, *const GLuint, GLuint) -> ()>(storage::DrawCommandsStatesNV.ptr)(buffer, indirects, sizes, states, fbos, count) }
     #[inline] pub unsafe fn DrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei) -> ()>(storage::DrawElementArrayAPPLE.ptr)(mode, first, count) }
     #[inline] pub unsafe fn DrawElementArrayATI(mode: GLenum, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei) -> ()>(storage::DrawElementArrayATI.ptr)(mode, count) }
     #[inline] pub unsafe fn DrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::DrawElements.ptr)(mode, count, type_, indices) }
     #[inline] pub unsafe fn DrawElementsBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, basevertex: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLint) -> ()>(storage::DrawElementsBaseVertex.ptr)(mode, count, type_, indices, basevertex) }
     #[inline] pub unsafe fn DrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::DrawElementsIndirect.ptr)(mode, type_, indirect) }
     #[inline] pub unsafe fn DrawElementsInstanced(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, instancecount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei) -> ()>(storage::DrawElementsInstanced.ptr)(mode, count, type_, indices, instancecount) }
     #[inline] pub unsafe fn DrawElementsInstancedARB(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei) -> ()>(storage::DrawElementsInstancedARB.ptr)(mode, count, type_, indices, primcount) }
     #[inline] pub unsafe fn DrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, instancecount: GLsizei, baseinstance: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei, GLuint) -> ()>(storage::DrawElementsInstancedBaseInstance.ptr)(mode, count, type_, indices, instancecount, baseinstance) }
     #[inline] pub unsafe fn DrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, instancecount: GLsizei, basevertex: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei, GLint) -> ()>(storage::DrawElementsInstancedBaseVertex.ptr)(mode, count, type_, indices, instancecount, basevertex) }
     #[inline] pub unsafe fn DrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei, GLint, GLuint) -> ()>(storage::DrawElementsInstancedBaseVertexBaseInstance.ptr)(mode, count, type_, indices, instancecount, basevertex, baseinstance) }
     #[inline] pub unsafe fn DrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLsizei) -> ()>(storage::DrawElementsInstancedEXT.ptr)(mode, count, type_, indices, primcount) }
     #[inline] pub unsafe fn DrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, GLsizei) -> ()>(storage::DrawMeshArraysSUN.ptr)(mode, first, count, width) }
     #[inline] pub unsafe fn DrawMeshTasksIndirectNV(indirect: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLintptr) -> ()>(storage::DrawMeshTasksIndirectNV.ptr)(indirect) }
     #[inline] pub unsafe fn DrawMeshTasksNV(first: GLuint, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::DrawMeshTasksNV.ptr)(first, count) }
     #[inline] pub unsafe fn DrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLint, GLsizei) -> ()>(storage::DrawRangeElementArrayAPPLE.ptr)(mode, start, end, first, count) }
     #[inline] pub unsafe fn DrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei) -> ()>(storage::DrawRangeElementArrayATI.ptr)(mode, start, end, count) }
     #[inline] pub unsafe fn DrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::DrawRangeElements.ptr)(mode, start, end, count, type_, indices) }
     #[inline] pub unsafe fn DrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void, basevertex: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, GLenum, *const std::os::raw::c_void, GLint) -> ()>(storage::DrawRangeElementsBaseVertex.ptr)(mode, start, end, count, type_, indices, basevertex) }
     #[inline] pub unsafe fn DrawRangeElementsEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::DrawRangeElementsEXT.ptr)(mode, start, end, count, type_, indices) }
     #[inline] pub unsafe fn DrawTextureNV(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::DrawTextureNV.ptr)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) }
     #[inline] pub unsafe fn DrawTransformFeedback(mode: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::DrawTransformFeedback.ptr)(mode, id) }
     #[inline] pub unsafe fn DrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei) -> ()>(storage::DrawTransformFeedbackInstanced.ptr)(mode, id, instancecount) }
     #[inline] pub unsafe fn DrawTransformFeedbackNV(mode: GLenum, id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::DrawTransformFeedbackNV.ptr)(mode, id) }
     #[inline] pub unsafe fn DrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::DrawTransformFeedbackStream.ptr)(mode, id, stream) }
     #[inline] pub unsafe fn DrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei) -> ()>(storage::DrawTransformFeedbackStreamInstanced.ptr)(mode, id, stream, instancecount) }
     #[inline] pub unsafe fn DrawVkImageNV(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::DrawVkImageNV.ptr)(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) }
     #[inline] pub unsafe fn EGLImageTargetTexStorageEXT(target: GLenum, image: GLeglImageOES, attrib_list: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLeglImageOES, *const GLint) -> ()>(storage::EGLImageTargetTexStorageEXT.ptr)(target, image, attrib_list) }
     #[inline] pub unsafe fn EGLImageTargetTextureStorageEXT(texture: GLuint, image: GLeglImageOES, attrib_list: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLeglImageOES, *const GLint) -> ()>(storage::EGLImageTargetTextureStorageEXT.ptr)(texture, image, attrib_list) }
     #[inline] pub unsafe fn EdgeFlagFormatNV(stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLsizei) -> ()>(storage::EdgeFlagFormatNV.ptr)(stride) }
     #[inline] pub unsafe fn EdgeFlagPointerEXT(stride: GLsizei, count: GLsizei, pointer: *const GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLsizei, *const GLboolean) -> ()>(storage::EdgeFlagPointerEXT.ptr)(stride, count, pointer) }
     #[inline] pub unsafe fn EdgeFlagPointerListIBM(stride: GLint, pointer: *const *const GLboolean, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, *const *const GLboolean, GLint) -> ()>(storage::EdgeFlagPointerListIBM.ptr)(stride, pointer, ptrstride) }
     #[inline] pub unsafe fn ElementPointerAPPLE(type_: GLenum, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void) -> ()>(storage::ElementPointerAPPLE.ptr)(type_, pointer) }
     #[inline] pub unsafe fn ElementPointerATI(type_: GLenum, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void) -> ()>(storage::ElementPointerATI.ptr)(type_, pointer) }
     #[inline] pub unsafe fn Enable(cap: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::Enable.ptr)(cap) }
     #[inline] pub unsafe fn EnableClientStateIndexedEXT(array: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::EnableClientStateIndexedEXT.ptr)(array, index) }
     #[inline] pub unsafe fn EnableClientStateiEXT(array: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::EnableClientStateiEXT.ptr)(array, index) }
     #[inline] pub unsafe fn EnableIndexedEXT(target: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::EnableIndexedEXT.ptr)(target, index) }
     #[inline] pub unsafe fn EnableVariantClientStateEXT(id: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EnableVariantClientStateEXT.ptr)(id) }
     #[inline] pub unsafe fn EnableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::EnableVertexArrayAttrib.ptr)(vaobj, index) }
     #[inline] pub unsafe fn EnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::EnableVertexArrayAttribEXT.ptr)(vaobj, index) }
     #[inline] pub unsafe fn EnableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::EnableVertexArrayEXT.ptr)(vaobj, array) }
     #[inline] pub unsafe fn EnableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::EnableVertexAttribAPPLE.ptr)(index, pname) }
     #[inline] pub unsafe fn EnableVertexAttribArray(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EnableVertexAttribArray.ptr)(index) }
     #[inline] pub unsafe fn EnableVertexAttribArrayARB(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EnableVertexAttribArrayARB.ptr)(index) }
     #[inline] pub unsafe fn Enablei(target: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::Enablei.ptr)(target, index) }
     #[inline] pub unsafe fn EndConditionalRender() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndConditionalRender.ptr)() }
     #[inline] pub unsafe fn EndConditionalRenderNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndConditionalRenderNV.ptr)() }
     #[inline] pub unsafe fn EndConditionalRenderNVX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndConditionalRenderNVX.ptr)() }
     #[inline] pub unsafe fn EndFragmentShaderATI() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndFragmentShaderATI.ptr)() }
     #[inline] pub unsafe fn EndOcclusionQueryNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndOcclusionQueryNV.ptr)() }
     #[inline] pub unsafe fn EndPerfMonitorAMD(monitor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EndPerfMonitorAMD.ptr)(monitor) }
     #[inline] pub unsafe fn EndPerfQueryINTEL(queryHandle: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EndPerfQueryINTEL.ptr)(queryHandle) }
     #[inline] pub unsafe fn EndQuery(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::EndQuery.ptr)(target) }
     #[inline] pub unsafe fn EndQueryARB(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::EndQueryARB.ptr)(target) }
     #[inline] pub unsafe fn EndQueryIndexed(target: GLenum, index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::EndQueryIndexed.ptr)(target, index) }
     #[inline] pub unsafe fn EndTransformFeedback() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndTransformFeedback.ptr)() }
     #[inline] pub unsafe fn EndTransformFeedbackEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndTransformFeedbackEXT.ptr)() }
     #[inline] pub unsafe fn EndTransformFeedbackNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndTransformFeedbackNV.ptr)() }
     #[inline] pub unsafe fn EndVertexShaderEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EndVertexShaderEXT.ptr)() }
     #[inline] pub unsafe fn EndVideoCaptureNV(video_capture_slot: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::EndVideoCaptureNV.ptr)(video_capture_slot) }
     #[inline] pub unsafe fn EvalCoord1xOES(u: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::EvalCoord1xOES.ptr)(u) }
     #[inline] pub unsafe fn EvalCoord1xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::EvalCoord1xvOES.ptr)(coords) }
     #[inline] pub unsafe fn EvalCoord2xOES(u: GLfixed, v: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::EvalCoord2xOES.ptr)(u, v) }
     #[inline] pub unsafe fn EvalCoord2xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::EvalCoord2xvOES.ptr)(coords) }
     #[inline] pub unsafe fn EvalMapsNV(target: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::EvalMapsNV.ptr)(target, mode) }
     #[inline] pub unsafe fn EvaluateDepthValuesARB() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::EvaluateDepthValuesARB.ptr)() }
     #[inline] pub unsafe fn ExecuteProgramNV(target: GLenum, id: GLuint, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLfloat) -> ()>(storage::ExecuteProgramNV.ptr)(target, id, params) }
     #[inline] pub unsafe fn ExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::ExtractComponentEXT.ptr)(res, src, num) }
     #[inline] pub unsafe fn FeedbackBufferxOES(n: GLsizei, type_: GLenum, buffer: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const GLfixed) -> ()>(storage::FeedbackBufferxOES.ptr)(n, type_, buffer) }
     #[inline] pub unsafe fn FenceSync(condition: GLenum, flags: GLbitfield) -> GLsync { mem::transmute::<_, extern "system" fn(GLenum, GLbitfield) -> GLsync>(storage::FenceSync.ptr)(condition, flags) }
     #[inline] pub unsafe fn FinalCombinerInputNV(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::FinalCombinerInputNV.ptr)(variable, input, mapping, componentUsage) }
     #[inline] pub unsafe fn Finish() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::Finish.ptr)() }
     #[inline] pub unsafe fn FinishAsyncSGIX(markerp: *mut GLuint) -> GLint { mem::transmute::<_, extern "system" fn(*mut GLuint) -> GLint>(storage::FinishAsyncSGIX.ptr)(markerp) }
     #[inline] pub unsafe fn FinishFenceAPPLE(fence: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::FinishFenceAPPLE.ptr)(fence) }
     #[inline] pub unsafe fn FinishFenceNV(fence: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::FinishFenceNV.ptr)(fence) }
     #[inline] pub unsafe fn FinishObjectAPPLE(object: GLenum, name: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::FinishObjectAPPLE.ptr)(object, name) }
     #[inline] pub unsafe fn FinishTextureSUNX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::FinishTextureSUNX.ptr)() }
     #[inline] pub unsafe fn Flush() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::Flush.ptr)() }
     #[inline] pub unsafe fn FlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr) -> ()>(storage::FlushMappedBufferRange.ptr)(target, offset, length) }
     #[inline] pub unsafe fn FlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr) -> ()>(storage::FlushMappedBufferRangeAPPLE.ptr)(target, offset, size) }
     #[inline] pub unsafe fn FlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr) -> ()>(storage::FlushMappedNamedBufferRange.ptr)(buffer, offset, length) }
     #[inline] pub unsafe fn FlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr) -> ()>(storage::FlushMappedNamedBufferRangeEXT.ptr)(buffer, offset, length) }
     #[inline] pub unsafe fn FlushPixelDataRangeNV(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::FlushPixelDataRangeNV.ptr)(target) }
     #[inline] pub unsafe fn FlushRasterSGIX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::FlushRasterSGIX.ptr)() }
     #[inline] pub unsafe fn FlushStaticDataIBM(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::FlushStaticDataIBM.ptr)(target) }
     #[inline] pub unsafe fn FlushVertexArrayRangeAPPLE(length: GLsizei, pointer: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut std::os::raw::c_void) -> ()>(storage::FlushVertexArrayRangeAPPLE.ptr)(length, pointer) }
     #[inline] pub unsafe fn FlushVertexArrayRangeNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::FlushVertexArrayRangeNV.ptr)() }
     #[inline] pub unsafe fn FogCoordFormatNV(type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei) -> ()>(storage::FogCoordFormatNV.ptr)(type_, stride) }
     #[inline] pub unsafe fn FogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::FogCoordPointer.ptr)(type_, stride, pointer) }
     #[inline] pub unsafe fn FogCoordPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::FogCoordPointerEXT.ptr)(type_, stride, pointer) }
     #[inline] pub unsafe fn FogCoordPointerListIBM(type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::FogCoordPointerListIBM.ptr)(type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn FogCoordd(coord: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble) -> ()>(storage::FogCoordd.ptr)(coord) }
     #[inline] pub unsafe fn FogCoorddEXT(coord: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble) -> ()>(storage::FogCoorddEXT.ptr)(coord) }
     #[inline] pub unsafe fn FogCoorddv(coord: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::FogCoorddv.ptr)(coord) }
     #[inline] pub unsafe fn FogCoorddvEXT(coord: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::FogCoorddvEXT.ptr)(coord) }
     #[inline] pub unsafe fn FogCoordf(coord: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::FogCoordf.ptr)(coord) }
     #[inline] pub unsafe fn FogCoordfEXT(coord: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::FogCoordfEXT.ptr)(coord) }
     #[inline] pub unsafe fn FogCoordfv(coord: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::FogCoordfv.ptr)(coord) }
     #[inline] pub unsafe fn FogCoordfvEXT(coord: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::FogCoordfvEXT.ptr)(coord) }
     #[inline] pub unsafe fn FogCoordhNV(fog: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV) -> ()>(storage::FogCoordhNV.ptr)(fog) }
     #[inline] pub unsafe fn FogCoordhvNV(fog: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::FogCoordhvNV.ptr)(fog) }
     #[inline] pub unsafe fn FogFuncSGIS(n: GLsizei, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLfloat) -> ()>(storage::FogFuncSGIS.ptr)(n, points) }
     #[inline] pub unsafe fn FogxOES(pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::FogxOES.ptr)(pname, param) }
     #[inline] pub unsafe fn FogxvOES(pname: GLenum, param: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::FogxvOES.ptr)(pname, param) }
     #[inline] pub unsafe fn FragmentColorMaterialSGIX(face: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::FragmentColorMaterialSGIX.ptr)(face, mode) }
     #[inline] pub unsafe fn FragmentCoverageColorNV(color: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::FragmentCoverageColorNV.ptr)(color) }
     #[inline] pub unsafe fn FragmentLightModelfSGIX(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::FragmentLightModelfSGIX.ptr)(pname, param) }
     #[inline] pub unsafe fn FragmentLightModelfvSGIX(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::FragmentLightModelfvSGIX.ptr)(pname, params) }
     #[inline] pub unsafe fn FragmentLightModeliSGIX(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::FragmentLightModeliSGIX.ptr)(pname, param) }
     #[inline] pub unsafe fn FragmentLightModelivSGIX(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::FragmentLightModelivSGIX.ptr)(pname, params) }
     #[inline] pub unsafe fn FragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::FragmentLightfSGIX.ptr)(light, pname, param) }
     #[inline] pub unsafe fn FragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::FragmentLightfvSGIX.ptr)(light, pname, params) }
     #[inline] pub unsafe fn FragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::FragmentLightiSGIX.ptr)(light, pname, param) }
     #[inline] pub unsafe fn FragmentLightivSGIX(light: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::FragmentLightivSGIX.ptr)(light, pname, params) }
     #[inline] pub unsafe fn FragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::FragmentMaterialfSGIX.ptr)(face, pname, param) }
     #[inline] pub unsafe fn FragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::FragmentMaterialfvSGIX.ptr)(face, pname, params) }
     #[inline] pub unsafe fn FragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::FragmentMaterialiSGIX.ptr)(face, pname, param) }
     #[inline] pub unsafe fn FragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::FragmentMaterialivSGIX.ptr)(face, pname, params) }
     #[inline] pub unsafe fn FrameTerminatorGREMEDY() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::FrameTerminatorGREMEDY.ptr)() }
     #[inline] pub unsafe fn FrameZoomSGIX(factor: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::FrameZoomSGIX.ptr)(factor) }
     #[inline] pub unsafe fn FramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::FramebufferDrawBufferEXT.ptr)(framebuffer, mode) }
     #[inline] pub unsafe fn FramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLenum) -> ()>(storage::FramebufferDrawBuffersEXT.ptr)(framebuffer, n, bufs) }
     #[inline] pub unsafe fn FramebufferFetchBarrierEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::FramebufferFetchBarrierEXT.ptr)() }
     #[inline] pub unsafe fn FramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::FramebufferParameteri.ptr)(target, pname, param) }
     #[inline] pub unsafe fn FramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::FramebufferReadBufferEXT.ptr)(framebuffer, mode) }
     #[inline] pub unsafe fn FramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint) -> ()>(storage::FramebufferRenderbuffer.ptr)(target, attachment, renderbuffertarget, renderbuffer) }
     #[inline] pub unsafe fn FramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint) -> ()>(storage::FramebufferRenderbufferEXT.ptr)(target, attachment, renderbuffertarget, renderbuffer) }
     #[inline] pub unsafe fn FramebufferSampleLocationsfvARB(target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::FramebufferSampleLocationsfvARB.ptr)(target, start, count, v) }
     #[inline] pub unsafe fn FramebufferSampleLocationsfvNV(target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::FramebufferSampleLocationsfvNV.ptr)(target, start, count, v) }
     #[inline] pub unsafe fn FramebufferSamplePositionsfvAMD(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, *const GLfloat) -> ()>(storage::FramebufferSamplePositionsfvAMD.ptr)(target, numsamples, pixelindex, values) }
     #[inline] pub unsafe fn FramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTexture.ptr)(target, attachment, texture, level) }
     #[inline] pub unsafe fn FramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTexture1D.ptr)(target, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn FramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTexture1DEXT.ptr)(target, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn FramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTexture2D.ptr)(target, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn FramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTexture2DEXT.ptr)(target, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn FramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::FramebufferTexture3D.ptr)(target, attachment, textarget, texture, level, zoffset) }
     #[inline] pub unsafe fn FramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::FramebufferTexture3DEXT.ptr)(target, attachment, textarget, texture, level, zoffset) }
     #[inline] pub unsafe fn FramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTextureARB.ptr)(target, attachment, texture, level) }
     #[inline] pub unsafe fn FramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint) -> ()>(storage::FramebufferTextureEXT.ptr)(target, attachment, texture, level) }
     #[inline] pub unsafe fn FramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLenum) -> ()>(storage::FramebufferTextureFaceARB.ptr)(target, attachment, texture, level, face) }
     #[inline] pub unsafe fn FramebufferTextureFaceEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLenum) -> ()>(storage::FramebufferTextureFaceEXT.ptr)(target, attachment, texture, level, face) }
     #[inline] pub unsafe fn FramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::FramebufferTextureLayer.ptr)(target, attachment, texture, level, layer) }
     #[inline] pub unsafe fn FramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::FramebufferTextureLayerARB.ptr)(target, attachment, texture, level, layer) }
     #[inline] pub unsafe fn FramebufferTextureLayerEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::FramebufferTextureLayerEXT.ptr)(target, attachment, texture, level, layer) }
     #[inline] pub unsafe fn FramebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLint, GLint, GLsizei) -> ()>(storage::FramebufferTextureMultiviewOVR.ptr)(target, attachment, texture, level, baseViewIndex, numViews) }
     #[inline] pub unsafe fn FreeObjectBufferATI(buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::FreeObjectBufferATI.ptr)(buffer) }
     #[inline] pub unsafe fn FrontFace(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::FrontFace.ptr)(mode) }
     #[inline] pub unsafe fn FrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::FrustumfOES.ptr)(l, r, b, t, n, f) }
     #[inline] pub unsafe fn FrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::FrustumxOES.ptr)(l, r, b, t, n, f) }
     #[inline] pub unsafe fn GenAsyncMarkersSGIX(range: GLsizei) -> GLuint { mem::transmute::<_, extern "system" fn(GLsizei) -> GLuint>(storage::GenAsyncMarkersSGIX.ptr)(range) }
     #[inline] pub unsafe fn GenBuffers(n: GLsizei, buffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenBuffers.ptr)(n, buffers) }
     #[inline] pub unsafe fn GenBuffersARB(n: GLsizei, buffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenBuffersARB.ptr)(n, buffers) }
     #[inline] pub unsafe fn GenFencesAPPLE(n: GLsizei, fences: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenFencesAPPLE.ptr)(n, fences) }
     #[inline] pub unsafe fn GenFencesNV(n: GLsizei, fences: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenFencesNV.ptr)(n, fences) }
     #[inline] pub unsafe fn GenFragmentShadersATI(range: GLuint) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint) -> GLuint>(storage::GenFragmentShadersATI.ptr)(range) }
     #[inline] pub unsafe fn GenFramebuffers(n: GLsizei, framebuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenFramebuffers.ptr)(n, framebuffers) }
     #[inline] pub unsafe fn GenFramebuffersEXT(n: GLsizei, framebuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenFramebuffersEXT.ptr)(n, framebuffers) }
     #[inline] pub unsafe fn GenNamesAMD(identifier: GLenum, num: GLuint, names: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLuint) -> ()>(storage::GenNamesAMD.ptr)(identifier, num, names) }
     #[inline] pub unsafe fn GenOcclusionQueriesNV(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenOcclusionQueriesNV.ptr)(n, ids) }
     #[inline] pub unsafe fn GenPathsNV(range: GLsizei) -> GLuint { mem::transmute::<_, extern "system" fn(GLsizei) -> GLuint>(storage::GenPathsNV.ptr)(range) }
     #[inline] pub unsafe fn GenPerfMonitorsAMD(n: GLsizei, monitors: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenPerfMonitorsAMD.ptr)(n, monitors) }
     #[inline] pub unsafe fn GenProgramPipelines(n: GLsizei, pipelines: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenProgramPipelines.ptr)(n, pipelines) }
     #[inline] pub unsafe fn GenProgramsARB(n: GLsizei, programs: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenProgramsARB.ptr)(n, programs) }
     #[inline] pub unsafe fn GenProgramsNV(n: GLsizei, programs: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenProgramsNV.ptr)(n, programs) }
     #[inline] pub unsafe fn GenQueries(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenQueries.ptr)(n, ids) }
     #[inline] pub unsafe fn GenQueriesARB(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenQueriesARB.ptr)(n, ids) }
     #[inline] pub unsafe fn GenQueryResourceTagNV(n: GLsizei, tagIds: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLint) -> ()>(storage::GenQueryResourceTagNV.ptr)(n, tagIds) }
     #[inline] pub unsafe fn GenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenRenderbuffers.ptr)(n, renderbuffers) }
     #[inline] pub unsafe fn GenRenderbuffersEXT(n: GLsizei, renderbuffers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenRenderbuffersEXT.ptr)(n, renderbuffers) }
     #[inline] pub unsafe fn GenSamplers(count: GLsizei, samplers: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenSamplers.ptr)(count, samplers) }
     #[inline] pub unsafe fn GenSemaphoresEXT(n: GLsizei, semaphores: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenSemaphoresEXT.ptr)(n, semaphores) }
     #[inline] pub unsafe fn GenSymbolsEXT(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint) -> GLuint>(storage::GenSymbolsEXT.ptr)(datatype, storagetype, range, components) }
     #[inline] pub unsafe fn GenTextures(n: GLsizei, textures: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenTextures.ptr)(n, textures) }
     #[inline] pub unsafe fn GenTexturesEXT(n: GLsizei, textures: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenTexturesEXT.ptr)(n, textures) }
     #[inline] pub unsafe fn GenTransformFeedbacks(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenTransformFeedbacks.ptr)(n, ids) }
     #[inline] pub unsafe fn GenTransformFeedbacksNV(n: GLsizei, ids: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenTransformFeedbacksNV.ptr)(n, ids) }
     #[inline] pub unsafe fn GenVertexArrays(n: GLsizei, arrays: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenVertexArrays.ptr)(n, arrays) }
     #[inline] pub unsafe fn GenVertexArraysAPPLE(n: GLsizei, arrays: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLuint) -> ()>(storage::GenVertexArraysAPPLE.ptr)(n, arrays) }
     #[inline] pub unsafe fn GenVertexShadersEXT(range: GLuint) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint) -> GLuint>(storage::GenVertexShadersEXT.ptr)(range) }
     #[inline] pub unsafe fn GenerateMipmap(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::GenerateMipmap.ptr)(target) }
     #[inline] pub unsafe fn GenerateMipmapEXT(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::GenerateMipmapEXT.ptr)(target) }
     #[inline] pub unsafe fn GenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::GenerateMultiTexMipmapEXT.ptr)(texunit, target) }
     #[inline] pub unsafe fn GenerateTextureMipmap(texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::GenerateTextureMipmap.ptr)(texture) }
     #[inline] pub unsafe fn GenerateTextureMipmapEXT(texture: GLuint, target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::GenerateTextureMipmapEXT.ptr)(texture, target) }
     #[inline] pub unsafe fn GetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::GetActiveAtomicCounterBufferiv.ptr)(program, bufferIndex, pname, params) }
     #[inline] pub unsafe fn GetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLint, *mut GLenum, *mut GLchar) -> ()>(storage::GetActiveAttrib.ptr)(program, index, bufSize, length, size, type_, name) }
     #[inline] pub unsafe fn GetActiveAttribARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLcharARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLuint, GLsizei, *mut GLsizei, *mut GLint, *mut GLenum, *mut GLcharARB) -> ()>(storage::GetActiveAttribARB.ptr)(programObj, index, maxLength, length, size, type_, name) }
     #[inline] pub unsafe fn GetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetActiveSubroutineName.ptr)(program, shadertype, index, bufsize, length, name) }
     #[inline] pub unsafe fn GetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetActiveSubroutineUniformName.ptr)(program, shadertype, index, bufsize, length, name) }
     #[inline] pub unsafe fn GetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLenum, *mut GLint) -> ()>(storage::GetActiveSubroutineUniformiv.ptr)(program, shadertype, index, pname, values) }
     #[inline] pub unsafe fn GetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLint, *mut GLenum, *mut GLchar) -> ()>(storage::GetActiveUniform.ptr)(program, index, bufSize, length, size, type_, name) }
     #[inline] pub unsafe fn GetActiveUniformARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLcharARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLuint, GLsizei, *mut GLsizei, *mut GLint, *mut GLenum, *mut GLcharARB) -> ()>(storage::GetActiveUniformARB.ptr)(programObj, index, maxLength, length, size, type_, name) }
     #[inline] pub unsafe fn GetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformBlockName: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetActiveUniformBlockName.ptr)(program, uniformBlockIndex, bufSize, length, uniformBlockName) }
     #[inline] pub unsafe fn GetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::GetActiveUniformBlockiv.ptr)(program, uniformBlockIndex, pname, params) }
     #[inline] pub unsafe fn GetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformName: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetActiveUniformName.ptr)(program, uniformIndex, bufSize, length, uniformName) }
     #[inline] pub unsafe fn GetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint, GLenum, *mut GLint) -> ()>(storage::GetActiveUniformsiv.ptr)(program, uniformCount, uniformIndices, pname, params) }
     #[inline] pub unsafe fn GetActiveVaryingNV(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, type_: *mut GLenum, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLsizei, *mut GLenum, *mut GLchar) -> ()>(storage::GetActiveVaryingNV.ptr)(program, index, bufSize, length, size, type_, name) }
     #[inline] pub unsafe fn GetArrayObjectfvATI(array: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetArrayObjectfvATI.ptr)(array, pname, params) }
     #[inline] pub unsafe fn GetArrayObjectivATI(array: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetArrayObjectivATI.ptr)(array, pname, params) }
     #[inline] pub unsafe fn GetAttachedObjectsARB(containerObj: GLhandleARB, maxCount: GLsizei, count: *mut GLsizei, obj: *mut GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLsizei, *mut GLsizei, *mut GLhandleARB) -> ()>(storage::GetAttachedObjectsARB.ptr)(containerObj, maxCount, count, obj) }
     #[inline] pub unsafe fn GetAttachedShaders(program: GLuint, maxCount: GLsizei, count: *mut GLsizei, shaders: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLuint) -> ()>(storage::GetAttachedShaders.ptr)(program, maxCount, count, shaders) }
     #[inline] pub unsafe fn GetAttribLocation(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetAttribLocation.ptr)(program, name) }
     #[inline] pub unsafe fn GetAttribLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint { mem::transmute::<_, extern "system" fn(GLhandleARB, *const GLcharARB) -> GLint>(storage::GetAttribLocationARB.ptr)(programObj, name) }
     #[inline] pub unsafe fn GetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLboolean) -> ()>(storage::GetBooleanIndexedvEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetBooleani_v(target: GLenum, index: GLuint, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLboolean) -> ()>(storage::GetBooleani_v.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetBooleanv(pname: GLenum, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLboolean) -> ()>(storage::GetBooleanv.ptr)(pname, data) }
     #[inline] pub unsafe fn GetBufferParameteri64v(target: GLenum, pname: GLenum, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint64) -> ()>(storage::GetBufferParameteri64v.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetBufferParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferParameterivARB(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetBufferParameterivARB.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLuint64EXT) -> ()>(storage::GetBufferParameterui64vNV.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferPointerv(target: GLenum, pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetBufferPointerv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferPointervARB(target: GLenum, pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetBufferPointervARB.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr, *mut std::os::raw::c_void) -> ()>(storage::GetBufferSubData.ptr)(target, offset, size, data) }
     #[inline] pub unsafe fn GetBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLintptrARB, GLsizeiptrARB, *mut std::os::raw::c_void) -> ()>(storage::GetBufferSubDataARB.ptr)(target, offset, size, data) }
     #[inline] pub unsafe fn GetClipPlanefOES(plane: GLenum, equation: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetClipPlanefOES.ptr)(plane, equation) }
     #[inline] pub unsafe fn GetClipPlanexOES(plane: GLenum, equation: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfixed) -> ()>(storage::GetClipPlanexOES.ptr)(plane, equation) }
     #[inline] pub unsafe fn GetColorTable(target: GLenum, format: GLenum, type_: GLenum, table: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetColorTable.ptr)(target, format, type_, table) }
     #[inline] pub unsafe fn GetColorTableEXT(target: GLenum, format: GLenum, type_: GLenum, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetColorTableEXT.ptr)(target, format, type_, data) }
     #[inline] pub unsafe fn GetColorTableParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetColorTableParameterfv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetColorTableParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetColorTableParameterfvSGI.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetColorTableParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetColorTableParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetColorTableParameterivSGI.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetColorTableSGI(target: GLenum, format: GLenum, type_: GLenum, table: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetColorTableSGI.ptr)(target, format, type_, table) }
     #[inline] pub unsafe fn GetCombinerInputParameterfvNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetCombinerInputParameterfvNV.ptr)(stage, portion, variable, pname, params) }
     #[inline] pub unsafe fn GetCombinerInputParameterivNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetCombinerInputParameterivNV.ptr)(stage, portion, variable, pname, params) }
     #[inline] pub unsafe fn GetCombinerOutputParameterfvNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetCombinerOutputParameterfvNV.ptr)(stage, portion, pname, params) }
     #[inline] pub unsafe fn GetCombinerOutputParameterivNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetCombinerOutputParameterivNV.ptr)(stage, portion, pname, params) }
     #[inline] pub unsafe fn GetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetCombinerStageParameterfvNV.ptr)(stage, pname, params) }
     #[inline] pub unsafe fn GetCommandHeaderNV(tokenID: GLenum, size: GLuint) -> GLuint { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> GLuint>(storage::GetCommandHeaderNV.ptr)(tokenID, size) }
     #[inline] pub unsafe fn GetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedMultiTexImageEXT.ptr)(texunit, target, lod, img) }
     #[inline] pub unsafe fn GetCompressedTexImage(target: GLenum, level: GLint, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedTexImage.ptr)(target, level, img) }
     #[inline] pub unsafe fn GetCompressedTexImageARB(target: GLenum, level: GLint, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedTexImageARB.ptr)(target, level, img) }
     #[inline] pub unsafe fn GetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedTextureImage.ptr)(texture, level, bufSize, pixels) }
     #[inline] pub unsafe fn GetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedTextureImageEXT.ptr)(texture, target, lod, img) }
     #[inline] pub unsafe fn GetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetCompressedTextureSubImage.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) }
     #[inline] pub unsafe fn GetConvolutionFilterEXT(target: GLenum, format: GLenum, type_: GLenum, image: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetConvolutionFilterEXT.ptr)(target, format, type_, image) }
     #[inline] pub unsafe fn GetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetConvolutionParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetConvolutionParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetConvolutionParameterxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetCoverageModulationTableNV(bufsize: GLsizei, v: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLfloat) -> ()>(storage::GetCoverageModulationTableNV.ptr)(bufsize, v) }
     #[inline] pub unsafe fn GetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: *mut GLenum, types: *mut GLenum, ids: *mut GLuint, severities: *mut GLenum, lengths: *mut GLsizei, messageLog: *mut GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLenum, *mut GLenum, *mut GLuint, *mut GLenum, *mut GLsizei, *mut GLchar) -> GLuint>(storage::GetDebugMessageLog.ptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog) }
     #[inline] pub unsafe fn GetDebugMessageLogAMD(count: GLuint, bufsize: GLsizei, categories: *mut GLenum, severities: *mut GLuint, ids: *mut GLuint, lengths: *mut GLsizei, message: *mut GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLenum, *mut GLuint, *mut GLuint, *mut GLsizei, *mut GLchar) -> GLuint>(storage::GetDebugMessageLogAMD.ptr)(count, bufsize, categories, severities, ids, lengths, message) }
     #[inline] pub unsafe fn GetDebugMessageLogARB(count: GLuint, bufSize: GLsizei, sources: *mut GLenum, types: *mut GLenum, ids: *mut GLuint, severities: *mut GLenum, lengths: *mut GLsizei, messageLog: *mut GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLenum, *mut GLenum, *mut GLuint, *mut GLenum, *mut GLsizei, *mut GLchar) -> GLuint>(storage::GetDebugMessageLogARB.ptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog) }
     #[inline] pub unsafe fn GetDetailTexFuncSGIS(target: GLenum, points: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetDetailTexFuncSGIS.ptr)(target, points) }
     #[inline] pub unsafe fn GetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetDoubleIndexedvEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetDoublei_v(target: GLenum, index: GLuint, data: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetDoublei_v.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetDoublei_vEXT(pname: GLenum, index: GLuint, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetDoublei_vEXT.ptr)(pname, index, params) }
     #[inline] pub unsafe fn GetDoublev(pname: GLenum, data: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLdouble) -> ()>(storage::GetDoublev.ptr)(pname, data) }
     #[inline] pub unsafe fn GetError() -> GLenum { mem::transmute::<_, extern "system" fn() -> GLenum>(storage::GetError.ptr)() }
     #[inline] pub unsafe fn GetFenceivNV(fence: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetFenceivNV.ptr)(fence, pname, params) }
     #[inline] pub unsafe fn GetFinalCombinerInputParameterfvNV(variable: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetFinalCombinerInputParameterfvNV.ptr)(variable, pname, params) }
     #[inline] pub unsafe fn GetFinalCombinerInputParameterivNV(variable: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetFinalCombinerInputParameterivNV.ptr)(variable, pname, params) }
     #[inline] pub unsafe fn GetFirstPerfQueryIdINTEL(queryId: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(*mut GLuint) -> ()>(storage::GetFirstPerfQueryIdINTEL.ptr)(queryId) }
     #[inline] pub unsafe fn GetFixedvOES(pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfixed) -> ()>(storage::GetFixedvOES.ptr)(pname, params) }
     #[inline] pub unsafe fn GetFloatIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetFloatIndexedvEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetFloati_v(target: GLenum, index: GLuint, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetFloati_v.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetFloati_vEXT(pname: GLenum, index: GLuint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetFloati_vEXT.ptr)(pname, index, params) }
     #[inline] pub unsafe fn GetFloatv(pname: GLenum, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetFloatv.ptr)(pname, data) }
     #[inline] pub unsafe fn GetFogFuncSGIS(points: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(*mut GLfloat) -> ()>(storage::GetFogFuncSGIS.ptr)(points) }
     #[inline] pub unsafe fn GetFragDataIndex(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetFragDataIndex.ptr)(program, name) }
     #[inline] pub unsafe fn GetFragDataLocation(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetFragDataLocation.ptr)(program, name) }
     #[inline] pub unsafe fn GetFragDataLocationEXT(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetFragDataLocationEXT.ptr)(program, name) }
     #[inline] pub unsafe fn GetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetFragmentLightfvSGIX.ptr)(light, pname, params) }
     #[inline] pub unsafe fn GetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetFragmentLightivSGIX.ptr)(light, pname, params) }
     #[inline] pub unsafe fn GetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetFragmentMaterialfvSGIX.ptr)(face, pname, params) }
     #[inline] pub unsafe fn GetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetFragmentMaterialivSGIX.ptr)(face, pname, params) }
     #[inline] pub unsafe fn GetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetFramebufferAttachmentParameteriv.ptr)(target, attachment, pname, params) }
     #[inline] pub unsafe fn GetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetFramebufferAttachmentParameterivEXT.ptr)(target, attachment, pname, params) }
     #[inline] pub unsafe fn GetFramebufferParameterfvAMD(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLuint, GLsizei, *mut GLfloat) -> ()>(storage::GetFramebufferParameterfvAMD.ptr)(target, pname, numsamples, pixelindex, size, values) }
     #[inline] pub unsafe fn GetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetFramebufferParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetFramebufferParameterivEXT.ptr)(framebuffer, pname, params) }
     #[inline] pub unsafe fn GetGraphicsResetStatus() -> GLenum { mem::transmute::<_, extern "system" fn() -> GLenum>(storage::GetGraphicsResetStatus.ptr)() }
     #[inline] pub unsafe fn GetGraphicsResetStatusARB() -> GLenum { mem::transmute::<_, extern "system" fn() -> GLenum>(storage::GetGraphicsResetStatusARB.ptr)() }
     #[inline] pub unsafe fn GetHandleARB(pname: GLenum) -> GLhandleARB { mem::transmute::<_, extern "system" fn(GLenum) -> GLhandleARB>(storage::GetHandleARB.ptr)(pname) }
     #[inline] pub unsafe fn GetHistogramEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLboolean, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetHistogramEXT.ptr)(target, reset, format, type_, values) }
     #[inline] pub unsafe fn GetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetHistogramParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetHistogramParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetHistogramParameterxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetImageHandleARB(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLboolean, GLint, GLenum) -> GLuint64>(storage::GetImageHandleARB.ptr)(texture, level, layered, layer, format) }
     #[inline] pub unsafe fn GetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLboolean, GLint, GLenum) -> GLuint64>(storage::GetImageHandleNV.ptr)(texture, level, layered, layer, format) }
     #[inline] pub unsafe fn GetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetImageTransformParameterfvHP.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetImageTransformParameterivHP.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetInfoLogARB(obj: GLhandleARB, maxLength: GLsizei, length: *mut GLsizei, infoLog: *mut GLcharARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLsizei, *mut GLsizei, *mut GLcharARB) -> ()>(storage::GetInfoLogARB.ptr)(obj, maxLength, length, infoLog) }
     #[inline] pub unsafe fn GetInstrumentsSGIX() -> GLint { mem::transmute::<_, extern "system" fn() -> GLint>(storage::GetInstrumentsSGIX.ptr)() }
     #[inline] pub unsafe fn GetInteger64i_v(target: GLenum, index: GLuint, data: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLint64) -> ()>(storage::GetInteger64i_v.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetInteger64v(pname: GLenum, data: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLint64) -> ()>(storage::GetInteger64v.ptr)(pname, data) }
     #[inline] pub unsafe fn GetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLint) -> ()>(storage::GetIntegerIndexedvEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetIntegeri_v(target: GLenum, index: GLuint, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLint) -> ()>(storage::GetIntegeri_v.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetIntegerui64i_vNV(value: GLenum, index: GLuint, result: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLuint64EXT) -> ()>(storage::GetIntegerui64i_vNV.ptr)(value, index, result) }
     #[inline] pub unsafe fn GetIntegerui64vNV(value: GLenum, result: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLuint64EXT) -> ()>(storage::GetIntegerui64vNV.ptr)(value, result) }
     #[inline] pub unsafe fn GetIntegerv(pname: GLenum, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLint) -> ()>(storage::GetIntegerv.ptr)(pname, data) }
     #[inline] pub unsafe fn GetInternalformatSampleivNV(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLenum, GLsizei, *mut GLint) -> ()>(storage::GetInternalformatSampleivNV.ptr)(target, internalformat, samples, pname, bufSize, params) }
     #[inline] pub unsafe fn GetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLsizei, *mut GLint64) -> ()>(storage::GetInternalformati64v.ptr)(target, internalformat, pname, bufSize, params) }
     #[inline] pub unsafe fn GetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLsizei, *mut GLint) -> ()>(storage::GetInternalformativ.ptr)(target, internalformat, pname, bufSize, params) }
     #[inline] pub unsafe fn GetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLboolean) -> ()>(storage::GetInvariantBooleanvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetInvariantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetInvariantFloatvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetInvariantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetInvariantIntegervEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetLightxOES(light: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetLightxOES.ptr)(light, pname, params) }
     #[inline] pub unsafe fn GetListParameterfvSGIX(list: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetListParameterfvSGIX.ptr)(list, pname, params) }
     #[inline] pub unsafe fn GetListParameterivSGIX(list: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetListParameterivSGIX.ptr)(list, pname, params) }
     #[inline] pub unsafe fn GetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLboolean) -> ()>(storage::GetLocalConstantBooleanvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetLocalConstantFloatvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetLocalConstantIntegervEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetMapAttribParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetMapAttribParameterfvNV.ptr)(target, index, pname, params) }
     #[inline] pub unsafe fn GetMapAttribParameterivNV(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLint) -> ()>(storage::GetMapAttribParameterivNV.ptr)(target, index, pname, params) }
     #[inline] pub unsafe fn GetMapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, *mut std::os::raw::c_void) -> ()>(storage::GetMapControlPointsNV.ptr)(target, index, type_, ustride, vstride, packed, points) }
     #[inline] pub unsafe fn GetMapParameterfvNV(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetMapParameterfvNV.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetMapParameterivNV(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetMapParameterivNV.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetMapxvOES(target: GLenum, query: GLenum, v: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetMapxvOES.ptr)(target, query, v) }
     #[inline] pub unsafe fn GetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::GetMaterialxOES.ptr)(face, pname, param) }
     #[inline] pub unsafe fn GetMemoryObjectDetachedResourcesuivNV(memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLsizei, *mut GLuint) -> ()>(storage::GetMemoryObjectDetachedResourcesuivNV.ptr)(memory, pname, first, count, params) }
     #[inline] pub unsafe fn GetMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetMemoryObjectParameterivEXT.ptr)(memoryObject, pname, params) }
     #[inline] pub unsafe fn GetMinmaxEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLboolean, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetMinmaxEXT.ptr)(target, reset, format, type_, values) }
     #[inline] pub unsafe fn GetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetMinmaxParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetMinmaxParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetMultiTexEnvfvEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetMultiTexEnvivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLdouble) -> ()>(storage::GetMultiTexGendvEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn GetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetMultiTexGenfvEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn GetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetMultiTexGenivEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn GetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetMultiTexImageEXT.ptr)(texunit, target, level, format, type_, pixels) }
     #[inline] pub unsafe fn GetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, *mut GLfloat) -> ()>(storage::GetMultiTexLevelParameterfvEXT.ptr)(texunit, target, level, pname, params) }
     #[inline] pub unsafe fn GetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLenum, *mut GLint) -> ()>(storage::GetMultiTexLevelParameterivEXT.ptr)(texunit, target, level, pname, params) }
     #[inline] pub unsafe fn GetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetMultiTexParameterIivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLuint) -> ()>(storage::GetMultiTexParameterIuivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetMultiTexParameterfvEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut GLint) -> ()>(storage::GetMultiTexParameterivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn GetMultisamplefv(pname: GLenum, index: GLuint, val: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetMultisamplefv.ptr)(pname, index, val) }
     #[inline] pub unsafe fn GetMultisamplefvNV(pname: GLenum, index: GLuint, val: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetMultisamplefvNV.ptr)(pname, index, val) }
     #[inline] pub unsafe fn GetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint64) -> ()>(storage::GetNamedBufferParameteri64v.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedBufferParameteriv.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedBufferParameterivEXT.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64EXT) -> ()>(storage::GetNamedBufferParameterui64vNV.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetNamedBufferPointerv.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetNamedBufferPointervEXT.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, *mut std::os::raw::c_void) -> ()>(storage::GetNamedBufferSubData.ptr)(buffer, offset, size, data) }
     #[inline] pub unsafe fn GetNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, *mut std::os::raw::c_void) -> ()>(storage::GetNamedBufferSubDataEXT.ptr)(buffer, offset, size, data) }
     #[inline] pub unsafe fn GetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetNamedFramebufferAttachmentParameteriv.ptr)(framebuffer, attachment, pname, params) }
     #[inline] pub unsafe fn GetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetNamedFramebufferAttachmentParameterivEXT.ptr)(framebuffer, attachment, pname, params) }
     #[inline] pub unsafe fn GetNamedFramebufferParameterfvAMD(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLuint, GLsizei, *mut GLfloat) -> ()>(storage::GetNamedFramebufferParameterfvAMD.ptr)(framebuffer, pname, numsamples, pixelindex, size, values) }
     #[inline] pub unsafe fn GetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedFramebufferParameteriv.ptr)(framebuffer, pname, param) }
     #[inline] pub unsafe fn GetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedFramebufferParameterivEXT.ptr)(framebuffer, pname, params) }
     #[inline] pub unsafe fn GetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLint) -> ()>(storage::GetNamedProgramLocalParameterIivEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn GetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLuint) -> ()>(storage::GetNamedProgramLocalParameterIuivEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn GetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetNamedProgramLocalParameterdvEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn GetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetNamedProgramLocalParameterfvEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn GetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetNamedProgramStringEXT.ptr)(program, target, pname, string) }
     #[inline] pub unsafe fn GetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetNamedProgramivEXT.ptr)(program, target, pname, params) }
     #[inline] pub unsafe fn GetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedRenderbufferParameteriv.ptr)(renderbuffer, pname, params) }
     #[inline] pub unsafe fn GetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetNamedRenderbufferParameterivEXT.ptr)(renderbuffer, pname, params) }
     #[inline] pub unsafe fn GetNamedStringARB(namelen: GLint, name: *const GLchar, bufSize: GLsizei, stringlen: *mut GLint, string: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLchar, GLsizei, *mut GLint, *mut GLchar) -> ()>(storage::GetNamedStringARB.ptr)(namelen, name, bufSize, stringlen, string) }
     #[inline] pub unsafe fn GetNamedStringivARB(namelen: GLint, name: *const GLchar, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLchar, GLenum, *mut GLint) -> ()>(storage::GetNamedStringivARB.ptr)(namelen, name, pname, params) }
     #[inline] pub unsafe fn GetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLuint) -> ()>(storage::GetNextPerfQueryIdINTEL.ptr)(queryId, nextQueryId) }
     #[inline] pub unsafe fn GetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetObjectBufferfvATI.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetObjectBufferivATI.ptr)(buffer, pname, params) }
     #[inline] pub unsafe fn GetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetObjectLabel.ptr)(identifier, name, bufSize, length, label) }
     #[inline] pub unsafe fn GetObjectLabelEXT(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetObjectLabelEXT.ptr)(type_, object, bufSize, length, label) }
     #[inline] pub unsafe fn GetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLenum, *mut GLfloat) -> ()>(storage::GetObjectParameterfvARB.ptr)(obj, pname, params) }
     #[inline] pub unsafe fn GetObjectParameterivAPPLE(objectType: GLenum, name: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLint) -> ()>(storage::GetObjectParameterivAPPLE.ptr)(objectType, name, pname, params) }
     #[inline] pub unsafe fn GetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLenum, *mut GLint) -> ()>(storage::GetObjectParameterivARB.ptr)(obj, pname, params) }
     #[inline] pub unsafe fn GetObjectPtrLabel(ptr: *const std::os::raw::c_void, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetObjectPtrLabel.ptr)(ptr, bufSize, length, label) }
     #[inline] pub unsafe fn GetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetOcclusionQueryivNV.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetOcclusionQueryuivNV.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetPathCommandsNV(path: GLuint, commands: *mut GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLubyte) -> ()>(storage::GetPathCommandsNV.ptr)(path, commands) }
     #[inline] pub unsafe fn GetPathCoordsNV(path: GLuint, coords: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLfloat) -> ()>(storage::GetPathCoordsNV.ptr)(path, coords) }
     #[inline] pub unsafe fn GetPathDashArrayNV(path: GLuint, dashArray: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLfloat) -> ()>(storage::GetPathDashArrayNV.ptr)(path, dashArray) }
     #[inline] pub unsafe fn GetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei) -> GLfloat>(storage::GetPathLengthNV.ptr)(path, startSegment, numSegments) }
     #[inline] pub unsafe fn GetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLbitfield, GLuint, GLsizei, GLsizei, *mut GLfloat) -> ()>(storage::GetPathMetricRangeNV.ptr)(metricQueryMask, firstPathName, numPaths, stride, metrics) }
     #[inline] pub unsafe fn GetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, stride: GLsizei, metrics: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLbitfield, GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLsizei, *mut GLfloat) -> ()>(storage::GetPathMetricsNV.ptr)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) }
     #[inline] pub unsafe fn GetPathParameterfvNV(path: GLuint, pname: GLenum, value: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetPathParameterfvNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn GetPathParameterivNV(path: GLuint, pname: GLenum, value: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetPathParameterivNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn GetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLfloat, GLfloat, GLenum, *mut GLfloat) -> ()>(storage::GetPathSpacingNV.ptr)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) }
     #[inline] pub unsafe fn GetPerfCounterInfoINTEL(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *mut GLchar, counterDescLength: GLuint, counterDesc: *mut GLchar, counterOffset: *mut GLuint, counterDataSize: *mut GLuint, counterTypeEnum: *mut GLuint, counterDataTypeEnum: *mut GLuint, rawCounterMaxValue: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, *mut GLchar, GLuint, *mut GLchar, *mut GLuint, *mut GLuint, *mut GLuint, *mut GLuint, *mut GLuint64) -> ()>(storage::GetPerfCounterInfoINTEL.ptr)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) }
     #[inline] pub unsafe fn GetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *mut GLuint, bytesWritten: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, *mut GLuint, *mut GLint) -> ()>(storage::GetPerfMonitorCounterDataAMD.ptr)(monitor, pname, dataSize, data, bytesWritten) }
     #[inline] pub unsafe fn GetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetPerfMonitorCounterInfoAMD.ptr)(group, counter, pname, data) }
     #[inline] pub unsafe fn GetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *mut GLsizei, counterString: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetPerfMonitorCounterStringAMD.ptr)(group, counter, bufSize, length, counterString) }
     #[inline] pub unsafe fn GetPerfMonitorCountersAMD(group: GLuint, numCounters: *mut GLint, maxActiveCounters: *mut GLint, counterSize: GLsizei, counters: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *mut GLint, *mut GLint, GLsizei, *mut GLuint) -> ()>(storage::GetPerfMonitorCountersAMD.ptr)(group, numCounters, maxActiveCounters, counterSize, counters) }
     #[inline] pub unsafe fn GetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: *mut GLsizei, groupString: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetPerfMonitorGroupStringAMD.ptr)(group, bufSize, length, groupString) }
     #[inline] pub unsafe fn GetPerfMonitorGroupsAMD(numGroups: *mut GLint, groupsSize: GLsizei, groups: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(*mut GLint, GLsizei, *mut GLuint) -> ()>(storage::GetPerfMonitorGroupsAMD.ptr)(numGroups, groupsSize, groups) }
     #[inline] pub unsafe fn GetPerfQueryDataINTEL(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *mut std::os::raw::c_void, bytesWritten: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut std::os::raw::c_void, *mut GLuint) -> ()>(storage::GetPerfQueryDataINTEL.ptr)(queryHandle, flags, dataSize, data, bytesWritten) }
     #[inline] pub unsafe fn GetPerfQueryIdByNameINTEL(queryName: *mut GLchar, queryId: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(*mut GLchar, *mut GLuint) -> ()>(storage::GetPerfQueryIdByNameINTEL.ptr)(queryName, queryId) }
     #[inline] pub unsafe fn GetPerfQueryInfoINTEL(queryId: GLuint, queryNameLength: GLuint, queryName: *mut GLchar, dataSize: *mut GLuint, noCounters: *mut GLuint, noInstances: *mut GLuint, capsMask: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *mut GLchar, *mut GLuint, *mut GLuint, *mut GLuint, *mut GLuint) -> ()>(storage::GetPerfQueryInfoINTEL.ptr)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) }
     #[inline] pub unsafe fn GetPixelMapxv(map: GLenum, size: GLint, values: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *mut GLfixed) -> ()>(storage::GetPixelMapxv.ptr)(map, size, values) }
     #[inline] pub unsafe fn GetPixelTexGenParameterfvSGIS(pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetPixelTexGenParameterfvSGIS.ptr)(pname, params) }
     #[inline] pub unsafe fn GetPixelTexGenParameterivSGIS(pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLint) -> ()>(storage::GetPixelTexGenParameterivSGIS.ptr)(pname, params) }
     #[inline] pub unsafe fn GetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetPixelTransformParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetPixelTransformParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetPointerIndexedvEXT(target: GLenum, index: GLuint, data: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut *mut std::os::raw::c_void) -> ()>(storage::GetPointerIndexedvEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetPointeri_vEXT(pname: GLenum, index: GLuint, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut *mut std::os::raw::c_void) -> ()>(storage::GetPointeri_vEXT.ptr)(pname, index, params) }
     #[inline] pub unsafe fn GetPointerv(pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetPointerv.ptr)(pname, params) }
     #[inline] pub unsafe fn GetPointervEXT(pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetPointervEXT.ptr)(pname, params) }
     #[inline] pub unsafe fn GetProgramBinary(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, binaryFormat: *mut GLenum, binary: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetProgramBinary.ptr)(program, bufSize, length, binaryFormat, binary) }
     #[inline] pub unsafe fn GetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLint) -> ()>(storage::GetProgramEnvParameterIivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLuint) -> ()>(storage::GetProgramEnvParameterIuivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetProgramEnvParameterdvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetProgramEnvParameterfvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetProgramInfoLog.ptr)(program, bufSize, length, infoLog) }
     #[inline] pub unsafe fn GetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetProgramInterfaceiv.ptr)(program, programInterface, pname, params) }
     #[inline] pub unsafe fn GetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLint) -> ()>(storage::GetProgramLocalParameterIivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLuint) -> ()>(storage::GetProgramLocalParameterIuivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLdouble) -> ()>(storage::GetProgramLocalParameterdvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLfloat) -> ()>(storage::GetProgramLocalParameterfvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn GetProgramNamedParameterdvNV(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, *mut GLdouble) -> ()>(storage::GetProgramNamedParameterdvNV.ptr)(id, len, name, params) }
     #[inline] pub unsafe fn GetProgramNamedParameterfvNV(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, *mut GLfloat) -> ()>(storage::GetProgramNamedParameterfvNV.ptr)(id, len, name, params) }
     #[inline] pub unsafe fn GetProgramParameterdvNV(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetProgramParameterdvNV.ptr)(target, index, pname, params) }
     #[inline] pub unsafe fn GetProgramParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetProgramParameterfvNV.ptr)(target, index, pname, params) }
     #[inline] pub unsafe fn GetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetProgramPipelineInfoLog.ptr)(pipeline, bufSize, length, infoLog) }
     #[inline] pub unsafe fn GetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetProgramPipelineiv.ptr)(pipeline, pname, params) }
     #[inline] pub unsafe fn GetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLchar) -> GLuint>(storage::GetProgramResourceIndex.ptr)(program, programInterface, name) }
     #[inline] pub unsafe fn GetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLchar) -> GLint>(storage::GetProgramResourceLocation.ptr)(program, programInterface, name) }
     #[inline] pub unsafe fn GetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLchar) -> GLint>(storage::GetProgramResourceLocationIndex.ptr)(program, programInterface, name) }
     #[inline] pub unsafe fn GetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetProgramResourceName.ptr)(program, programInterface, index, bufSize, length, name) }
     #[inline] pub unsafe fn GetProgramResourcefvNV(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, bufSize: GLsizei, length: *mut GLsizei, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *const GLenum, GLsizei, *mut GLsizei, *mut GLfloat) -> ()>(storage::GetProgramResourcefvNV.ptr)(program, programInterface, index, propCount, props, bufSize, length, params) }
     #[inline] pub unsafe fn GetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, bufSize: GLsizei, length: *mut GLsizei, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *const GLenum, GLsizei, *mut GLsizei, *mut GLint) -> ()>(storage::GetProgramResourceiv.ptr)(program, programInterface, index, propCount, props, bufSize, length, params) }
     #[inline] pub unsafe fn GetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetProgramStageiv.ptr)(program, shadertype, pname, values) }
     #[inline] pub unsafe fn GetProgramStringARB(target: GLenum, pname: GLenum, string: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetProgramStringARB.ptr)(target, pname, string) }
     #[inline] pub unsafe fn GetProgramStringNV(id: GLuint, pname: GLenum, program: *mut GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLubyte) -> ()>(storage::GetProgramStringNV.ptr)(id, pname, program) }
     #[inline] pub unsafe fn GetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLuint) -> ()>(storage::GetProgramSubroutineParameteruivNV.ptr)(target, index, param) }
     #[inline] pub unsafe fn GetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetProgramiv.ptr)(program, pname, params) }
     #[inline] pub unsafe fn GetProgramivARB(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetProgramivARB.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetProgramivNV(id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetProgramivNV.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLintptr) -> ()>(storage::GetQueryBufferObjecti64v.ptr)(id, buffer, pname, offset) }
     #[inline] pub unsafe fn GetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLintptr) -> ()>(storage::GetQueryBufferObjectiv.ptr)(id, buffer, pname, offset) }
     #[inline] pub unsafe fn GetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLintptr) -> ()>(storage::GetQueryBufferObjectui64v.ptr)(id, buffer, pname, offset) }
     #[inline] pub unsafe fn GetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLintptr) -> ()>(storage::GetQueryBufferObjectuiv.ptr)(id, buffer, pname, offset) }
     #[inline] pub unsafe fn GetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLint) -> ()>(storage::GetQueryIndexediv.ptr)(target, index, pname, params) }
     #[inline] pub unsafe fn GetQueryObjecti64v(id: GLuint, pname: GLenum, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint64) -> ()>(storage::GetQueryObjecti64v.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint64) -> ()>(storage::GetQueryObjecti64vEXT.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectiv(id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetQueryObjectiv.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectivARB(id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetQueryObjectivARB.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectui64v(id: GLuint, pname: GLenum, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64) -> ()>(storage::GetQueryObjectui64v.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64) -> ()>(storage::GetQueryObjectui64vEXT.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectuiv(id: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetQueryObjectuiv.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetQueryObjectuivARB.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetQueryiv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetQueryiv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetQueryivARB(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetQueryivARB.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetRenderbufferParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetRenderbufferParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetSamplerParameterIiv.ptr)(sampler, pname, params) }
     #[inline] pub unsafe fn GetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetSamplerParameterIuiv.ptr)(sampler, pname, params) }
     #[inline] pub unsafe fn GetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetSamplerParameterfv.ptr)(sampler, pname, params) }
     #[inline] pub unsafe fn GetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetSamplerParameteriv.ptr)(sampler, pname, params) }
     #[inline] pub unsafe fn GetSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64) -> ()>(storage::GetSemaphoreParameterui64vEXT.ptr)(semaphore, pname, params) }
     #[inline] pub unsafe fn GetSeparableFilterEXT(target: GLenum, format: GLenum, type_: GLenum, row: *mut std::os::raw::c_void, column: *mut std::os::raw::c_void, span: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *mut std::os::raw::c_void, *mut std::os::raw::c_void, *mut std::os::raw::c_void) -> ()>(storage::GetSeparableFilterEXT.ptr)(target, format, type_, row, column, span) }
     #[inline] pub unsafe fn GetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetShaderInfoLog.ptr)(shader, bufSize, length, infoLog) }
     #[inline] pub unsafe fn GetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: *mut GLint, precision: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint, *mut GLint) -> ()>(storage::GetShaderPrecisionFormat.ptr)(shadertype, precisiontype, range, precision) }
     #[inline] pub unsafe fn GetShaderSource(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, source: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar) -> ()>(storage::GetShaderSource.ptr)(shader, bufSize, length, source) }
     #[inline] pub unsafe fn GetShaderSourceARB(obj: GLhandleARB, maxLength: GLsizei, length: *mut GLsizei, source: *mut GLcharARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLsizei, *mut GLsizei, *mut GLcharARB) -> ()>(storage::GetShaderSourceARB.ptr)(obj, maxLength, length, source) }
     #[inline] pub unsafe fn GetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetShaderiv.ptr)(shader, pname, params) }
     #[inline] pub unsafe fn GetShadingRateImagePaletteNV(viewport: GLuint, entry: GLuint, rate: *mut GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *mut GLenum) -> ()>(storage::GetShadingRateImagePaletteNV.ptr)(viewport, entry, rate) }
     #[inline] pub unsafe fn GetShadingRateSampleLocationivNV(rate: GLenum, samples: GLuint, index: GLuint, location: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, *mut GLint) -> ()>(storage::GetShadingRateSampleLocationivNV.ptr)(rate, samples, index, location) }
     #[inline] pub unsafe fn GetSharpenTexFuncSGIS(target: GLenum, points: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetSharpenTexFuncSGIS.ptr)(target, points) }
     #[inline] pub unsafe fn GetStageIndexNV(shadertype: GLenum) -> GLushort { mem::transmute::<_, extern "system" fn(GLenum) -> GLushort>(storage::GetStageIndexNV.ptr)(shadertype) }
     #[inline] pub unsafe fn GetString(name: GLenum) -> *const GLubyte { mem::transmute::<_, extern "system" fn(GLenum) -> *const GLubyte>(storage::GetString.ptr)(name) }
     #[inline] pub unsafe fn GetStringi(name: GLenum, index: GLuint) -> *const GLubyte { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> *const GLubyte>(storage::GetStringi.ptr)(name, index) }
     #[inline] pub unsafe fn GetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLchar) -> GLuint>(storage::GetSubroutineIndex.ptr)(program, shadertype, name) }
     #[inline] pub unsafe fn GetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLchar) -> GLint>(storage::GetSubroutineUniformLocation.ptr)(program, shadertype, name) }
     #[inline] pub unsafe fn GetSynciv(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *mut GLsizei, values: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLsync, GLenum, GLsizei, *mut GLsizei, *mut GLint) -> ()>(storage::GetSynciv.ptr)(sync, pname, bufSize, length, values) }
     #[inline] pub unsafe fn GetTexBumpParameterfvATI(pname: GLenum, param: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLfloat) -> ()>(storage::GetTexBumpParameterfvATI.ptr)(pname, param) }
     #[inline] pub unsafe fn GetTexBumpParameterivATI(pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLint) -> ()>(storage::GetTexBumpParameterivATI.ptr)(pname, param) }
     #[inline] pub unsafe fn GetTexEnvxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetTexEnvxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetTexFilterFuncSGIS.ptr)(target, filter, weights) }
     #[inline] pub unsafe fn GetTexGenxvOES(coord: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetTexGenxvOES.ptr)(coord, pname, params) }
     #[inline] pub unsafe fn GetTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetTexImage.ptr)(target, level, format, type_, pixels) }
     #[inline] pub unsafe fn GetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, *mut GLfloat) -> ()>(storage::GetTexLevelParameterfv.ptr)(target, level, pname, params) }
     #[inline] pub unsafe fn GetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, *mut GLint) -> ()>(storage::GetTexLevelParameteriv.ptr)(target, level, pname, params) }
     #[inline] pub unsafe fn GetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, *mut GLfixed) -> ()>(storage::GetTexLevelParameterxvOES.ptr)(target, level, pname, params) }
     #[inline] pub unsafe fn GetTexParameterIiv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetTexParameterIiv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterIivEXT(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetTexParameterIivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterIuiv(target: GLenum, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLuint) -> ()>(storage::GetTexParameterIuiv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLuint) -> ()>(storage::GetTexParameterIuivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetTexParameterPointervAPPLE.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetTexParameterfv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLint) -> ()>(storage::GetTexParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTexParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *mut GLfixed) -> ()>(storage::GetTexParameterxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn GetTextureHandleARB(texture: GLuint) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint) -> GLuint64>(storage::GetTextureHandleARB.ptr)(texture) }
     #[inline] pub unsafe fn GetTextureHandleNV(texture: GLuint) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint) -> GLuint64>(storage::GetTextureHandleNV.ptr)(texture) }
     #[inline] pub unsafe fn GetTextureImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetTextureImage.ptr)(texture, level, format, type_, bufSize, pixels) }
     #[inline] pub unsafe fn GetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::GetTextureImageEXT.ptr)(texture, target, level, format, type_, pixels) }
     #[inline] pub unsafe fn GetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, *mut GLfloat) -> ()>(storage::GetTextureLevelParameterfv.ptr)(texture, level, pname, params) }
     #[inline] pub unsafe fn GetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, *mut GLfloat) -> ()>(storage::GetTextureLevelParameterfvEXT.ptr)(texture, target, level, pname, params) }
     #[inline] pub unsafe fn GetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, *mut GLint) -> ()>(storage::GetTextureLevelParameteriv.ptr)(texture, level, pname, params) }
     #[inline] pub unsafe fn GetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLenum, *mut GLint) -> ()>(storage::GetTextureLevelParameterivEXT.ptr)(texture, target, level, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterIiv(texture: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetTextureParameterIiv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetTextureParameterIivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetTextureParameterIuiv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLuint) -> ()>(storage::GetTextureParameterIuivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterfv(texture: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetTextureParameterfv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLfloat) -> ()>(storage::GetTextureParameterfvEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn GetTextureParameteriv(texture: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetTextureParameteriv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn GetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *mut GLint) -> ()>(storage::GetTextureParameterivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn GetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> GLuint64>(storage::GetTextureSamplerHandleARB.ptr)(texture, sampler) }
     #[inline] pub unsafe fn GetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) -> GLuint64 { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> GLuint64>(storage::GetTextureSamplerHandleNV.ptr)(texture, sampler) }
     #[inline] pub unsafe fn GetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetTextureSubImage.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, bufSize, pixels) }
     #[inline] pub unsafe fn GetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, *mut GLint) -> ()>(storage::GetTrackMatrixivNV.ptr)(target, address, pname, params) }
     #[inline] pub unsafe fn GetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, type_: *mut GLenum, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLsizei, *mut GLenum, *mut GLchar) -> ()>(storage::GetTransformFeedbackVarying.ptr)(program, index, bufSize, length, size, type_, name) }
     #[inline] pub unsafe fn GetTransformFeedbackVaryingEXT(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, type_: *mut GLenum, name: *mut GLchar) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *mut GLsizei, *mut GLsizei, *mut GLenum, *mut GLchar) -> ()>(storage::GetTransformFeedbackVaryingEXT.ptr)(program, index, bufSize, length, size, type_, name) }
     #[inline] pub unsafe fn GetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *mut GLint) -> ()>(storage::GetTransformFeedbackVaryingNV.ptr)(program, index, location) }
     #[inline] pub unsafe fn GetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLint64) -> ()>(storage::GetTransformFeedbacki64_v.ptr)(xfb, pname, index, param) }
     #[inline] pub unsafe fn GetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *mut GLint) -> ()>(storage::GetTransformFeedbacki_v.ptr)(xfb, pname, index, param) }
     #[inline] pub unsafe fn GetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetTransformFeedbackiv.ptr)(xfb, pname, param) }
     #[inline] pub unsafe fn GetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) -> GLuint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLuint>(storage::GetUniformBlockIndex.ptr)(program, uniformBlockName) }
     #[inline] pub unsafe fn GetUniformBufferSizeEXT(program: GLuint, location: GLint) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> GLint>(storage::GetUniformBufferSizeEXT.ptr)(program, location) }
     #[inline] pub unsafe fn GetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: *const *const GLchar, uniformIndices: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const *const GLchar, *mut GLuint) -> ()>(storage::GetUniformIndices.ptr)(program, uniformCount, uniformNames, uniformIndices) }
     #[inline] pub unsafe fn GetUniformLocation(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetUniformLocation.ptr)(program, name) }
     #[inline] pub unsafe fn GetUniformLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint { mem::transmute::<_, extern "system" fn(GLhandleARB, *const GLcharARB) -> GLint>(storage::GetUniformLocationARB.ptr)(programObj, name) }
     #[inline] pub unsafe fn GetUniformOffsetEXT(program: GLuint, location: GLint) -> GLintptr { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> GLintptr>(storage::GetUniformOffsetEXT.ptr)(program, location) }
     #[inline] pub unsafe fn GetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *mut GLuint) -> ()>(storage::GetUniformSubroutineuiv.ptr)(shadertype, location, params) }
     #[inline] pub unsafe fn GetUniformdv(program: GLuint, location: GLint, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLdouble) -> ()>(storage::GetUniformdv.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLfloat) -> ()>(storage::GetUniformfv.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLint, *mut GLfloat) -> ()>(storage::GetUniformfvARB.ptr)(programObj, location, params) }
     #[inline] pub unsafe fn GetUniformi64vARB(program: GLuint, location: GLint, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLint64) -> ()>(storage::GetUniformi64vARB.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformi64vNV(program: GLuint, location: GLint, params: *mut GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLint64EXT) -> ()>(storage::GetUniformi64vNV.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformiv(program: GLuint, location: GLint, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLint) -> ()>(storage::GetUniformiv.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformivARB(programObj: GLhandleARB, location: GLint, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLint, *mut GLint) -> ()>(storage::GetUniformivARB.ptr)(programObj, location, params) }
     #[inline] pub unsafe fn GetUniformui64vARB(program: GLuint, location: GLint, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLuint64) -> ()>(storage::GetUniformui64vARB.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformui64vNV(program: GLuint, location: GLint, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLuint64EXT) -> ()>(storage::GetUniformui64vNV.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformuiv(program: GLuint, location: GLint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLuint) -> ()>(storage::GetUniformuiv.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUniformuivEXT(program: GLuint, location: GLint, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, *mut GLuint) -> ()>(storage::GetUniformuivEXT.ptr)(program, location, params) }
     #[inline] pub unsafe fn GetUnsignedBytei_vEXT(target: GLenum, index: GLuint, data: *mut GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *mut GLubyte) -> ()>(storage::GetUnsignedBytei_vEXT.ptr)(target, index, data) }
     #[inline] pub unsafe fn GetUnsignedBytevEXT(pname: GLenum, data: *mut GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *mut GLubyte) -> ()>(storage::GetUnsignedBytevEXT.ptr)(pname, data) }
     #[inline] pub unsafe fn GetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVariantArrayObjectfvATI.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVariantArrayObjectivATI.ptr)(id, pname, params) }
     #[inline] pub unsafe fn GetVariantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLboolean) -> ()>(storage::GetVariantBooleanvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetVariantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVariantFloatvEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetVariantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVariantIntegervEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetVariantPointervEXT(id: GLuint, value: GLenum, data: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVariantPointervEXT.ptr)(id, value, data) }
     #[inline] pub unsafe fn GetVaryingLocationNV(program: GLuint, name: *const GLchar) -> GLint { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar) -> GLint>(storage::GetVaryingLocationNV.ptr)(program, name) }
     #[inline] pub unsafe fn GetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint64) -> ()>(storage::GetVertexArrayIndexed64iv.ptr)(vaobj, index, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexArrayIndexediv.ptr)(vaobj, index, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexArrayIntegeri_vEXT.ptr)(vaobj, index, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexArrayIntegervEXT.ptr)(vaobj, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVertexArrayPointeri_vEXT.ptr)(vaobj, index, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVertexArrayPointervEXT.ptr)(vaobj, pname, param) }
     #[inline] pub unsafe fn GetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexArrayiv.ptr)(vaobj, pname, param) }
     #[inline] pub unsafe fn GetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVertexAttribArrayObjectfvATI.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribArrayObjectivATI.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribIiv(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribIiv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribIivEXT.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetVertexAttribIuiv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetVertexAttribIuivEXT.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribLdv(index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVertexAttribLdv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVertexAttribLdvEXT.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: *mut GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint64EXT) -> ()>(storage::GetVertexAttribLi64vNV.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64EXT) -> ()>(storage::GetVertexAttribLui64vARB.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64EXT) -> ()>(storage::GetVertexAttribLui64vNV.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVertexAttribPointerv.ptr)(index, pname, pointer) }
     #[inline] pub unsafe fn GetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVertexAttribPointervARB.ptr)(index, pname, pointer) }
     #[inline] pub unsafe fn GetVertexAttribPointervNV(index: GLuint, pname: GLenum, pointer: *mut *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut *mut std::os::raw::c_void) -> ()>(storage::GetVertexAttribPointervNV.ptr)(index, pname, pointer) }
     #[inline] pub unsafe fn GetVertexAttribdv(index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVertexAttribdv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVertexAttribdvARB.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribdvNV(index: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVertexAttribdvNV.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVertexAttribfv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVertexAttribfvARB.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribfvNV(index: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVertexAttribfvNV.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribiv.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribivARB(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribivARB.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVertexAttribivNV(index: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVertexAttribivNV.ptr)(index, pname, params) }
     #[inline] pub unsafe fn GetVideoCaptureStreamdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLdouble) -> ()>(storage::GetVideoCaptureStreamdvNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn GetVideoCaptureStreamfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLfloat) -> ()>(storage::GetVideoCaptureStreamfvNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn GetVideoCaptureStreamivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::GetVideoCaptureStreamivNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn GetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVideoCaptureivNV.ptr)(video_capture_slot, pname, params) }
     #[inline] pub unsafe fn GetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: *mut GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint64EXT) -> ()>(storage::GetVideoi64vNV.ptr)(video_slot, pname, params) }
     #[inline] pub unsafe fn GetVideoivNV(video_slot: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLint) -> ()>(storage::GetVideoivNV.ptr)(video_slot, pname, params) }
     #[inline] pub unsafe fn GetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: *mut GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint64EXT) -> ()>(storage::GetVideoui64vNV.ptr)(video_slot, pname, params) }
     #[inline] pub unsafe fn GetVideouivNV(video_slot: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut GLuint) -> ()>(storage::GetVideouivNV.ptr)(video_slot, pname, params) }
     #[inline] pub unsafe fn GetVkProcAddrNV(name: *const GLchar) -> GLVULKANPROCNV { mem::transmute::<_, extern "system" fn(*const GLchar) -> GLVULKANPROCNV>(storage::GetVkProcAddrNV.ptr)(name) }
     #[inline] pub unsafe fn GetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetnCompressedTexImage.ptr)(target, lod, bufSize, pixels) }
     #[inline] pub unsafe fn GetnCompressedTexImageARB(target: GLenum, lod: GLint, bufSize: GLsizei, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetnCompressedTexImageARB.ptr)(target, lod, bufSize, img) }
     #[inline] pub unsafe fn GetnTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetnTexImage.ptr)(target, level, format, type_, bufSize, pixels) }
     #[inline] pub unsafe fn GetnTexImageARB(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::GetnTexImageARB.ptr)(target, level, format, type_, bufSize, img) }
     #[inline] pub unsafe fn GetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLdouble) -> ()>(storage::GetnUniformdv.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformdvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLdouble) -> ()>(storage::GetnUniformdvARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLfloat) -> ()>(storage::GetnUniformfv.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformfvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLfloat) -> ()>(storage::GetnUniformfvARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformi64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLint64) -> ()>(storage::GetnUniformi64vARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLint) -> ()>(storage::GetnUniformiv.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLint) -> ()>(storage::GetnUniformivARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformui64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLuint64) -> ()>(storage::GetnUniformui64vARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLuint) -> ()>(storage::GetnUniformuiv.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GetnUniformuivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *mut GLuint) -> ()>(storage::GetnUniformuivARB.ptr)(program, location, bufSize, params) }
     #[inline] pub unsafe fn GlobalAlphaFactorbSUN(factor: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte) -> ()>(storage::GlobalAlphaFactorbSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactordSUN(factor: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble) -> ()>(storage::GlobalAlphaFactordSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactorfSUN(factor: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::GlobalAlphaFactorfSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactoriSUN(factor: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::GlobalAlphaFactoriSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactorsSUN(factor: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort) -> ()>(storage::GlobalAlphaFactorsSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactorubSUN(factor: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLubyte) -> ()>(storage::GlobalAlphaFactorubSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactoruiSUN(factor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::GlobalAlphaFactoruiSUN.ptr)(factor) }
     #[inline] pub unsafe fn GlobalAlphaFactorusSUN(factor: GLushort) -> () { mem::transmute::<_, extern "system" fn(GLushort) -> ()>(storage::GlobalAlphaFactorusSUN.ptr)(factor) }
     #[inline] pub unsafe fn Hint(target: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::Hint.ptr)(target, mode) }
     #[inline] pub unsafe fn HintPGI(target: GLenum, mode: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::HintPGI.ptr)(target, mode) }
     #[inline] pub unsafe fn Histogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLboolean) -> ()>(storage::Histogram.ptr)(target, width, internalformat, sink) }
     #[inline] pub unsafe fn HistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLboolean) -> ()>(storage::HistogramEXT.ptr)(target, width, internalformat, sink) }
     #[inline] pub unsafe fn IglooInterfaceSGIX(pname: GLenum, params: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void) -> ()>(storage::IglooInterfaceSGIX.ptr)(pname, params) }
     #[inline] pub unsafe fn ImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::ImageTransformParameterfHP.ptr)(target, pname, param) }
     #[inline] pub unsafe fn ImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::ImageTransformParameterfvHP.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::ImageTransformParameteriHP.ptr)(target, pname, param) }
     #[inline] pub unsafe fn ImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::ImageTransformParameterivHP.ptr)(target, pname, params) }
     #[inline] pub unsafe fn ImportMemoryFdEXT(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64, GLenum, GLint) -> ()>(storage::ImportMemoryFdEXT.ptr)(memory, size, handleType, fd) }
     #[inline] pub unsafe fn ImportMemoryWin32HandleEXT(memory: GLuint, size: GLuint64, handleType: GLenum, handle: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64, GLenum, *mut std::os::raw::c_void) -> ()>(storage::ImportMemoryWin32HandleEXT.ptr)(memory, size, handleType, handle) }
     #[inline] pub unsafe fn ImportMemoryWin32NameEXT(memory: GLuint, size: GLuint64, handleType: GLenum, name: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64, GLenum, *const std::os::raw::c_void) -> ()>(storage::ImportMemoryWin32NameEXT.ptr)(memory, size, handleType, name) }
     #[inline] pub unsafe fn ImportSemaphoreFdEXT(semaphore: GLuint, handleType: GLenum, fd: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::ImportSemaphoreFdEXT.ptr)(semaphore, handleType, fd) }
     #[inline] pub unsafe fn ImportSemaphoreWin32HandleEXT(semaphore: GLuint, handleType: GLenum, handle: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *mut std::os::raw::c_void) -> ()>(storage::ImportSemaphoreWin32HandleEXT.ptr)(semaphore, handleType, handle) }
     #[inline] pub unsafe fn ImportSemaphoreWin32NameEXT(semaphore: GLuint, handleType: GLenum, name: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void) -> ()>(storage::ImportSemaphoreWin32NameEXT.ptr)(semaphore, handleType, name) }
     #[inline] pub unsafe fn ImportSyncEXT(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLbitfield) -> GLsync>(storage::ImportSyncEXT.ptr)(external_sync_type, external_sync, flags) }
     #[inline] pub unsafe fn IndexFormatNV(type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei) -> ()>(storage::IndexFormatNV.ptr)(type_, stride) }
     #[inline] pub unsafe fn IndexFuncEXT(func: GLenum, ref_: GLclampf) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLclampf) -> ()>(storage::IndexFuncEXT.ptr)(func, ref_) }
     #[inline] pub unsafe fn IndexMaterialEXT(face: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::IndexMaterialEXT.ptr)(face, mode) }
     #[inline] pub unsafe fn IndexPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, *const std::os::raw::c_void) -> ()>(storage::IndexPointerEXT.ptr)(type_, stride, count, pointer) }
     #[inline] pub unsafe fn IndexPointerListIBM(type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::IndexPointerListIBM.ptr)(type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn IndexxOES(component: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::IndexxOES.ptr)(component) }
     #[inline] pub unsafe fn IndexxvOES(component: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::IndexxvOES.ptr)(component) }
     #[inline] pub unsafe fn InsertComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::InsertComponentEXT.ptr)(res, src, num) }
     #[inline] pub unsafe fn InsertEventMarkerEXT(length: GLsizei, marker: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLchar) -> ()>(storage::InsertEventMarkerEXT.ptr)(length, marker) }
     #[inline] pub unsafe fn InstrumentsBufferSGIX(size: GLsizei, buffer: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut GLint) -> ()>(storage::InstrumentsBufferSGIX.ptr)(size, buffer) }
     #[inline] pub unsafe fn InterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLfloat) -> ()>(storage::InterpolatePathsNV.ptr)(resultPath, pathA, pathB, weight) }
     #[inline] pub unsafe fn InvalidateBufferData(buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::InvalidateBufferData.ptr)(buffer) }
     #[inline] pub unsafe fn InvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr) -> ()>(storage::InvalidateBufferSubData.ptr)(buffer, offset, length) }
     #[inline] pub unsafe fn InvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLenum) -> ()>(storage::InvalidateFramebuffer.ptr)(target, numAttachments, attachments) }
     #[inline] pub unsafe fn InvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLenum) -> ()>(storage::InvalidateNamedFramebufferData.ptr)(framebuffer, numAttachments, attachments) }
     #[inline] pub unsafe fn InvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLenum, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::InvalidateNamedFramebufferSubData.ptr)(framebuffer, numAttachments, attachments, x, y, width, height) }
     #[inline] pub unsafe fn InvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLenum, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::InvalidateSubFramebuffer.ptr)(target, numAttachments, attachments, x, y, width, height) }
     #[inline] pub unsafe fn InvalidateTexImage(texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> ()>(storage::InvalidateTexImage.ptr)(texture, level) }
     #[inline] pub unsafe fn InvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> ()>(storage::InvalidateTexSubImage.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth) }
     #[inline] pub unsafe fn IsAsyncMarkerSGIX(marker: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsAsyncMarkerSGIX.ptr)(marker) }
     #[inline] pub unsafe fn IsBuffer(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsBuffer.ptr)(buffer) }
     #[inline] pub unsafe fn IsBufferARB(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsBufferARB.ptr)(buffer) }
     #[inline] pub unsafe fn IsBufferResidentNV(target: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum) -> GLboolean>(storage::IsBufferResidentNV.ptr)(target) }
     #[inline] pub unsafe fn IsCommandListNV(list: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsCommandListNV.ptr)(list) }
     #[inline] pub unsafe fn IsEnabled(cap: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum) -> GLboolean>(storage::IsEnabled.ptr)(cap) }
     #[inline] pub unsafe fn IsEnabledIndexedEXT(target: GLenum, index: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> GLboolean>(storage::IsEnabledIndexedEXT.ptr)(target, index) }
     #[inline] pub unsafe fn IsEnabledi(target: GLenum, index: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> GLboolean>(storage::IsEnabledi.ptr)(target, index) }
     #[inline] pub unsafe fn IsFenceAPPLE(fence: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsFenceAPPLE.ptr)(fence) }
     #[inline] pub unsafe fn IsFenceNV(fence: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsFenceNV.ptr)(fence) }
     #[inline] pub unsafe fn IsFramebuffer(framebuffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsFramebuffer.ptr)(framebuffer) }
     #[inline] pub unsafe fn IsFramebufferEXT(framebuffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsFramebufferEXT.ptr)(framebuffer) }
     #[inline] pub unsafe fn IsImageHandleResidentARB(handle: GLuint64) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint64) -> GLboolean>(storage::IsImageHandleResidentARB.ptr)(handle) }
     #[inline] pub unsafe fn IsImageHandleResidentNV(handle: GLuint64) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint64) -> GLboolean>(storage::IsImageHandleResidentNV.ptr)(handle) }
     #[inline] pub unsafe fn IsMemoryObjectEXT(memoryObject: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsMemoryObjectEXT.ptr)(memoryObject) }
     #[inline] pub unsafe fn IsNameAMD(identifier: GLenum, name: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> GLboolean>(storage::IsNameAMD.ptr)(identifier, name) }
     #[inline] pub unsafe fn IsNamedBufferResidentNV(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsNamedBufferResidentNV.ptr)(buffer) }
     #[inline] pub unsafe fn IsNamedStringARB(namelen: GLint, name: *const GLchar) -> GLboolean { mem::transmute::<_, extern "system" fn(GLint, *const GLchar) -> GLboolean>(storage::IsNamedStringARB.ptr)(namelen, name) }
     #[inline] pub unsafe fn IsObjectBufferATI(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsObjectBufferATI.ptr)(buffer) }
     #[inline] pub unsafe fn IsOcclusionQueryNV(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsOcclusionQueryNV.ptr)(id) }
     #[inline] pub unsafe fn IsPathNV(path: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsPathNV.ptr)(path) }
     #[inline] pub unsafe fn IsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLfloat, GLfloat) -> GLboolean>(storage::IsPointInFillPathNV.ptr)(path, mask, x, y) }
     #[inline] pub unsafe fn IsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat) -> GLboolean>(storage::IsPointInStrokePathNV.ptr)(path, x, y) }
     #[inline] pub unsafe fn IsProgram(program: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsProgram.ptr)(program) }
     #[inline] pub unsafe fn IsProgramARB(program: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsProgramARB.ptr)(program) }
     #[inline] pub unsafe fn IsProgramNV(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsProgramNV.ptr)(id) }
     #[inline] pub unsafe fn IsProgramPipeline(pipeline: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsProgramPipeline.ptr)(pipeline) }
     #[inline] pub unsafe fn IsQuery(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsQuery.ptr)(id) }
     #[inline] pub unsafe fn IsQueryARB(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsQueryARB.ptr)(id) }
     #[inline] pub unsafe fn IsRenderbuffer(renderbuffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsRenderbuffer.ptr)(renderbuffer) }
     #[inline] pub unsafe fn IsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsRenderbufferEXT.ptr)(renderbuffer) }
     #[inline] pub unsafe fn IsSampler(sampler: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsSampler.ptr)(sampler) }
     #[inline] pub unsafe fn IsSemaphoreEXT(semaphore: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsSemaphoreEXT.ptr)(semaphore) }
     #[inline] pub unsafe fn IsShader(shader: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsShader.ptr)(shader) }
     #[inline] pub unsafe fn IsStateNV(state: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsStateNV.ptr)(state) }
     #[inline] pub unsafe fn IsSync(sync: GLsync) -> GLboolean { mem::transmute::<_, extern "system" fn(GLsync) -> GLboolean>(storage::IsSync.ptr)(sync) }
     #[inline] pub unsafe fn IsTexture(texture: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsTexture.ptr)(texture) }
     #[inline] pub unsafe fn IsTextureEXT(texture: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsTextureEXT.ptr)(texture) }
     #[inline] pub unsafe fn IsTextureHandleResidentARB(handle: GLuint64) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint64) -> GLboolean>(storage::IsTextureHandleResidentARB.ptr)(handle) }
     #[inline] pub unsafe fn IsTextureHandleResidentNV(handle: GLuint64) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint64) -> GLboolean>(storage::IsTextureHandleResidentNV.ptr)(handle) }
     #[inline] pub unsafe fn IsTransformFeedback(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsTransformFeedback.ptr)(id) }
     #[inline] pub unsafe fn IsTransformFeedbackNV(id: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsTransformFeedbackNV.ptr)(id) }
     #[inline] pub unsafe fn IsVariantEnabledEXT(id: GLuint, cap: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> GLboolean>(storage::IsVariantEnabledEXT.ptr)(id, cap) }
     #[inline] pub unsafe fn IsVertexArray(array: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsVertexArray.ptr)(array) }
     #[inline] pub unsafe fn IsVertexArrayAPPLE(array: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::IsVertexArrayAPPLE.ptr)(array) }
     #[inline] pub unsafe fn IsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> GLboolean>(storage::IsVertexAttribEnabledAPPLE.ptr)(index, pname) }
     #[inline] pub unsafe fn LGPUCopyImageSubDataNVX(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> ()>(storage::LGPUCopyImageSubDataNVX.ptr)(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) }
     #[inline] pub unsafe fn LGPUInterlockNVX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::LGPUInterlockNVX.ptr)() }
     #[inline] pub unsafe fn LGPUNamedBufferSubDataNVX(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLbitfield, GLuint, GLintptr, GLsizeiptr, *const std::os::raw::c_void) -> ()>(storage::LGPUNamedBufferSubDataNVX.ptr)(gpuMask, buffer, offset, size, data) }
     #[inline] pub unsafe fn LabelObjectEXT(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLchar) -> ()>(storage::LabelObjectEXT.ptr)(type_, object, length, label) }
     #[inline] pub unsafe fn LightEnviSGIX(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::LightEnviSGIX.ptr)(pname, param) }
     #[inline] pub unsafe fn LightModelxOES(pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::LightModelxOES.ptr)(pname, param) }
     #[inline] pub unsafe fn LightModelxvOES(pname: GLenum, param: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::LightModelxvOES.ptr)(pname, param) }
     #[inline] pub unsafe fn LightxOES(light: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::LightxOES.ptr)(light, pname, param) }
     #[inline] pub unsafe fn LightxvOES(light: GLenum, pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::LightxvOES.ptr)(light, pname, params) }
     #[inline] pub unsafe fn LineWidth(width: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::LineWidth.ptr)(width) }
     #[inline] pub unsafe fn LineWidthxOES(width: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::LineWidthxOES.ptr)(width) }
     #[inline] pub unsafe fn LinkProgram(program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::LinkProgram.ptr)(program) }
     #[inline] pub unsafe fn LinkProgramARB(programObj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB) -> ()>(storage::LinkProgramARB.ptr)(programObj) }
     #[inline] pub unsafe fn ListDrawCommandsStatesClientNV(list: GLuint, segment: GLuint, indirects: *const *const std::os::raw::c_void, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const *const std::os::raw::c_void, *const GLsizei, *const GLuint, *const GLuint, GLuint) -> ()>(storage::ListDrawCommandsStatesClientNV.ptr)(list, segment, indirects, sizes, states, fbos, count) }
     #[inline] pub unsafe fn ListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLfloat) -> ()>(storage::ListParameterfSGIX.ptr)(list, pname, param) }
     #[inline] pub unsafe fn ListParameterfvSGIX(list: GLuint, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLfloat) -> ()>(storage::ListParameterfvSGIX.ptr)(list, pname, params) }
     #[inline] pub unsafe fn ListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::ListParameteriSGIX.ptr)(list, pname, param) }
     #[inline] pub unsafe fn ListParameterivSGIX(list: GLuint, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::ListParameterivSGIX.ptr)(list, pname, params) }
     #[inline] pub unsafe fn LoadIdentityDeformationMapSGIX(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::LoadIdentityDeformationMapSGIX.ptr)(mask) }
     #[inline] pub unsafe fn LoadMatrixxOES(m: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::LoadMatrixxOES.ptr)(m) }
     #[inline] pub unsafe fn LoadProgramNV(target: GLenum, id: GLuint, len: GLsizei, program: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLubyte) -> ()>(storage::LoadProgramNV.ptr)(target, id, len, program) }
     #[inline] pub unsafe fn LoadTransposeMatrixd(m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::LoadTransposeMatrixd.ptr)(m) }
     #[inline] pub unsafe fn LoadTransposeMatrixdARB(m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::LoadTransposeMatrixdARB.ptr)(m) }
     #[inline] pub unsafe fn LoadTransposeMatrixf(m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::LoadTransposeMatrixf.ptr)(m) }
     #[inline] pub unsafe fn LoadTransposeMatrixfARB(m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::LoadTransposeMatrixfARB.ptr)(m) }
     #[inline] pub unsafe fn LoadTransposeMatrixxOES(m: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::LoadTransposeMatrixxOES.ptr)(m) }
     #[inline] pub unsafe fn LockArraysEXT(first: GLint, count: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei) -> ()>(storage::LockArraysEXT.ptr)(first, count) }
     #[inline] pub unsafe fn LogicOp(opcode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::LogicOp.ptr)(opcode) }
     #[inline] pub unsafe fn MakeBufferNonResidentNV(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::MakeBufferNonResidentNV.ptr)(target) }
     #[inline] pub unsafe fn MakeBufferResidentNV(target: GLenum, access: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::MakeBufferResidentNV.ptr)(target, access) }
     #[inline] pub unsafe fn MakeImageHandleNonResidentARB(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeImageHandleNonResidentARB.ptr)(handle) }
     #[inline] pub unsafe fn MakeImageHandleNonResidentNV(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeImageHandleNonResidentNV.ptr)(handle) }
     #[inline] pub unsafe fn MakeImageHandleResidentARB(handle: GLuint64, access: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint64, GLenum) -> ()>(storage::MakeImageHandleResidentARB.ptr)(handle, access) }
     #[inline] pub unsafe fn MakeImageHandleResidentNV(handle: GLuint64, access: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint64, GLenum) -> ()>(storage::MakeImageHandleResidentNV.ptr)(handle, access) }
     #[inline] pub unsafe fn MakeNamedBufferNonResidentNV(buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::MakeNamedBufferNonResidentNV.ptr)(buffer) }
     #[inline] pub unsafe fn MakeNamedBufferResidentNV(buffer: GLuint, access: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::MakeNamedBufferResidentNV.ptr)(buffer, access) }
     #[inline] pub unsafe fn MakeTextureHandleNonResidentARB(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeTextureHandleNonResidentARB.ptr)(handle) }
     #[inline] pub unsafe fn MakeTextureHandleNonResidentNV(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeTextureHandleNonResidentNV.ptr)(handle) }
     #[inline] pub unsafe fn MakeTextureHandleResidentARB(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeTextureHandleResidentARB.ptr)(handle) }
     #[inline] pub unsafe fn MakeTextureHandleResidentNV(handle: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::MakeTextureHandleResidentNV.ptr)(handle) }
     #[inline] pub unsafe fn Map1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) -> ()>(storage::Map1xOES.ptr)(target, u1, u2, stride, order, points) }
     #[inline] pub unsafe fn Map2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) -> ()>(storage::Map2xOES.ptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
     #[inline] pub unsafe fn MapBuffer(target: GLenum, access: GLenum) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> *mut std::os::raw::c_void>(storage::MapBuffer.ptr)(target, access) }
     #[inline] pub unsafe fn MapBufferARB(target: GLenum, access: GLenum) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> *mut std::os::raw::c_void>(storage::MapBufferARB.ptr)(target, access) }
     #[inline] pub unsafe fn MapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLenum, GLintptr, GLsizeiptr, GLbitfield) -> *mut std::os::raw::c_void>(storage::MapBufferRange.ptr)(target, offset, length, access) }
     #[inline] pub unsafe fn MapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, *const std::os::raw::c_void) -> ()>(storage::MapControlPointsNV.ptr)(target, index, type_, ustride, vstride, uorder, vorder, packed, points) }
     #[inline] pub unsafe fn MapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfixed, GLfixed) -> ()>(storage::MapGrid1xOES.ptr)(n, u1, u2) }
     #[inline] pub unsafe fn MapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::MapGrid2xOES.ptr)(n, u1, u2, v1, v2) }
     #[inline] pub unsafe fn MapNamedBuffer(buffer: GLuint, access: GLenum) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> *mut std::os::raw::c_void>(storage::MapNamedBuffer.ptr)(buffer, access) }
     #[inline] pub unsafe fn MapNamedBufferEXT(buffer: GLuint, access: GLenum) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> *mut std::os::raw::c_void>(storage::MapNamedBufferEXT.ptr)(buffer, access) }
     #[inline] pub unsafe fn MapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, GLbitfield) -> *mut std::os::raw::c_void>(storage::MapNamedBufferRange.ptr)(buffer, offset, length, access) }
     #[inline] pub unsafe fn MapNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, GLbitfield) -> *mut std::os::raw::c_void>(storage::MapNamedBufferRangeEXT.ptr)(buffer, offset, length, access) }
     #[inline] pub unsafe fn MapObjectBufferATI(buffer: GLuint) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint) -> *mut std::os::raw::c_void>(storage::MapObjectBufferATI.ptr)(buffer) }
     #[inline] pub unsafe fn MapParameterfvNV(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::MapParameterfvNV.ptr)(target, pname, params) }
     #[inline] pub unsafe fn MapParameterivNV(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::MapParameterivNV.ptr)(target, pname, params) }
     #[inline] pub unsafe fn MapTexture2DINTEL(texture: GLuint, level: GLint, access: GLbitfield, stride: *mut GLint, layout: *mut GLenum) -> *mut std::os::raw::c_void { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLbitfield, *mut GLint, *mut GLenum) -> *mut std::os::raw::c_void>(storage::MapTexture2DINTEL.ptr)(texture, level, access, stride, layout) }
     #[inline] pub unsafe fn MapVertexAttrib1dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, *const GLdouble) -> ()>(storage::MapVertexAttrib1dAPPLE.ptr)(index, size, u1, u2, stride, order, points) }
     #[inline] pub unsafe fn MapVertexAttrib1fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, *const GLfloat) -> ()>(storage::MapVertexAttrib1fAPPLE.ptr)(index, size, u1, u2, stride, order, points) }
     #[inline] pub unsafe fn MapVertexAttrib2dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, *const GLdouble) -> ()>(storage::MapVertexAttrib2dAPPLE.ptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
     #[inline] pub unsafe fn MapVertexAttrib2fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, *const GLfloat) -> ()>(storage::MapVertexAttrib2fAPPLE.ptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
     #[inline] pub unsafe fn MaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::MaterialxOES.ptr)(face, pname, param) }
     #[inline] pub unsafe fn MaterialxvOES(face: GLenum, pname: GLenum, param: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::MaterialxvOES.ptr)(face, pname, param) }
     #[inline] pub unsafe fn MatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::MatrixFrustumEXT.ptr)(mode, left, right, bottom, top, zNear, zFar) }
     #[inline] pub unsafe fn MatrixIndexPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::MatrixIndexPointerARB.ptr)(size, type_, stride, pointer) }
     #[inline] pub unsafe fn MatrixIndexubvARB(size: GLint, indices: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLubyte) -> ()>(storage::MatrixIndexubvARB.ptr)(size, indices) }
     #[inline] pub unsafe fn MatrixIndexuivARB(size: GLint, indices: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLuint) -> ()>(storage::MatrixIndexuivARB.ptr)(size, indices) }
     #[inline] pub unsafe fn MatrixIndexusvARB(size: GLint, indices: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLushort) -> ()>(storage::MatrixIndexusvARB.ptr)(size, indices) }
     #[inline] pub unsafe fn MatrixLoad3x2fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixLoad3x2fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixLoad3x3fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixLoad3x3fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixLoadIdentityEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::MatrixLoadIdentityEXT.ptr)(mode) }
     #[inline] pub unsafe fn MatrixLoadTranspose3x3fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixLoadTranspose3x3fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixLoadTransposedEXT(mode: GLenum, m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MatrixLoadTransposedEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixLoadTransposefEXT(mode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixLoadTransposefEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixLoaddEXT(mode: GLenum, m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MatrixLoaddEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixLoadfEXT(mode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixLoadfEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixMult3x2fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixMult3x2fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixMult3x3fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixMult3x3fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixMultTranspose3x3fNV(matrixMode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixMultTranspose3x3fNV.ptr)(matrixMode, m) }
     #[inline] pub unsafe fn MatrixMultTransposedEXT(mode: GLenum, m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MatrixMultTransposedEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixMultTransposefEXT(mode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixMultTransposefEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixMultdEXT(mode: GLenum, m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MatrixMultdEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixMultfEXT(mode: GLenum, m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MatrixMultfEXT.ptr)(mode, m) }
     #[inline] pub unsafe fn MatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::MatrixOrthoEXT.ptr)(mode, left, right, bottom, top, zNear, zFar) }
     #[inline] pub unsafe fn MatrixPopEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::MatrixPopEXT.ptr)(mode) }
     #[inline] pub unsafe fn MatrixPushEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::MatrixPushEXT.ptr)(mode) }
     #[inline] pub unsafe fn MatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::MatrixRotatedEXT.ptr)(mode, angle, x, y, z) }
     #[inline] pub unsafe fn MatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::MatrixRotatefEXT.ptr)(mode, angle, x, y, z) }
     #[inline] pub unsafe fn MatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::MatrixScaledEXT.ptr)(mode, x, y, z) }
     #[inline] pub unsafe fn MatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::MatrixScalefEXT.ptr)(mode, x, y, z) }
     #[inline] pub unsafe fn MatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::MatrixTranslatedEXT.ptr)(mode, x, y, z) }
     #[inline] pub unsafe fn MatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::MatrixTranslatefEXT.ptr)(mode, x, y, z) }
     #[inline] pub unsafe fn MaxShaderCompilerThreadsARB(count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::MaxShaderCompilerThreadsARB.ptr)(count) }
     #[inline] pub unsafe fn MaxShaderCompilerThreadsKHR(count: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::MaxShaderCompilerThreadsKHR.ptr)(count) }
     #[inline] pub unsafe fn MemoryBarrier(barriers: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::MemoryBarrier.ptr)(barriers) }
     #[inline] pub unsafe fn MemoryBarrierByRegion(barriers: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::MemoryBarrierByRegion.ptr)(barriers) }
     #[inline] pub unsafe fn MemoryBarrierEXT(barriers: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::MemoryBarrierEXT.ptr)(barriers) }
     #[inline] pub unsafe fn MemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::MemoryObjectParameterivEXT.ptr)(memoryObject, pname, params) }
     #[inline] pub unsafe fn MinSampleShading(value: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::MinSampleShading.ptr)(value) }
     #[inline] pub unsafe fn MinSampleShadingARB(value: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::MinSampleShadingARB.ptr)(value) }
     #[inline] pub unsafe fn Minmax(target: GLenum, internalformat: GLenum, sink: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLboolean) -> ()>(storage::Minmax.ptr)(target, internalformat, sink) }
     #[inline] pub unsafe fn MinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLboolean) -> ()>(storage::MinmaxEXT.ptr)(target, internalformat, sink) }
     #[inline] pub unsafe fn MultMatrixxOES(m: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::MultMatrixxOES.ptr)(m) }
     #[inline] pub unsafe fn MultTransposeMatrixd(m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::MultTransposeMatrixd.ptr)(m) }
     #[inline] pub unsafe fn MultTransposeMatrixdARB(m: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::MultTransposeMatrixdARB.ptr)(m) }
     #[inline] pub unsafe fn MultTransposeMatrixf(m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::MultTransposeMatrixf.ptr)(m) }
     #[inline] pub unsafe fn MultTransposeMatrixfARB(m: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::MultTransposeMatrixfARB.ptr)(m) }
     #[inline] pub unsafe fn MultTransposeMatrixxOES(m: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::MultTransposeMatrixxOES.ptr)(m) }
     #[inline] pub unsafe fn MultiDrawArrays(mode: GLenum, first: *const GLint, count: *const GLsizei, drawcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint, *const GLsizei, GLsizei) -> ()>(storage::MultiDrawArrays.ptr)(mode, first, count, drawcount) }
     #[inline] pub unsafe fn MultiDrawArraysEXT(mode: GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint, *const GLsizei, GLsizei) -> ()>(storage::MultiDrawArraysEXT.ptr)(mode, first, count, primcount) }
     #[inline] pub unsafe fn MultiDrawArraysIndirect(mode: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLsizei, GLsizei) -> ()>(storage::MultiDrawArraysIndirect.ptr)(mode, indirect, drawcount, stride) }
     #[inline] pub unsafe fn MultiDrawArraysIndirectAMD(mode: GLenum, indirect: *const std::os::raw::c_void, primcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLsizei, GLsizei) -> ()>(storage::MultiDrawArraysIndirectAMD.ptr)(mode, indirect, primcount, stride) }
     #[inline] pub unsafe fn MultiDrawArraysIndirectBindlessCountNV(mode: GLenum, indirect: *const std::os::raw::c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLsizei, GLsizei, GLsizei, GLint) -> ()>(storage::MultiDrawArraysIndirectBindlessCountNV.ptr)(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) }
     #[inline] pub unsafe fn MultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: *const std::os::raw::c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLsizei, GLsizei, GLint) -> ()>(storage::MultiDrawArraysIndirectBindlessNV.ptr)(mode, indirect, drawCount, stride, vertexBufferCount) }
     #[inline] pub unsafe fn MultiDrawArraysIndirectCount(mode: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawArraysIndirectCount.ptr)(mode, indirect, drawcount, maxdrawcount, stride) }
     #[inline] pub unsafe fn MultiDrawArraysIndirectCountARB(mode: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawArraysIndirectCountARB.ptr)(mode, indirect, drawcount, maxdrawcount, stride) }
     #[inline] pub unsafe fn MultiDrawElementArrayAPPLE(mode: GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint, *const GLsizei, GLsizei) -> ()>(storage::MultiDrawElementArrayAPPLE.ptr)(mode, first, count, primcount) }
     #[inline] pub unsafe fn MultiDrawElements(mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const std::os::raw::c_void, drawcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLsizei, GLenum, *const *const std::os::raw::c_void, GLsizei) -> ()>(storage::MultiDrawElements.ptr)(mode, count, type_, indices, drawcount) }
     #[inline] pub unsafe fn MultiDrawElementsBaseVertex(mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const std::os::raw::c_void, drawcount: GLsizei, basevertex: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLsizei, GLenum, *const *const std::os::raw::c_void, GLsizei, *const GLint) -> ()>(storage::MultiDrawElementsBaseVertex.ptr)(mode, count, type_, indices, drawcount, basevertex) }
     #[inline] pub unsafe fn MultiDrawElementsEXT(mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const std::os::raw::c_void, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLsizei, GLenum, *const *const std::os::raw::c_void, GLsizei) -> ()>(storage::MultiDrawElementsEXT.ptr)(mode, count, type_, indices, primcount) }
     #[inline] pub unsafe fn MultiDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLsizei, GLsizei) -> ()>(storage::MultiDrawElementsIndirect.ptr)(mode, type_, indirect, drawcount, stride) }
     #[inline] pub unsafe fn MultiDrawElementsIndirectAMD(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, primcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLsizei, GLsizei) -> ()>(storage::MultiDrawElementsIndirectAMD.ptr)(mode, type_, indirect, primcount, stride) }
     #[inline] pub unsafe fn MultiDrawElementsIndirectBindlessCountNV(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLsizei, GLsizei, GLsizei, GLint) -> ()>(storage::MultiDrawElementsIndirectBindlessCountNV.ptr)(mode, type_, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) }
     #[inline] pub unsafe fn MultiDrawElementsIndirectBindlessNV(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLsizei, GLsizei, GLint) -> ()>(storage::MultiDrawElementsIndirectBindlessNV.ptr)(mode, type_, indirect, drawCount, stride, vertexBufferCount) }
     #[inline] pub unsafe fn MultiDrawElementsIndirectCount(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawElementsIndirectCount.ptr)(mode, type_, indirect, drawcount, maxdrawcount, stride) }
     #[inline] pub unsafe fn MultiDrawElementsIndirectCountARB(mode: GLenum, type_: GLenum, indirect: *const std::os::raw::c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const std::os::raw::c_void, GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawElementsIndirectCountARB.ptr)(mode, type_, indirect, drawcount, maxdrawcount, stride) }
     #[inline] pub unsafe fn MultiDrawMeshTasksIndirectCountNV(indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLintptr, GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawMeshTasksIndirectCountNV.ptr)(indirect, drawcount, maxdrawcount, stride) }
     #[inline] pub unsafe fn MultiDrawMeshTasksIndirectNV(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLintptr, GLsizei, GLsizei) -> ()>(storage::MultiDrawMeshTasksIndirectNV.ptr)(indirect, drawcount, stride) }
     #[inline] pub unsafe fn MultiDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: *const GLint, count: *const GLsizei, primcount: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, *const GLint, *const GLsizei, GLsizei) -> ()>(storage::MultiDrawRangeElementArrayAPPLE.ptr)(mode, start, end, first, count, primcount) }
     #[inline] pub unsafe fn MultiModeDrawArraysIBM(mode: *const GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei, modestride: GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLenum, *const GLint, *const GLsizei, GLsizei, GLint) -> ()>(storage::MultiModeDrawArraysIBM.ptr)(mode, first, count, primcount, modestride) }
     #[inline] pub unsafe fn MultiModeDrawElementsIBM(mode: *const GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const std::os::raw::c_void, primcount: GLsizei, modestride: GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLenum, *const GLsizei, GLenum, *const *const std::os::raw::c_void, GLsizei, GLint) -> ()>(storage::MultiModeDrawElementsIBM.ptr)(mode, count, type_, indices, primcount, modestride) }
     #[inline] pub unsafe fn MultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLuint) -> ()>(storage::MultiTexBufferEXT.ptr)(texunit, target, internalformat, buffer) }
     #[inline] pub unsafe fn MultiTexCoord1bOES(texture: GLenum, s: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLbyte) -> ()>(storage::MultiTexCoord1bOES.ptr)(texture, s) }
     #[inline] pub unsafe fn MultiTexCoord1bvOES(texture: GLenum, coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLbyte) -> ()>(storage::MultiTexCoord1bvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord1d(target: GLenum, s: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble) -> ()>(storage::MultiTexCoord1d.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1dARB(target: GLenum, s: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble) -> ()>(storage::MultiTexCoord1dARB.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1dv(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord1dv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1dvARB(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord1dvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1f(target: GLenum, s: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::MultiTexCoord1f.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1fARB(target: GLenum, s: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::MultiTexCoord1fARB.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1fv(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord1fv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1fvARB(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord1fvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1hNV(target: GLenum, s: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLhalfNV) -> ()>(storage::MultiTexCoord1hNV.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1hvNV(target: GLenum, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLhalfNV) -> ()>(storage::MultiTexCoord1hvNV.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1i(target: GLenum, s: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::MultiTexCoord1i.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1iARB(target: GLenum, s: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::MultiTexCoord1iARB.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1iv(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord1iv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1ivARB(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord1ivARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1s(target: GLenum, s: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort) -> ()>(storage::MultiTexCoord1s.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1sARB(target: GLenum, s: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort) -> ()>(storage::MultiTexCoord1sARB.ptr)(target, s) }
     #[inline] pub unsafe fn MultiTexCoord1sv(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord1sv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1svARB(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord1svARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord1xOES(texture: GLenum, s: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::MultiTexCoord1xOES.ptr)(texture, s) }
     #[inline] pub unsafe fn MultiTexCoord1xvOES(texture: GLenum, coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::MultiTexCoord1xvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLbyte, GLbyte) -> ()>(storage::MultiTexCoord2bOES.ptr)(texture, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2bvOES(texture: GLenum, coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLbyte) -> ()>(storage::MultiTexCoord2bvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord2d.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord2dARB.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2dv(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord2dv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2dvARB(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord2dvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord2f.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord2fARB.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2fv(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord2fv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2fvARB(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord2fvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLhalfNV, GLhalfNV) -> ()>(storage::MultiTexCoord2hNV.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2hvNV(target: GLenum, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLhalfNV) -> ()>(storage::MultiTexCoord2hvNV.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint) -> ()>(storage::MultiTexCoord2i.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint) -> ()>(storage::MultiTexCoord2iARB.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2iv(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord2iv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2ivARB(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord2ivARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort) -> ()>(storage::MultiTexCoord2s.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort) -> ()>(storage::MultiTexCoord2sARB.ptr)(target, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2sv(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord2sv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2svARB(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord2svARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed, GLfixed) -> ()>(storage::MultiTexCoord2xOES.ptr)(texture, s, t) }
     #[inline] pub unsafe fn MultiTexCoord2xvOES(texture: GLenum, coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::MultiTexCoord2xvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLbyte, GLbyte, GLbyte) -> ()>(storage::MultiTexCoord3bOES.ptr)(texture, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3bvOES(texture: GLenum, coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLbyte) -> ()>(storage::MultiTexCoord3bvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord3d.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord3dARB.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3dv(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord3dv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3dvARB(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord3dvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord3f.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord3fARB.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3fv(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord3fv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3fvARB(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord3fvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::MultiTexCoord3hNV.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3hvNV(target: GLenum, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLhalfNV) -> ()>(storage::MultiTexCoord3hvNV.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint) -> ()>(storage::MultiTexCoord3i.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint) -> ()>(storage::MultiTexCoord3iARB.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3iv(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord3iv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3ivARB(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord3ivARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort) -> ()>(storage::MultiTexCoord3s.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort) -> ()>(storage::MultiTexCoord3sARB.ptr)(target, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3sv(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord3sv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3svARB(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord3svARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed, GLfixed, GLfixed) -> ()>(storage::MultiTexCoord3xOES.ptr)(texture, s, t, r) }
     #[inline] pub unsafe fn MultiTexCoord3xvOES(texture: GLenum, coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::MultiTexCoord3xvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLbyte, GLbyte, GLbyte, GLbyte) -> ()>(storage::MultiTexCoord4bOES.ptr)(texture, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4bvOES(texture: GLenum, coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLbyte) -> ()>(storage::MultiTexCoord4bvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord4d.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::MultiTexCoord4dARB.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4dv(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord4dv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4dvARB(target: GLenum, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::MultiTexCoord4dvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord4f.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::MultiTexCoord4fARB.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4fv(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord4fv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4fvARB(target: GLenum, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::MultiTexCoord4fvARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::MultiTexCoord4hNV.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4hvNV(target: GLenum, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLhalfNV) -> ()>(storage::MultiTexCoord4hvNV.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint) -> ()>(storage::MultiTexCoord4i.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint) -> ()>(storage::MultiTexCoord4iARB.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4iv(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord4iv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4ivARB(target: GLenum, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::MultiTexCoord4ivARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::MultiTexCoord4s.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::MultiTexCoord4sARB.ptr)(target, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4sv(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord4sv.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4svARB(target: GLenum, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::MultiTexCoord4svARB.ptr)(target, v) }
     #[inline] pub unsafe fn MultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::MultiTexCoord4xOES.ptr)(texture, s, t, r, q) }
     #[inline] pub unsafe fn MultiTexCoord4xvOES(texture: GLenum, coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::MultiTexCoord4xvOES.ptr)(texture, coords) }
     #[inline] pub unsafe fn MultiTexCoordPointerEXT(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::MultiTexCoordPointerEXT.ptr)(texunit, size, type_, stride, pointer) }
     #[inline] pub unsafe fn MultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLfloat) -> ()>(storage::MultiTexEnvfEXT.ptr)(texunit, target, pname, param) }
     #[inline] pub unsafe fn MultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLfloat) -> ()>(storage::MultiTexEnvfvEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLint) -> ()>(storage::MultiTexEnviEXT.ptr)(texunit, target, pname, param) }
     #[inline] pub unsafe fn MultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLint) -> ()>(storage::MultiTexEnvivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLdouble) -> ()>(storage::MultiTexGendEXT.ptr)(texunit, coord, pname, param) }
     #[inline] pub unsafe fn MultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLdouble) -> ()>(storage::MultiTexGendvEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn MultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLfloat) -> ()>(storage::MultiTexGenfEXT.ptr)(texunit, coord, pname, param) }
     #[inline] pub unsafe fn MultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLfloat) -> ()>(storage::MultiTexGenfvEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn MultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLint) -> ()>(storage::MultiTexGeniEXT.ptr)(texunit, coord, pname, param) }
     #[inline] pub unsafe fn MultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLint) -> ()>(storage::MultiTexGenivEXT.ptr)(texunit, coord, pname, params) }
     #[inline] pub unsafe fn MultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexImage1DEXT.ptr)(texunit, target, level, internalformat, width, border, format, type_, pixels) }
     #[inline] pub unsafe fn MultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexImage2DEXT.ptr)(texunit, target, level, internalformat, width, height, border, format, type_, pixels) }
     #[inline] pub unsafe fn MultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexImage3DEXT.ptr)(texunit, target, level, internalformat, width, height, depth, border, format, type_, pixels) }
     #[inline] pub unsafe fn MultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLint) -> ()>(storage::MultiTexParameterIivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLuint) -> ()>(storage::MultiTexParameterIuivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLfloat) -> ()>(storage::MultiTexParameterfEXT.ptr)(texunit, target, pname, param) }
     #[inline] pub unsafe fn MultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLfloat) -> ()>(storage::MultiTexParameterfvEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLint) -> ()>(storage::MultiTexParameteriEXT.ptr)(texunit, target, pname, param) }
     #[inline] pub unsafe fn MultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, *const GLint) -> ()>(storage::MultiTexParameterivEXT.ptr)(texunit, target, pname, params) }
     #[inline] pub unsafe fn MultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint) -> ()>(storage::MultiTexRenderbufferEXT.ptr)(texunit, target, renderbuffer) }
     #[inline] pub unsafe fn MultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexSubImage1DEXT.ptr)(texunit, target, level, xoffset, width, format, type_, pixels) }
     #[inline] pub unsafe fn MultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexSubImage2DEXT.ptr)(texunit, target, level, xoffset, yoffset, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn MultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::MultiTexSubImage3DEXT.ptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
     #[inline] pub unsafe fn MulticastBarrierNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::MulticastBarrierNV.ptr)() }
     #[inline] pub unsafe fn MulticastBlitFramebufferNV(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> ()>(storage::MulticastBlitFramebufferNV.ptr)(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
     #[inline] pub unsafe fn MulticastBufferSubDataNV(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLbitfield, GLuint, GLintptr, GLsizeiptr, *const std::os::raw::c_void) -> ()>(storage::MulticastBufferSubDataNV.ptr)(gpuMask, buffer, offset, size, data) }
     #[inline] pub unsafe fn MulticastCopyBufferSubDataNV(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) -> ()>(storage::MulticastCopyBufferSubDataNV.ptr)(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size) }
     #[inline] pub unsafe fn MulticastCopyImageSubDataNV(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> ()>(storage::MulticastCopyImageSubDataNV.ptr)(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) }
     #[inline] pub unsafe fn MulticastFramebufferSampleLocationsfvNV(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLsizei, *const GLfloat) -> ()>(storage::MulticastFramebufferSampleLocationsfvNV.ptr)(gpu, framebuffer, start, count, v) }
     #[inline] pub unsafe fn MulticastGetQueryObjecti64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: *mut GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint64) -> ()>(storage::MulticastGetQueryObjecti64vNV.ptr)(gpu, id, pname, params) }
     #[inline] pub unsafe fn MulticastGetQueryObjectivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLint) -> ()>(storage::MulticastGetQueryObjectivNV.ptr)(gpu, id, pname, params) }
     #[inline] pub unsafe fn MulticastGetQueryObjectui64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: *mut GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLuint64) -> ()>(storage::MulticastGetQueryObjectui64vNV.ptr)(gpu, id, pname, params) }
     #[inline] pub unsafe fn MulticastGetQueryObjectuivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *mut GLuint) -> ()>(storage::MulticastGetQueryObjectuivNV.ptr)(gpu, id, pname, params) }
     #[inline] pub unsafe fn MulticastScissorArrayvNVX(gpu: GLuint, first: GLuint, count: GLsizei, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLint) -> ()>(storage::MulticastScissorArrayvNVX.ptr)(gpu, first, count, v) }
     #[inline] pub unsafe fn MulticastViewportArrayvNVX(gpu: GLuint, first: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLfloat) -> ()>(storage::MulticastViewportArrayvNVX.ptr)(gpu, first, count, v) }
     #[inline] pub unsafe fn MulticastViewportPositionWScaleNVX(gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLfloat, GLfloat) -> ()>(storage::MulticastViewportPositionWScaleNVX.ptr)(gpu, index, xcoeff, ycoeff) }
     #[inline] pub unsafe fn MulticastWaitSyncNV(signalGpu: GLuint, waitGpuMask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield) -> ()>(storage::MulticastWaitSyncNV.ptr)(signalGpu, waitGpuMask) }
     #[inline] pub unsafe fn NamedBufferAttachMemoryNV(buffer: GLuint, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint64) -> ()>(storage::NamedBufferAttachMemoryNV.ptr)(buffer, memory, offset) }
     #[inline] pub unsafe fn NamedBufferData(buffer: GLuint, size: GLsizeiptr, data: *const std::os::raw::c_void, usage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizeiptr, *const std::os::raw::c_void, GLenum) -> ()>(storage::NamedBufferData.ptr)(buffer, size, data, usage) }
     #[inline] pub unsafe fn NamedBufferDataEXT(buffer: GLuint, size: GLsizeiptr, data: *const std::os::raw::c_void, usage: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizeiptr, *const std::os::raw::c_void, GLenum) -> ()>(storage::NamedBufferDataEXT.ptr)(buffer, size, data, usage) }
     #[inline] pub unsafe fn NamedBufferPageCommitmentARB(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, GLboolean) -> ()>(storage::NamedBufferPageCommitmentARB.ptr)(buffer, offset, size, commit) }
     #[inline] pub unsafe fn NamedBufferPageCommitmentEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, GLboolean) -> ()>(storage::NamedBufferPageCommitmentEXT.ptr)(buffer, offset, size, commit) }
     #[inline] pub unsafe fn NamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: *const std::os::raw::c_void, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizeiptr, *const std::os::raw::c_void, GLbitfield) -> ()>(storage::NamedBufferStorage.ptr)(buffer, size, data, flags) }
     #[inline] pub unsafe fn NamedBufferStorageEXT(buffer: GLuint, size: GLsizeiptr, data: *const std::os::raw::c_void, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizeiptr, *const std::os::raw::c_void, GLbitfield) -> ()>(storage::NamedBufferStorageEXT.ptr)(buffer, size, data, flags) }
     #[inline] pub unsafe fn NamedBufferStorageExternalEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) -> ()>(storage::NamedBufferStorageExternalEXT.ptr)(buffer, offset, size, clientBuffer, flags) }
     #[inline] pub unsafe fn NamedBufferStorageMemEXT(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizeiptr, GLuint, GLuint64) -> ()>(storage::NamedBufferStorageMemEXT.ptr)(buffer, size, memory, offset) }
     #[inline] pub unsafe fn NamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, *const std::os::raw::c_void) -> ()>(storage::NamedBufferSubData.ptr)(buffer, offset, size, data) }
     #[inline] pub unsafe fn NamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLintptr, GLsizeiptr, *const std::os::raw::c_void) -> ()>(storage::NamedBufferSubDataEXT.ptr)(buffer, offset, size, data) }
     #[inline] pub unsafe fn NamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) -> ()>(storage::NamedCopyBufferSubDataEXT.ptr)(readBuffer, writeBuffer, readOffset, writeOffset, size) }
     #[inline] pub unsafe fn NamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::NamedFramebufferDrawBuffer.ptr)(framebuffer, buf) }
     #[inline] pub unsafe fn NamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLenum) -> ()>(storage::NamedFramebufferDrawBuffers.ptr)(framebuffer, n, bufs) }
     #[inline] pub unsafe fn NamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::NamedFramebufferParameteri.ptr)(framebuffer, pname, param) }
     #[inline] pub unsafe fn NamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::NamedFramebufferParameteriEXT.ptr)(framebuffer, pname, param) }
     #[inline] pub unsafe fn NamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::NamedFramebufferReadBuffer.ptr)(framebuffer, src) }
     #[inline] pub unsafe fn NamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint) -> ()>(storage::NamedFramebufferRenderbuffer.ptr)(framebuffer, attachment, renderbuffertarget, renderbuffer) }
     #[inline] pub unsafe fn NamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint) -> ()>(storage::NamedFramebufferRenderbufferEXT.ptr)(framebuffer, attachment, renderbuffertarget, renderbuffer) }
     #[inline] pub unsafe fn NamedFramebufferSampleLocationsfvARB(framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLfloat) -> ()>(storage::NamedFramebufferSampleLocationsfvARB.ptr)(framebuffer, start, count, v) }
     #[inline] pub unsafe fn NamedFramebufferSampleLocationsfvNV(framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLfloat) -> ()>(storage::NamedFramebufferSampleLocationsfvNV.ptr)(framebuffer, start, count, v) }
     #[inline] pub unsafe fn NamedFramebufferSamplePositionsfvAMD(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, *const GLfloat) -> ()>(storage::NamedFramebufferSamplePositionsfvAMD.ptr)(framebuffer, numsamples, pixelindex, values) }
     #[inline] pub unsafe fn NamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint) -> ()>(storage::NamedFramebufferTexture.ptr)(framebuffer, attachment, texture, level) }
     #[inline] pub unsafe fn NamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint, GLint) -> ()>(storage::NamedFramebufferTexture1DEXT.ptr)(framebuffer, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn NamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint, GLint) -> ()>(storage::NamedFramebufferTexture2DEXT.ptr)(framebuffer, attachment, textarget, texture, level) }
     #[inline] pub unsafe fn NamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint, GLint, GLint) -> ()>(storage::NamedFramebufferTexture3DEXT.ptr)(framebuffer, attachment, textarget, texture, level, zoffset) }
     #[inline] pub unsafe fn NamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint) -> ()>(storage::NamedFramebufferTextureEXT.ptr)(framebuffer, attachment, texture, level) }
     #[inline] pub unsafe fn NamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint, GLenum) -> ()>(storage::NamedFramebufferTextureFaceEXT.ptr)(framebuffer, attachment, texture, level, face) }
     #[inline] pub unsafe fn NamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint, GLint) -> ()>(storage::NamedFramebufferTextureLayer.ptr)(framebuffer, attachment, texture, level, layer) }
     #[inline] pub unsafe fn NamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint, GLint) -> ()>(storage::NamedFramebufferTextureLayerEXT.ptr)(framebuffer, attachment, texture, level, layer) }
     #[inline] pub unsafe fn NamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::NamedProgramLocalParameter4dEXT.ptr)(program, target, index, x, y, z, w) }
     #[inline] pub unsafe fn NamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *const GLdouble) -> ()>(storage::NamedProgramLocalParameter4dvEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn NamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::NamedProgramLocalParameter4fEXT.ptr)(program, target, index, x, y, z, w) }
     #[inline] pub unsafe fn NamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *const GLfloat) -> ()>(storage::NamedProgramLocalParameter4fvEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn NamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::NamedProgramLocalParameterI4iEXT.ptr)(program, target, index, x, y, z, w) }
     #[inline] pub unsafe fn NamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *const GLint) -> ()>(storage::NamedProgramLocalParameterI4ivEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn NamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::NamedProgramLocalParameterI4uiEXT.ptr)(program, target, index, x, y, z, w) }
     #[inline] pub unsafe fn NamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *const GLuint) -> ()>(storage::NamedProgramLocalParameterI4uivEXT.ptr)(program, target, index, params) }
     #[inline] pub unsafe fn NamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::NamedProgramLocalParameters4fvEXT.ptr)(program, target, index, count, params) }
     #[inline] pub unsafe fn NamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *const GLint) -> ()>(storage::NamedProgramLocalParametersI4ivEXT.ptr)(program, target, index, count, params) }
     #[inline] pub unsafe fn NamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLsizei, *const GLuint) -> ()>(storage::NamedProgramLocalParametersI4uivEXT.ptr)(program, target, index, count, params) }
     #[inline] pub unsafe fn NamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::NamedProgramStringEXT.ptr)(program, target, format, len, string) }
     #[inline] pub unsafe fn NamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorage.ptr)(renderbuffer, internalformat, width, height) }
     #[inline] pub unsafe fn NamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorageEXT.ptr)(renderbuffer, internalformat, width, height) }
     #[inline] pub unsafe fn NamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorageMultisample.ptr)(renderbuffer, samples, internalformat, width, height) }
     #[inline] pub unsafe fn NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorageMultisampleAdvancedAMD.ptr)(renderbuffer, samples, storageSamples, internalformat, width, height) }
     #[inline] pub unsafe fn NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorageMultisampleCoverageEXT.ptr)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) }
     #[inline] pub unsafe fn NamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::NamedRenderbufferStorageMultisampleEXT.ptr)(renderbuffer, samples, internalformat, width, height) }
     #[inline] pub unsafe fn NamedStringARB(type_: GLenum, namelen: GLint, name: *const GLchar, stringlen: GLint, string: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const GLchar, GLint, *const GLchar) -> ()>(storage::NamedStringARB.ptr)(type_, namelen, name, stringlen, string) }
     #[inline] pub unsafe fn NewObjectBufferATI(size: GLsizei, pointer: *const std::os::raw::c_void, usage: GLenum) -> GLuint { mem::transmute::<_, extern "system" fn(GLsizei, *const std::os::raw::c_void, GLenum) -> GLuint>(storage::NewObjectBufferATI.ptr)(size, pointer, usage) }
     #[inline] pub unsafe fn Normal3fVertex3fSUN(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::Normal3fVertex3fSUN.ptr)(nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn Normal3fVertex3fvSUN(n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat) -> ()>(storage::Normal3fVertex3fvSUN.ptr)(n, v) }
     #[inline] pub unsafe fn Normal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::Normal3hNV.ptr)(nx, ny, nz) }
     #[inline] pub unsafe fn Normal3hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Normal3hvNV.ptr)(v) }
     #[inline] pub unsafe fn Normal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::Normal3xOES.ptr)(nx, ny, nz) }
     #[inline] pub unsafe fn Normal3xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Normal3xvOES.ptr)(coords) }
     #[inline] pub unsafe fn NormalFormatNV(type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei) -> ()>(storage::NormalFormatNV.ptr)(type_, stride) }
     #[inline] pub unsafe fn NormalPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, *const std::os::raw::c_void) -> ()>(storage::NormalPointerEXT.ptr)(type_, stride, count, pointer) }
     #[inline] pub unsafe fn NormalPointerListIBM(type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::NormalPointerListIBM.ptr)(type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn NormalPointervINTEL(type_: GLenum, pointer: *const *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const *const std::os::raw::c_void) -> ()>(storage::NormalPointervINTEL.ptr)(type_, pointer) }
     #[inline] pub unsafe fn NormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLbyte, GLbyte, GLbyte) -> ()>(storage::NormalStream3bATI.ptr)(stream, nx, ny, nz) }
     #[inline] pub unsafe fn NormalStream3bvATI(stream: GLenum, coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLbyte) -> ()>(storage::NormalStream3bvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn NormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::NormalStream3dATI.ptr)(stream, nx, ny, nz) }
     #[inline] pub unsafe fn NormalStream3dvATI(stream: GLenum, coords: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::NormalStream3dvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn NormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::NormalStream3fATI.ptr)(stream, nx, ny, nz) }
     #[inline] pub unsafe fn NormalStream3fvATI(stream: GLenum, coords: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::NormalStream3fvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn NormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint) -> ()>(storage::NormalStream3iATI.ptr)(stream, nx, ny, nz) }
     #[inline] pub unsafe fn NormalStream3ivATI(stream: GLenum, coords: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::NormalStream3ivATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn NormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort) -> ()>(storage::NormalStream3sATI.ptr)(stream, nx, ny, nz) }
     #[inline] pub unsafe fn NormalStream3svATI(stream: GLenum, coords: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::NormalStream3svATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn ObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLchar) -> ()>(storage::ObjectLabel.ptr)(identifier, name, length, label) }
     #[inline] pub unsafe fn ObjectPtrLabel(ptr: *const std::os::raw::c_void, length: GLsizei, label: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, GLsizei, *const GLchar) -> ()>(storage::ObjectPtrLabel.ptr)(ptr, length, label) }
     #[inline] pub unsafe fn ObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum) -> GLenum>(storage::ObjectPurgeableAPPLE.ptr)(objectType, name, option) }
     #[inline] pub unsafe fn ObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum) -> GLenum>(storage::ObjectUnpurgeableAPPLE.ptr)(objectType, name, option) }
     #[inline] pub unsafe fn OrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::OrthofOES.ptr)(l, r, b, t, n, f) }
     #[inline] pub unsafe fn OrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::OrthoxOES.ptr)(l, r, b, t, n, f) }
     #[inline] pub unsafe fn PNTrianglesfATI(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PNTrianglesfATI.ptr)(pname, param) }
     #[inline] pub unsafe fn PNTrianglesiATI(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PNTrianglesiATI.ptr)(pname, param) }
     #[inline] pub unsafe fn PassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum) -> ()>(storage::PassTexCoordATI.ptr)(dst, coord, swizzle) }
     #[inline] pub unsafe fn PassThroughxOES(token: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::PassThroughxOES.ptr)(token) }
     #[inline] pub unsafe fn PatchParameterfv(pname: GLenum, values: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PatchParameterfv.ptr)(pname, values) }
     #[inline] pub unsafe fn PatchParameteri(pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PatchParameteri.ptr)(pname, value) }
     #[inline] pub unsafe fn PathCommandsNV(path: GLuint, numCommands: GLsizei, commands: *const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::PathCommandsNV.ptr)(path, numCommands, commands, numCoords, coordType, coords) }
     #[inline] pub unsafe fn PathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::PathCoordsNV.ptr)(path, numCoords, coordType, coords) }
     #[inline] pub unsafe fn PathCoverDepthFuncNV(func: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::PathCoverDepthFuncNV.ptr)(func) }
     #[inline] pub unsafe fn PathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::PathDashArrayNV.ptr)(path, dashCount, dashArray) }
     #[inline] pub unsafe fn PathGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *const std::os::raw::c_void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) -> GLenum>(storage::PathGlyphIndexArrayNV.ptr)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) }
     #[inline] pub unsafe fn PathGlyphIndexRangeNV(fontTarget: GLenum, fontName: *const std::os::raw::c_void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: [GLuint;2]) -> GLenum { mem::transmute::<_, extern "system" fn(GLenum, *const std::os::raw::c_void, GLbitfield, GLuint, GLfloat, [GLuint;2]) -> GLenum>(storage::PathGlyphIndexRangeNV.ptr)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) }
     #[inline] pub unsafe fn PathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *const std::os::raw::c_void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) -> ()>(storage::PathGlyphRangeNV.ptr)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) }
     #[inline] pub unsafe fn PathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *const std::os::raw::c_void, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *const std::os::raw::c_void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void, GLbitfield, GLsizei, GLenum, *const std::os::raw::c_void, GLenum, GLuint, GLfloat) -> ()>(storage::PathGlyphsNV.ptr)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type_, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) }
     #[inline] pub unsafe fn PathMemoryGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *const std::os::raw::c_void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizeiptr, *const std::os::raw::c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) -> GLenum>(storage::PathMemoryGlyphIndexArrayNV.ptr)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) }
     #[inline] pub unsafe fn PathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLfloat) -> ()>(storage::PathParameterfNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn PathParameterfvNV(path: GLuint, pname: GLenum, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLfloat) -> ()>(storage::PathParameterfvNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn PathParameteriNV(path: GLuint, pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::PathParameteriNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn PathParameterivNV(path: GLuint, pname: GLenum, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::PathParameterivNV.ptr)(path, pname, value) }
     #[inline] pub unsafe fn PathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::PathStencilDepthOffsetNV.ptr)(factor, units) }
     #[inline] pub unsafe fn PathStencilFuncNV(func: GLenum, ref_: GLint, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLuint) -> ()>(storage::PathStencilFuncNV.ptr)(func, ref_, mask) }
     #[inline] pub unsafe fn PathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::PathStringNV.ptr)(path, format, length, pathString) }
     #[inline] pub unsafe fn PathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei, GLsizei, *const GLubyte, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::PathSubCommandsNV.ptr)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) }
     #[inline] pub unsafe fn PathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei, GLenum, *const std::os::raw::c_void) -> ()>(storage::PathSubCoordsNV.ptr)(path, coordStart, numCoords, coordType, coords) }
     #[inline] pub unsafe fn PauseTransformFeedback() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::PauseTransformFeedback.ptr)() }
     #[inline] pub unsafe fn PauseTransformFeedbackNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::PauseTransformFeedbackNV.ptr)() }
     #[inline] pub unsafe fn PixelDataRangeNV(target: GLenum, length: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::PixelDataRangeNV.ptr)(target, length, pointer) }
     #[inline] pub unsafe fn PixelMapx(map: GLenum, size: GLint, values: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, *const GLfixed) -> ()>(storage::PixelMapx.ptr)(map, size, values) }
     #[inline] pub unsafe fn PixelStoref(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PixelStoref.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelStorei(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PixelStorei.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelStorex(pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::PixelStorex.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PixelTexGenParameterfSGIS.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelTexGenParameterfvSGIS(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PixelTexGenParameterfvSGIS.ptr)(pname, params) }
     #[inline] pub unsafe fn PixelTexGenParameteriSGIS(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PixelTexGenParameteriSGIS.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelTexGenParameterivSGIS(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::PixelTexGenParameterivSGIS.ptr)(pname, params) }
     #[inline] pub unsafe fn PixelTexGenSGIX(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::PixelTexGenSGIX.ptr)(mode) }
     #[inline] pub unsafe fn PixelTransferxOES(pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfixed) -> ()>(storage::PixelTransferxOES.ptr)(pname, param) }
     #[inline] pub unsafe fn PixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::PixelTransformParameterfEXT.ptr)(target, pname, param) }
     #[inline] pub unsafe fn PixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::PixelTransformParameterfvEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn PixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::PixelTransformParameteriEXT.ptr)(target, pname, param) }
     #[inline] pub unsafe fn PixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::PixelTransformParameterivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn PixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::PixelZoomxOES.ptr)(xfactor, yfactor) }
     #[inline] pub unsafe fn PointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *mut GLfloat, y: *mut GLfloat, tangentX: *mut GLfloat, tangentY: *mut GLfloat) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLsizei, GLfloat, *mut GLfloat, *mut GLfloat, *mut GLfloat, *mut GLfloat) -> GLboolean>(storage::PointAlongPathNV.ptr)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) }
     #[inline] pub unsafe fn PointParameterf(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PointParameterf.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameterfARB(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PointParameterfARB.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameterfEXT(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PointParameterfEXT.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameterfSGIS(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::PointParameterfSGIS.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameterfv(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PointParameterfv.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameterfvARB(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PointParameterfvARB.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameterfvEXT(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PointParameterfvEXT.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameterfvSGIS(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::PointParameterfvSGIS.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameteri(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PointParameteri.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameteriNV(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::PointParameteriNV.ptr)(pname, param) }
     #[inline] pub unsafe fn PointParameteriv(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::PointParameteriv.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameterivNV(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::PointParameterivNV.ptr)(pname, params) }
     #[inline] pub unsafe fn PointParameterxvOES(pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfixed) -> ()>(storage::PointParameterxvOES.ptr)(pname, params) }
     #[inline] pub unsafe fn PointSize(size: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::PointSize.ptr)(size) }
     #[inline] pub unsafe fn PointSizexOES(size: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::PointSizexOES.ptr)(size) }
     #[inline] pub unsafe fn PollAsyncSGIX(markerp: *mut GLuint) -> GLint { mem::transmute::<_, extern "system" fn(*mut GLuint) -> GLint>(storage::PollAsyncSGIX.ptr)(markerp) }
     #[inline] pub unsafe fn PollInstrumentsSGIX(marker_p: *mut GLint) -> GLint { mem::transmute::<_, extern "system" fn(*mut GLint) -> GLint>(storage::PollInstrumentsSGIX.ptr)(marker_p) }
     #[inline] pub unsafe fn PolygonMode(face: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::PolygonMode.ptr)(face, mode) }
     #[inline] pub unsafe fn PolygonOffset(factor: GLfloat, units: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::PolygonOffset.ptr)(factor, units) }
     #[inline] pub unsafe fn PolygonOffsetClamp(factor: GLfloat, units: GLfloat, clamp: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::PolygonOffsetClamp.ptr)(factor, units, clamp) }
     #[inline] pub unsafe fn PolygonOffsetClampEXT(factor: GLfloat, units: GLfloat, clamp: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::PolygonOffsetClampEXT.ptr)(factor, units, clamp) }
     #[inline] pub unsafe fn PolygonOffsetEXT(factor: GLfloat, bias: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::PolygonOffsetEXT.ptr)(factor, bias) }
     #[inline] pub unsafe fn PolygonOffsetxOES(factor: GLfixed, units: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::PolygonOffsetxOES.ptr)(factor, units) }
     #[inline] pub unsafe fn PopDebugGroup() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::PopDebugGroup.ptr)() }
     #[inline] pub unsafe fn PopGroupMarkerEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::PopGroupMarkerEXT.ptr)() }
     #[inline] pub unsafe fn PresentFrameDualFillNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) -> ()>(storage::PresentFrameDualFillNV.ptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, target1, fill1, target2, fill2, target3, fill3) }
     #[inline] pub unsafe fn PresentFrameKeyedNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) -> ()>(storage::PresentFrameKeyedNV.ptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, key0, target1, fill1, key1) }
     #[inline] pub unsafe fn PrimitiveBoundingBox(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::PrimitiveBoundingBox.ptr)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) }
     #[inline] pub unsafe fn PrimitiveBoundingBoxARB(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::PrimitiveBoundingBoxARB.ptr)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) }
     #[inline] pub unsafe fn PrimitiveRestartIndex(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::PrimitiveRestartIndex.ptr)(index) }
     #[inline] pub unsafe fn PrimitiveRestartIndexNV(index: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::PrimitiveRestartIndexNV.ptr)(index) }
     #[inline] pub unsafe fn PrimitiveRestartNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::PrimitiveRestartNV.ptr)() }
     #[inline] pub unsafe fn PrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLfloat) -> ()>(storage::PrioritizeTextures.ptr)(n, textures, priorities) }
     #[inline] pub unsafe fn PrioritizeTexturesEXT(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLclampf) -> ()>(storage::PrioritizeTexturesEXT.ptr)(n, textures, priorities) }
     #[inline] pub unsafe fn PrioritizeTexturesxOES(n: GLsizei, textures: *const GLuint, priorities: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, *const GLfixed) -> ()>(storage::PrioritizeTexturesxOES.ptr)(n, textures, priorities) }
     #[inline] pub unsafe fn ProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *const std::os::raw::c_void, length: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void, GLsizei) -> ()>(storage::ProgramBinary.ptr)(program, binaryFormat, binary, length) }
     #[inline] pub unsafe fn ProgramBufferParametersIivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, *const GLint) -> ()>(storage::ProgramBufferParametersIivNV.ptr)(target, bindingIndex, wordIndex, count, params) }
     #[inline] pub unsafe fn ProgramBufferParametersIuivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, *const GLuint) -> ()>(storage::ProgramBufferParametersIuivNV.ptr)(target, bindingIndex, wordIndex, count, params) }
     #[inline] pub unsafe fn ProgramBufferParametersfvNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLsizei, *const GLfloat) -> ()>(storage::ProgramBufferParametersfvNV.ptr)(target, bindingIndex, wordIndex, count, params) }
     #[inline] pub unsafe fn ProgramEnvParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramEnvParameter4dARB.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLdouble) -> ()>(storage::ProgramEnvParameter4dvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramEnvParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramEnvParameter4fARB.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLfloat) -> ()>(storage::ProgramEnvParameter4fvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramEnvParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramEnvParameterI4iNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLint) -> ()>(storage::ProgramEnvParameterI4ivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramEnvParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramEnvParameterI4uiNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLuint) -> ()>(storage::ProgramEnvParameterI4uivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramEnvParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::ProgramEnvParameters4fvEXT.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramEnvParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLint) -> ()>(storage::ProgramEnvParametersI4ivNV.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramEnvParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLuint) -> ()>(storage::ProgramEnvParametersI4uivNV.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramLocalParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramLocalParameter4dARB.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLdouble) -> ()>(storage::ProgramLocalParameter4dvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramLocalParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramLocalParameter4fARB.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLfloat) -> ()>(storage::ProgramLocalParameter4fvARB.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramLocalParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramLocalParameterI4iNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLint) -> ()>(storage::ProgramLocalParameterI4ivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramLocalParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramLocalParameterI4uiNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLuint) -> ()>(storage::ProgramLocalParameterI4uivNV.ptr)(target, index, params) }
     #[inline] pub unsafe fn ProgramLocalParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::ProgramLocalParameters4fvEXT.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramLocalParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLint) -> ()>(storage::ProgramLocalParametersI4ivNV.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramLocalParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLuint) -> ()>(storage::ProgramLocalParametersI4uivNV.ptr)(target, index, count, params) }
     #[inline] pub unsafe fn ProgramNamedParameter4dNV(id: GLuint, len: GLsizei, name: *const GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramNamedParameter4dNV.ptr)(id, len, name, x, y, z, w) }
     #[inline] pub unsafe fn ProgramNamedParameter4dvNV(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, *const GLdouble) -> ()>(storage::ProgramNamedParameter4dvNV.ptr)(id, len, name, v) }
     #[inline] pub unsafe fn ProgramNamedParameter4fNV(id: GLuint, len: GLsizei, name: *const GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramNamedParameter4fNV.ptr)(id, len, name, x, y, z, w) }
     #[inline] pub unsafe fn ProgramNamedParameter4fvNV(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte, *const GLfloat) -> ()>(storage::ProgramNamedParameter4fvNV.ptr)(id, len, name, v) }
     #[inline] pub unsafe fn ProgramParameter4dNV(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramParameter4dNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramParameter4dvNV(target: GLenum, index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLdouble) -> ()>(storage::ProgramParameter4dvNV.ptr)(target, index, v) }
     #[inline] pub unsafe fn ProgramParameter4fNV(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramParameter4fNV.ptr)(target, index, x, y, z, w) }
     #[inline] pub unsafe fn ProgramParameter4fvNV(target: GLenum, index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLfloat) -> ()>(storage::ProgramParameter4fvNV.ptr)(target, index, v) }
     #[inline] pub unsafe fn ProgramParameteri(program: GLuint, pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::ProgramParameteri.ptr)(program, pname, value) }
     #[inline] pub unsafe fn ProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::ProgramParameteriARB.ptr)(program, pname, value) }
     #[inline] pub unsafe fn ProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::ProgramParameteriEXT.ptr)(program, pname, value) }
     #[inline] pub unsafe fn ProgramParameters4dvNV(target: GLenum, index: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLdouble) -> ()>(storage::ProgramParameters4dvNV.ptr)(target, index, count, v) }
     #[inline] pub unsafe fn ProgramParameters4fvNV(target: GLenum, index: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLfloat) -> ()>(storage::ProgramParameters4fvNV.ptr)(target, index, count, v) }
     #[inline] pub unsafe fn ProgramPathFragmentInputGenNV(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLint, *const GLfloat) -> ()>(storage::ProgramPathFragmentInputGenNV.ptr)(program, location, genMode, components, coeffs) }
     #[inline] pub unsafe fn ProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::ProgramStringARB.ptr)(target, format, len, string) }
     #[inline] pub unsafe fn ProgramSubroutineParametersuivNV(target: GLenum, count: GLsizei, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLuint) -> ()>(storage::ProgramSubroutineParametersuivNV.ptr)(target, count, params) }
     #[inline] pub unsafe fn ProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble) -> ()>(storage::ProgramUniform1d.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble) -> ()>(storage::ProgramUniform1dEXT.ptr)(program, location, x) }
     #[inline] pub unsafe fn ProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform1dv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform1dvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat) -> ()>(storage::ProgramUniform1f.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat) -> ()>(storage::ProgramUniform1fEXT.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform1fv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform1fvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1i(program: GLuint, location: GLint, v0: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint) -> ()>(storage::ProgramUniform1i.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1i64ARB(program: GLuint, location: GLint, x: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64) -> ()>(storage::ProgramUniform1i64ARB.ptr)(program, location, x) }
     #[inline] pub unsafe fn ProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64EXT) -> ()>(storage::ProgramUniform1i64NV.ptr)(program, location, x) }
     #[inline] pub unsafe fn ProgramUniform1i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64) -> ()>(storage::ProgramUniform1i64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64EXT) -> ()>(storage::ProgramUniform1i64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint) -> ()>(storage::ProgramUniform1iEXT.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform1iv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform1ivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint) -> ()>(storage::ProgramUniform1ui.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1ui64ARB(program: GLuint, location: GLint, x: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64) -> ()>(storage::ProgramUniform1ui64ARB.ptr)(program, location, x) }
     #[inline] pub unsafe fn ProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64EXT) -> ()>(storage::ProgramUniform1ui64NV.ptr)(program, location, x) }
     #[inline] pub unsafe fn ProgramUniform1ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniform1ui64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::ProgramUniform1ui64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint) -> ()>(storage::ProgramUniform1uiEXT.ptr)(program, location, v0) }
     #[inline] pub unsafe fn ProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform1uiv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform1uivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble) -> ()>(storage::ProgramUniform2d.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble) -> ()>(storage::ProgramUniform2dEXT.ptr)(program, location, x, y) }
     #[inline] pub unsafe fn ProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform2dv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform2dvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat) -> ()>(storage::ProgramUniform2f.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat) -> ()>(storage::ProgramUniform2fEXT.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform2fv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform2fvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform2i.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64, GLint64) -> ()>(storage::ProgramUniform2i64ARB.ptr)(program, location, x, y) }
     #[inline] pub unsafe fn ProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64EXT, GLint64EXT) -> ()>(storage::ProgramUniform2i64NV.ptr)(program, location, x, y) }
     #[inline] pub unsafe fn ProgramUniform2i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64) -> ()>(storage::ProgramUniform2i64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64EXT) -> ()>(storage::ProgramUniform2i64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform2iEXT.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform2iv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform2ivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint) -> ()>(storage::ProgramUniform2ui.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64, GLuint64) -> ()>(storage::ProgramUniform2ui64ARB.ptr)(program, location, x, y) }
     #[inline] pub unsafe fn ProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64EXT, GLuint64EXT) -> ()>(storage::ProgramUniform2ui64NV.ptr)(program, location, x, y) }
     #[inline] pub unsafe fn ProgramUniform2ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniform2ui64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::ProgramUniform2ui64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint) -> ()>(storage::ProgramUniform2uiEXT.ptr)(program, location, v0, v1) }
     #[inline] pub unsafe fn ProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform2uiv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform2uivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramUniform3d.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramUniform3dEXT.ptr)(program, location, x, y, z) }
     #[inline] pub unsafe fn ProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform3dv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform3dvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramUniform3f.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramUniform3fEXT.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform3fv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform3fvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform3i.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64, GLint64, GLint64) -> ()>(storage::ProgramUniform3i64ARB.ptr)(program, location, x, y, z) }
     #[inline] pub unsafe fn ProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::ProgramUniform3i64NV.ptr)(program, location, x, y, z) }
     #[inline] pub unsafe fn ProgramUniform3i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64) -> ()>(storage::ProgramUniform3i64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64EXT) -> ()>(storage::ProgramUniform3i64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform3iEXT.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform3iv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform3ivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramUniform3ui.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64, GLuint64, GLuint64) -> ()>(storage::ProgramUniform3ui64ARB.ptr)(program, location, x, y, z) }
     #[inline] pub unsafe fn ProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::ProgramUniform3ui64NV.ptr)(program, location, x, y, z) }
     #[inline] pub unsafe fn ProgramUniform3ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniform3ui64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::ProgramUniform3ui64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramUniform3uiEXT.ptr)(program, location, v0, v1, v2) }
     #[inline] pub unsafe fn ProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform3uiv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform3uivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramUniform4d.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::ProgramUniform4dEXT.ptr)(program, location, x, y, z, w) }
     #[inline] pub unsafe fn ProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform4dv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLdouble) -> ()>(storage::ProgramUniform4dvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramUniform4f.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ProgramUniform4fEXT.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform4fv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLfloat) -> ()>(storage::ProgramUniform4fvEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform4i.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64, GLint64, GLint64, GLint64) -> ()>(storage::ProgramUniform4i64ARB.ptr)(program, location, x, y, z, w) }
     #[inline] pub unsafe fn ProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::ProgramUniform4i64NV.ptr)(program, location, x, y, z, w) }
     #[inline] pub unsafe fn ProgramUniform4i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64) -> ()>(storage::ProgramUniform4i64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint64EXT) -> ()>(storage::ProgramUniform4i64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLint) -> ()>(storage::ProgramUniform4iEXT.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform4iv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLint) -> ()>(storage::ProgramUniform4ivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramUniform4ui.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) -> ()>(storage::ProgramUniform4ui64ARB.ptr)(program, location, x, y, z, w) }
     #[inline] pub unsafe fn ProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::ProgramUniform4ui64NV.ptr)(program, location, x, y, z, w) }
     #[inline] pub unsafe fn ProgramUniform4ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniform4ui64vARB.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::ProgramUniform4ui64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ProgramUniform4uiEXT.ptr)(program, location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn ProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform4uiv.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint) -> ()>(storage::ProgramUniform4uivEXT.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64) -> ()>(storage::ProgramUniformHandleui64ARB.ptr)(program, location, value) }
     #[inline] pub unsafe fn ProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64) -> ()>(storage::ProgramUniformHandleui64NV.ptr)(program, location, value) }
     #[inline] pub unsafe fn ProgramUniformHandleui64vARB(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniformHandleui64vARB.ptr)(program, location, count, values) }
     #[inline] pub unsafe fn ProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64) -> ()>(storage::ProgramUniformHandleui64vNV.ptr)(program, location, count, values) }
     #[inline] pub unsafe fn ProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2x3dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2x3dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2x3fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2x3fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2x4dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix2x4dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2x4fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix2x4fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3x2dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3x2dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3x2fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3x2fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3x4dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix3x4dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3x4fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix3x4fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4x2dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4x2dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4x2fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4x2fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4x3dv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::ProgramUniformMatrix4x3dvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4x3fv.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::ProgramUniformMatrix4x3fvEXT.ptr)(program, location, count, transpose, value) }
     #[inline] pub unsafe fn ProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint64EXT) -> ()>(storage::ProgramUniformui64NV.ptr)(program, location, value) }
     #[inline] pub unsafe fn ProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::ProgramUniformui64vNV.ptr)(program, location, count, value) }
     #[inline] pub unsafe fn ProgramVertexLimitNV(target: GLenum, limit: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::ProgramVertexLimitNV.ptr)(target, limit) }
     #[inline] pub unsafe fn ProvokingVertex(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ProvokingVertex.ptr)(mode) }
     #[inline] pub unsafe fn ProvokingVertexEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ProvokingVertexEXT.ptr)(mode) }
     #[inline] pub unsafe fn PushClientAttribDefaultEXT(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::PushClientAttribDefaultEXT.ptr)(mask) }
     #[inline] pub unsafe fn PushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLsizei, *const GLchar) -> ()>(storage::PushDebugGroup.ptr)(source, id, length, message) }
     #[inline] pub unsafe fn PushGroupMarkerEXT(length: GLsizei, marker: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLchar) -> ()>(storage::PushGroupMarkerEXT.ptr)(length, marker) }
     #[inline] pub unsafe fn QueryCounter(id: GLuint, target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::QueryCounter.ptr)(id, target) }
     #[inline] pub unsafe fn QueryMatrixxOES(mantissa: *mut GLfixed, exponent: *mut GLint) -> GLbitfield { mem::transmute::<_, extern "system" fn(*mut GLfixed, *mut GLint) -> GLbitfield>(storage::QueryMatrixxOES.ptr)(mantissa, exponent) }
     #[inline] pub unsafe fn QueryObjectParameteruiAMD(target: GLenum, id: GLuint, pname: GLenum, param: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, GLuint) -> ()>(storage::QueryObjectParameteruiAMD.ptr)(target, id, pname, param) }
     #[inline] pub unsafe fn QueryResourceNV(queryType: GLenum, tagId: GLint, bufSize: GLuint, buffer: *mut GLint) -> GLint { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLuint, *mut GLint) -> GLint>(storage::QueryResourceNV.ptr)(queryType, tagId, bufSize, buffer) }
     #[inline] pub unsafe fn QueryResourceTagNV(tagId: GLint, tagString: *const GLchar) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLchar) -> ()>(storage::QueryResourceTagNV.ptr)(tagId, tagString) }
     #[inline] pub unsafe fn RasterPos2xOES(x: GLfixed, y: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::RasterPos2xOES.ptr)(x, y) }
     #[inline] pub unsafe fn RasterPos2xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::RasterPos2xvOES.ptr)(coords) }
     #[inline] pub unsafe fn RasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::RasterPos3xOES.ptr)(x, y, z) }
     #[inline] pub unsafe fn RasterPos3xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::RasterPos3xvOES.ptr)(coords) }
     #[inline] pub unsafe fn RasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::RasterPos4xOES.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn RasterPos4xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::RasterPos4xvOES.ptr)(coords) }
     #[inline] pub unsafe fn RasterSamplesEXT(samples: GLuint, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLboolean) -> ()>(storage::RasterSamplesEXT.ptr)(samples, fixedsamplelocations) }
     #[inline] pub unsafe fn ReadBuffer(src: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ReadBuffer.ptr)(src) }
     #[inline] pub unsafe fn ReadInstrumentsSGIX(marker: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::ReadInstrumentsSGIX.ptr)(marker) }
     #[inline] pub unsafe fn ReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *mut std::os::raw::c_void) -> ()>(storage::ReadPixels.ptr)(x, y, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn ReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::ReadnPixels.ptr)(x, y, width, height, format, type_, bufSize, data) }
     #[inline] pub unsafe fn ReadnPixelsARB(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, *mut std::os::raw::c_void) -> ()>(storage::ReadnPixelsARB.ptr)(x, y, width, height, format, type_, bufSize, data) }
     #[inline] pub unsafe fn RectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::RectxOES.ptr)(x1, y1, x2, y2) }
     #[inline] pub unsafe fn RectxvOES(v1: *const GLfixed, v2: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed, *const GLfixed) -> ()>(storage::RectxvOES.ptr)(v1, v2) }
     #[inline] pub unsafe fn ReferencePlaneSGIX(equation: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::ReferencePlaneSGIX.ptr)(equation) }
     #[inline] pub unsafe fn ReleaseKeyedMutexWin32EXT(memory: GLuint, key: GLuint64) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint, GLuint64) -> GLboolean>(storage::ReleaseKeyedMutexWin32EXT.ptr)(memory, key) }
     #[inline] pub unsafe fn ReleaseShaderCompiler() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ReleaseShaderCompiler.ptr)() }
     #[inline] pub unsafe fn RenderGpuMaskNV(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::RenderGpuMaskNV.ptr)(mask) }
     #[inline] pub unsafe fn RenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorage.ptr)(target, internalformat, width, height) }
     #[inline] pub unsafe fn RenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorageEXT.ptr)(target, internalformat, width, height) }
     #[inline] pub unsafe fn RenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorageMultisample.ptr)(target, samples, internalformat, width, height) }
     #[inline] pub unsafe fn RenderbufferStorageMultisampleAdvancedAMD(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorageMultisampleAdvancedAMD.ptr)(target, samples, storageSamples, internalformat, width, height) }
     #[inline] pub unsafe fn RenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorageMultisampleCoverageNV.ptr)(target, coverageSamples, colorSamples, internalformat, width, height) }
     #[inline] pub unsafe fn RenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::RenderbufferStorageMultisampleEXT.ptr)(target, samples, internalformat, width, height) }
     #[inline] pub unsafe fn ReplacementCodePointerSUN(type_: GLenum, stride: GLsizei, pointer: *const *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const *const std::os::raw::c_void) -> ()>(storage::ReplacementCodePointerSUN.ptr)(type_, stride, pointer) }
     #[inline] pub unsafe fn ReplacementCodeubSUN(code: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLubyte) -> ()>(storage::ReplacementCodeubSUN.ptr)(code) }
     #[inline] pub unsafe fn ReplacementCodeubvSUN(code: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(*const GLubyte) -> ()>(storage::ReplacementCodeubvSUN.ptr)(code) }
     #[inline] pub unsafe fn ReplacementCodeuiColor3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiColor3fVertex3fSUN.ptr)(rc, r, g, b, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiColor3fVertex3fvSUN(rc: *const GLuint, c: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiColor3fVertex3fvSUN.ptr)(rc, c, v) }
     #[inline] pub unsafe fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.ptr)(rc, r, g, b, a, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: *const GLuint, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.ptr)(rc, c, n, v) }
     #[inline] pub unsafe fn ReplacementCodeuiColor4ubVertex3fSUN(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiColor4ubVertex3fSUN.ptr)(rc, r, g, b, a, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiColor4ubVertex3fvSUN(rc: *const GLuint, c: *const GLubyte, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLubyte, *const GLfloat) -> ()>(storage::ReplacementCodeuiColor4ubVertex3fvSUN.ptr)(rc, c, v) }
     #[inline] pub unsafe fn ReplacementCodeuiNormal3fVertex3fSUN(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiNormal3fVertex3fSUN.ptr)(rc, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiNormal3fVertex3fvSUN(rc: *const GLuint, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiNormal3fVertex3fvSUN.ptr)(rc, n, v) }
     #[inline] pub unsafe fn ReplacementCodeuiSUN(code: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::ReplacementCodeuiSUN.ptr)(code) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.ptr)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: *const GLuint, tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.ptr)(rc, tc, c, n, v) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.ptr)(rc, s, t, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: *const GLuint, tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.ptr)(rc, tc, n, v) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fVertex3fSUN.ptr)(rc, s, t, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fVertex3fvSUN(rc: *const GLuint, tc: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat, *const GLfloat) -> ()>(storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.ptr)(rc, tc, v) }
     #[inline] pub unsafe fn ReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat) -> ()>(storage::ReplacementCodeuiVertex3fSUN.ptr)(rc, x, y, z) }
     #[inline] pub unsafe fn ReplacementCodeuiVertex3fvSUN(rc: *const GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLuint, *const GLfloat) -> ()>(storage::ReplacementCodeuiVertex3fvSUN.ptr)(rc, v) }
     #[inline] pub unsafe fn ReplacementCodeuivSUN(code: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(*const GLuint) -> ()>(storage::ReplacementCodeuivSUN.ptr)(code) }
     #[inline] pub unsafe fn ReplacementCodeusSUN(code: GLushort) -> () { mem::transmute::<_, extern "system" fn(GLushort) -> ()>(storage::ReplacementCodeusSUN.ptr)(code) }
     #[inline] pub unsafe fn ReplacementCodeusvSUN(code: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(*const GLushort) -> ()>(storage::ReplacementCodeusvSUN.ptr)(code) }
     #[inline] pub unsafe fn RequestResidentProgramsNV(n: GLsizei, programs: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint) -> ()>(storage::RequestResidentProgramsNV.ptr)(n, programs) }
     #[inline] pub unsafe fn ResetHistogram(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ResetHistogram.ptr)(target) }
     #[inline] pub unsafe fn ResetHistogramEXT(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ResetHistogramEXT.ptr)(target) }
     #[inline] pub unsafe fn ResetMemoryObjectParameterNV(memory: GLuint, pname: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::ResetMemoryObjectParameterNV.ptr)(memory, pname) }
     #[inline] pub unsafe fn ResetMinmax(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ResetMinmax.ptr)(target) }
     #[inline] pub unsafe fn ResetMinmaxEXT(target: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ResetMinmaxEXT.ptr)(target) }
     #[inline] pub unsafe fn ResizeBuffersMESA() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ResizeBuffersMESA.ptr)() }
     #[inline] pub unsafe fn ResolveDepthValuesNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ResolveDepthValuesNV.ptr)() }
     #[inline] pub unsafe fn ResumeTransformFeedback() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ResumeTransformFeedback.ptr)() }
     #[inline] pub unsafe fn ResumeTransformFeedbackNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::ResumeTransformFeedbackNV.ptr)() }
     #[inline] pub unsafe fn RotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::RotatexOES.ptr)(angle, x, y, z) }
     #[inline] pub unsafe fn SampleCoverage(value: GLfloat, invert: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLboolean) -> ()>(storage::SampleCoverage.ptr)(value, invert) }
     #[inline] pub unsafe fn SampleCoverageARB(value: GLfloat, invert: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLboolean) -> ()>(storage::SampleCoverageARB.ptr)(value, invert) }
     #[inline] pub unsafe fn SampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum) -> ()>(storage::SampleMapATI.ptr)(dst, interp, swizzle) }
     #[inline] pub unsafe fn SampleMaskEXT(value: GLclampf, invert: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLclampf, GLboolean) -> ()>(storage::SampleMaskEXT.ptr)(value, invert) }
     #[inline] pub unsafe fn SampleMaskIndexedNV(index: GLuint, mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield) -> ()>(storage::SampleMaskIndexedNV.ptr)(index, mask) }
     #[inline] pub unsafe fn SampleMaskSGIS(value: GLclampf, invert: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLclampf, GLboolean) -> ()>(storage::SampleMaskSGIS.ptr)(value, invert) }
     #[inline] pub unsafe fn SampleMaski(maskNumber: GLuint, mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield) -> ()>(storage::SampleMaski.ptr)(maskNumber, mask) }
     #[inline] pub unsafe fn SamplePatternEXT(pattern: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::SamplePatternEXT.ptr)(pattern) }
     #[inline] pub unsafe fn SamplePatternSGIS(pattern: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::SamplePatternSGIS.ptr)(pattern) }
     #[inline] pub unsafe fn SamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::SamplerParameterIiv.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn SamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLuint) -> ()>(storage::SamplerParameterIuiv.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn SamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLfloat) -> ()>(storage::SamplerParameterf.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn SamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLfloat) -> ()>(storage::SamplerParameterfv.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn SamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::SamplerParameteri.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn SamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::SamplerParameteriv.ptr)(sampler, pname, param) }
     #[inline] pub unsafe fn ScalexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::ScalexOES.ptr)(x, y, z) }
     #[inline] pub unsafe fn Scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei) -> ()>(storage::Scissor.ptr)(x, y, width, height) }
     #[inline] pub unsafe fn ScissorArrayv(first: GLuint, count: GLsizei, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLint) -> ()>(storage::ScissorArrayv.ptr)(first, count, v) }
     #[inline] pub unsafe fn ScissorExclusiveArrayvNV(first: GLuint, count: GLsizei, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLint) -> ()>(storage::ScissorExclusiveArrayvNV.ptr)(first, count, v) }
     #[inline] pub unsafe fn ScissorExclusiveNV(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei) -> ()>(storage::ScissorExclusiveNV.ptr)(x, y, width, height) }
     #[inline] pub unsafe fn ScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLsizei, GLsizei) -> ()>(storage::ScissorIndexed.ptr)(index, left, bottom, width, height) }
     #[inline] pub unsafe fn ScissorIndexedv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::ScissorIndexedv.ptr)(index, v) }
     #[inline] pub unsafe fn SecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::SecondaryColor3b.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::SecondaryColor3bEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3bv(v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::SecondaryColor3bv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3bvEXT(v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::SecondaryColor3bvEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::SecondaryColor3d.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::SecondaryColor3dEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3dv(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::SecondaryColor3dv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3dvEXT(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::SecondaryColor3dvEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::SecondaryColor3f.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::SecondaryColor3fEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3fv(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::SecondaryColor3fv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3fvEXT(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::SecondaryColor3fvEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::SecondaryColor3hNV.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::SecondaryColor3hvNV.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3i(red: GLint, green: GLint, blue: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::SecondaryColor3i.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::SecondaryColor3iEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3iv(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::SecondaryColor3iv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3ivEXT(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::SecondaryColor3ivEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::SecondaryColor3s.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::SecondaryColor3sEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3sv(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::SecondaryColor3sv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3svEXT(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::SecondaryColor3svEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLubyte, GLubyte, GLubyte) -> ()>(storage::SecondaryColor3ub.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLubyte, GLubyte, GLubyte) -> ()>(storage::SecondaryColor3ubEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3ubv(v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(*const GLubyte) -> ()>(storage::SecondaryColor3ubv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3ubvEXT(v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(*const GLubyte) -> ()>(storage::SecondaryColor3ubvEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::SecondaryColor3ui.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::SecondaryColor3uiEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3uiv(v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(*const GLuint) -> ()>(storage::SecondaryColor3uiv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3uivEXT(v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(*const GLuint) -> ()>(storage::SecondaryColor3uivEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) -> () { mem::transmute::<_, extern "system" fn(GLushort, GLushort, GLushort) -> ()>(storage::SecondaryColor3us.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort) -> () { mem::transmute::<_, extern "system" fn(GLushort, GLushort, GLushort) -> ()>(storage::SecondaryColor3usEXT.ptr)(red, green, blue) }
     #[inline] pub unsafe fn SecondaryColor3usv(v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(*const GLushort) -> ()>(storage::SecondaryColor3usv.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColor3usvEXT(v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(*const GLushort) -> ()>(storage::SecondaryColor3usvEXT.ptr)(v) }
     #[inline] pub unsafe fn SecondaryColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei) -> ()>(storage::SecondaryColorFormatNV.ptr)(size, type_, stride) }
     #[inline] pub unsafe fn SecondaryColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::SecondaryColorPointer.ptr)(size, type_, stride, pointer) }
     #[inline] pub unsafe fn SecondaryColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::SecondaryColorPointerEXT.ptr)(size, type_, stride, pointer) }
     #[inline] pub unsafe fn SecondaryColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::SecondaryColorPointerListIBM.ptr)(size, type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn SelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *mut GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLboolean, GLuint, GLint, *mut GLuint) -> ()>(storage::SelectPerfMonitorCountersAMD.ptr)(monitor, enable, group, numCounters, counterList) }
     #[inline] pub unsafe fn SemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLuint64) -> ()>(storage::SemaphoreParameterui64vEXT.ptr)(semaphore, pname, params) }
     #[inline] pub unsafe fn SeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *const std::os::raw::c_void, column: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void, *const std::os::raw::c_void) -> ()>(storage::SeparableFilter2D.ptr)(target, internalformat, width, height, format, type_, row, column) }
     #[inline] pub unsafe fn SeparableFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *const std::os::raw::c_void, column: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void, *const std::os::raw::c_void) -> ()>(storage::SeparableFilter2DEXT.ptr)(target, internalformat, width, height, format, type_, row, column) }
     #[inline] pub unsafe fn SetFenceAPPLE(fence: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::SetFenceAPPLE.ptr)(fence) }
     #[inline] pub unsafe fn SetFenceNV(fence: GLuint, condition: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::SetFenceNV.ptr)(fence, condition) }
     #[inline] pub unsafe fn SetFragmentShaderConstantATI(dst: GLuint, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::SetFragmentShaderConstantATI.ptr)(dst, value) }
     #[inline] pub unsafe fn SetInvariantEXT(id: GLuint, type_: GLenum, addr: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void) -> ()>(storage::SetInvariantEXT.ptr)(id, type_, addr) }
     #[inline] pub unsafe fn SetLocalConstantEXT(id: GLuint, type_: GLenum, addr: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const std::os::raw::c_void) -> ()>(storage::SetLocalConstantEXT.ptr)(id, type_, addr) }
     #[inline] pub unsafe fn SetMultisamplefvAMD(pname: GLenum, index: GLuint, val: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLfloat) -> ()>(storage::SetMultisamplefvAMD.ptr)(pname, index, val) }
     #[inline] pub unsafe fn ShaderBinary(count: GLsizei, shaders: *const GLuint, binaryformat: GLenum, binary: *const std::os::raw::c_void, length: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLuint, GLenum, *const std::os::raw::c_void, GLsizei) -> ()>(storage::ShaderBinary.ptr)(count, shaders, binaryformat, binary, length) }
     #[inline] pub unsafe fn ShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint) -> ()>(storage::ShaderOp1EXT.ptr)(op, res, arg1) }
     #[inline] pub unsafe fn ShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint) -> ()>(storage::ShaderOp2EXT.ptr)(op, res, arg1, arg2) }
     #[inline] pub unsafe fn ShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::ShaderOp3EXT.ptr)(op, res, arg1, arg2, arg3) }
     #[inline] pub unsafe fn ShaderSource(shader: GLuint, count: GLsizei, string: *const *const GLchar, length: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const *const GLchar, *const GLint) -> ()>(storage::ShaderSource.ptr)(shader, count, string, length) }
     #[inline] pub unsafe fn ShaderSourceARB(shaderObj: GLhandleARB, count: GLsizei, string: *const *const GLcharARB, length: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB, GLsizei, *const *const GLcharARB, *const GLint) -> ()>(storage::ShaderSourceARB.ptr)(shaderObj, count, string, length) }
     #[inline] pub unsafe fn ShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::ShaderStorageBlockBinding.ptr)(program, storageBlockIndex, storageBlockBinding) }
     #[inline] pub unsafe fn ShadingRateImageBarrierNV(synchronize: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLboolean) -> ()>(storage::ShadingRateImageBarrierNV.ptr)(synchronize) }
     #[inline] pub unsafe fn ShadingRateImagePaletteNV(viewport: GLuint, first: GLuint, count: GLsizei, rates: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLenum) -> ()>(storage::ShadingRateImagePaletteNV.ptr)(viewport, first, count, rates) }
     #[inline] pub unsafe fn ShadingRateSampleOrderCustomNV(rate: GLenum, samples: GLuint, locations: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, *const GLint) -> ()>(storage::ShadingRateSampleOrderCustomNV.ptr)(rate, samples, locations) }
     #[inline] pub unsafe fn ShadingRateSampleOrderNV(order: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::ShadingRateSampleOrderNV.ptr)(order) }
     #[inline] pub unsafe fn SharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLfloat) -> ()>(storage::SharpenTexFuncSGIS.ptr)(target, n, points) }
     #[inline] pub unsafe fn SignalSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: *const GLuint, numTextureBarriers: GLuint, textures: *const GLuint, dstLayouts: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const GLuint, GLuint, *const GLuint, *const GLenum) -> ()>(storage::SignalSemaphoreEXT.ptr)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) }
     #[inline] pub unsafe fn SignalSemaphoreui64NVX(signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint, *const GLuint64) -> ()>(storage::SignalSemaphoreui64NVX.ptr)(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray) }
     #[inline] pub unsafe fn SignalVkFenceNV(vkFence: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::SignalVkFenceNV.ptr)(vkFence) }
     #[inline] pub unsafe fn SignalVkSemaphoreNV(vkSemaphore: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::SignalVkSemaphoreNV.ptr)(vkSemaphore) }
     #[inline] pub unsafe fn SpecializeShader(shader: GLuint, pEntryPoint: *const GLchar, numSpecializationConstants: GLuint, pConstantIndex: *const GLuint, pConstantValue: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar, GLuint, *const GLuint, *const GLuint) -> ()>(storage::SpecializeShader.ptr)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) }
     #[inline] pub unsafe fn SpecializeShaderARB(shader: GLuint, pEntryPoint: *const GLchar, numSpecializationConstants: GLuint, pConstantIndex: *const GLuint, pConstantValue: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLchar, GLuint, *const GLuint, *const GLuint) -> ()>(storage::SpecializeShaderARB.ptr)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) }
     #[inline] pub unsafe fn SpriteParameterfSGIX(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::SpriteParameterfSGIX.ptr)(pname, param) }
     #[inline] pub unsafe fn SpriteParameterfvSGIX(pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::SpriteParameterfvSGIX.ptr)(pname, params) }
     #[inline] pub unsafe fn SpriteParameteriSGIX(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::SpriteParameteriSGIX.ptr)(pname, param) }
     #[inline] pub unsafe fn SpriteParameterivSGIX(pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::SpriteParameterivSGIX.ptr)(pname, params) }
     #[inline] pub unsafe fn StartInstrumentsSGIX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::StartInstrumentsSGIX.ptr)() }
     #[inline] pub unsafe fn StateCaptureNV(state: GLuint, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum) -> ()>(storage::StateCaptureNV.ptr)(state, mode) }
     #[inline] pub unsafe fn StencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLuint) -> ()>(storage::StencilClearTagEXT.ptr)(stencilTagBits, stencilClearTag) }
     #[inline] pub unsafe fn StencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLenum, GLuint, GLenum, *const GLfloat) -> ()>(storage::StencilFillPathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) }
     #[inline] pub unsafe fn StencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint) -> ()>(storage::StencilFillPathNV.ptr)(path, fillMode, mask) }
     #[inline] pub unsafe fn StencilFunc(func: GLenum, ref_: GLint, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLuint) -> ()>(storage::StencilFunc.ptr)(func, ref_, mask) }
     #[inline] pub unsafe fn StencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLuint) -> ()>(storage::StencilFuncSeparate.ptr)(face, func, ref_, mask) }
     #[inline] pub unsafe fn StencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint, GLuint) -> ()>(storage::StencilFuncSeparateATI.ptr)(frontfunc, backfunc, ref_, mask) }
     #[inline] pub unsafe fn StencilMask(mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::StencilMask.ptr)(mask) }
     #[inline] pub unsafe fn StencilMaskSeparate(face: GLenum, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::StencilMaskSeparate.ptr)(face, mask) }
     #[inline] pub unsafe fn StencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum) -> ()>(storage::StencilOp.ptr)(fail, zfail, zpass) }
     #[inline] pub unsafe fn StencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::StencilOpSeparate.ptr)(face, sfail, dpfail, dppass) }
     #[inline] pub unsafe fn StencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLenum, GLenum) -> ()>(storage::StencilOpSeparateATI.ptr)(face, sfail, dpfail, dppass) }
     #[inline] pub unsafe fn StencilOpValueAMD(face: GLenum, value: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::StencilOpValueAMD.ptr)(face, value) }
     #[inline] pub unsafe fn StencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLint, GLuint, GLenum, *const GLfloat) -> ()>(storage::StencilStrokePathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) }
     #[inline] pub unsafe fn StencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint) -> ()>(storage::StencilStrokePathNV.ptr)(path, reference, mask) }
     #[inline] pub unsafe fn StencilThenCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLenum, GLuint, GLenum, GLenum, *const GLfloat) -> ()>(storage::StencilThenCoverFillPathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) }
     #[inline] pub unsafe fn StencilThenCoverFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLenum) -> ()>(storage::StencilThenCoverFillPathNV.ptr)(path, fillMode, mask, coverMode) }
     #[inline] pub unsafe fn StencilThenCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *const std::os::raw::c_void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLsizei, GLenum, *const std::os::raw::c_void, GLuint, GLint, GLuint, GLenum, GLenum, *const GLfloat) -> ()>(storage::StencilThenCoverStrokePathInstancedNV.ptr)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) }
     #[inline] pub unsafe fn StencilThenCoverStrokePathNV(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint, GLenum) -> ()>(storage::StencilThenCoverStrokePathNV.ptr)(path, reference, mask, coverMode) }
     #[inline] pub unsafe fn StopInstrumentsSGIX(marker: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::StopInstrumentsSGIX.ptr)(marker) }
     #[inline] pub unsafe fn StringMarkerGREMEDY(len: GLsizei, string: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const std::os::raw::c_void) -> ()>(storage::StringMarkerGREMEDY.ptr)(len, string) }
     #[inline] pub unsafe fn SubpixelPrecisionBiasNV(xbits: GLuint, ybits: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::SubpixelPrecisionBiasNV.ptr)(xbits, ybits) }
     #[inline] pub unsafe fn SwizzleEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::SwizzleEXT.ptr)(res, in_, outX, outY, outZ, outW) }
     #[inline] pub unsafe fn SyncTextureINTEL(texture: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::SyncTextureINTEL.ptr)(texture) }
     #[inline] pub unsafe fn TagSampleBufferSGIX() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::TagSampleBufferSGIX.ptr)() }
     #[inline] pub unsafe fn Tangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::Tangent3bEXT.ptr)(tx, ty, tz) }
     #[inline] pub unsafe fn Tangent3bvEXT(v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::Tangent3bvEXT.ptr)(v) }
     #[inline] pub unsafe fn Tangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::Tangent3dEXT.ptr)(tx, ty, tz) }
     #[inline] pub unsafe fn Tangent3dvEXT(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::Tangent3dvEXT.ptr)(v) }
     #[inline] pub unsafe fn Tangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::Tangent3fEXT.ptr)(tx, ty, tz) }
     #[inline] pub unsafe fn Tangent3fvEXT(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::Tangent3fvEXT.ptr)(v) }
     #[inline] pub unsafe fn Tangent3iEXT(tx: GLint, ty: GLint, tz: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::Tangent3iEXT.ptr)(tx, ty, tz) }
     #[inline] pub unsafe fn Tangent3ivEXT(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::Tangent3ivEXT.ptr)(v) }
     #[inline] pub unsafe fn Tangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::Tangent3sEXT.ptr)(tx, ty, tz) }
     #[inline] pub unsafe fn Tangent3svEXT(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::Tangent3svEXT.ptr)(v) }
     #[inline] pub unsafe fn TangentPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::TangentPointerEXT.ptr)(type_, stride, pointer) }
     #[inline] pub unsafe fn TbufferMask3DFX(mask: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::TbufferMask3DFX.ptr)(mask) }
     #[inline] pub unsafe fn TessellationFactorAMD(factor: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::TessellationFactorAMD.ptr)(factor) }
     #[inline] pub unsafe fn TessellationModeAMD(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::TessellationModeAMD.ptr)(mode) }
     #[inline] pub unsafe fn TestFenceAPPLE(fence: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::TestFenceAPPLE.ptr)(fence) }
     #[inline] pub unsafe fn TestFenceNV(fence: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::TestFenceNV.ptr)(fence) }
     #[inline] pub unsafe fn TestObjectAPPLE(object: GLenum, name: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> GLboolean>(storage::TestObjectAPPLE.ptr)(object, name) }
     #[inline] pub unsafe fn TexAttachMemoryNV(target: GLenum, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLuint64) -> ()>(storage::TexAttachMemoryNV.ptr)(target, memory, offset) }
     #[inline] pub unsafe fn TexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint) -> ()>(storage::TexBuffer.ptr)(target, internalformat, buffer) }
     #[inline] pub unsafe fn TexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint) -> ()>(storage::TexBufferARB.ptr)(target, internalformat, buffer) }
     #[inline] pub unsafe fn TexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint) -> ()>(storage::TexBufferEXT.ptr)(target, internalformat, buffer) }
     #[inline] pub unsafe fn TexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::TexBufferRange.ptr)(target, internalformat, buffer, offset, size) }
     #[inline] pub unsafe fn TexBumpParameterfvATI(pname: GLenum, param: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::TexBumpParameterfvATI.ptr)(pname, param) }
     #[inline] pub unsafe fn TexBumpParameterivATI(pname: GLenum, param: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::TexBumpParameterivATI.ptr)(pname, param) }
     #[inline] pub unsafe fn TexCoord1bOES(s: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte) -> ()>(storage::TexCoord1bOES.ptr)(s) }
     #[inline] pub unsafe fn TexCoord1bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::TexCoord1bvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord1hNV(s: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV) -> ()>(storage::TexCoord1hNV.ptr)(s) }
     #[inline] pub unsafe fn TexCoord1hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::TexCoord1hvNV.ptr)(v) }
     #[inline] pub unsafe fn TexCoord1xOES(s: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::TexCoord1xOES.ptr)(s) }
     #[inline] pub unsafe fn TexCoord1xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::TexCoord1xvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord2bOES(s: GLbyte, t: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte) -> ()>(storage::TexCoord2bOES.ptr)(s, t) }
     #[inline] pub unsafe fn TexCoord2bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::TexCoord2bvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord2fColor3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord2fColor3fVertex3fSUN.ptr)(s, t, r, g, b, x, y, z) }
     #[inline] pub unsafe fn TexCoord2fColor3fVertex3fvSUN(tc: *const GLfloat, c: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::TexCoord2fColor3fVertex3fvSUN.ptr)(tc, c, v) }
     #[inline] pub unsafe fn TexCoord2fColor4fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord2fColor4fNormal3fVertex3fSUN.ptr)(s, t, r, g, b, a, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn TexCoord2fColor4fNormal3fVertex3fvSUN(tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::TexCoord2fColor4fNormal3fVertex3fvSUN.ptr)(tc, c, n, v) }
     #[inline] pub unsafe fn TexCoord2fColor4ubVertex3fSUN(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord2fColor4ubVertex3fSUN.ptr)(s, t, r, g, b, a, x, y, z) }
     #[inline] pub unsafe fn TexCoord2fColor4ubVertex3fvSUN(tc: *const GLfloat, c: *const GLubyte, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLubyte, *const GLfloat) -> ()>(storage::TexCoord2fColor4ubVertex3fvSUN.ptr)(tc, c, v) }
     #[inline] pub unsafe fn TexCoord2fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord2fNormal3fVertex3fSUN.ptr)(s, t, nx, ny, nz, x, y, z) }
     #[inline] pub unsafe fn TexCoord2fNormal3fVertex3fvSUN(tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::TexCoord2fNormal3fVertex3fvSUN.ptr)(tc, n, v) }
     #[inline] pub unsafe fn TexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord2fVertex3fSUN.ptr)(s, t, x, y, z) }
     #[inline] pub unsafe fn TexCoord2fVertex3fvSUN(tc: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat) -> ()>(storage::TexCoord2fVertex3fvSUN.ptr)(tc, v) }
     #[inline] pub unsafe fn TexCoord2hNV(s: GLhalfNV, t: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV) -> ()>(storage::TexCoord2hNV.ptr)(s, t) }
     #[inline] pub unsafe fn TexCoord2hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::TexCoord2hvNV.ptr)(v) }
     #[inline] pub unsafe fn TexCoord2xOES(s: GLfixed, t: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::TexCoord2xOES.ptr)(s, t) }
     #[inline] pub unsafe fn TexCoord2xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::TexCoord2xvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::TexCoord3bOES.ptr)(s, t, r) }
     #[inline] pub unsafe fn TexCoord3bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::TexCoord3bvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::TexCoord3hNV.ptr)(s, t, r) }
     #[inline] pub unsafe fn TexCoord3hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::TexCoord3hvNV.ptr)(v) }
     #[inline] pub unsafe fn TexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::TexCoord3xOES.ptr)(s, t, r) }
     #[inline] pub unsafe fn TexCoord3xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::TexCoord3xvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte, GLbyte) -> ()>(storage::TexCoord4bOES.ptr)(s, t, r, q) }
     #[inline] pub unsafe fn TexCoord4bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::TexCoord4bvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoord4fColor4fNormal3fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord4fColor4fNormal3fVertex4fSUN.ptr)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) }
     #[inline] pub unsafe fn TexCoord4fColor4fNormal3fVertex4fvSUN(tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat, *const GLfloat, *const GLfloat) -> ()>(storage::TexCoord4fColor4fNormal3fVertex4fvSUN.ptr)(tc, c, n, v) }
     #[inline] pub unsafe fn TexCoord4fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::TexCoord4fVertex4fSUN.ptr)(s, t, p, q, x, y, z, w) }
     #[inline] pub unsafe fn TexCoord4fVertex4fvSUN(tc: *const GLfloat, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat, *const GLfloat) -> ()>(storage::TexCoord4fVertex4fvSUN.ptr)(tc, v) }
     #[inline] pub unsafe fn TexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::TexCoord4hNV.ptr)(s, t, r, q) }
     #[inline] pub unsafe fn TexCoord4hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::TexCoord4hvNV.ptr)(v) }
     #[inline] pub unsafe fn TexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed, GLfixed) -> ()>(storage::TexCoord4xOES.ptr)(s, t, r, q) }
     #[inline] pub unsafe fn TexCoord4xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::TexCoord4xvOES.ptr)(coords) }
     #[inline] pub unsafe fn TexCoordFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei) -> ()>(storage::TexCoordFormatNV.ptr)(size, type_, stride) }
     #[inline] pub unsafe fn TexCoordPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, GLsizei, *const std::os::raw::c_void) -> ()>(storage::TexCoordPointerEXT.ptr)(size, type_, stride, count, pointer) }
     #[inline] pub unsafe fn TexCoordPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::TexCoordPointerListIBM.ptr)(size, type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn TexCoordPointervINTEL(size: GLint, type_: GLenum, pointer: *const *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, *const *const std::os::raw::c_void) -> ()>(storage::TexCoordPointervINTEL.ptr)(size, type_, pointer) }
     #[inline] pub unsafe fn TexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::TexEnvxOES.ptr)(target, pname, param) }
     #[inline] pub unsafe fn TexEnvxvOES(target: GLenum, pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::TexEnvxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, *const GLfloat) -> ()>(storage::TexFilterFuncSGIS.ptr)(target, filter, n, weights) }
     #[inline] pub unsafe fn TexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::TexGenxOES.ptr)(coord, pname, param) }
     #[inline] pub unsafe fn TexGenxvOES(coord: GLenum, pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::TexGenxvOES.ptr)(coord, pname, params) }
     #[inline] pub unsafe fn TexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexImage1D.ptr)(target, level, internalformat, width, border, format, type_, pixels) }
     #[inline] pub unsafe fn TexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexImage2D.ptr)(target, level, internalformat, width, height, border, format, type_, pixels) }
     #[inline] pub unsafe fn TexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexImage2DMultisample.ptr)(target, samples, internalformat, width, height, fixedsamplelocations) }
     #[inline] pub unsafe fn TexImage2DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexImage2DMultisampleCoverageNV.ptr)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) }
     #[inline] pub unsafe fn TexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexImage3D.ptr)(target, level, internalformat, width, height, depth, border, format, type_, pixels) }
     #[inline] pub unsafe fn TexImage3DEXT(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexImage3DEXT.ptr)(target, level, internalformat, width, height, depth, border, format, type_, pixels) }
     #[inline] pub unsafe fn TexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexImage3DMultisample.ptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations) }
     #[inline] pub unsafe fn TexImage3DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexImage3DMultisampleCoverageNV.ptr)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) }
     #[inline] pub unsafe fn TexImage4DSGIS(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexImage4DSGIS.ptr)(target, level, internalformat, width, height, depth, size4d, border, format, type_, pixels) }
     #[inline] pub unsafe fn TexPageCommitmentARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexPageCommitmentARB.ptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) }
     #[inline] pub unsafe fn TexParameterIiv(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::TexParameterIiv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameterIivEXT(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::TexParameterIivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameterIuiv(target: GLenum, pname: GLenum, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLuint) -> ()>(storage::TexParameterIuiv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameterIuivEXT(target: GLenum, pname: GLenum, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLuint) -> ()>(storage::TexParameterIuivEXT.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfloat) -> ()>(storage::TexParameterf.ptr)(target, pname, param) }
     #[inline] pub unsafe fn TexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfloat) -> ()>(storage::TexParameterfv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameteri(target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLint) -> ()>(storage::TexParameteri.ptr)(target, pname, param) }
     #[inline] pub unsafe fn TexParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLint) -> ()>(storage::TexParameteriv.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLfixed) -> ()>(storage::TexParameterxOES.ptr)(target, pname, param) }
     #[inline] pub unsafe fn TexParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, *const GLfixed) -> ()>(storage::TexParameterxvOES.ptr)(target, pname, params) }
     #[inline] pub unsafe fn TexRenderbufferNV(target: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::TexRenderbufferNV.ptr)(target, renderbuffer) }
     #[inline] pub unsafe fn TexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei) -> ()>(storage::TexStorage1D.ptr)(target, levels, internalformat, width) }
     #[inline] pub unsafe fn TexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::TexStorage2D.ptr)(target, levels, internalformat, width, height) }
     #[inline] pub unsafe fn TexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexStorage2DMultisample.ptr)(target, samples, internalformat, width, height, fixedsamplelocations) }
     #[inline] pub unsafe fn TexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> ()>(storage::TexStorage3D.ptr)(target, levels, internalformat, width, height, depth) }
     #[inline] pub unsafe fn TexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexStorage3DMultisample.ptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations) }
     #[inline] pub unsafe fn TexStorageMem1DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) -> ()>(storage::TexStorageMem1DEXT.ptr)(target, levels, internalFormat, width, memory, offset) }
     #[inline] pub unsafe fn TexStorageMem2DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) -> ()>(storage::TexStorageMem2DEXT.ptr)(target, levels, internalFormat, width, height, memory, offset) }
     #[inline] pub unsafe fn TexStorageMem2DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) -> ()>(storage::TexStorageMem2DMultisampleEXT.ptr)(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) }
     #[inline] pub unsafe fn TexStorageMem3DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) -> ()>(storage::TexStorageMem3DEXT.ptr)(target, levels, internalFormat, width, height, depth, memory, offset) }
     #[inline] pub unsafe fn TexStorageMem3DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) -> ()>(storage::TexStorageMem3DMultisampleEXT.ptr)(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) }
     #[inline] pub unsafe fn TexStorageSparseAMD(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) -> ()>(storage::TexStorageSparseAMD.ptr)(target, internalFormat, width, height, depth, layers, flags) }
     #[inline] pub unsafe fn TexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage1D.ptr)(target, level, xoffset, width, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage1DEXT.ptr)(target, level, xoffset, width, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage2D.ptr)(target, level, xoffset, yoffset, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage2DEXT.ptr)(target, level, xoffset, yoffset, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage3D.ptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage3DEXT.ptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
     #[inline] pub unsafe fn TexSubImage4DSGIS(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TexSubImage4DSGIS.ptr)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type_, pixels) }
     #[inline] pub unsafe fn TextureAttachMemoryNV(texture: GLuint, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint64) -> ()>(storage::TextureAttachMemoryNV.ptr)(texture, memory, offset) }
     #[inline] pub unsafe fn TextureBarrier() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::TextureBarrier.ptr)() }
     #[inline] pub unsafe fn TextureBarrierNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::TextureBarrierNV.ptr)() }
     #[inline] pub unsafe fn TextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint) -> ()>(storage::TextureBuffer.ptr)(texture, internalformat, buffer) }
     #[inline] pub unsafe fn TextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint) -> ()>(storage::TextureBufferEXT.ptr)(texture, target, internalformat, buffer) }
     #[inline] pub unsafe fn TextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::TextureBufferRange.ptr)(texture, internalformat, buffer, offset, size) }
     #[inline] pub unsafe fn TextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::TextureBufferRangeEXT.ptr)(texture, target, internalformat, buffer, offset, size) }
     #[inline] pub unsafe fn TextureColorMaskSGIS(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLboolean, GLboolean, GLboolean, GLboolean) -> ()>(storage::TextureColorMaskSGIS.ptr)(red, green, blue, alpha) }
     #[inline] pub unsafe fn TextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureImage1DEXT.ptr)(texture, target, level, internalformat, width, border, format, type_, pixels) }
     #[inline] pub unsafe fn TextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureImage2DEXT.ptr)(texture, target, level, internalformat, width, height, border, format, type_, pixels) }
     #[inline] pub unsafe fn TextureImage2DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureImage2DMultisampleCoverageNV.ptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) }
     #[inline] pub unsafe fn TextureImage2DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureImage2DMultisampleNV.ptr)(texture, target, samples, internalFormat, width, height, fixedSampleLocations) }
     #[inline] pub unsafe fn TextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureImage3DEXT.ptr)(texture, target, level, internalformat, width, height, depth, border, format, type_, pixels) }
     #[inline] pub unsafe fn TextureImage3DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureImage3DMultisampleCoverageNV.ptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) }
     #[inline] pub unsafe fn TextureImage3DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureImage3DMultisampleNV.ptr)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) }
     #[inline] pub unsafe fn TextureLightEXT(pname: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::TextureLightEXT.ptr)(pname) }
     #[inline] pub unsafe fn TextureMaterialEXT(face: GLenum, mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLenum) -> ()>(storage::TextureMaterialEXT.ptr)(face, mode) }
     #[inline] pub unsafe fn TextureNormalEXT(mode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum) -> ()>(storage::TextureNormalEXT.ptr)(mode) }
     #[inline] pub unsafe fn TexturePageCommitmentEXT(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TexturePageCommitmentEXT.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) }
     #[inline] pub unsafe fn TextureParameterIiv(texture: GLuint, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::TextureParameterIiv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn TextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *const GLint) -> ()>(storage::TextureParameterIivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn TextureParameterIuiv(texture: GLuint, pname: GLenum, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLuint) -> ()>(storage::TextureParameterIuiv.ptr)(texture, pname, params) }
     #[inline] pub unsafe fn TextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *const GLuint) -> ()>(storage::TextureParameterIuivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn TextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLfloat) -> ()>(storage::TextureParameterf.ptr)(texture, pname, param) }
     #[inline] pub unsafe fn TextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLfloat) -> ()>(storage::TextureParameterfEXT.ptr)(texture, target, pname, param) }
     #[inline] pub unsafe fn TextureParameterfv(texture: GLuint, pname: GLenum, param: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLfloat) -> ()>(storage::TextureParameterfv.ptr)(texture, pname, param) }
     #[inline] pub unsafe fn TextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *const GLfloat) -> ()>(storage::TextureParameterfvEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn TextureParameteri(texture: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::TextureParameteri.ptr)(texture, pname, param) }
     #[inline] pub unsafe fn TextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLint) -> ()>(storage::TextureParameteriEXT.ptr)(texture, target, pname, param) }
     #[inline] pub unsafe fn TextureParameteriv(texture: GLuint, pname: GLenum, param: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, *const GLint) -> ()>(storage::TextureParameteriv.ptr)(texture, pname, param) }
     #[inline] pub unsafe fn TextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, *const GLint) -> ()>(storage::TextureParameterivEXT.ptr)(texture, target, pname, params) }
     #[inline] pub unsafe fn TextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::TextureRangeAPPLE.ptr)(target, length, pointer) }
     #[inline] pub unsafe fn TextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint) -> ()>(storage::TextureRenderbufferEXT.ptr)(texture, target, renderbuffer) }
     #[inline] pub unsafe fn TextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei) -> ()>(storage::TextureStorage1D.ptr)(texture, levels, internalformat, width) }
     #[inline] pub unsafe fn TextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLenum, GLsizei) -> ()>(storage::TextureStorage1DEXT.ptr)(texture, target, levels, internalformat, width) }
     #[inline] pub unsafe fn TextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::TextureStorage2D.ptr)(texture, levels, internalformat, width, height) }
     #[inline] pub unsafe fn TextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> ()>(storage::TextureStorage2DEXT.ptr)(texture, target, levels, internalformat, width, height) }
     #[inline] pub unsafe fn TextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureStorage2DMultisample.ptr)(texture, samples, internalformat, width, height, fixedsamplelocations) }
     #[inline] pub unsafe fn TextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureStorage2DMultisampleEXT.ptr)(texture, target, samples, internalformat, width, height, fixedsamplelocations) }
     #[inline] pub unsafe fn TextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> ()>(storage::TextureStorage3D.ptr)(texture, levels, internalformat, width, height, depth) }
     #[inline] pub unsafe fn TextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> ()>(storage::TextureStorage3DEXT.ptr)(texture, target, levels, internalformat, width, height, depth) }
     #[inline] pub unsafe fn TextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureStorage3DMultisample.ptr)(texture, samples, internalformat, width, height, depth, fixedsamplelocations) }
     #[inline] pub unsafe fn TextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> ()>(storage::TextureStorage3DMultisampleEXT.ptr)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) }
     #[inline] pub unsafe fn TextureStorageMem1DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) -> ()>(storage::TextureStorageMem1DEXT.ptr)(texture, levels, internalFormat, width, memory, offset) }
     #[inline] pub unsafe fn TextureStorageMem2DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) -> ()>(storage::TextureStorageMem2DEXT.ptr)(texture, levels, internalFormat, width, height, memory, offset) }
     #[inline] pub unsafe fn TextureStorageMem2DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) -> ()>(storage::TextureStorageMem2DMultisampleEXT.ptr)(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) }
     #[inline] pub unsafe fn TextureStorageMem3DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) -> ()>(storage::TextureStorageMem3DEXT.ptr)(texture, levels, internalFormat, width, height, depth, memory, offset) }
     #[inline] pub unsafe fn TextureStorageMem3DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) -> ()>(storage::TextureStorageMem3DMultisampleEXT.ptr)(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) }
     #[inline] pub unsafe fn TextureStorageSparseAMD(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) -> ()>(storage::TextureStorageSparseAMD.ptr)(texture, target, internalFormat, width, height, depth, layers, flags) }
     #[inline] pub unsafe fn TextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage1D.ptr)(texture, level, xoffset, width, format, type_, pixels) }
     #[inline] pub unsafe fn TextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage1DEXT.ptr)(texture, target, level, xoffset, width, format, type_, pixels) }
     #[inline] pub unsafe fn TextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage2D.ptr)(texture, level, xoffset, yoffset, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn TextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage2DEXT.ptr)(texture, target, level, xoffset, yoffset, width, height, format, type_, pixels) }
     #[inline] pub unsafe fn TextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage3D.ptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
     #[inline] pub unsafe fn TextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const std::os::raw::c_void) -> ()>(storage::TextureSubImage3DEXT.ptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
     #[inline] pub unsafe fn TextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::TextureView.ptr)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) }
     #[inline] pub unsafe fn TrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint, GLenum, GLenum) -> ()>(storage::TrackMatrixNV.ptr)(target, address, matrix, transform) }
     #[inline] pub unsafe fn TransformFeedbackAttribsNV(count: GLsizei, attribs: *const GLint, bufferMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLint, GLenum) -> ()>(storage::TransformFeedbackAttribsNV.ptr)(count, attribs, bufferMode) }
     #[inline] pub unsafe fn TransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::TransformFeedbackBufferBase.ptr)(xfb, index, buffer) }
     #[inline] pub unsafe fn TransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) -> ()>(storage::TransformFeedbackBufferRange.ptr)(xfb, index, buffer, offset, size) }
     #[inline] pub unsafe fn TransformFeedbackStreamAttribsNV(count: GLsizei, attribs: *const GLint, nbuffers: GLsizei, bufstreams: *const GLint, bufferMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLint, GLsizei, *const GLint, GLenum) -> ()>(storage::TransformFeedbackStreamAttribsNV.ptr)(count, attribs, nbuffers, bufstreams, bufferMode) }
     #[inline] pub unsafe fn TransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const *const GLchar, GLenum) -> ()>(storage::TransformFeedbackVaryings.ptr)(program, count, varyings, bufferMode) }
     #[inline] pub unsafe fn TransformFeedbackVaryingsEXT(program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const *const GLchar, GLenum) -> ()>(storage::TransformFeedbackVaryingsEXT.ptr)(program, count, varyings, bufferMode) }
     #[inline] pub unsafe fn TransformFeedbackVaryingsNV(program: GLuint, count: GLsizei, locations: *const GLint, bufferMode: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLint, GLenum) -> ()>(storage::TransformFeedbackVaryingsNV.ptr)(program, count, locations, bufferMode) }
     #[inline] pub unsafe fn TransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *const GLfloat) -> ()>(storage::TransformPathNV.ptr)(resultPath, srcPath, transformType, transformValues) }
     #[inline] pub unsafe fn TranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::TranslatexOES.ptr)(x, y, z) }
     #[inline] pub unsafe fn Uniform1d(location: GLint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLdouble) -> ()>(storage::Uniform1d.ptr)(location, x) }
     #[inline] pub unsafe fn Uniform1dv(location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLdouble) -> ()>(storage::Uniform1dv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1f(location: GLint, v0: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat) -> ()>(storage::Uniform1f.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1fARB(location: GLint, v0: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat) -> ()>(storage::Uniform1fARB.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1fv(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform1fv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1fvARB(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform1fvARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1i(location: GLint, v0: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint) -> ()>(storage::Uniform1i.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1i64ARB(location: GLint, x: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64) -> ()>(storage::Uniform1i64ARB.ptr)(location, x) }
     #[inline] pub unsafe fn Uniform1i64NV(location: GLint, x: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64EXT) -> ()>(storage::Uniform1i64NV.ptr)(location, x) }
     #[inline] pub unsafe fn Uniform1i64vARB(location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64) -> ()>(storage::Uniform1i64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64EXT) -> ()>(storage::Uniform1i64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1iARB(location: GLint, v0: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint) -> ()>(storage::Uniform1iARB.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1iv(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform1iv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1ivARB(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform1ivARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1ui(location: GLint, v0: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint) -> ()>(storage::Uniform1ui.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1ui64ARB(location: GLint, x: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64) -> ()>(storage::Uniform1ui64ARB.ptr)(location, x) }
     #[inline] pub unsafe fn Uniform1ui64NV(location: GLint, x: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64EXT) -> ()>(storage::Uniform1ui64NV.ptr)(location, x) }
     #[inline] pub unsafe fn Uniform1ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::Uniform1ui64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::Uniform1ui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1uiEXT(location: GLint, v0: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint) -> ()>(storage::Uniform1uiEXT.ptr)(location, v0) }
     #[inline] pub unsafe fn Uniform1uiv(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform1uiv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform1uivEXT(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform1uivEXT.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2d(location: GLint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLdouble, GLdouble) -> ()>(storage::Uniform2d.ptr)(location, x, y) }
     #[inline] pub unsafe fn Uniform2dv(location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLdouble) -> ()>(storage::Uniform2dv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2f(location: GLint, v0: GLfloat, v1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat) -> ()>(storage::Uniform2f.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat) -> ()>(storage::Uniform2fARB.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2fv(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform2fv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2fvARB(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform2fvARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2i(location: GLint, v0: GLint, v1: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::Uniform2i.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2i64ARB(location: GLint, x: GLint64, y: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64, GLint64) -> ()>(storage::Uniform2i64ARB.ptr)(location, x, y) }
     #[inline] pub unsafe fn Uniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64EXT, GLint64EXT) -> ()>(storage::Uniform2i64NV.ptr)(location, x, y) }
     #[inline] pub unsafe fn Uniform2i64vARB(location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64) -> ()>(storage::Uniform2i64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64EXT) -> ()>(storage::Uniform2i64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2iARB(location: GLint, v0: GLint, v1: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::Uniform2iARB.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2iv(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform2iv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2ivARB(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform2ivARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2ui(location: GLint, v0: GLuint, v1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint) -> ()>(storage::Uniform2ui.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2ui64ARB(location: GLint, x: GLuint64, y: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64, GLuint64) -> ()>(storage::Uniform2ui64ARB.ptr)(location, x, y) }
     #[inline] pub unsafe fn Uniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64EXT, GLuint64EXT) -> ()>(storage::Uniform2ui64NV.ptr)(location, x, y) }
     #[inline] pub unsafe fn Uniform2ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::Uniform2ui64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::Uniform2ui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint) -> ()>(storage::Uniform2uiEXT.ptr)(location, v0, v1) }
     #[inline] pub unsafe fn Uniform2uiv(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform2uiv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform2uivEXT(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform2uivEXT.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLdouble, GLdouble, GLdouble) -> ()>(storage::Uniform3d.ptr)(location, x, y, z) }
     #[inline] pub unsafe fn Uniform3dv(location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLdouble) -> ()>(storage::Uniform3dv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat, GLfloat) -> ()>(storage::Uniform3f.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat, GLfloat) -> ()>(storage::Uniform3fARB.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3fv(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform3fv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3fvARB(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform3fvARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint) -> ()>(storage::Uniform3i.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64, GLint64, GLint64) -> ()>(storage::Uniform3i64ARB.ptr)(location, x, y, z) }
     #[inline] pub unsafe fn Uniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::Uniform3i64NV.ptr)(location, x, y, z) }
     #[inline] pub unsafe fn Uniform3i64vARB(location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64) -> ()>(storage::Uniform3i64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64EXT) -> ()>(storage::Uniform3i64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint) -> ()>(storage::Uniform3iARB.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3iv(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform3iv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3ivARB(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform3ivARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint, GLuint) -> ()>(storage::Uniform3ui.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64, GLuint64, GLuint64) -> ()>(storage::Uniform3ui64ARB.ptr)(location, x, y, z) }
     #[inline] pub unsafe fn Uniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::Uniform3ui64NV.ptr)(location, x, y, z) }
     #[inline] pub unsafe fn Uniform3ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::Uniform3ui64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::Uniform3ui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint, GLuint) -> ()>(storage::Uniform3uiEXT.ptr)(location, v0, v1, v2) }
     #[inline] pub unsafe fn Uniform3uiv(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform3uiv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform3uivEXT(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform3uivEXT.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::Uniform4d.ptr)(location, x, y, z, w) }
     #[inline] pub unsafe fn Uniform4dv(location: GLint, count: GLsizei, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLdouble) -> ()>(storage::Uniform4dv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::Uniform4f.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::Uniform4fARB.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4fv(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform4fv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4fvARB(location: GLint, count: GLsizei, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLfloat) -> ()>(storage::Uniform4fvARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint, GLint) -> ()>(storage::Uniform4i.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64, GLint64, GLint64, GLint64) -> ()>(storage::Uniform4i64ARB.ptr)(location, x, y, z, w) }
     #[inline] pub unsafe fn Uniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::Uniform4i64NV.ptr)(location, x, y, z, w) }
     #[inline] pub unsafe fn Uniform4i64vARB(location: GLint, count: GLsizei, value: *const GLint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64) -> ()>(storage::Uniform4i64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint64EXT) -> ()>(storage::Uniform4i64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint, GLint) -> ()>(storage::Uniform4iARB.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4iv(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform4iv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4ivARB(location: GLint, count: GLsizei, value: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLint) -> ()>(storage::Uniform4ivARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::Uniform4ui.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64, GLuint64, GLuint64, GLuint64) -> ()>(storage::Uniform4ui64ARB.ptr)(location, x, y, z, w) }
     #[inline] pub unsafe fn Uniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::Uniform4ui64NV.ptr)(location, x, y, z, w) }
     #[inline] pub unsafe fn Uniform4ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::Uniform4ui64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::Uniform4ui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::Uniform4uiEXT.ptr)(location, v0, v1, v2, v3) }
     #[inline] pub unsafe fn Uniform4uiv(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform4uiv.ptr)(location, count, value) }
     #[inline] pub unsafe fn Uniform4uivEXT(location: GLint, count: GLsizei, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint) -> ()>(storage::Uniform4uivEXT.ptr)(location, count, value) }
     #[inline] pub unsafe fn UniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::UniformBlockBinding.ptr)(program, uniformBlockIndex, uniformBlockBinding) }
     #[inline] pub unsafe fn UniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLuint) -> ()>(storage::UniformBufferEXT.ptr)(program, location, buffer) }
     #[inline] pub unsafe fn UniformHandleui64ARB(location: GLint, value: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64) -> ()>(storage::UniformHandleui64ARB.ptr)(location, value) }
     #[inline] pub unsafe fn UniformHandleui64NV(location: GLint, value: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64) -> ()>(storage::UniformHandleui64NV.ptr)(location, value) }
     #[inline] pub unsafe fn UniformHandleui64vARB(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::UniformHandleui64vARB.ptr)(location, count, value) }
     #[inline] pub unsafe fn UniformHandleui64vNV(location: GLint, count: GLsizei, value: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64) -> ()>(storage::UniformHandleui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn UniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix2dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix2fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix2fvARB.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix2x3dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix2x3fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix2x4dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix2x4fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix3dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix3fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix3fvARB.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix3x2dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix3x2fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix3x4dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix3x4fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix4dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix4fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix4fvARB.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix4x2dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix4x2fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLdouble) -> ()>(storage::UniformMatrix4x3dv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat) -> ()>(storage::UniformMatrix4x3fv.ptr)(location, count, transpose, value) }
     #[inline] pub unsafe fn UniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLuint) -> ()>(storage::UniformSubroutinesuiv.ptr)(shadertype, count, indices) }
     #[inline] pub unsafe fn Uniformui64NV(location: GLint, value: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLuint64EXT) -> ()>(storage::Uniformui64NV.ptr)(location, value) }
     #[inline] pub unsafe fn Uniformui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLint, GLsizei, *const GLuint64EXT) -> ()>(storage::Uniformui64vNV.ptr)(location, count, value) }
     #[inline] pub unsafe fn UnlockArraysEXT() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::UnlockArraysEXT.ptr)() }
     #[inline] pub unsafe fn UnmapBuffer(target: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum) -> GLboolean>(storage::UnmapBuffer.ptr)(target) }
     #[inline] pub unsafe fn UnmapBufferARB(target: GLenum) -> GLboolean { mem::transmute::<_, extern "system" fn(GLenum) -> GLboolean>(storage::UnmapBufferARB.ptr)(target) }
     #[inline] pub unsafe fn UnmapNamedBuffer(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::UnmapNamedBuffer.ptr)(buffer) }
     #[inline] pub unsafe fn UnmapNamedBufferEXT(buffer: GLuint) -> GLboolean { mem::transmute::<_, extern "system" fn(GLuint) -> GLboolean>(storage::UnmapNamedBufferEXT.ptr)(buffer) }
     #[inline] pub unsafe fn UnmapObjectBufferATI(buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::UnmapObjectBufferATI.ptr)(buffer) }
     #[inline] pub unsafe fn UnmapTexture2DINTEL(texture: GLuint, level: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> ()>(storage::UnmapTexture2DINTEL.ptr)(texture, level) }
     #[inline] pub unsafe fn UpdateObjectBufferATI(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *const std::os::raw::c_void, preserve: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const std::os::raw::c_void, GLenum) -> ()>(storage::UpdateObjectBufferATI.ptr)(buffer, offset, size, pointer, preserve) }
     #[inline] pub unsafe fn UploadGpuMaskNVX(mask: GLbitfield) -> () { mem::transmute::<_, extern "system" fn(GLbitfield) -> ()>(storage::UploadGpuMaskNVX.ptr)(mask) }
     #[inline] pub unsafe fn UseProgram(program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::UseProgram.ptr)(program) }
     #[inline] pub unsafe fn UseProgramObjectARB(programObj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB) -> ()>(storage::UseProgramObjectARB.ptr)(programObj) }
     #[inline] pub unsafe fn UseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLbitfield, GLuint) -> ()>(storage::UseProgramStages.ptr)(pipeline, stages, program) }
     #[inline] pub unsafe fn UseShaderProgramEXT(type_: GLenum, program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLuint) -> ()>(storage::UseShaderProgramEXT.ptr)(type_, program) }
     #[inline] pub unsafe fn VDPAUFiniNV() -> () { mem::transmute::<_, extern "system" fn() -> ()>(storage::VDPAUFiniNV.ptr)() }
     #[inline] pub unsafe fn VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *mut GLsizei, values: *mut GLint) -> () { mem::transmute::<_, extern "system" fn(GLvdpauSurfaceNV, GLenum, GLsizei, *mut GLsizei, *mut GLint) -> ()>(storage::VDPAUGetSurfaceivNV.ptr)(surface, pname, bufSize, length, values) }
     #[inline] pub unsafe fn VDPAUInitNV(vdpDevice: *const std::os::raw::c_void, getProcAddress: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, *const std::os::raw::c_void) -> ()>(storage::VDPAUInitNV.ptr)(vdpDevice, getProcAddress) }
     #[inline] pub unsafe fn VDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV) -> GLboolean { mem::transmute::<_, extern "system" fn(GLvdpauSurfaceNV) -> GLboolean>(storage::VDPAUIsSurfaceNV.ptr)(surface) }
     #[inline] pub unsafe fn VDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: *const GLvdpauSurfaceNV) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLvdpauSurfaceNV) -> ()>(storage::VDPAUMapSurfacesNV.ptr)(numSurfaces, surfaces) }
     #[inline] pub unsafe fn VDPAURegisterOutputSurfaceNV(vdpSurface: *const std::os::raw::c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint) -> GLvdpauSurfaceNV { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, GLenum, GLsizei, *const GLuint) -> GLvdpauSurfaceNV>(storage::VDPAURegisterOutputSurfaceNV.ptr)(vdpSurface, target, numTextureNames, textureNames) }
     #[inline] pub unsafe fn VDPAURegisterVideoSurfaceNV(vdpSurface: *const std::os::raw::c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint) -> GLvdpauSurfaceNV { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, GLenum, GLsizei, *const GLuint) -> GLvdpauSurfaceNV>(storage::VDPAURegisterVideoSurfaceNV.ptr)(vdpSurface, target, numTextureNames, textureNames) }
     #[inline] pub unsafe fn VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: *const std::os::raw::c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint, isFrameStructure: GLboolean) -> GLvdpauSurfaceNV { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_void, GLenum, GLsizei, *const GLuint, GLboolean) -> GLvdpauSurfaceNV>(storage::VDPAURegisterVideoSurfaceWithPictureStructureNV.ptr)(vdpSurface, target, numTextureNames, textureNames, isFrameStructure) }
     #[inline] pub unsafe fn VDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLvdpauSurfaceNV, GLenum) -> ()>(storage::VDPAUSurfaceAccessNV.ptr)(surface, access) }
     #[inline] pub unsafe fn VDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: *const GLvdpauSurfaceNV) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const GLvdpauSurfaceNV) -> ()>(storage::VDPAUUnmapSurfacesNV.ptr)(numSurface, surfaces) }
     #[inline] pub unsafe fn VDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV) -> () { mem::transmute::<_, extern "system" fn(GLvdpauSurfaceNV) -> ()>(storage::VDPAUUnregisterSurfaceNV.ptr)(surface) }
     #[inline] pub unsafe fn ValidateProgram(program: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::ValidateProgram.ptr)(program) }
     #[inline] pub unsafe fn ValidateProgramARB(programObj: GLhandleARB) -> () { mem::transmute::<_, extern "system" fn(GLhandleARB) -> ()>(storage::ValidateProgramARB.ptr)(programObj) }
     #[inline] pub unsafe fn ValidateProgramPipeline(pipeline: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint) -> ()>(storage::ValidateProgramPipeline.ptr)(pipeline) }
     #[inline] pub unsafe fn VariantArrayObjectATI(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLsizei, GLuint, GLuint) -> ()>(storage::VariantArrayObjectATI.ptr)(id, type_, stride, buffer, offset) }
     #[inline] pub unsafe fn VariantPointerEXT(id: GLuint, type_: GLenum, stride: GLuint, addr: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLuint, *const std::os::raw::c_void) -> ()>(storage::VariantPointerEXT.ptr)(id, type_, stride, addr) }
     #[inline] pub unsafe fn VariantbvEXT(id: GLuint, addr: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VariantbvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantdvEXT(id: GLuint, addr: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VariantdvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantfvEXT(id: GLuint, addr: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VariantfvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantivEXT(id: GLuint, addr: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VariantivEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantsvEXT(id: GLuint, addr: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VariantsvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantubvEXT(id: GLuint, addr: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VariantubvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantuivEXT(id: GLuint, addr: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VariantuivEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn VariantusvEXT(id: GLuint, addr: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VariantusvEXT.ptr)(id, addr) }
     #[inline] pub unsafe fn Vertex2bOES(x: GLbyte, y: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte) -> ()>(storage::Vertex2bOES.ptr)(x, y) }
     #[inline] pub unsafe fn Vertex2bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::Vertex2bvOES.ptr)(coords) }
     #[inline] pub unsafe fn Vertex2hNV(x: GLhalfNV, y: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV) -> ()>(storage::Vertex2hNV.ptr)(x, y) }
     #[inline] pub unsafe fn Vertex2hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Vertex2hvNV.ptr)(v) }
     #[inline] pub unsafe fn Vertex2xOES(x: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed) -> ()>(storage::Vertex2xOES.ptr)(x) }
     #[inline] pub unsafe fn Vertex2xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Vertex2xvOES.ptr)(coords) }
     #[inline] pub unsafe fn Vertex3bOES(x: GLbyte, y: GLbyte, z: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte) -> ()>(storage::Vertex3bOES.ptr)(x, y, z) }
     #[inline] pub unsafe fn Vertex3bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::Vertex3bvOES.ptr)(coords) }
     #[inline] pub unsafe fn Vertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::Vertex3hNV.ptr)(x, y, z) }
     #[inline] pub unsafe fn Vertex3hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Vertex3hvNV.ptr)(v) }
     #[inline] pub unsafe fn Vertex3xOES(x: GLfixed, y: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed) -> ()>(storage::Vertex3xOES.ptr)(x, y) }
     #[inline] pub unsafe fn Vertex3xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Vertex3xvOES.ptr)(coords) }
     #[inline] pub unsafe fn Vertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLbyte, GLbyte, GLbyte, GLbyte) -> ()>(storage::Vertex4bOES.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn Vertex4bvOES(coords: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(*const GLbyte) -> ()>(storage::Vertex4bvOES.ptr)(coords) }
     #[inline] pub unsafe fn Vertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::Vertex4hNV.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn Vertex4hvNV(v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::Vertex4hvNV.ptr)(v) }
     #[inline] pub unsafe fn Vertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> () { mem::transmute::<_, extern "system" fn(GLfixed, GLfixed, GLfixed) -> ()>(storage::Vertex4xOES.ptr)(x, y, z) }
     #[inline] pub unsafe fn Vertex4xvOES(coords: *const GLfixed) -> () { mem::transmute::<_, extern "system" fn(*const GLfixed) -> ()>(storage::Vertex4xvOES.ptr)(coords) }
     #[inline] pub unsafe fn VertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexArrayAttribBinding.ptr)(vaobj, attribindex, bindingindex) }
     #[inline] pub unsafe fn VertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexArrayAttribFormat.ptr)(vaobj, attribindex, size, type_, normalized, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexArrayAttribIFormat.ptr)(vaobj, attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexArrayAttribLFormat.ptr)(vaobj, attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLintptr, GLsizei) -> ()>(storage::VertexArrayBindVertexBufferEXT.ptr)(vaobj, bindingindex, buffer, offset, stride) }
     #[inline] pub unsafe fn VertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexArrayBindingDivisor.ptr)(vaobj, bindingindex, divisor) }
     #[inline] pub unsafe fn VertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayColorOffsetEXT.ptr)(vaobj, buffer, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, GLintptr) -> ()>(storage::VertexArrayEdgeFlagOffsetEXT.ptr)(vaobj, buffer, stride, offset) }
     #[inline] pub unsafe fn VertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexArrayElementBuffer.ptr)(vaobj, buffer) }
     #[inline] pub unsafe fn VertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayFogCoordOffsetEXT.ptr)(vaobj, buffer, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayIndexOffsetEXT.ptr)(vaobj, buffer, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayMultiTexCoordOffsetEXT.ptr)(vaobj, buffer, texunit, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayNormalOffsetEXT.ptr)(vaobj, buffer, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayParameteriAPPLE(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::VertexArrayParameteriAPPLE.ptr)(pname, param) }
     #[inline] pub unsafe fn VertexArrayRangeAPPLE(length: GLsizei, pointer: *mut std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *mut std::os::raw::c_void) -> ()>(storage::VertexArrayRangeAPPLE.ptr)(length, pointer) }
     #[inline] pub unsafe fn VertexArrayRangeNV(length: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexArrayRangeNV.ptr)(length, pointer) }
     #[inline] pub unsafe fn VertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArraySecondaryColorOffsetEXT.ptr)(vaobj, buffer, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayTexCoordOffsetEXT.ptr)(vaobj, buffer, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexArrayVertexAttribBindingEXT.ptr)(vaobj, attribindex, bindingindex) }
     #[inline] pub unsafe fn VertexArrayVertexAttribDivisorEXT(vaobj: GLuint, index: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexArrayVertexAttribDivisorEXT.ptr)(vaobj, index, divisor) }
     #[inline] pub unsafe fn VertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexArrayVertexAttribFormatEXT.ptr)(vaobj, attribindex, size, type_, normalized, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexArrayVertexAttribIFormatEXT.ptr)(vaobj, attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayVertexAttribIOffsetEXT.ptr)(vaobj, buffer, index, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexArrayVertexAttribLFormatEXT.ptr)(vaobj, attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayVertexAttribLOffsetEXT.ptr)(vaobj, buffer, index, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) -> ()>(storage::VertexArrayVertexAttribOffsetEXT.ptr)(vaobj, buffer, index, size, type_, normalized, stride, offset) }
     #[inline] pub unsafe fn VertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexArrayVertexBindingDivisorEXT.ptr)(vaobj, bindingindex, divisor) }
     #[inline] pub unsafe fn VertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLintptr, GLsizei) -> ()>(storage::VertexArrayVertexBuffer.ptr)(vaobj, bindingindex, buffer, offset, stride) }
     #[inline] pub unsafe fn VertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLsizei, *const GLuint, *const GLintptr, *const GLsizei) -> ()>(storage::VertexArrayVertexBuffers.ptr)(vaobj, first, count, buffers, offsets, strides) }
     #[inline] pub unsafe fn VertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> ()>(storage::VertexArrayVertexOffsetEXT.ptr)(vaobj, buffer, size, type_, stride, offset) }
     #[inline] pub unsafe fn VertexAttrib1d(index: GLuint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble) -> ()>(storage::VertexAttrib1d.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1dARB(index: GLuint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble) -> ()>(storage::VertexAttrib1dARB.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1dNV(index: GLuint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble) -> ()>(storage::VertexAttrib1dNV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib1dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1dvARB(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib1dvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1dvNV(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib1dvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1f(index: GLuint, x: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat) -> ()>(storage::VertexAttrib1f.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1fARB(index: GLuint, x: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat) -> ()>(storage::VertexAttrib1fARB.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1fNV(index: GLuint, x: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat) -> ()>(storage::VertexAttrib1fNV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1fv(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib1fv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1fvARB(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib1fvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1fvNV(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib1fvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1hNV(index: GLuint, x: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLhalfNV) -> ()>(storage::VertexAttrib1hNV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1hvNV(index: GLuint, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLhalfNV) -> ()>(storage::VertexAttrib1hvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1s(index: GLuint, x: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort) -> ()>(storage::VertexAttrib1s.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1sARB(index: GLuint, x: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort) -> ()>(storage::VertexAttrib1sARB.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1sNV(index: GLuint, x: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort) -> ()>(storage::VertexAttrib1sNV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttrib1sv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib1sv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1svARB(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib1svARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib1svNV(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib1svNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::VertexAttrib2d.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::VertexAttrib2dARB.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::VertexAttrib2dNV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib2dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2dvARB(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib2dvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2dvNV(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib2dvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat) -> ()>(storage::VertexAttrib2f.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat) -> ()>(storage::VertexAttrib2fARB.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat) -> ()>(storage::VertexAttrib2fNV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2fv(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib2fv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2fvARB(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib2fvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2fvNV(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib2fvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLhalfNV, GLhalfNV) -> ()>(storage::VertexAttrib2hNV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2hvNV(index: GLuint, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLhalfNV) -> ()>(storage::VertexAttrib2hvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort) -> ()>(storage::VertexAttrib2s.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort) -> ()>(storage::VertexAttrib2sARB.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort) -> ()>(storage::VertexAttrib2sNV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttrib2sv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib2sv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2svARB(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib2svARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib2svNV(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib2svNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib3d.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib3dARB.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib3dNV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib3dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3dvARB(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib3dvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3dvNV(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib3dvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib3f.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib3fARB.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib3fNV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3fv(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib3fv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3fvARB(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib3fvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3fvNV(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib3fvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::VertexAttrib3hNV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3hvNV(index: GLuint, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLhalfNV) -> ()>(storage::VertexAttrib3hvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib3s.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib3sARB.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib3sNV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttrib3sv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib3sv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3svARB(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib3svARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib3svNV(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib3svNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Nbv(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttrib4Nbv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NbvARB(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttrib4NbvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Niv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttrib4Niv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NivARB(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttrib4NivARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Nsv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib4Nsv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NsvARB(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib4NsvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> ()>(storage::VertexAttrib4Nub.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> ()>(storage::VertexAttrib4NubARB.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4Nubv(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttrib4Nubv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NubvARB(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttrib4NubvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Nuiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttrib4Nuiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NuivARB(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttrib4NuivARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4Nusv(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttrib4Nusv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4NusvARB(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttrib4NusvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4bv(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttrib4bv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4bvARB(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttrib4bvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib4d.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib4dARB.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttrib4dNV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib4dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4dvARB(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib4dvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4dvNV(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttrib4dvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib4f.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib4fARB.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexAttrib4fNV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4fv(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib4fv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4fvARB(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib4fvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4fvNV(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::VertexAttrib4fvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> ()>(storage::VertexAttrib4hNV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4hvNV(index: GLuint, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLhalfNV) -> ()>(storage::VertexAttrib4hvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4iv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttrib4iv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4ivARB(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttrib4ivARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib4s.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib4sARB.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::VertexAttrib4sNV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4sv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib4sv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4svARB(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib4svARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4svNV(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttrib4svNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> ()>(storage::VertexAttrib4ubNV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttrib4ubv(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttrib4ubv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4ubvARB(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttrib4ubvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4ubvNV(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttrib4ubvNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4uiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttrib4uiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4uivARB(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttrib4uivARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4usv(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttrib4usv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttrib4usvARB(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttrib4usvARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribArrayObjectATI(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) -> ()>(storage::VertexAttribArrayObjectATI.ptr)(index, size, type_, normalized, stride, buffer, offset) }
     #[inline] pub unsafe fn VertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexAttribBinding.ptr)(attribindex, bindingindex) }
     #[inline] pub unsafe fn VertexAttribDivisor(index: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexAttribDivisor.ptr)(index, divisor) }
     #[inline] pub unsafe fn VertexAttribDivisorARB(index: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexAttribDivisorARB.ptr)(index, divisor) }
     #[inline] pub unsafe fn VertexAttribFormat(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexAttribFormat.ptr)(attribindex, size, type_, normalized, relativeoffset) }
     #[inline] pub unsafe fn VertexAttribFormatNV(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLboolean, GLsizei) -> ()>(storage::VertexAttribFormatNV.ptr)(index, size, type_, normalized, stride) }
     #[inline] pub unsafe fn VertexAttribI1i(index: GLuint, x: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> ()>(storage::VertexAttribI1i.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribI1iEXT(index: GLuint, x: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint) -> ()>(storage::VertexAttribI1iEXT.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribI1iv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI1iv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI1ivEXT(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI1ivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI1ui(index: GLuint, x: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexAttribI1ui.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribI1uiEXT(index: GLuint, x: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexAttribI1uiEXT.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribI1uiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI1uiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI1uivEXT(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI1uivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI2i(index: GLuint, x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint) -> ()>(storage::VertexAttribI2i.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint) -> ()>(storage::VertexAttribI2iEXT.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribI2iv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI2iv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI2ivEXT(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI2ivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI2ui.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI2uiEXT.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribI2uiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI2uiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI2uivEXT(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI2uivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint) -> ()>(storage::VertexAttribI3i.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint) -> ()>(storage::VertexAttribI3iEXT.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribI3iv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI3iv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI3ivEXT(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI3ivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI3ui.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI3uiEXT.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribI3uiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI3uiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI3uivEXT(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI3uivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4bv(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttribI4bv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4bvEXT(index: GLuint, v: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLbyte) -> ()>(storage::VertexAttribI4bvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::VertexAttribI4i.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLint, GLint, GLint) -> ()>(storage::VertexAttribI4iEXT.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribI4iv(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI4iv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4ivEXT(index: GLuint, v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint) -> ()>(storage::VertexAttribI4ivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4sv(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttribI4sv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4svEXT(index: GLuint, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLshort) -> ()>(storage::VertexAttribI4svEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4ubv(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttribI4ubv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4ubvEXT(index: GLuint, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLubyte) -> ()>(storage::VertexAttribI4ubvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI4ui.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLuint, GLuint, GLuint) -> ()>(storage::VertexAttribI4uiEXT.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribI4uiv(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI4uiv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4uivEXT(index: GLuint, v: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint) -> ()>(storage::VertexAttribI4uivEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4usv(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttribI4usv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribI4usvEXT(index: GLuint, v: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLushort) -> ()>(storage::VertexAttribI4usvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribIFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexAttribIFormat.ptr)(attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexAttribIFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei) -> ()>(storage::VertexAttribIFormatNV.ptr)(index, size, type_, stride) }
     #[inline] pub unsafe fn VertexAttribIPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribIPointer.ptr)(index, size, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribIPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribIPointerEXT.ptr)(index, size, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribL1d(index: GLuint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble) -> ()>(storage::VertexAttribL1d.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribL1dEXT(index: GLuint, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble) -> ()>(storage::VertexAttribL1dEXT.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribL1dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL1dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL1dvEXT(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL1dvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL1i64NV(index: GLuint, x: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint64EXT) -> ()>(storage::VertexAttribL1i64NV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribL1i64vNV(index: GLuint, v: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint64EXT) -> ()>(storage::VertexAttribL1i64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT) -> ()>(storage::VertexAttribL1ui64ARB.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT) -> ()>(storage::VertexAttribL1ui64NV.ptr)(index, x) }
     #[inline] pub unsafe fn VertexAttribL1ui64vARB(index: GLuint, v: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint64EXT) -> ()>(storage::VertexAttribL1ui64vARB.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL1ui64vNV(index: GLuint, v: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint64EXT) -> ()>(storage::VertexAttribL1ui64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::VertexAttribL2d.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble) -> ()>(storage::VertexAttribL2dEXT.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribL2dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL2dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL2dvEXT(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL2dvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint64EXT, GLint64EXT) -> ()>(storage::VertexAttribL2i64NV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribL2i64vNV(index: GLuint, v: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint64EXT) -> ()>(storage::VertexAttribL2i64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT, GLuint64EXT) -> ()>(storage::VertexAttribL2ui64NV.ptr)(index, x, y) }
     #[inline] pub unsafe fn VertexAttribL2ui64vNV(index: GLuint, v: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint64EXT) -> ()>(storage::VertexAttribL2ui64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttribL3d.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttribL3dEXT.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribL3dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL3dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL3dvEXT(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL3dvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::VertexAttribL3i64NV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribL3i64vNV(index: GLuint, v: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint64EXT) -> ()>(storage::VertexAttribL3i64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::VertexAttribL3ui64NV.ptr)(index, x, y, z) }
     #[inline] pub unsafe fn VertexAttribL3ui64vNV(index: GLuint, v: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint64EXT) -> ()>(storage::VertexAttribL3ui64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttribL4d.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexAttribL4dEXT.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribL4dv(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL4dv.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL4dvEXT(index: GLuint, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLdouble) -> ()>(storage::VertexAttribL4dvEXT.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> ()>(storage::VertexAttribL4i64NV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribL4i64vNV(index: GLuint, v: *const GLint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLint64EXT) -> ()>(storage::VertexAttribL4i64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> ()>(storage::VertexAttribL4ui64NV.ptr)(index, x, y, z, w) }
     #[inline] pub unsafe fn VertexAttribL4ui64vNV(index: GLuint, v: *const GLuint64EXT) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLuint64EXT) -> ()>(storage::VertexAttribL4ui64vNV.ptr)(index, v) }
     #[inline] pub unsafe fn VertexAttribLFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLuint) -> ()>(storage::VertexAttribLFormat.ptr)(attribindex, size, type_, relativeoffset) }
     #[inline] pub unsafe fn VertexAttribLFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei) -> ()>(storage::VertexAttribLFormatNV.ptr)(index, size, type_, stride) }
     #[inline] pub unsafe fn VertexAttribLPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribLPointer.ptr)(index, size, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribLPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribLPointerEXT.ptr)(index, size, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexAttribP1ui.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP1uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, *const GLuint) -> ()>(storage::VertexAttribP1uiv.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexAttribP2ui.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP2uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, *const GLuint) -> ()>(storage::VertexAttribP2uiv.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexAttribP3ui.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP3uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, *const GLuint) -> ()>(storage::VertexAttribP3uiv.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, GLuint) -> ()>(storage::VertexAttribP4ui.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribP4uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLboolean, *const GLuint) -> ()>(storage::VertexAttribP4uiv.ptr)(index, type_, normalized, value) }
     #[inline] pub unsafe fn VertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLint) -> ()>(storage::VertexAttribParameteriAMD.ptr)(index, pname, param) }
     #[inline] pub unsafe fn VertexAttribPointer(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLboolean, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribPointer.ptr)(index, size, type_, normalized, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribPointerARB(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLboolean, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribPointerARB.ptr)(index, size, type_, normalized, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribPointerNV(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexAttribPointerNV.ptr)(index, fsize, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexAttribs1dvNV(index: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLdouble) -> ()>(storage::VertexAttribs1dvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs1fvNV(index: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::VertexAttribs1fvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs1hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLhalfNV) -> ()>(storage::VertexAttribs1hvNV.ptr)(index, n, v) }
     #[inline] pub unsafe fn VertexAttribs1svNV(index: GLuint, count: GLsizei, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLshort) -> ()>(storage::VertexAttribs1svNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs2dvNV(index: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLdouble) -> ()>(storage::VertexAttribs2dvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs2fvNV(index: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::VertexAttribs2fvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs2hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLhalfNV) -> ()>(storage::VertexAttribs2hvNV.ptr)(index, n, v) }
     #[inline] pub unsafe fn VertexAttribs2svNV(index: GLuint, count: GLsizei, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLshort) -> ()>(storage::VertexAttribs2svNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs3dvNV(index: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLdouble) -> ()>(storage::VertexAttribs3dvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs3fvNV(index: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::VertexAttribs3fvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs3hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLhalfNV) -> ()>(storage::VertexAttribs3hvNV.ptr)(index, n, v) }
     #[inline] pub unsafe fn VertexAttribs3svNV(index: GLuint, count: GLsizei, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLshort) -> ()>(storage::VertexAttribs3svNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs4dvNV(index: GLuint, count: GLsizei, v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLdouble) -> ()>(storage::VertexAttribs4dvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs4fvNV(index: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::VertexAttribs4fvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs4hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLhalfNV) -> ()>(storage::VertexAttribs4hvNV.ptr)(index, n, v) }
     #[inline] pub unsafe fn VertexAttribs4svNV(index: GLuint, count: GLsizei, v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLshort) -> ()>(storage::VertexAttribs4svNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLubyte) -> ()>(storage::VertexAttribs4ubvNV.ptr)(index, count, v) }
     #[inline] pub unsafe fn VertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint) -> ()>(storage::VertexBindingDivisor.ptr)(bindingindex, divisor) }
     #[inline] pub unsafe fn VertexBlendARB(count: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint) -> ()>(storage::VertexBlendARB.ptr)(count) }
     #[inline] pub unsafe fn VertexBlendEnvfATI(pname: GLenum, param: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::VertexBlendEnvfATI.ptr)(pname, param) }
     #[inline] pub unsafe fn VertexBlendEnviATI(pname: GLenum, param: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::VertexBlendEnviATI.ptr)(pname, param) }
     #[inline] pub unsafe fn VertexFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei) -> ()>(storage::VertexFormatNV.ptr)(size, type_, stride) }
     #[inline] pub unsafe fn VertexPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexPointerEXT.ptr)(size, type_, stride, count, pointer) }
     #[inline] pub unsafe fn VertexPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: *const *const std::os::raw::c_void, ptrstride: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLint, *const *const std::os::raw::c_void, GLint) -> ()>(storage::VertexPointerListIBM.ptr)(size, type_, stride, pointer, ptrstride) }
     #[inline] pub unsafe fn VertexPointervINTEL(size: GLint, type_: GLenum, pointer: *const *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, *const *const std::os::raw::c_void) -> ()>(storage::VertexPointervINTEL.ptr)(size, type_, pointer) }
     #[inline] pub unsafe fn VertexStream1dATI(stream: GLenum, x: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble) -> ()>(storage::VertexStream1dATI.ptr)(stream, x) }
     #[inline] pub unsafe fn VertexStream1dvATI(stream: GLenum, coords: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::VertexStream1dvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream1fATI(stream: GLenum, x: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat) -> ()>(storage::VertexStream1fATI.ptr)(stream, x) }
     #[inline] pub unsafe fn VertexStream1fvATI(stream: GLenum, coords: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::VertexStream1fvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream1iATI(stream: GLenum, x: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint) -> ()>(storage::VertexStream1iATI.ptr)(stream, x) }
     #[inline] pub unsafe fn VertexStream1ivATI(stream: GLenum, coords: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::VertexStream1ivATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream1sATI(stream: GLenum, x: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort) -> ()>(storage::VertexStream1sATI.ptr)(stream, x) }
     #[inline] pub unsafe fn VertexStream1svATI(stream: GLenum, coords: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::VertexStream1svATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble) -> ()>(storage::VertexStream2dATI.ptr)(stream, x, y) }
     #[inline] pub unsafe fn VertexStream2dvATI(stream: GLenum, coords: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::VertexStream2dvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat) -> ()>(storage::VertexStream2fATI.ptr)(stream, x, y) }
     #[inline] pub unsafe fn VertexStream2fvATI(stream: GLenum, coords: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::VertexStream2fvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream2iATI(stream: GLenum, x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint) -> ()>(storage::VertexStream2iATI.ptr)(stream, x, y) }
     #[inline] pub unsafe fn VertexStream2ivATI(stream: GLenum, coords: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::VertexStream2ivATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort) -> ()>(storage::VertexStream2sATI.ptr)(stream, x, y) }
     #[inline] pub unsafe fn VertexStream2svATI(stream: GLenum, coords: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::VertexStream2svATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexStream3dATI.ptr)(stream, x, y, z) }
     #[inline] pub unsafe fn VertexStream3dvATI(stream: GLenum, coords: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::VertexStream3dvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexStream3fATI.ptr)(stream, x, y, z) }
     #[inline] pub unsafe fn VertexStream3fvATI(stream: GLenum, coords: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::VertexStream3fvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint) -> ()>(storage::VertexStream3iATI.ptr)(stream, x, y, z) }
     #[inline] pub unsafe fn VertexStream3ivATI(stream: GLenum, coords: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::VertexStream3ivATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort) -> ()>(storage::VertexStream3sATI.ptr)(stream, x, y, z) }
     #[inline] pub unsafe fn VertexStream3svATI(stream: GLenum, coords: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::VertexStream3svATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::VertexStream4dATI.ptr)(stream, x, y, z, w) }
     #[inline] pub unsafe fn VertexStream4dvATI(stream: GLenum, coords: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLdouble) -> ()>(storage::VertexStream4dvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::VertexStream4fATI.ptr)(stream, x, y, z, w) }
     #[inline] pub unsafe fn VertexStream4fvATI(stream: GLenum, coords: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLfloat) -> ()>(storage::VertexStream4fvATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLint, GLint, GLint, GLint) -> ()>(storage::VertexStream4iATI.ptr)(stream, x, y, z, w) }
     #[inline] pub unsafe fn VertexStream4ivATI(stream: GLenum, coords: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLint) -> ()>(storage::VertexStream4ivATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLshort, GLshort, GLshort, GLshort) -> ()>(storage::VertexStream4sATI.ptr)(stream, x, y, z, w) }
     #[inline] pub unsafe fn VertexStream4svATI(stream: GLenum, coords: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLenum, *const GLshort) -> ()>(storage::VertexStream4svATI.ptr)(stream, coords) }
     #[inline] pub unsafe fn VertexWeightPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::VertexWeightPointerEXT.ptr)(size, type_, stride, pointer) }
     #[inline] pub unsafe fn VertexWeightfEXT(weight: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat) -> ()>(storage::VertexWeightfEXT.ptr)(weight) }
     #[inline] pub unsafe fn VertexWeightfvEXT(weight: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::VertexWeightfvEXT.ptr)(weight) }
     #[inline] pub unsafe fn VertexWeighthNV(weight: GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(GLhalfNV) -> ()>(storage::VertexWeighthNV.ptr)(weight) }
     #[inline] pub unsafe fn VertexWeighthvNV(weight: *const GLhalfNV) -> () { mem::transmute::<_, extern "system" fn(*const GLhalfNV) -> ()>(storage::VertexWeighthvNV.ptr)(weight) }
     #[inline] pub unsafe fn VideoCaptureNV(video_capture_slot: GLuint, sequence_num: *mut GLuint, capture_time: *mut GLuint64EXT) -> GLenum { mem::transmute::<_, extern "system" fn(GLuint, *mut GLuint, *mut GLuint64EXT) -> GLenum>(storage::VideoCaptureNV.ptr)(video_capture_slot, sequence_num, capture_time) }
     #[inline] pub unsafe fn VideoCaptureStreamParameterdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *const GLdouble) -> ()>(storage::VideoCaptureStreamParameterdvNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn VideoCaptureStreamParameterfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *const GLfloat) -> ()>(storage::VideoCaptureStreamParameterfvNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn VideoCaptureStreamParameterivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, *const GLint) -> ()>(storage::VideoCaptureStreamParameterivNV.ptr)(video_capture_slot, stream, pname, params) }
     #[inline] pub unsafe fn Viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLsizei, GLsizei) -> ()>(storage::Viewport.ptr)(x, y, width, height) }
     #[inline] pub unsafe fn ViewportArrayv(first: GLuint, count: GLsizei, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLfloat) -> ()>(storage::ViewportArrayv.ptr)(first, count, v) }
     #[inline] pub unsafe fn ViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::ViewportIndexedf.ptr)(index, x, y, w, h) }
     #[inline] pub unsafe fn ViewportIndexedfv(index: GLuint, v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, *const GLfloat) -> ()>(storage::ViewportIndexedfv.ptr)(index, v) }
     #[inline] pub unsafe fn ViewportPositionWScaleNV(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLfloat, GLfloat) -> ()>(storage::ViewportPositionWScaleNV.ptr)(index, xcoeff, ycoeff) }
     #[inline] pub unsafe fn ViewportSwizzleNV(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::ViewportSwizzleNV.ptr)(index, swizzlex, swizzley, swizzlez, swizzlew) }
     #[inline] pub unsafe fn WaitSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: *const GLuint, numTextureBarriers: GLuint, textures: *const GLuint, srcLayouts: *const GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, *const GLuint, GLuint, *const GLuint, *const GLenum) -> ()>(storage::WaitSemaphoreEXT.ptr)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) }
     #[inline] pub unsafe fn WaitSemaphoreui64NVX(waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint, *const GLuint64) -> ()>(storage::WaitSemaphoreui64NVX.ptr)(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray) }
     #[inline] pub unsafe fn WaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLsync, GLbitfield, GLuint64) -> ()>(storage::WaitSync.ptr)(sync, flags, timeout) }
     #[inline] pub unsafe fn WaitVkSemaphoreNV(vkSemaphore: GLuint64) -> () { mem::transmute::<_, extern "system" fn(GLuint64) -> ()>(storage::WaitVkSemaphoreNV.ptr)(vkSemaphore) }
     #[inline] pub unsafe fn WeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: *const GLuint, weights: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLsizei, *const GLuint, *const GLfloat) -> ()>(storage::WeightPathsNV.ptr)(resultPath, numPaths, paths, weights) }
     #[inline] pub unsafe fn WeightPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(GLint, GLenum, GLsizei, *const std::os::raw::c_void) -> ()>(storage::WeightPointerARB.ptr)(size, type_, stride, pointer) }
     #[inline] pub unsafe fn WeightbvARB(size: GLint, weights: *const GLbyte) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLbyte) -> ()>(storage::WeightbvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightdvARB(size: GLint, weights: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLdouble) -> ()>(storage::WeightdvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightfvARB(size: GLint, weights: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLfloat) -> ()>(storage::WeightfvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightivARB(size: GLint, weights: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLint) -> ()>(storage::WeightivARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightsvARB(size: GLint, weights: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLshort) -> ()>(storage::WeightsvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightubvARB(size: GLint, weights: *const GLubyte) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLubyte) -> ()>(storage::WeightubvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightuivARB(size: GLint, weights: *const GLuint) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLuint) -> ()>(storage::WeightuivARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WeightusvARB(size: GLint, weights: *const GLushort) -> () { mem::transmute::<_, extern "system" fn(GLint, *const GLushort) -> ()>(storage::WeightusvARB.ptr)(size, weights) }
     #[inline] pub unsafe fn WindowPos2d(x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::WindowPos2d.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2dARB(x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::WindowPos2dARB.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2dMESA(x: GLdouble, y: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble) -> ()>(storage::WindowPos2dMESA.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2dv(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos2dv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2dvARB(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos2dvARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2dvMESA(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos2dvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2f(x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::WindowPos2f.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2fARB(x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::WindowPos2fARB.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2fMESA(x: GLfloat, y: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat) -> ()>(storage::WindowPos2fMESA.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2fv(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos2fv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2fvARB(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos2fvARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2fvMESA(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos2fvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2i(x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint) -> ()>(storage::WindowPos2i.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2iARB(x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint) -> ()>(storage::WindowPos2iARB.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2iMESA(x: GLint, y: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint) -> ()>(storage::WindowPos2iMESA.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2iv(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos2iv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2ivARB(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos2ivARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2ivMESA(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos2ivMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2s(x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort) -> ()>(storage::WindowPos2s.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2sARB(x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort) -> ()>(storage::WindowPos2sARB.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2sMESA(x: GLshort, y: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort) -> ()>(storage::WindowPos2sMESA.ptr)(x, y) }
     #[inline] pub unsafe fn WindowPos2sv(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos2sv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2svARB(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos2svARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos2svMESA(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos2svMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::WindowPos3d.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::WindowPos3dARB.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble) -> ()>(storage::WindowPos3dMESA.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3dv(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos3dv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3dvARB(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos3dvARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3dvMESA(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos3dvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::WindowPos3f.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::WindowPos3fARB.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat) -> ()>(storage::WindowPos3fMESA.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3fv(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos3fv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3fvARB(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos3fvARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3fvMESA(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos3fvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3i(x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::WindowPos3i.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3iARB(x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::WindowPos3iARB.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3iMESA(x: GLint, y: GLint, z: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint) -> ()>(storage::WindowPos3iMESA.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3iv(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos3iv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3ivARB(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos3ivARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3ivMESA(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos3ivMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3s(x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::WindowPos3s.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3sARB(x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::WindowPos3sARB.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort) -> ()>(storage::WindowPos3sMESA.ptr)(x, y, z) }
     #[inline] pub unsafe fn WindowPos3sv(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos3sv.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3svARB(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos3svARB.ptr)(v) }
     #[inline] pub unsafe fn WindowPos3svMESA(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos3svMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> () { mem::transmute::<_, extern "system" fn(GLdouble, GLdouble, GLdouble, GLdouble) -> ()>(storage::WindowPos4dMESA.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn WindowPos4dvMESA(v: *const GLdouble) -> () { mem::transmute::<_, extern "system" fn(*const GLdouble) -> ()>(storage::WindowPos4dvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> () { mem::transmute::<_, extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat) -> ()>(storage::WindowPos4fMESA.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn WindowPos4fvMESA(v: *const GLfloat) -> () { mem::transmute::<_, extern "system" fn(*const GLfloat) -> ()>(storage::WindowPos4fvMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint) -> () { mem::transmute::<_, extern "system" fn(GLint, GLint, GLint, GLint) -> ()>(storage::WindowPos4iMESA.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn WindowPos4ivMESA(v: *const GLint) -> () { mem::transmute::<_, extern "system" fn(*const GLint) -> ()>(storage::WindowPos4ivMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> () { mem::transmute::<_, extern "system" fn(GLshort, GLshort, GLshort, GLshort) -> ()>(storage::WindowPos4sMESA.ptr)(x, y, z, w) }
     #[inline] pub unsafe fn WindowPos4svMESA(v: *const GLshort) -> () { mem::transmute::<_, extern "system" fn(*const GLshort) -> ()>(storage::WindowPos4svMESA.ptr)(v) }
     #[inline] pub unsafe fn WindowRectanglesEXT(mode: GLenum, count: GLsizei, box_: *const GLint) -> () { mem::transmute::<_, extern "system" fn(GLenum, GLsizei, *const GLint) -> ()>(storage::WindowRectanglesEXT.ptr)(mode, count, box_) }
     #[inline] pub unsafe fn WriteMaskEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> () { mem::transmute::<_, extern "system" fn(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) -> ()>(storage::WriteMaskEXT.ptr)(res, in_, outX, outY, outZ, outW) }
}

mod storage {
    #![allow(non_snake_case, non_upper_case_globals)]

    use super::FnPtr;
    use std::os::raw;

     pub static mut AccumxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AcquireKeyedMutexWin32EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveProgramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveShaderProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveStencilFaceEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveTextureARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ActiveVaryingNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AlphaFragmentOp1ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AlphaFragmentOp2ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AlphaFragmentOp3ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AlphaFuncxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AlphaToCoverageDitherControlNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ApplyFramebufferAttachmentCMAAINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ApplyTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AreProgramsResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AreTexturesResidentEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ArrayElement: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ArrayElementEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ArrayObjectATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AsyncCopyBufferSubDataNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AsyncCopyImageSubDataNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AsyncMarkerSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AttachObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AttachShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginConditionalRender: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginConditionalRenderNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginConditionalRenderNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginFragmentShaderATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginOcclusionQueryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginPerfMonitorAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginPerfQueryINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginQueryARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginQueryIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginTransformFeedbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginVertexShaderEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginVideoCaptureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindAttribLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindAttribLocationARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferBase: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferBaseEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferBaseNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferOffsetNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferRangeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBuffersBase: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBuffersRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFragDataLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFragDataLocationEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFragDataLocationIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFragmentShaderATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindFramebufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindLightParameterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindMaterialParameterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindMultiTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindParameterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindProgramARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindProgramNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindProgramPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindRenderbuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindSampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindSamplers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindShadingRateImageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTexGenParameterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTextureUnit: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTextureUnitParameterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVertexArray: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVertexArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVertexBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVertexBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVertexShaderEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVideoCaptureStreamBufferNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindVideoCaptureStreamTextureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3bEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3bvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3sEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Binormal3svEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BinormalPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BitmapxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendBarrier: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendBarrierKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendBarrierNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendColor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendColorEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendColorxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationIndexedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationSeparate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationSeparateEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationSeparateIndexedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationSeparatei: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationSeparateiARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationi: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendEquationiARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFunc: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncIndexedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparateEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparateINGR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparateIndexedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparatei: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFuncSeparateiARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFunci: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendFunciARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlendParameteriNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlitFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlitFramebufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BlitNamedFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferAddressRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferAttachMemoryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferDataARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferPageCommitmentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferParameteriAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferStorage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferStorageExternalEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferStorageMemEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BufferSubDataARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CallCommandListNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CheckFramebufferStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CheckFramebufferStatusEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CheckNamedFramebufferStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CheckNamedFramebufferStatusEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClampColor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClampColorARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Clear: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearAccumxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferfi: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearBufferuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearColor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearColorIiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearColorIuiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearColorxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearDepth: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearDepthdNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearDepthf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearDepthfOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearDepthxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedBufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedBufferDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedBufferSubDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedFramebufferfi: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedFramebufferfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedFramebufferiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearNamedFramebufferuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearStencil: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClearTexSubImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientActiveTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientActiveTextureARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientActiveVertexStreamATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientAttribDefaultEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientWaitSemaphoreui64NVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClientWaitSync: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClipControl: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClipPlanefOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ClipPlanexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4ubVertex2fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4ubVertex2fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4ubVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4ubVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Color4xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorFragmentOp1ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorFragmentOp2ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorFragmentOp3ATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorMaskIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorMaski: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorPointervINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorSubTable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorSubTableEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableParameterfvSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableParameterivSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ColorTableSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerInputNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerOutputNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerParameterfNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerParameteriNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CombinerStageParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CommandListSegmentsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompileCommandListNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompileShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompileShaderARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompileShaderIncludeARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedMultiTexSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage1DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage2DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexImage3DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage1DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage2DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTexSubImage3DARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompressedTextureSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConservativeRasterParameterfNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConservativeRasterParameteriNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionFilter1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionFilter1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionFilter2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionFilter2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ConvolutionParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyColorSubTable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyColorSubTableEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyColorTable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyColorTableSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyConvolutionFilter1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyConvolutionFilter1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyConvolutionFilter2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyConvolutionFilter2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyImageSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyImageSubDataNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyMultiTexImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyMultiTexImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyMultiTexSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyMultiTexSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyMultiTexSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyNamedBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTexSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CopyTextureSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverFillPathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverFillPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverStrokePathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverStrokePathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverageModulationNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CoverageModulationTableNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateCommandListsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateFramebuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateMemoryObjectsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreatePerfQueryINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateProgramObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateProgramPipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateProgressFenceNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateQueries: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRenderbuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSamplers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShaderObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShaderProgramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShaderProgramv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateStatesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSyncFromCLeventARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateTransformFeedbacks: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateVertexArrays: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CullFace: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CullParameterdvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CullParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CurrentPaletteMatrixARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageCallback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageCallbackAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageCallbackARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageControl: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageControlARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageEnableAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageInsert: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageInsertAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMessageInsertARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeformSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeformationMap3dSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeformationMap3fSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteAsyncMarkersSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteBuffersARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteCommandListsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteFencesAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteFencesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteFragmentShaderATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteFramebuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteFramebuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteMemoryObjectsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteNamedStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteNamesAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteOcclusionQueriesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeletePathsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeletePerfMonitorsAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeletePerfQueryINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteProgramPipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteProgramsARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteProgramsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteQueries: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteQueriesARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteQueryResourceTagNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteRenderbuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteRenderbuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteSamplers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteSemaphoresEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteStatesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteSync: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteTexturesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteTransformFeedbacks: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteTransformFeedbacksNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteVertexArrays: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteVertexArraysAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeleteVertexShaderEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthBoundsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthBoundsdNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthFunc: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangeArrayv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangeIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangef: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangefOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DepthRangexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DetachObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DetachShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DetailTexFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Disable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableClientStateIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableClientStateiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVariantClientStateEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexArrayAttrib: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexArrayAttribEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexArrayEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexAttribAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexAttribArray: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisableVertexAttribArrayARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Disablei: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DispatchCompute: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DispatchComputeGroupSizeARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DispatchComputeIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArrays: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysInstanced: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysInstancedARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysInstancedBaseInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawArraysInstancedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawBuffersARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawBuffersATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawCommandsAddressNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawCommandsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawCommandsStatesAddressNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawCommandsStatesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementArrayATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsBaseVertex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstanced: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstancedARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstancedBaseInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstancedBaseVertex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstancedBaseVertexBaseInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawElementsInstancedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawMeshArraysSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawMeshTasksIndirectNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawMeshTasksNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawRangeElementArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawRangeElementArrayATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawRangeElements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawRangeElementsBaseVertex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawRangeElementsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTextureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTransformFeedbackInstanced: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTransformFeedbackStream: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawTransformFeedbackStreamInstanced: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DrawVkImageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EGLImageTargetTexStorageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EGLImageTargetTextureStorageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EdgeFlagFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EdgeFlagPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EdgeFlagPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ElementPointerAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ElementPointerATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Enable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableClientStateIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableClientStateiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVariantClientStateEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexArrayAttrib: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexArrayAttribEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexArrayEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexAttribAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexAttribArray: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnableVertexAttribArrayARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Enablei: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndConditionalRender: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndConditionalRenderNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndConditionalRenderNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndFragmentShaderATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndOcclusionQueryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndPerfMonitorAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndPerfQueryINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndQueryARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndQueryIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndTransformFeedbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndVertexShaderEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndVideoCaptureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvalCoord1xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvalCoord1xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvalCoord2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvalCoord2xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvalMapsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EvaluateDepthValuesARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ExecuteProgramNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ExtractComponentEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FeedbackBufferxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FenceSync: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinalCombinerInputNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Finish: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinishAsyncSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinishFenceAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinishFenceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinishObjectAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FinishTextureSUNX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Flush: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedBufferRangeAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedNamedBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedNamedBufferRangeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushPixelDataRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushRasterSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushStaticDataIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushVertexArrayRangeAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushVertexArrayRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordPointer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordd: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoorddEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoorddv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoorddvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordhNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogCoordhvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FogxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentColorMaterialSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentCoverageColorNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightModelfSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightModelfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightModeliSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightModelivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightfSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightiSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentLightivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentMaterialfSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentMaterialfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentMaterialiSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FragmentMaterialivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FrameTerminatorGREMEDY: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FrameZoomSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferDrawBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferDrawBuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferFetchBarrierEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferReadBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferRenderbuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferSampleLocationsfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferSampleLocationsfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferSamplePositionsfvAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTexture3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureFaceARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureFaceEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureLayer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureLayerARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureLayerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FramebufferTextureMultiviewOVR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FrontFace: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FrustumfOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FrustumxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenAsyncMarkersSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenBuffersARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenFencesAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenFencesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenFragmentShadersATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenFramebuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenFramebuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenNamesAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenOcclusionQueriesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenPathsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenPerfMonitorsAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenProgramPipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenProgramsARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenProgramsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenQueries: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenQueriesARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenQueryResourceTagNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenRenderbuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenRenderbuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenSamplers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenSemaphoresEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenSymbolsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenTexturesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenTransformFeedbacks: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenTransformFeedbacksNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenVertexArrays: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenVertexArraysAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenVertexShadersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenerateMipmap: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenerateMipmapEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenerateMultiTexMipmapEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenerateTextureMipmap: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GenerateTextureMipmapEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveAtomicCounterBufferiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveAttrib: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveAttribARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveSubroutineName: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveSubroutineUniformName: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveSubroutineUniformiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniform: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniformARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniformBlockName: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniformBlockiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniformName: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveUniformsiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetActiveVaryingNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetArrayObjectfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetArrayObjectivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAttachedObjectsARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAttachedShaders: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAttribLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAttribLocationARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBooleanIndexedvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBooleani_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBooleanv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferParameteri64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferParameterivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferParameterui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferPointerv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferPointervARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferSubDataARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetClipPlanefOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetClipPlanexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTable: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameterfvSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableParameterivSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetColorTableSGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCombinerInputParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCombinerInputParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCombinerOutputParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCombinerOutputParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCombinerStageParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCommandHeaderNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedMultiTexImageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedTexImageARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedTextureImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedTextureImageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCompressedTextureSubImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetConvolutionFilterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetConvolutionParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetConvolutionParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetConvolutionParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCoverageModulationTableNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDebugMessageLog: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDebugMessageLogAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDebugMessageLogARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDetailTexFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDoubleIndexedvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDoublei_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDoublei_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDoublev: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetError: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFenceivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFinalCombinerInputParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFinalCombinerInputParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFirstPerfQueryIdINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFixedvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFloatIndexedvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFloati_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFloati_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFloatv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFogFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragDataIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragDataLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragDataLocationEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragmentLightfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragmentLightivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragmentMaterialfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFragmentMaterialivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFramebufferAttachmentParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFramebufferAttachmentParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFramebufferParameterfvAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFramebufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFramebufferParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetGraphicsResetStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetGraphicsResetStatusARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetHandleARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetHistogramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetHistogramParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetHistogramParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetHistogramParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageHandleARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageHandleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageTransformParameterfvHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageTransformParameterivHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInfoLogARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInstrumentsSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInteger64i_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInteger64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetIntegerIndexedvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetIntegeri_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetIntegerui64i_vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetIntegerui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetIntegerv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInternalformatSampleivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInternalformati64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInternalformativ: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInvariantBooleanvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInvariantFloatvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInvariantIntegervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetLightxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetListParameterfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetListParameterivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetLocalConstantBooleanvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetLocalConstantFloatvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetLocalConstantIntegervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapAttribParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapAttribParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapControlPointsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMapxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMaterialxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMemoryObjectDetachedResourcesuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMemoryObjectParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMinmaxEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMinmaxParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMinmaxParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexEnvfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexEnvivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexGendvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexGenfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexGenivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexImageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexLevelParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexLevelParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultiTexParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultisamplefv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMultisamplefvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferParameteri64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferParameterui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferPointerv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferPointervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedBufferSubDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedFramebufferAttachmentParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedFramebufferAttachmentParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedFramebufferParameterfvAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedFramebufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedFramebufferParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramLocalParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramLocalParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramLocalParameterdvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramLocalParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramStringEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedProgramivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedRenderbufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedRenderbufferParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNamedStringivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetNextPerfQueryIdINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectBufferfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectBufferivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectLabel: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectParameterfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectParameterivAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectParameterivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetObjectPtrLabel: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetOcclusionQueryivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetOcclusionQueryuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathCommandsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathCoordsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathDashArrayNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathLengthNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathMetricRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathMetricsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPathSpacingNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfCounterInfoINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorCounterDataAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorCounterInfoAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorCounterStringAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorCountersAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorGroupStringAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfMonitorGroupsAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfQueryDataINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfQueryIdByNameINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerfQueryInfoINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPixelMapxv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPixelTexGenParameterfvSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPixelTexGenParameterivSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPixelTransformParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPixelTransformParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPointerIndexedvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPointeri_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPointerv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPointervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramBinary: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramEnvParameterIivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramEnvParameterIuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramEnvParameterdvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramEnvParameterfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramInfoLog: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramInterfaceiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramLocalParameterIivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramLocalParameterIuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramLocalParameterdvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramLocalParameterfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramNamedParameterdvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramNamedParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramParameterdvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramPipelineInfoLog: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramPipelineiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourceIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourceLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourceLocationIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourceName: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourcefvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramResourceiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramStageiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramStringNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramSubroutineParameteruivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetProgramivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryBufferObjecti64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryBufferObjectiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryBufferObjectui64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryBufferObjectuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryIndexediv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjecti64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjecti64vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectui64v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectui64vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryObjectuivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRenderbufferParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRenderbufferParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSamplerParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSamplerParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSamplerParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSamplerParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSemaphoreParameterui64vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSeparableFilterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderInfoLog: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderPrecisionFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderSource: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderSourceARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShadingRateImagePaletteNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShadingRateSampleLocationivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSharpenTexFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetStageIndexNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetString: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetStringi: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSubroutineIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSubroutineUniformLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSynciv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexBumpParameterfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexBumpParameterivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexEnvxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexFilterFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexGenxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexLevelParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexLevelParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexLevelParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterPointervAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTexParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureHandleARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureHandleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureImageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureLevelParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureLevelParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureLevelParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureLevelParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureSamplerHandleARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureSamplerHandleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTextureSubImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTrackMatrixivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbackVarying: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbackVaryingEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbackVaryingNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbacki64_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbacki_v: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetTransformFeedbackiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformBlockIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformBufferSizeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformIndices: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformLocation: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformLocationARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformSubroutineuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformdv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformi64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformi64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUniformuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUnsignedBytei_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetUnsignedBytevEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantArrayObjectfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantArrayObjectivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantBooleanvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantFloatvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantIntegervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVariantPointervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVaryingLocationNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayIndexed64iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayIndexediv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayIntegeri_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayIntegervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayPointeri_vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayPointervEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexArrayiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribArrayObjectfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribArrayObjectivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribLdv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribLdvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribLi64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribLui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribLui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribPointerv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribPointervARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribPointervNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribdv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribdvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribdvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVertexAttribivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoCaptureStreamdvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoCaptureStreamfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoCaptureStreamivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoCaptureivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoi64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideoui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVideouivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetVkProcAddrNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnCompressedTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnCompressedTexImageARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnTexImageARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformdv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformdvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformi64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetnUniformuivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactorbSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactordSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactorfSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactoriSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactorsSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactorubSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactoruiSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GlobalAlphaFactorusSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Hint: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut HintPGI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Histogram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut HistogramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IglooInterfaceSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImageTransformParameterfHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImageTransformParameterfvHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImageTransformParameteriHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImageTransformParameterivHP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportMemoryFdEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportMemoryWin32HandleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportMemoryWin32NameEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportSemaphoreFdEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportSemaphoreWin32HandleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportSemaphoreWin32NameEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportSyncEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexFuncEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexMaterialEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IndexxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InsertComponentEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InsertEventMarkerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InstrumentsBufferSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InterpolatePathsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateBufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateNamedFramebufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateNamedFramebufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateSubFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateTexImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateTexSubImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsAsyncMarkerSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsBufferARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsBufferResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsCommandListNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsEnabled: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsEnabledIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsEnabledi: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsFenceAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsFenceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsFramebufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsImageHandleResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsImageHandleResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsMemoryObjectEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsNameAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsNamedBufferResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsNamedStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsOcclusionQueryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsPointInFillPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsPointInStrokePathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsProgramARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsProgramNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsProgramPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsQueryARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsRenderbuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsSampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsSemaphoreEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsStateNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsSync: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTextureHandleResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTextureHandleResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsVariantEnabledEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsVertexArray: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsVertexArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut IsVertexAttribEnabledAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LGPUCopyImageSubDataNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LGPUInterlockNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LGPUNamedBufferSubDataNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LabelObjectEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LightEnviSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LightModelxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LightModelxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LightxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LightxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LineWidth: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LineWidthxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LinkProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LinkProgramARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ListDrawCommandsStatesClientNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ListParameterfSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ListParameterfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ListParameteriSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ListParameterivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadIdentityDeformationMapSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadMatrixxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadProgramNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadTransposeMatrixd: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadTransposeMatrixdARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadTransposeMatrixf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadTransposeMatrixfARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LoadTransposeMatrixxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LockArraysEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut LogicOp: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeBufferNonResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeBufferResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeImageHandleNonResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeImageHandleNonResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeImageHandleResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeImageHandleResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeNamedBufferNonResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeNamedBufferResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeTextureHandleNonResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeTextureHandleNonResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeTextureHandleResidentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MakeTextureHandleResidentNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Map1xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Map2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapBufferARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapControlPointsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapGrid1xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapGrid2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapNamedBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapNamedBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapNamedBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapNamedBufferRangeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapTexture2DINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapVertexAttrib1dAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapVertexAttrib1fAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapVertexAttrib2dAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapVertexAttrib2fAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MaterialxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MaterialxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixFrustumEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixIndexPointerARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixIndexubvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixIndexuivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixIndexusvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoad3x2fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoad3x3fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoadIdentityEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoadTranspose3x3fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoadTransposedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoadTransposefEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoaddEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixLoadfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMult3x2fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMult3x3fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMultTranspose3x3fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMultTransposedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMultTransposefEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMultdEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixMultfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixOrthoEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixPopEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixPushEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixRotatedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixRotatefEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixScaledEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixScalefEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixTranslatedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MatrixTranslatefEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MaxShaderCompilerThreadsARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MaxShaderCompilerThreadsKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MemoryBarrier: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MemoryBarrierByRegion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MemoryBarrierEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MemoryObjectParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MinSampleShading: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MinSampleShadingARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Minmax: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MinmaxEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultMatrixxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultTransposeMatrixd: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultTransposeMatrixdARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultTransposeMatrixf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultTransposeMatrixfARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultTransposeMatrixxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArrays: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirectAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirectBindlessCountNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirectBindlessNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirectCount: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawArraysIndirectCountARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsBaseVertex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirectAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirectBindlessCountNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirectBindlessNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirectCount: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawElementsIndirectCountARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawMeshTasksIndirectCountNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawMeshTasksIndirectNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiDrawRangeElementArrayAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiModeDrawArraysIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiModeDrawElementsIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord1xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord2xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoord4xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexCoordPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexEnvfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexEnvfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexEnviEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexEnvivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGendEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGendvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGenfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGenfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGeniEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexGenivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameterfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MultiTexSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastBarrierNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastBlitFramebufferNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastBufferSubDataNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastCopyBufferSubDataNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastCopyImageSubDataNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastFramebufferSampleLocationsfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastGetQueryObjecti64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastGetQueryObjectivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastGetQueryObjectui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastGetQueryObjectuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastScissorArrayvNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastViewportArrayvNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastViewportPositionWScaleNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MulticastWaitSyncNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferAttachMemoryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferPageCommitmentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferPageCommitmentEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferStorage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferStorageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferStorageExternalEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferStorageMemEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferSubData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedBufferSubDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedCopyBufferSubDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferDrawBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferDrawBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferReadBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferRenderbuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferSampleLocationsfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferSampleLocationsfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferSamplePositionsfvAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTexture: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTexture1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTexture2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTexture3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTextureEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTextureFaceEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTextureLayer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedFramebufferTextureLayerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameter4dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameter4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameter4fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameter4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameterI4iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameterI4ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameterI4uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameterI4uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParameters4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParametersI4ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramLocalParametersI4uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedProgramStringEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorageMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorageMultisampleAdvancedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorageMultisampleCoverageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedRenderbufferStorageMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NamedStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NewObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Normal3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalPointervINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3bATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3bvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3dATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3dvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3fATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3fvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3iATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3ivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3sATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut NormalStream3svATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ObjectLabel: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ObjectPtrLabel: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ObjectPurgeableAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ObjectUnpurgeableAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut OrthofOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut OrthoxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PNTrianglesfATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PNTrianglesiATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PassTexCoordATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PassThroughxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PatchParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PatchParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathCommandsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathCoordsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathCoverDepthFuncNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathDashArrayNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathGlyphIndexArrayNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathGlyphIndexRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathGlyphRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathGlyphsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathMemoryGlyphIndexArrayNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathParameterfNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathParameteriNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathStencilDepthOffsetNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathStencilFuncNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathStringNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathSubCommandsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PathSubCoordsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PauseTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PauseTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelDataRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelMapx: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelStoref: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelStorei: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelStorex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTexGenParameterfSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTexGenParameterfvSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTexGenParameteriSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTexGenParameterivSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTexGenSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTransferxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTransformParameterfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTransformParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTransformParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelTransformParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PixelZoomxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointAlongPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterfvSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameteriNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointSize: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PointSizexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PollAsyncSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PollInstrumentsSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonMode: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonOffset: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonOffsetClamp: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonOffsetClampEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PolygonOffsetxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PopDebugGroup: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PopGroupMarkerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PresentFrameDualFillNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PresentFrameKeyedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrimitiveBoundingBox: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrimitiveBoundingBoxARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrimitiveRestartIndex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrimitiveRestartIndexNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrimitiveRestartNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrioritizeTextures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrioritizeTexturesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PrioritizeTexturesxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramBinary: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramBufferParametersIivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramBufferParametersIuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramBufferParametersfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameter4dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameter4dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameter4fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameter4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameterI4iNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameterI4ivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameterI4uiNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameterI4uivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParameters4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParametersI4ivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramEnvParametersI4uivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameter4dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameter4dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameter4fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameter4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameterI4iNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameterI4ivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameterI4uiNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameterI4uivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParameters4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParametersI4ivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramLocalParametersI4uivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramNamedParameter4dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramNamedParameter4dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramNamedParameter4fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramNamedParameter4fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameter4dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameter4dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameter4fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameter4fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameteriARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameters4dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramParameters4fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramPathFragmentInputGenNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramStringARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramSubroutineParametersuivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform1uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform2uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform3uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniform4uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformHandleui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformHandleui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformHandleui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformHandleui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix2x4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x2dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x2fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix3x4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x2dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x2fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformMatrix4x3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramUniformui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProgramVertexLimitNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProvokingVertex: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ProvokingVertexEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PushClientAttribDefaultEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PushDebugGroup: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut PushGroupMarkerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueryCounter: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueryMatrixxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueryObjectParameteruiAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueryResourceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueryResourceTagNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos2xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos4xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterPos4xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RasterSamplesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReadBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReadInstrumentsSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReadPixels: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReadnPixels: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReadnPixelsARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RectxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RectxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReferencePlaneSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReleaseKeyedMutexWin32EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReleaseShaderCompiler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderGpuMaskNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorageMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorageMultisampleAdvancedAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorageMultisampleCoverageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RenderbufferStorageMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodePointerSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeubSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeubvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor4fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor4fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor4ubVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiColor4ubVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiTexCoord2fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuiVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeuivSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeusSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReplacementCodeusvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RequestResidentProgramsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetHistogram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetHistogramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetMemoryObjectParameterNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetMinmax: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetMinmaxEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResizeBuffersMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResolveDepthValuesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResumeTransformFeedback: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResumeTransformFeedbackNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RotatexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleCoverage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleCoverageARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleMapATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleMaskEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleMaskIndexedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleMaskSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SampleMaski: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplePatternEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplePatternSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameterf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SamplerParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScalexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Scissor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScissorArrayv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScissorExclusiveArrayvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScissorExclusiveNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScissorIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ScissorIndexedv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3b: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3bEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3bv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3bvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3sEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3svEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ub: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ubEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ubv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ubvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3us: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3usEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3usv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColor3usvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColorFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColorPointer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColorPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SecondaryColorPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SelectPerfMonitorCountersAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SemaphoreParameterui64vEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SeparableFilter2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SeparableFilter2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetFenceAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetFenceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetFragmentShaderConstantATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetInvariantEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetLocalConstantEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetMultisamplefvAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderBinary: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderOp1EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderOp2EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderOp3EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderSource: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderSourceARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShaderStorageBlockBinding: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShadingRateImageBarrierNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShadingRateImagePaletteNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShadingRateSampleOrderCustomNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ShadingRateSampleOrderNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SharpenTexFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SignalSemaphoreEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SignalSemaphoreui64NVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SignalVkFenceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SignalVkSemaphoreNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpecializeShader: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpecializeShaderARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpriteParameterfSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpriteParameterfvSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpriteParameteriSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SpriteParameterivSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StartInstrumentsSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StateCaptureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilClearTagEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilFillPathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilFillPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilFunc: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilFuncSeparate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilFuncSeparateATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilMaskSeparate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilOp: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilOpSeparate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilOpSeparateATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilOpValueAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilStrokePathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilStrokePathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilThenCoverFillPathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilThenCoverFillPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilThenCoverStrokePathInstancedNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StencilThenCoverStrokePathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StopInstrumentsSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut StringMarkerGREMEDY: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SubpixelPrecisionBiasNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SwizzleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SyncTextureINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TagSampleBufferSGIX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3bEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3bvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3fEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3fvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3sEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Tangent3svEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TangentPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TbufferMask3DFX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TessellationFactorAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TessellationModeAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TestFenceAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TestFenceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TestObjectAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexAttachMemoryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBufferARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBumpParameterfvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexBumpParameterivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord1xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor4fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor4ubVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fColor4ubVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fNormal3fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fNormal3fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fVertex3fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2fVertex3fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord2xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4fColor4fNormal3fVertex4fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4fColor4fNormal3fVertex4fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4fVertex4fSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4fVertex4fvSUN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoord4xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoordFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoordPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoordPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexCoordPointervINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexEnvxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexEnvxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexFilterFuncSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexGenxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexGenxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage2DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage2DMultisampleCoverageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage3DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage3DMultisampleCoverageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexImage4DSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexPageCommitmentARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterxOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexParameterxvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexRenderbufferNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorage2DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorage3DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageMem1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageMem2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageMem2DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageMem3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageMem3DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexStorageSparseAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexSubImage4DSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureAttachMemoryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBarrier: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBarrierNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureBufferRangeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureColorMaskSGIS: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage2DMultisampleCoverageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage2DMultisampleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage3DMultisampleCoverageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureImage3DMultisampleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureLightEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureMaterialEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureNormalEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TexturePageCommitmentEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterIiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterIivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterIuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterIuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameteri: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameteriEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameteriv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureParameterivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureRangeAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureRenderbufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage2DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage2DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage3DMultisample: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorage3DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageMem1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageMem2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageMem2DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageMem3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageMem3DMultisampleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureStorageSparseAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage1D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage1DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage2D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage2DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage3D: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureSubImage3DEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TextureView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TrackMatrixNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackAttribsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackBufferBase: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackBufferRange: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackStreamAttribsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackVaryings: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackVaryingsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformFeedbackVaryingsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TransformPathNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TranslatexOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform1uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform2uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform3uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4i64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4i64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniform4uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformBlockBinding: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformHandleui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformHandleui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformHandleui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformHandleui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2x3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2x3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2x4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix2x4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3x2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3x2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3x4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix3x4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4x2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4x2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4x3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformMatrix4x3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UniformSubroutinesuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniformui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Uniformui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnlockArraysEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapBufferARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapNamedBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapNamedBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapTexture2DINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateObjectBufferATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UploadGpuMaskNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UseProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UseProgramObjectARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UseProgramStages: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UseShaderProgramEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUFiniNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUGetSurfaceivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUInitNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUIsSurfaceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUMapSurfacesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAURegisterOutputSurfaceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAURegisterVideoSurfaceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAURegisterVideoSurfaceWithPictureStructureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUSurfaceAccessNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUUnmapSurfacesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VDPAUUnregisterSurfaceNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ValidateProgram: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ValidateProgramARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ValidateProgramPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantArrayObjectATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantbvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantdvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantsvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantubvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantuivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VariantusvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex2xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex3xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4bOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4bvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4xOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Vertex4xvOES: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayAttribBinding: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayAttribFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayAttribIFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayAttribLFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayBindVertexBufferEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayBindingDivisor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayColorOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayEdgeFlagOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayElementBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayFogCoordOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayIndexOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayMultiTexCoordOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayNormalOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayParameteriAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayRangeAPPLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayRangeNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArraySecondaryColorOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayTexCoordOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribBindingEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribDivisorEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribFormatEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribIFormatEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribIOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribLFormatEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribLOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexAttribOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexBindingDivisorEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexArrayVertexOffsetEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1sNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib1svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2sNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib2svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3sNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib3svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nbv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NbvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Niv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nsv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NsvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nub: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NubARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nubv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NubvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nuiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NuivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4Nusv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4NusvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4bv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4bvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4dNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4fNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4hNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4sNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4ubNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4ubv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4ubvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4ubvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4uivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4usv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttrib4usvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribArrayObjectATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribBinding: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribDivisor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribDivisorARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI1uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI2uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI3uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4bv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4bvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4iEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4ivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4svEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4ubv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4ubvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4uiEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4uivEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4usv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribI4usvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribIFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribIFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribIPointer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribIPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1ui64ARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1ui64vARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL1ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL2ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL3ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4dEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4dvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4i64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4i64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4ui64NV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribL4ui64vNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribLFormat: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribLFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribLPointer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribLPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP1ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP1uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP2ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP2uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP3ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP3uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP4ui: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribP4uiv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribParameteriAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribPointer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribPointerARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribPointerNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs1dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs1fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs1hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs1svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs2dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs2fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs2hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs2svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs3dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs3fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs3hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs3svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs4dvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs4fvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs4hvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs4svNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexAttribs4ubvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexBindingDivisor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexBlendARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexBlendEnvfATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexBlendEnviATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexFormatNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexPointerListIBM: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexPointervINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1dATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1dvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1fATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1fvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1iATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1ivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1sATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream1svATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2dATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2dvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2fATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2fvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2iATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2ivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2sATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream2svATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3dATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3dvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3fATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3fvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3iATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3ivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3sATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream3svATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4dATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4dvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4fATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4fvATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4iATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4ivATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4sATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexStream4svATI: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexWeightPointerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexWeightfEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexWeightfvEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexWeighthNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VertexWeighthvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VideoCaptureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VideoCaptureStreamParameterdvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VideoCaptureStreamParameterfvNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut VideoCaptureStreamParameterivNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut Viewport: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ViewportArrayv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ViewportIndexedf: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ViewportIndexedfv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ViewportPositionWScaleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ViewportSwizzleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitSemaphoreEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitSemaphoreui64NVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitSync: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitVkSemaphoreNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightPathsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightPointerARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightbvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightdvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightfvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightsvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightubvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightuivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WeightusvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2dMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2dvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2fMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2fvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2iMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2ivMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2sMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos2svMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3d: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3dARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3dMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3dv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3dvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3dvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3f: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3fARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3fMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3fv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3fvARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3fvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3i: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3iARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3iMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3iv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3ivARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3ivMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3s: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3sARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3sMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3sv: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3svARB: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos3svMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4dMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4dvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4fMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4fvMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4iMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4ivMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4sMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowPos4svMESA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WindowRectanglesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WriteMaskEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
}

pub fn load<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const raw::c_void {
    unsafe {
         storage::AccumxOES.load(&mut loadfn, "glAccumxOES");
         storage::AcquireKeyedMutexWin32EXT.load(&mut loadfn, "glAcquireKeyedMutexWin32EXT");
         storage::ActiveProgramEXT.load(&mut loadfn, "glActiveProgramEXT");
         storage::ActiveShaderProgram.load(&mut loadfn, "glActiveShaderProgram");
         storage::ActiveStencilFaceEXT.load(&mut loadfn, "glActiveStencilFaceEXT");
         storage::ActiveTexture.load(&mut loadfn, "glActiveTexture");
         storage::ActiveTextureARB.load(&mut loadfn, "glActiveTextureARB");
         storage::ActiveVaryingNV.load(&mut loadfn, "glActiveVaryingNV");
         storage::AlphaFragmentOp1ATI.load(&mut loadfn, "glAlphaFragmentOp1ATI");
         storage::AlphaFragmentOp2ATI.load(&mut loadfn, "glAlphaFragmentOp2ATI");
         storage::AlphaFragmentOp3ATI.load(&mut loadfn, "glAlphaFragmentOp3ATI");
         storage::AlphaFuncxOES.load(&mut loadfn, "glAlphaFuncxOES");
         storage::AlphaToCoverageDitherControlNV.load(&mut loadfn, "glAlphaToCoverageDitherControlNV");
         storage::ApplyFramebufferAttachmentCMAAINTEL.load(&mut loadfn, "glApplyFramebufferAttachmentCMAAINTEL");
         storage::ApplyTextureEXT.load(&mut loadfn, "glApplyTextureEXT");
         storage::AreProgramsResidentNV.load(&mut loadfn, "glAreProgramsResidentNV");
         storage::AreTexturesResidentEXT.load(&mut loadfn, "glAreTexturesResidentEXT");
         storage::ArrayElement.load(&mut loadfn, "glArrayElement");
         storage::ArrayElementEXT.load(&mut loadfn, "glArrayElementEXT");
         storage::ArrayObjectATI.load(&mut loadfn, "glArrayObjectATI");
         storage::AsyncCopyBufferSubDataNVX.load(&mut loadfn, "glAsyncCopyBufferSubDataNVX");
         storage::AsyncCopyImageSubDataNVX.load(&mut loadfn, "glAsyncCopyImageSubDataNVX");
         storage::AsyncMarkerSGIX.load(&mut loadfn, "glAsyncMarkerSGIX");
         storage::AttachObjectARB.load(&mut loadfn, "glAttachObjectARB");
         storage::AttachShader.load(&mut loadfn, "glAttachShader");
         storage::BeginConditionalRender.load(&mut loadfn, "glBeginConditionalRender");
         storage::BeginConditionalRenderNV.load(&mut loadfn, "glBeginConditionalRenderNV");
         storage::BeginConditionalRenderNVX.load(&mut loadfn, "glBeginConditionalRenderNVX");
         storage::BeginFragmentShaderATI.load(&mut loadfn, "glBeginFragmentShaderATI");
         storage::BeginOcclusionQueryNV.load(&mut loadfn, "glBeginOcclusionQueryNV");
         storage::BeginPerfMonitorAMD.load(&mut loadfn, "glBeginPerfMonitorAMD");
         storage::BeginPerfQueryINTEL.load(&mut loadfn, "glBeginPerfQueryINTEL");
         storage::BeginQuery.load(&mut loadfn, "glBeginQuery");
         storage::BeginQueryARB.load(&mut loadfn, "glBeginQueryARB");
         storage::BeginQueryIndexed.load(&mut loadfn, "glBeginQueryIndexed");
         storage::BeginTransformFeedback.load(&mut loadfn, "glBeginTransformFeedback");
         storage::BeginTransformFeedbackEXT.load(&mut loadfn, "glBeginTransformFeedbackEXT");
         storage::BeginTransformFeedbackNV.load(&mut loadfn, "glBeginTransformFeedbackNV");
         storage::BeginVertexShaderEXT.load(&mut loadfn, "glBeginVertexShaderEXT");
         storage::BeginVideoCaptureNV.load(&mut loadfn, "glBeginVideoCaptureNV");
         storage::BindAttribLocation.load(&mut loadfn, "glBindAttribLocation");
         storage::BindAttribLocationARB.load(&mut loadfn, "glBindAttribLocationARB");
         storage::BindBuffer.load(&mut loadfn, "glBindBuffer");
         storage::BindBufferARB.load(&mut loadfn, "glBindBufferARB");
         storage::BindBufferBase.load(&mut loadfn, "glBindBufferBase");
         storage::BindBufferBaseEXT.load(&mut loadfn, "glBindBufferBaseEXT");
         storage::BindBufferBaseNV.load(&mut loadfn, "glBindBufferBaseNV");
         storage::BindBufferOffsetEXT.load(&mut loadfn, "glBindBufferOffsetEXT");
         storage::BindBufferOffsetNV.load(&mut loadfn, "glBindBufferOffsetNV");
         storage::BindBufferRange.load(&mut loadfn, "glBindBufferRange");
         storage::BindBufferRangeEXT.load(&mut loadfn, "glBindBufferRangeEXT");
         storage::BindBufferRangeNV.load(&mut loadfn, "glBindBufferRangeNV");
         storage::BindBuffersBase.load(&mut loadfn, "glBindBuffersBase");
         storage::BindBuffersRange.load(&mut loadfn, "glBindBuffersRange");
         storage::BindFragDataLocation.load(&mut loadfn, "glBindFragDataLocation");
         storage::BindFragDataLocationEXT.load(&mut loadfn, "glBindFragDataLocationEXT");
         storage::BindFragDataLocationIndexed.load(&mut loadfn, "glBindFragDataLocationIndexed");
         storage::BindFragmentShaderATI.load(&mut loadfn, "glBindFragmentShaderATI");
         storage::BindFramebuffer.load(&mut loadfn, "glBindFramebuffer");
         storage::BindFramebufferEXT.load(&mut loadfn, "glBindFramebufferEXT");
         storage::BindImageTexture.load(&mut loadfn, "glBindImageTexture");
         storage::BindImageTextureEXT.load(&mut loadfn, "glBindImageTextureEXT");
         storage::BindImageTextures.load(&mut loadfn, "glBindImageTextures");
         storage::BindLightParameterEXT.load(&mut loadfn, "glBindLightParameterEXT");
         storage::BindMaterialParameterEXT.load(&mut loadfn, "glBindMaterialParameterEXT");
         storage::BindMultiTextureEXT.load(&mut loadfn, "glBindMultiTextureEXT");
         storage::BindParameterEXT.load(&mut loadfn, "glBindParameterEXT");
         storage::BindProgramARB.load(&mut loadfn, "glBindProgramARB");
         storage::BindProgramNV.load(&mut loadfn, "glBindProgramNV");
         storage::BindProgramPipeline.load(&mut loadfn, "glBindProgramPipeline");
         storage::BindRenderbuffer.load(&mut loadfn, "glBindRenderbuffer");
         storage::BindRenderbufferEXT.load(&mut loadfn, "glBindRenderbufferEXT");
         storage::BindSampler.load(&mut loadfn, "glBindSampler");
         storage::BindSamplers.load(&mut loadfn, "glBindSamplers");
         storage::BindShadingRateImageNV.load(&mut loadfn, "glBindShadingRateImageNV");
         storage::BindTexGenParameterEXT.load(&mut loadfn, "glBindTexGenParameterEXT");
         storage::BindTexture.load(&mut loadfn, "glBindTexture");
         storage::BindTextureEXT.load(&mut loadfn, "glBindTextureEXT");
         storage::BindTextureUnit.load(&mut loadfn, "glBindTextureUnit");
         storage::BindTextureUnitParameterEXT.load(&mut loadfn, "glBindTextureUnitParameterEXT");
         storage::BindTextures.load(&mut loadfn, "glBindTextures");
         storage::BindTransformFeedback.load(&mut loadfn, "glBindTransformFeedback");
         storage::BindTransformFeedbackNV.load(&mut loadfn, "glBindTransformFeedbackNV");
         storage::BindVertexArray.load(&mut loadfn, "glBindVertexArray");
         storage::BindVertexArrayAPPLE.load(&mut loadfn, "glBindVertexArrayAPPLE");
         storage::BindVertexBuffer.load(&mut loadfn, "glBindVertexBuffer");
         storage::BindVertexBuffers.load(&mut loadfn, "glBindVertexBuffers");
         storage::BindVertexShaderEXT.load(&mut loadfn, "glBindVertexShaderEXT");
         storage::BindVideoCaptureStreamBufferNV.load(&mut loadfn, "glBindVideoCaptureStreamBufferNV");
         storage::BindVideoCaptureStreamTextureNV.load(&mut loadfn, "glBindVideoCaptureStreamTextureNV");
         storage::Binormal3bEXT.load(&mut loadfn, "glBinormal3bEXT");
         storage::Binormal3bvEXT.load(&mut loadfn, "glBinormal3bvEXT");
         storage::Binormal3dEXT.load(&mut loadfn, "glBinormal3dEXT");
         storage::Binormal3dvEXT.load(&mut loadfn, "glBinormal3dvEXT");
         storage::Binormal3fEXT.load(&mut loadfn, "glBinormal3fEXT");
         storage::Binormal3fvEXT.load(&mut loadfn, "glBinormal3fvEXT");
         storage::Binormal3iEXT.load(&mut loadfn, "glBinormal3iEXT");
         storage::Binormal3ivEXT.load(&mut loadfn, "glBinormal3ivEXT");
         storage::Binormal3sEXT.load(&mut loadfn, "glBinormal3sEXT");
         storage::Binormal3svEXT.load(&mut loadfn, "glBinormal3svEXT");
         storage::BinormalPointerEXT.load(&mut loadfn, "glBinormalPointerEXT");
         storage::BitmapxOES.load(&mut loadfn, "glBitmapxOES");
         storage::BlendBarrier.load(&mut loadfn, "glBlendBarrier");
         storage::BlendBarrierKHR.load(&mut loadfn, "glBlendBarrierKHR");
         storage::BlendBarrierNV.load(&mut loadfn, "glBlendBarrierNV");
         storage::BlendColor.load(&mut loadfn, "glBlendColor");
         storage::BlendColorEXT.load(&mut loadfn, "glBlendColorEXT");
         storage::BlendColorxOES.load(&mut loadfn, "glBlendColorxOES");
         storage::BlendEquation.load(&mut loadfn, "glBlendEquation");
         storage::BlendEquationEXT.load(&mut loadfn, "glBlendEquationEXT");
         storage::BlendEquationIndexedAMD.load(&mut loadfn, "glBlendEquationIndexedAMD");
         storage::BlendEquationSeparate.load(&mut loadfn, "glBlendEquationSeparate");
         storage::BlendEquationSeparateEXT.load(&mut loadfn, "glBlendEquationSeparateEXT");
         storage::BlendEquationSeparateIndexedAMD.load(&mut loadfn, "glBlendEquationSeparateIndexedAMD");
         storage::BlendEquationSeparatei.load(&mut loadfn, "glBlendEquationSeparatei");
         storage::BlendEquationSeparateiARB.load(&mut loadfn, "glBlendEquationSeparateiARB");
         storage::BlendEquationi.load(&mut loadfn, "glBlendEquationi");
         storage::BlendEquationiARB.load(&mut loadfn, "glBlendEquationiARB");
         storage::BlendFunc.load(&mut loadfn, "glBlendFunc");
         storage::BlendFuncIndexedAMD.load(&mut loadfn, "glBlendFuncIndexedAMD");
         storage::BlendFuncSeparate.load(&mut loadfn, "glBlendFuncSeparate");
         storage::BlendFuncSeparateEXT.load(&mut loadfn, "glBlendFuncSeparateEXT");
         storage::BlendFuncSeparateINGR.load(&mut loadfn, "glBlendFuncSeparateINGR");
         storage::BlendFuncSeparateIndexedAMD.load(&mut loadfn, "glBlendFuncSeparateIndexedAMD");
         storage::BlendFuncSeparatei.load(&mut loadfn, "glBlendFuncSeparatei");
         storage::BlendFuncSeparateiARB.load(&mut loadfn, "glBlendFuncSeparateiARB");
         storage::BlendFunci.load(&mut loadfn, "glBlendFunci");
         storage::BlendFunciARB.load(&mut loadfn, "glBlendFunciARB");
         storage::BlendParameteriNV.load(&mut loadfn, "glBlendParameteriNV");
         storage::BlitFramebuffer.load(&mut loadfn, "glBlitFramebuffer");
         storage::BlitFramebufferEXT.load(&mut loadfn, "glBlitFramebufferEXT");
         storage::BlitNamedFramebuffer.load(&mut loadfn, "glBlitNamedFramebuffer");
         storage::BufferAddressRangeNV.load(&mut loadfn, "glBufferAddressRangeNV");
         storage::BufferAttachMemoryNV.load(&mut loadfn, "glBufferAttachMemoryNV");
         storage::BufferData.load(&mut loadfn, "glBufferData");
         storage::BufferDataARB.load(&mut loadfn, "glBufferDataARB");
         storage::BufferPageCommitmentARB.load(&mut loadfn, "glBufferPageCommitmentARB");
         storage::BufferParameteriAPPLE.load(&mut loadfn, "glBufferParameteriAPPLE");
         storage::BufferStorage.load(&mut loadfn, "glBufferStorage");
         storage::BufferStorageExternalEXT.load(&mut loadfn, "glBufferStorageExternalEXT");
         storage::BufferStorageMemEXT.load(&mut loadfn, "glBufferStorageMemEXT");
         storage::BufferSubData.load(&mut loadfn, "glBufferSubData");
         storage::BufferSubDataARB.load(&mut loadfn, "glBufferSubDataARB");
         storage::CallCommandListNV.load(&mut loadfn, "glCallCommandListNV");
         storage::CheckFramebufferStatus.load(&mut loadfn, "glCheckFramebufferStatus");
         storage::CheckFramebufferStatusEXT.load(&mut loadfn, "glCheckFramebufferStatusEXT");
         storage::CheckNamedFramebufferStatus.load(&mut loadfn, "glCheckNamedFramebufferStatus");
         storage::CheckNamedFramebufferStatusEXT.load(&mut loadfn, "glCheckNamedFramebufferStatusEXT");
         storage::ClampColor.load(&mut loadfn, "glClampColor");
         storage::ClampColorARB.load(&mut loadfn, "glClampColorARB");
         storage::Clear.load(&mut loadfn, "glClear");
         storage::ClearAccumxOES.load(&mut loadfn, "glClearAccumxOES");
         storage::ClearBufferData.load(&mut loadfn, "glClearBufferData");
         storage::ClearBufferSubData.load(&mut loadfn, "glClearBufferSubData");
         storage::ClearBufferfi.load(&mut loadfn, "glClearBufferfi");
         storage::ClearBufferfv.load(&mut loadfn, "glClearBufferfv");
         storage::ClearBufferiv.load(&mut loadfn, "glClearBufferiv");
         storage::ClearBufferuiv.load(&mut loadfn, "glClearBufferuiv");
         storage::ClearColor.load(&mut loadfn, "glClearColor");
         storage::ClearColorIiEXT.load(&mut loadfn, "glClearColorIiEXT");
         storage::ClearColorIuiEXT.load(&mut loadfn, "glClearColorIuiEXT");
         storage::ClearColorxOES.load(&mut loadfn, "glClearColorxOES");
         storage::ClearDepth.load(&mut loadfn, "glClearDepth");
         storage::ClearDepthdNV.load(&mut loadfn, "glClearDepthdNV");
         storage::ClearDepthf.load(&mut loadfn, "glClearDepthf");
         storage::ClearDepthfOES.load(&mut loadfn, "glClearDepthfOES");
         storage::ClearDepthxOES.load(&mut loadfn, "glClearDepthxOES");
         storage::ClearNamedBufferData.load(&mut loadfn, "glClearNamedBufferData");
         storage::ClearNamedBufferDataEXT.load(&mut loadfn, "glClearNamedBufferDataEXT");
         storage::ClearNamedBufferSubData.load(&mut loadfn, "glClearNamedBufferSubData");
         storage::ClearNamedBufferSubDataEXT.load(&mut loadfn, "glClearNamedBufferSubDataEXT");
         storage::ClearNamedFramebufferfi.load(&mut loadfn, "glClearNamedFramebufferfi");
         storage::ClearNamedFramebufferfv.load(&mut loadfn, "glClearNamedFramebufferfv");
         storage::ClearNamedFramebufferiv.load(&mut loadfn, "glClearNamedFramebufferiv");
         storage::ClearNamedFramebufferuiv.load(&mut loadfn, "glClearNamedFramebufferuiv");
         storage::ClearStencil.load(&mut loadfn, "glClearStencil");
         storage::ClearTexImage.load(&mut loadfn, "glClearTexImage");
         storage::ClearTexSubImage.load(&mut loadfn, "glClearTexSubImage");
         storage::ClientActiveTexture.load(&mut loadfn, "glClientActiveTexture");
         storage::ClientActiveTextureARB.load(&mut loadfn, "glClientActiveTextureARB");
         storage::ClientActiveVertexStreamATI.load(&mut loadfn, "glClientActiveVertexStreamATI");
         storage::ClientAttribDefaultEXT.load(&mut loadfn, "glClientAttribDefaultEXT");
         storage::ClientWaitSemaphoreui64NVX.load(&mut loadfn, "glClientWaitSemaphoreui64NVX");
         storage::ClientWaitSync.load(&mut loadfn, "glClientWaitSync");
         storage::ClipControl.load(&mut loadfn, "glClipControl");
         storage::ClipPlanefOES.load(&mut loadfn, "glClipPlanefOES");
         storage::ClipPlanexOES.load(&mut loadfn, "glClipPlanexOES");
         storage::Color3fVertex3fSUN.load(&mut loadfn, "glColor3fVertex3fSUN");
         storage::Color3fVertex3fvSUN.load(&mut loadfn, "glColor3fVertex3fvSUN");
         storage::Color3hNV.load(&mut loadfn, "glColor3hNV");
         storage::Color3hvNV.load(&mut loadfn, "glColor3hvNV");
         storage::Color3xOES.load(&mut loadfn, "glColor3xOES");
         storage::Color3xvOES.load(&mut loadfn, "glColor3xvOES");
         storage::Color4fNormal3fVertex3fSUN.load(&mut loadfn, "glColor4fNormal3fVertex3fSUN");
         storage::Color4fNormal3fVertex3fvSUN.load(&mut loadfn, "glColor4fNormal3fVertex3fvSUN");
         storage::Color4hNV.load(&mut loadfn, "glColor4hNV");
         storage::Color4hvNV.load(&mut loadfn, "glColor4hvNV");
         storage::Color4ubVertex2fSUN.load(&mut loadfn, "glColor4ubVertex2fSUN");
         storage::Color4ubVertex2fvSUN.load(&mut loadfn, "glColor4ubVertex2fvSUN");
         storage::Color4ubVertex3fSUN.load(&mut loadfn, "glColor4ubVertex3fSUN");
         storage::Color4ubVertex3fvSUN.load(&mut loadfn, "glColor4ubVertex3fvSUN");
         storage::Color4xOES.load(&mut loadfn, "glColor4xOES");
         storage::Color4xvOES.load(&mut loadfn, "glColor4xvOES");
         storage::ColorFormatNV.load(&mut loadfn, "glColorFormatNV");
         storage::ColorFragmentOp1ATI.load(&mut loadfn, "glColorFragmentOp1ATI");
         storage::ColorFragmentOp2ATI.load(&mut loadfn, "glColorFragmentOp2ATI");
         storage::ColorFragmentOp3ATI.load(&mut loadfn, "glColorFragmentOp3ATI");
         storage::ColorMask.load(&mut loadfn, "glColorMask");
         storage::ColorMaskIndexedEXT.load(&mut loadfn, "glColorMaskIndexedEXT");
         storage::ColorMaski.load(&mut loadfn, "glColorMaski");
         storage::ColorPointerEXT.load(&mut loadfn, "glColorPointerEXT");
         storage::ColorPointerListIBM.load(&mut loadfn, "glColorPointerListIBM");
         storage::ColorPointervINTEL.load(&mut loadfn, "glColorPointervINTEL");
         storage::ColorSubTable.load(&mut loadfn, "glColorSubTable");
         storage::ColorSubTableEXT.load(&mut loadfn, "glColorSubTableEXT");
         storage::ColorTable.load(&mut loadfn, "glColorTable");
         storage::ColorTableEXT.load(&mut loadfn, "glColorTableEXT");
         storage::ColorTableParameterfv.load(&mut loadfn, "glColorTableParameterfv");
         storage::ColorTableParameterfvSGI.load(&mut loadfn, "glColorTableParameterfvSGI");
         storage::ColorTableParameteriv.load(&mut loadfn, "glColorTableParameteriv");
         storage::ColorTableParameterivSGI.load(&mut loadfn, "glColorTableParameterivSGI");
         storage::ColorTableSGI.load(&mut loadfn, "glColorTableSGI");
         storage::CombinerInputNV.load(&mut loadfn, "glCombinerInputNV");
         storage::CombinerOutputNV.load(&mut loadfn, "glCombinerOutputNV");
         storage::CombinerParameterfNV.load(&mut loadfn, "glCombinerParameterfNV");
         storage::CombinerParameterfvNV.load(&mut loadfn, "glCombinerParameterfvNV");
         storage::CombinerParameteriNV.load(&mut loadfn, "glCombinerParameteriNV");
         storage::CombinerParameterivNV.load(&mut loadfn, "glCombinerParameterivNV");
         storage::CombinerStageParameterfvNV.load(&mut loadfn, "glCombinerStageParameterfvNV");
         storage::CommandListSegmentsNV.load(&mut loadfn, "glCommandListSegmentsNV");
         storage::CompileCommandListNV.load(&mut loadfn, "glCompileCommandListNV");
         storage::CompileShader.load(&mut loadfn, "glCompileShader");
         storage::CompileShaderARB.load(&mut loadfn, "glCompileShaderARB");
         storage::CompileShaderIncludeARB.load(&mut loadfn, "glCompileShaderIncludeARB");
         storage::CompressedMultiTexImage1DEXT.load(&mut loadfn, "glCompressedMultiTexImage1DEXT");
         storage::CompressedMultiTexImage2DEXT.load(&mut loadfn, "glCompressedMultiTexImage2DEXT");
         storage::CompressedMultiTexImage3DEXT.load(&mut loadfn, "glCompressedMultiTexImage3DEXT");
         storage::CompressedMultiTexSubImage1DEXT.load(&mut loadfn, "glCompressedMultiTexSubImage1DEXT");
         storage::CompressedMultiTexSubImage2DEXT.load(&mut loadfn, "glCompressedMultiTexSubImage2DEXT");
         storage::CompressedMultiTexSubImage3DEXT.load(&mut loadfn, "glCompressedMultiTexSubImage3DEXT");
         storage::CompressedTexImage1D.load(&mut loadfn, "glCompressedTexImage1D");
         storage::CompressedTexImage1DARB.load(&mut loadfn, "glCompressedTexImage1DARB");
         storage::CompressedTexImage2D.load(&mut loadfn, "glCompressedTexImage2D");
         storage::CompressedTexImage2DARB.load(&mut loadfn, "glCompressedTexImage2DARB");
         storage::CompressedTexImage3D.load(&mut loadfn, "glCompressedTexImage3D");
         storage::CompressedTexImage3DARB.load(&mut loadfn, "glCompressedTexImage3DARB");
         storage::CompressedTexSubImage1D.load(&mut loadfn, "glCompressedTexSubImage1D");
         storage::CompressedTexSubImage1DARB.load(&mut loadfn, "glCompressedTexSubImage1DARB");
         storage::CompressedTexSubImage2D.load(&mut loadfn, "glCompressedTexSubImage2D");
         storage::CompressedTexSubImage2DARB.load(&mut loadfn, "glCompressedTexSubImage2DARB");
         storage::CompressedTexSubImage3D.load(&mut loadfn, "glCompressedTexSubImage3D");
         storage::CompressedTexSubImage3DARB.load(&mut loadfn, "glCompressedTexSubImage3DARB");
         storage::CompressedTextureImage1DEXT.load(&mut loadfn, "glCompressedTextureImage1DEXT");
         storage::CompressedTextureImage2DEXT.load(&mut loadfn, "glCompressedTextureImage2DEXT");
         storage::CompressedTextureImage3DEXT.load(&mut loadfn, "glCompressedTextureImage3DEXT");
         storage::CompressedTextureSubImage1D.load(&mut loadfn, "glCompressedTextureSubImage1D");
         storage::CompressedTextureSubImage1DEXT.load(&mut loadfn, "glCompressedTextureSubImage1DEXT");
         storage::CompressedTextureSubImage2D.load(&mut loadfn, "glCompressedTextureSubImage2D");
         storage::CompressedTextureSubImage2DEXT.load(&mut loadfn, "glCompressedTextureSubImage2DEXT");
         storage::CompressedTextureSubImage3D.load(&mut loadfn, "glCompressedTextureSubImage3D");
         storage::CompressedTextureSubImage3DEXT.load(&mut loadfn, "glCompressedTextureSubImage3DEXT");
         storage::ConservativeRasterParameterfNV.load(&mut loadfn, "glConservativeRasterParameterfNV");
         storage::ConservativeRasterParameteriNV.load(&mut loadfn, "glConservativeRasterParameteriNV");
         storage::ConvolutionFilter1D.load(&mut loadfn, "glConvolutionFilter1D");
         storage::ConvolutionFilter1DEXT.load(&mut loadfn, "glConvolutionFilter1DEXT");
         storage::ConvolutionFilter2D.load(&mut loadfn, "glConvolutionFilter2D");
         storage::ConvolutionFilter2DEXT.load(&mut loadfn, "glConvolutionFilter2DEXT");
         storage::ConvolutionParameterf.load(&mut loadfn, "glConvolutionParameterf");
         storage::ConvolutionParameterfEXT.load(&mut loadfn, "glConvolutionParameterfEXT");
         storage::ConvolutionParameterfv.load(&mut loadfn, "glConvolutionParameterfv");
         storage::ConvolutionParameterfvEXT.load(&mut loadfn, "glConvolutionParameterfvEXT");
         storage::ConvolutionParameteri.load(&mut loadfn, "glConvolutionParameteri");
         storage::ConvolutionParameteriEXT.load(&mut loadfn, "glConvolutionParameteriEXT");
         storage::ConvolutionParameteriv.load(&mut loadfn, "glConvolutionParameteriv");
         storage::ConvolutionParameterivEXT.load(&mut loadfn, "glConvolutionParameterivEXT");
         storage::ConvolutionParameterxOES.load(&mut loadfn, "glConvolutionParameterxOES");
         storage::ConvolutionParameterxvOES.load(&mut loadfn, "glConvolutionParameterxvOES");
         storage::CopyBufferSubData.load(&mut loadfn, "glCopyBufferSubData");
         storage::CopyColorSubTable.load(&mut loadfn, "glCopyColorSubTable");
         storage::CopyColorSubTableEXT.load(&mut loadfn, "glCopyColorSubTableEXT");
         storage::CopyColorTable.load(&mut loadfn, "glCopyColorTable");
         storage::CopyColorTableSGI.load(&mut loadfn, "glCopyColorTableSGI");
         storage::CopyConvolutionFilter1D.load(&mut loadfn, "glCopyConvolutionFilter1D");
         storage::CopyConvolutionFilter1DEXT.load(&mut loadfn, "glCopyConvolutionFilter1DEXT");
         storage::CopyConvolutionFilter2D.load(&mut loadfn, "glCopyConvolutionFilter2D");
         storage::CopyConvolutionFilter2DEXT.load(&mut loadfn, "glCopyConvolutionFilter2DEXT");
         storage::CopyImageSubData.load(&mut loadfn, "glCopyImageSubData");
         storage::CopyImageSubDataNV.load(&mut loadfn, "glCopyImageSubDataNV");
         storage::CopyMultiTexImage1DEXT.load(&mut loadfn, "glCopyMultiTexImage1DEXT");
         storage::CopyMultiTexImage2DEXT.load(&mut loadfn, "glCopyMultiTexImage2DEXT");
         storage::CopyMultiTexSubImage1DEXT.load(&mut loadfn, "glCopyMultiTexSubImage1DEXT");
         storage::CopyMultiTexSubImage2DEXT.load(&mut loadfn, "glCopyMultiTexSubImage2DEXT");
         storage::CopyMultiTexSubImage3DEXT.load(&mut loadfn, "glCopyMultiTexSubImage3DEXT");
         storage::CopyNamedBufferSubData.load(&mut loadfn, "glCopyNamedBufferSubData");
         storage::CopyPathNV.load(&mut loadfn, "glCopyPathNV");
         storage::CopyTexImage1D.load(&mut loadfn, "glCopyTexImage1D");
         storage::CopyTexImage1DEXT.load(&mut loadfn, "glCopyTexImage1DEXT");
         storage::CopyTexImage2D.load(&mut loadfn, "glCopyTexImage2D");
         storage::CopyTexImage2DEXT.load(&mut loadfn, "glCopyTexImage2DEXT");
         storage::CopyTexSubImage1D.load(&mut loadfn, "glCopyTexSubImage1D");
         storage::CopyTexSubImage1DEXT.load(&mut loadfn, "glCopyTexSubImage1DEXT");
         storage::CopyTexSubImage2D.load(&mut loadfn, "glCopyTexSubImage2D");
         storage::CopyTexSubImage2DEXT.load(&mut loadfn, "glCopyTexSubImage2DEXT");
         storage::CopyTexSubImage3D.load(&mut loadfn, "glCopyTexSubImage3D");
         storage::CopyTexSubImage3DEXT.load(&mut loadfn, "glCopyTexSubImage3DEXT");
         storage::CopyTextureImage1DEXT.load(&mut loadfn, "glCopyTextureImage1DEXT");
         storage::CopyTextureImage2DEXT.load(&mut loadfn, "glCopyTextureImage2DEXT");
         storage::CopyTextureSubImage1D.load(&mut loadfn, "glCopyTextureSubImage1D");
         storage::CopyTextureSubImage1DEXT.load(&mut loadfn, "glCopyTextureSubImage1DEXT");
         storage::CopyTextureSubImage2D.load(&mut loadfn, "glCopyTextureSubImage2D");
         storage::CopyTextureSubImage2DEXT.load(&mut loadfn, "glCopyTextureSubImage2DEXT");
         storage::CopyTextureSubImage3D.load(&mut loadfn, "glCopyTextureSubImage3D");
         storage::CopyTextureSubImage3DEXT.load(&mut loadfn, "glCopyTextureSubImage3DEXT");
         storage::CoverFillPathInstancedNV.load(&mut loadfn, "glCoverFillPathInstancedNV");
         storage::CoverFillPathNV.load(&mut loadfn, "glCoverFillPathNV");
         storage::CoverStrokePathInstancedNV.load(&mut loadfn, "glCoverStrokePathInstancedNV");
         storage::CoverStrokePathNV.load(&mut loadfn, "glCoverStrokePathNV");
         storage::CoverageModulationNV.load(&mut loadfn, "glCoverageModulationNV");
         storage::CoverageModulationTableNV.load(&mut loadfn, "glCoverageModulationTableNV");
         storage::CreateBuffers.load(&mut loadfn, "glCreateBuffers");
         storage::CreateCommandListsNV.load(&mut loadfn, "glCreateCommandListsNV");
         storage::CreateFramebuffers.load(&mut loadfn, "glCreateFramebuffers");
         storage::CreateMemoryObjectsEXT.load(&mut loadfn, "glCreateMemoryObjectsEXT");
         storage::CreatePerfQueryINTEL.load(&mut loadfn, "glCreatePerfQueryINTEL");
         storage::CreateProgram.load(&mut loadfn, "glCreateProgram");
         storage::CreateProgramObjectARB.load(&mut loadfn, "glCreateProgramObjectARB");
         storage::CreateProgramPipelines.load(&mut loadfn, "glCreateProgramPipelines");
         storage::CreateProgressFenceNVX.load(&mut loadfn, "glCreateProgressFenceNVX");
         storage::CreateQueries.load(&mut loadfn, "glCreateQueries");
         storage::CreateRenderbuffers.load(&mut loadfn, "glCreateRenderbuffers");
         storage::CreateSamplers.load(&mut loadfn, "glCreateSamplers");
         storage::CreateShader.load(&mut loadfn, "glCreateShader");
         storage::CreateShaderObjectARB.load(&mut loadfn, "glCreateShaderObjectARB");
         storage::CreateShaderProgramEXT.load(&mut loadfn, "glCreateShaderProgramEXT");
         storage::CreateShaderProgramv.load(&mut loadfn, "glCreateShaderProgramv");
         storage::CreateStatesNV.load(&mut loadfn, "glCreateStatesNV");
         storage::CreateSyncFromCLeventARB.load(&mut loadfn, "glCreateSyncFromCLeventARB");
         storage::CreateTextures.load(&mut loadfn, "glCreateTextures");
         storage::CreateTransformFeedbacks.load(&mut loadfn, "glCreateTransformFeedbacks");
         storage::CreateVertexArrays.load(&mut loadfn, "glCreateVertexArrays");
         storage::CullFace.load(&mut loadfn, "glCullFace");
         storage::CullParameterdvEXT.load(&mut loadfn, "glCullParameterdvEXT");
         storage::CullParameterfvEXT.load(&mut loadfn, "glCullParameterfvEXT");
         storage::CurrentPaletteMatrixARB.load(&mut loadfn, "glCurrentPaletteMatrixARB");
         storage::DebugMessageCallback.load(&mut loadfn, "glDebugMessageCallback");
         storage::DebugMessageCallbackAMD.load(&mut loadfn, "glDebugMessageCallbackAMD");
         storage::DebugMessageCallbackARB.load(&mut loadfn, "glDebugMessageCallbackARB");
         storage::DebugMessageControl.load(&mut loadfn, "glDebugMessageControl");
         storage::DebugMessageControlARB.load(&mut loadfn, "glDebugMessageControlARB");
         storage::DebugMessageEnableAMD.load(&mut loadfn, "glDebugMessageEnableAMD");
         storage::DebugMessageInsert.load(&mut loadfn, "glDebugMessageInsert");
         storage::DebugMessageInsertAMD.load(&mut loadfn, "glDebugMessageInsertAMD");
         storage::DebugMessageInsertARB.load(&mut loadfn, "glDebugMessageInsertARB");
         storage::DeformSGIX.load(&mut loadfn, "glDeformSGIX");
         storage::DeformationMap3dSGIX.load(&mut loadfn, "glDeformationMap3dSGIX");
         storage::DeformationMap3fSGIX.load(&mut loadfn, "glDeformationMap3fSGIX");
         storage::DeleteAsyncMarkersSGIX.load(&mut loadfn, "glDeleteAsyncMarkersSGIX");
         storage::DeleteBuffers.load(&mut loadfn, "glDeleteBuffers");
         storage::DeleteBuffersARB.load(&mut loadfn, "glDeleteBuffersARB");
         storage::DeleteCommandListsNV.load(&mut loadfn, "glDeleteCommandListsNV");
         storage::DeleteFencesAPPLE.load(&mut loadfn, "glDeleteFencesAPPLE");
         storage::DeleteFencesNV.load(&mut loadfn, "glDeleteFencesNV");
         storage::DeleteFragmentShaderATI.load(&mut loadfn, "glDeleteFragmentShaderATI");
         storage::DeleteFramebuffers.load(&mut loadfn, "glDeleteFramebuffers");
         storage::DeleteFramebuffersEXT.load(&mut loadfn, "glDeleteFramebuffersEXT");
         storage::DeleteMemoryObjectsEXT.load(&mut loadfn, "glDeleteMemoryObjectsEXT");
         storage::DeleteNamedStringARB.load(&mut loadfn, "glDeleteNamedStringARB");
         storage::DeleteNamesAMD.load(&mut loadfn, "glDeleteNamesAMD");
         storage::DeleteObjectARB.load(&mut loadfn, "glDeleteObjectARB");
         storage::DeleteOcclusionQueriesNV.load(&mut loadfn, "glDeleteOcclusionQueriesNV");
         storage::DeletePathsNV.load(&mut loadfn, "glDeletePathsNV");
         storage::DeletePerfMonitorsAMD.load(&mut loadfn, "glDeletePerfMonitorsAMD");
         storage::DeletePerfQueryINTEL.load(&mut loadfn, "glDeletePerfQueryINTEL");
         storage::DeleteProgram.load(&mut loadfn, "glDeleteProgram");
         storage::DeleteProgramPipelines.load(&mut loadfn, "glDeleteProgramPipelines");
         storage::DeleteProgramsARB.load(&mut loadfn, "glDeleteProgramsARB");
         storage::DeleteProgramsNV.load(&mut loadfn, "glDeleteProgramsNV");
         storage::DeleteQueries.load(&mut loadfn, "glDeleteQueries");
         storage::DeleteQueriesARB.load(&mut loadfn, "glDeleteQueriesARB");
         storage::DeleteQueryResourceTagNV.load(&mut loadfn, "glDeleteQueryResourceTagNV");
         storage::DeleteRenderbuffers.load(&mut loadfn, "glDeleteRenderbuffers");
         storage::DeleteRenderbuffersEXT.load(&mut loadfn, "glDeleteRenderbuffersEXT");
         storage::DeleteSamplers.load(&mut loadfn, "glDeleteSamplers");
         storage::DeleteSemaphoresEXT.load(&mut loadfn, "glDeleteSemaphoresEXT");
         storage::DeleteShader.load(&mut loadfn, "glDeleteShader");
         storage::DeleteStatesNV.load(&mut loadfn, "glDeleteStatesNV");
         storage::DeleteSync.load(&mut loadfn, "glDeleteSync");
         storage::DeleteTextures.load(&mut loadfn, "glDeleteTextures");
         storage::DeleteTexturesEXT.load(&mut loadfn, "glDeleteTexturesEXT");
         storage::DeleteTransformFeedbacks.load(&mut loadfn, "glDeleteTransformFeedbacks");
         storage::DeleteTransformFeedbacksNV.load(&mut loadfn, "glDeleteTransformFeedbacksNV");
         storage::DeleteVertexArrays.load(&mut loadfn, "glDeleteVertexArrays");
         storage::DeleteVertexArraysAPPLE.load(&mut loadfn, "glDeleteVertexArraysAPPLE");
         storage::DeleteVertexShaderEXT.load(&mut loadfn, "glDeleteVertexShaderEXT");
         storage::DepthBoundsEXT.load(&mut loadfn, "glDepthBoundsEXT");
         storage::DepthBoundsdNV.load(&mut loadfn, "glDepthBoundsdNV");
         storage::DepthFunc.load(&mut loadfn, "glDepthFunc");
         storage::DepthMask.load(&mut loadfn, "glDepthMask");
         storage::DepthRange.load(&mut loadfn, "glDepthRange");
         storage::DepthRangeArrayv.load(&mut loadfn, "glDepthRangeArrayv");
         storage::DepthRangeIndexed.load(&mut loadfn, "glDepthRangeIndexed");
         storage::DepthRangedNV.load(&mut loadfn, "glDepthRangedNV");
         storage::DepthRangef.load(&mut loadfn, "glDepthRangef");
         storage::DepthRangefOES.load(&mut loadfn, "glDepthRangefOES");
         storage::DepthRangexOES.load(&mut loadfn, "glDepthRangexOES");
         storage::DetachObjectARB.load(&mut loadfn, "glDetachObjectARB");
         storage::DetachShader.load(&mut loadfn, "glDetachShader");
         storage::DetailTexFuncSGIS.load(&mut loadfn, "glDetailTexFuncSGIS");
         storage::Disable.load(&mut loadfn, "glDisable");
         storage::DisableClientStateIndexedEXT.load(&mut loadfn, "glDisableClientStateIndexedEXT");
         storage::DisableClientStateiEXT.load(&mut loadfn, "glDisableClientStateiEXT");
         storage::DisableIndexedEXT.load(&mut loadfn, "glDisableIndexedEXT");
         storage::DisableVariantClientStateEXT.load(&mut loadfn, "glDisableVariantClientStateEXT");
         storage::DisableVertexArrayAttrib.load(&mut loadfn, "glDisableVertexArrayAttrib");
         storage::DisableVertexArrayAttribEXT.load(&mut loadfn, "glDisableVertexArrayAttribEXT");
         storage::DisableVertexArrayEXT.load(&mut loadfn, "glDisableVertexArrayEXT");
         storage::DisableVertexAttribAPPLE.load(&mut loadfn, "glDisableVertexAttribAPPLE");
         storage::DisableVertexAttribArray.load(&mut loadfn, "glDisableVertexAttribArray");
         storage::DisableVertexAttribArrayARB.load(&mut loadfn, "glDisableVertexAttribArrayARB");
         storage::Disablei.load(&mut loadfn, "glDisablei");
         storage::DispatchCompute.load(&mut loadfn, "glDispatchCompute");
         storage::DispatchComputeGroupSizeARB.load(&mut loadfn, "glDispatchComputeGroupSizeARB");
         storage::DispatchComputeIndirect.load(&mut loadfn, "glDispatchComputeIndirect");
         storage::DrawArrays.load(&mut loadfn, "glDrawArrays");
         storage::DrawArraysEXT.load(&mut loadfn, "glDrawArraysEXT");
         storage::DrawArraysIndirect.load(&mut loadfn, "glDrawArraysIndirect");
         storage::DrawArraysInstanced.load(&mut loadfn, "glDrawArraysInstanced");
         storage::DrawArraysInstancedARB.load(&mut loadfn, "glDrawArraysInstancedARB");
         storage::DrawArraysInstancedBaseInstance.load(&mut loadfn, "glDrawArraysInstancedBaseInstance");
         storage::DrawArraysInstancedEXT.load(&mut loadfn, "glDrawArraysInstancedEXT");
         storage::DrawBuffer.load(&mut loadfn, "glDrawBuffer");
         storage::DrawBuffers.load(&mut loadfn, "glDrawBuffers");
         storage::DrawBuffersARB.load(&mut loadfn, "glDrawBuffersARB");
         storage::DrawBuffersATI.load(&mut loadfn, "glDrawBuffersATI");
         storage::DrawCommandsAddressNV.load(&mut loadfn, "glDrawCommandsAddressNV");
         storage::DrawCommandsNV.load(&mut loadfn, "glDrawCommandsNV");
         storage::DrawCommandsStatesAddressNV.load(&mut loadfn, "glDrawCommandsStatesAddressNV");
         storage::DrawCommandsStatesNV.load(&mut loadfn, "glDrawCommandsStatesNV");
         storage::DrawElementArrayAPPLE.load(&mut loadfn, "glDrawElementArrayAPPLE");
         storage::DrawElementArrayATI.load(&mut loadfn, "glDrawElementArrayATI");
         storage::DrawElements.load(&mut loadfn, "glDrawElements");
         storage::DrawElementsBaseVertex.load(&mut loadfn, "glDrawElementsBaseVertex");
         storage::DrawElementsIndirect.load(&mut loadfn, "glDrawElementsIndirect");
         storage::DrawElementsInstanced.load(&mut loadfn, "glDrawElementsInstanced");
         storage::DrawElementsInstancedARB.load(&mut loadfn, "glDrawElementsInstancedARB");
         storage::DrawElementsInstancedBaseInstance.load(&mut loadfn, "glDrawElementsInstancedBaseInstance");
         storage::DrawElementsInstancedBaseVertex.load(&mut loadfn, "glDrawElementsInstancedBaseVertex");
         storage::DrawElementsInstancedBaseVertexBaseInstance.load(&mut loadfn, "glDrawElementsInstancedBaseVertexBaseInstance");
         storage::DrawElementsInstancedEXT.load(&mut loadfn, "glDrawElementsInstancedEXT");
         storage::DrawMeshArraysSUN.load(&mut loadfn, "glDrawMeshArraysSUN");
         storage::DrawMeshTasksIndirectNV.load(&mut loadfn, "glDrawMeshTasksIndirectNV");
         storage::DrawMeshTasksNV.load(&mut loadfn, "glDrawMeshTasksNV");
         storage::DrawRangeElementArrayAPPLE.load(&mut loadfn, "glDrawRangeElementArrayAPPLE");
         storage::DrawRangeElementArrayATI.load(&mut loadfn, "glDrawRangeElementArrayATI");
         storage::DrawRangeElements.load(&mut loadfn, "glDrawRangeElements");
         storage::DrawRangeElementsBaseVertex.load(&mut loadfn, "glDrawRangeElementsBaseVertex");
         storage::DrawRangeElementsEXT.load(&mut loadfn, "glDrawRangeElementsEXT");
         storage::DrawTextureNV.load(&mut loadfn, "glDrawTextureNV");
         storage::DrawTransformFeedback.load(&mut loadfn, "glDrawTransformFeedback");
         storage::DrawTransformFeedbackInstanced.load(&mut loadfn, "glDrawTransformFeedbackInstanced");
         storage::DrawTransformFeedbackNV.load(&mut loadfn, "glDrawTransformFeedbackNV");
         storage::DrawTransformFeedbackStream.load(&mut loadfn, "glDrawTransformFeedbackStream");
         storage::DrawTransformFeedbackStreamInstanced.load(&mut loadfn, "glDrawTransformFeedbackStreamInstanced");
         storage::DrawVkImageNV.load(&mut loadfn, "glDrawVkImageNV");
         storage::EGLImageTargetTexStorageEXT.load(&mut loadfn, "glEGLImageTargetTexStorageEXT");
         storage::EGLImageTargetTextureStorageEXT.load(&mut loadfn, "glEGLImageTargetTextureStorageEXT");
         storage::EdgeFlagFormatNV.load(&mut loadfn, "glEdgeFlagFormatNV");
         storage::EdgeFlagPointerEXT.load(&mut loadfn, "glEdgeFlagPointerEXT");
         storage::EdgeFlagPointerListIBM.load(&mut loadfn, "glEdgeFlagPointerListIBM");
         storage::ElementPointerAPPLE.load(&mut loadfn, "glElementPointerAPPLE");
         storage::ElementPointerATI.load(&mut loadfn, "glElementPointerATI");
         storage::Enable.load(&mut loadfn, "glEnable");
         storage::EnableClientStateIndexedEXT.load(&mut loadfn, "glEnableClientStateIndexedEXT");
         storage::EnableClientStateiEXT.load(&mut loadfn, "glEnableClientStateiEXT");
         storage::EnableIndexedEXT.load(&mut loadfn, "glEnableIndexedEXT");
         storage::EnableVariantClientStateEXT.load(&mut loadfn, "glEnableVariantClientStateEXT");
         storage::EnableVertexArrayAttrib.load(&mut loadfn, "glEnableVertexArrayAttrib");
         storage::EnableVertexArrayAttribEXT.load(&mut loadfn, "glEnableVertexArrayAttribEXT");
         storage::EnableVertexArrayEXT.load(&mut loadfn, "glEnableVertexArrayEXT");
         storage::EnableVertexAttribAPPLE.load(&mut loadfn, "glEnableVertexAttribAPPLE");
         storage::EnableVertexAttribArray.load(&mut loadfn, "glEnableVertexAttribArray");
         storage::EnableVertexAttribArrayARB.load(&mut loadfn, "glEnableVertexAttribArrayARB");
         storage::Enablei.load(&mut loadfn, "glEnablei");
         storage::EndConditionalRender.load(&mut loadfn, "glEndConditionalRender");
         storage::EndConditionalRenderNV.load(&mut loadfn, "glEndConditionalRenderNV");
         storage::EndConditionalRenderNVX.load(&mut loadfn, "glEndConditionalRenderNVX");
         storage::EndFragmentShaderATI.load(&mut loadfn, "glEndFragmentShaderATI");
         storage::EndOcclusionQueryNV.load(&mut loadfn, "glEndOcclusionQueryNV");
         storage::EndPerfMonitorAMD.load(&mut loadfn, "glEndPerfMonitorAMD");
         storage::EndPerfQueryINTEL.load(&mut loadfn, "glEndPerfQueryINTEL");
         storage::EndQuery.load(&mut loadfn, "glEndQuery");
         storage::EndQueryARB.load(&mut loadfn, "glEndQueryARB");
         storage::EndQueryIndexed.load(&mut loadfn, "glEndQueryIndexed");
         storage::EndTransformFeedback.load(&mut loadfn, "glEndTransformFeedback");
         storage::EndTransformFeedbackEXT.load(&mut loadfn, "glEndTransformFeedbackEXT");
         storage::EndTransformFeedbackNV.load(&mut loadfn, "glEndTransformFeedbackNV");
         storage::EndVertexShaderEXT.load(&mut loadfn, "glEndVertexShaderEXT");
         storage::EndVideoCaptureNV.load(&mut loadfn, "glEndVideoCaptureNV");
         storage::EvalCoord1xOES.load(&mut loadfn, "glEvalCoord1xOES");
         storage::EvalCoord1xvOES.load(&mut loadfn, "glEvalCoord1xvOES");
         storage::EvalCoord2xOES.load(&mut loadfn, "glEvalCoord2xOES");
         storage::EvalCoord2xvOES.load(&mut loadfn, "glEvalCoord2xvOES");
         storage::EvalMapsNV.load(&mut loadfn, "glEvalMapsNV");
         storage::EvaluateDepthValuesARB.load(&mut loadfn, "glEvaluateDepthValuesARB");
         storage::ExecuteProgramNV.load(&mut loadfn, "glExecuteProgramNV");
         storage::ExtractComponentEXT.load(&mut loadfn, "glExtractComponentEXT");
         storage::FeedbackBufferxOES.load(&mut loadfn, "glFeedbackBufferxOES");
         storage::FenceSync.load(&mut loadfn, "glFenceSync");
         storage::FinalCombinerInputNV.load(&mut loadfn, "glFinalCombinerInputNV");
         storage::Finish.load(&mut loadfn, "glFinish");
         storage::FinishAsyncSGIX.load(&mut loadfn, "glFinishAsyncSGIX");
         storage::FinishFenceAPPLE.load(&mut loadfn, "glFinishFenceAPPLE");
         storage::FinishFenceNV.load(&mut loadfn, "glFinishFenceNV");
         storage::FinishObjectAPPLE.load(&mut loadfn, "glFinishObjectAPPLE");
         storage::FinishTextureSUNX.load(&mut loadfn, "glFinishTextureSUNX");
         storage::Flush.load(&mut loadfn, "glFlush");
         storage::FlushMappedBufferRange.load(&mut loadfn, "glFlushMappedBufferRange");
         storage::FlushMappedBufferRangeAPPLE.load(&mut loadfn, "glFlushMappedBufferRangeAPPLE");
         storage::FlushMappedNamedBufferRange.load(&mut loadfn, "glFlushMappedNamedBufferRange");
         storage::FlushMappedNamedBufferRangeEXT.load(&mut loadfn, "glFlushMappedNamedBufferRangeEXT");
         storage::FlushPixelDataRangeNV.load(&mut loadfn, "glFlushPixelDataRangeNV");
         storage::FlushRasterSGIX.load(&mut loadfn, "glFlushRasterSGIX");
         storage::FlushStaticDataIBM.load(&mut loadfn, "glFlushStaticDataIBM");
         storage::FlushVertexArrayRangeAPPLE.load(&mut loadfn, "glFlushVertexArrayRangeAPPLE");
         storage::FlushVertexArrayRangeNV.load(&mut loadfn, "glFlushVertexArrayRangeNV");
         storage::FogCoordFormatNV.load(&mut loadfn, "glFogCoordFormatNV");
         storage::FogCoordPointer.load(&mut loadfn, "glFogCoordPointer");
         storage::FogCoordPointerEXT.load(&mut loadfn, "glFogCoordPointerEXT");
         storage::FogCoordPointerListIBM.load(&mut loadfn, "glFogCoordPointerListIBM");
         storage::FogCoordd.load(&mut loadfn, "glFogCoordd");
         storage::FogCoorddEXT.load(&mut loadfn, "glFogCoorddEXT");
         storage::FogCoorddv.load(&mut loadfn, "glFogCoorddv");
         storage::FogCoorddvEXT.load(&mut loadfn, "glFogCoorddvEXT");
         storage::FogCoordf.load(&mut loadfn, "glFogCoordf");
         storage::FogCoordfEXT.load(&mut loadfn, "glFogCoordfEXT");
         storage::FogCoordfv.load(&mut loadfn, "glFogCoordfv");
         storage::FogCoordfvEXT.load(&mut loadfn, "glFogCoordfvEXT");
         storage::FogCoordhNV.load(&mut loadfn, "glFogCoordhNV");
         storage::FogCoordhvNV.load(&mut loadfn, "glFogCoordhvNV");
         storage::FogFuncSGIS.load(&mut loadfn, "glFogFuncSGIS");
         storage::FogxOES.load(&mut loadfn, "glFogxOES");
         storage::FogxvOES.load(&mut loadfn, "glFogxvOES");
         storage::FragmentColorMaterialSGIX.load(&mut loadfn, "glFragmentColorMaterialSGIX");
         storage::FragmentCoverageColorNV.load(&mut loadfn, "glFragmentCoverageColorNV");
         storage::FragmentLightModelfSGIX.load(&mut loadfn, "glFragmentLightModelfSGIX");
         storage::FragmentLightModelfvSGIX.load(&mut loadfn, "glFragmentLightModelfvSGIX");
         storage::FragmentLightModeliSGIX.load(&mut loadfn, "glFragmentLightModeliSGIX");
         storage::FragmentLightModelivSGIX.load(&mut loadfn, "glFragmentLightModelivSGIX");
         storage::FragmentLightfSGIX.load(&mut loadfn, "glFragmentLightfSGIX");
         storage::FragmentLightfvSGIX.load(&mut loadfn, "glFragmentLightfvSGIX");
         storage::FragmentLightiSGIX.load(&mut loadfn, "glFragmentLightiSGIX");
         storage::FragmentLightivSGIX.load(&mut loadfn, "glFragmentLightivSGIX");
         storage::FragmentMaterialfSGIX.load(&mut loadfn, "glFragmentMaterialfSGIX");
         storage::FragmentMaterialfvSGIX.load(&mut loadfn, "glFragmentMaterialfvSGIX");
         storage::FragmentMaterialiSGIX.load(&mut loadfn, "glFragmentMaterialiSGIX");
         storage::FragmentMaterialivSGIX.load(&mut loadfn, "glFragmentMaterialivSGIX");
         storage::FrameTerminatorGREMEDY.load(&mut loadfn, "glFrameTerminatorGREMEDY");
         storage::FrameZoomSGIX.load(&mut loadfn, "glFrameZoomSGIX");
         storage::FramebufferDrawBufferEXT.load(&mut loadfn, "glFramebufferDrawBufferEXT");
         storage::FramebufferDrawBuffersEXT.load(&mut loadfn, "glFramebufferDrawBuffersEXT");
         storage::FramebufferFetchBarrierEXT.load(&mut loadfn, "glFramebufferFetchBarrierEXT");
         storage::FramebufferParameteri.load(&mut loadfn, "glFramebufferParameteri");
         storage::FramebufferReadBufferEXT.load(&mut loadfn, "glFramebufferReadBufferEXT");
         storage::FramebufferRenderbuffer.load(&mut loadfn, "glFramebufferRenderbuffer");
         storage::FramebufferRenderbufferEXT.load(&mut loadfn, "glFramebufferRenderbufferEXT");
         storage::FramebufferSampleLocationsfvARB.load(&mut loadfn, "glFramebufferSampleLocationsfvARB");
         storage::FramebufferSampleLocationsfvNV.load(&mut loadfn, "glFramebufferSampleLocationsfvNV");
         storage::FramebufferSamplePositionsfvAMD.load(&mut loadfn, "glFramebufferSamplePositionsfvAMD");
         storage::FramebufferTexture.load(&mut loadfn, "glFramebufferTexture");
         storage::FramebufferTexture1D.load(&mut loadfn, "glFramebufferTexture1D");
         storage::FramebufferTexture1DEXT.load(&mut loadfn, "glFramebufferTexture1DEXT");
         storage::FramebufferTexture2D.load(&mut loadfn, "glFramebufferTexture2D");
         storage::FramebufferTexture2DEXT.load(&mut loadfn, "glFramebufferTexture2DEXT");
         storage::FramebufferTexture3D.load(&mut loadfn, "glFramebufferTexture3D");
         storage::FramebufferTexture3DEXT.load(&mut loadfn, "glFramebufferTexture3DEXT");
         storage::FramebufferTextureARB.load(&mut loadfn, "glFramebufferTextureARB");
         storage::FramebufferTextureEXT.load(&mut loadfn, "glFramebufferTextureEXT");
         storage::FramebufferTextureFaceARB.load(&mut loadfn, "glFramebufferTextureFaceARB");
         storage::FramebufferTextureFaceEXT.load(&mut loadfn, "glFramebufferTextureFaceEXT");
         storage::FramebufferTextureLayer.load(&mut loadfn, "glFramebufferTextureLayer");
         storage::FramebufferTextureLayerARB.load(&mut loadfn, "glFramebufferTextureLayerARB");
         storage::FramebufferTextureLayerEXT.load(&mut loadfn, "glFramebufferTextureLayerEXT");
         storage::FramebufferTextureMultiviewOVR.load(&mut loadfn, "glFramebufferTextureMultiviewOVR");
         storage::FreeObjectBufferATI.load(&mut loadfn, "glFreeObjectBufferATI");
         storage::FrontFace.load(&mut loadfn, "glFrontFace");
         storage::FrustumfOES.load(&mut loadfn, "glFrustumfOES");
         storage::FrustumxOES.load(&mut loadfn, "glFrustumxOES");
         storage::GenAsyncMarkersSGIX.load(&mut loadfn, "glGenAsyncMarkersSGIX");
         storage::GenBuffers.load(&mut loadfn, "glGenBuffers");
         storage::GenBuffersARB.load(&mut loadfn, "glGenBuffersARB");
         storage::GenFencesAPPLE.load(&mut loadfn, "glGenFencesAPPLE");
         storage::GenFencesNV.load(&mut loadfn, "glGenFencesNV");
         storage::GenFragmentShadersATI.load(&mut loadfn, "glGenFragmentShadersATI");
         storage::GenFramebuffers.load(&mut loadfn, "glGenFramebuffers");
         storage::GenFramebuffersEXT.load(&mut loadfn, "glGenFramebuffersEXT");
         storage::GenNamesAMD.load(&mut loadfn, "glGenNamesAMD");
         storage::GenOcclusionQueriesNV.load(&mut loadfn, "glGenOcclusionQueriesNV");
         storage::GenPathsNV.load(&mut loadfn, "glGenPathsNV");
         storage::GenPerfMonitorsAMD.load(&mut loadfn, "glGenPerfMonitorsAMD");
         storage::GenProgramPipelines.load(&mut loadfn, "glGenProgramPipelines");
         storage::GenProgramsARB.load(&mut loadfn, "glGenProgramsARB");
         storage::GenProgramsNV.load(&mut loadfn, "glGenProgramsNV");
         storage::GenQueries.load(&mut loadfn, "glGenQueries");
         storage::GenQueriesARB.load(&mut loadfn, "glGenQueriesARB");
         storage::GenQueryResourceTagNV.load(&mut loadfn, "glGenQueryResourceTagNV");
         storage::GenRenderbuffers.load(&mut loadfn, "glGenRenderbuffers");
         storage::GenRenderbuffersEXT.load(&mut loadfn, "glGenRenderbuffersEXT");
         storage::GenSamplers.load(&mut loadfn, "glGenSamplers");
         storage::GenSemaphoresEXT.load(&mut loadfn, "glGenSemaphoresEXT");
         storage::GenSymbolsEXT.load(&mut loadfn, "glGenSymbolsEXT");
         storage::GenTextures.load(&mut loadfn, "glGenTextures");
         storage::GenTexturesEXT.load(&mut loadfn, "glGenTexturesEXT");
         storage::GenTransformFeedbacks.load(&mut loadfn, "glGenTransformFeedbacks");
         storage::GenTransformFeedbacksNV.load(&mut loadfn, "glGenTransformFeedbacksNV");
         storage::GenVertexArrays.load(&mut loadfn, "glGenVertexArrays");
         storage::GenVertexArraysAPPLE.load(&mut loadfn, "glGenVertexArraysAPPLE");
         storage::GenVertexShadersEXT.load(&mut loadfn, "glGenVertexShadersEXT");
         storage::GenerateMipmap.load(&mut loadfn, "glGenerateMipmap");
         storage::GenerateMipmapEXT.load(&mut loadfn, "glGenerateMipmapEXT");
         storage::GenerateMultiTexMipmapEXT.load(&mut loadfn, "glGenerateMultiTexMipmapEXT");
         storage::GenerateTextureMipmap.load(&mut loadfn, "glGenerateTextureMipmap");
         storage::GenerateTextureMipmapEXT.load(&mut loadfn, "glGenerateTextureMipmapEXT");
         storage::GetActiveAtomicCounterBufferiv.load(&mut loadfn, "glGetActiveAtomicCounterBufferiv");
         storage::GetActiveAttrib.load(&mut loadfn, "glGetActiveAttrib");
         storage::GetActiveAttribARB.load(&mut loadfn, "glGetActiveAttribARB");
         storage::GetActiveSubroutineName.load(&mut loadfn, "glGetActiveSubroutineName");
         storage::GetActiveSubroutineUniformName.load(&mut loadfn, "glGetActiveSubroutineUniformName");
         storage::GetActiveSubroutineUniformiv.load(&mut loadfn, "glGetActiveSubroutineUniformiv");
         storage::GetActiveUniform.load(&mut loadfn, "glGetActiveUniform");
         storage::GetActiveUniformARB.load(&mut loadfn, "glGetActiveUniformARB");
         storage::GetActiveUniformBlockName.load(&mut loadfn, "glGetActiveUniformBlockName");
         storage::GetActiveUniformBlockiv.load(&mut loadfn, "glGetActiveUniformBlockiv");
         storage::GetActiveUniformName.load(&mut loadfn, "glGetActiveUniformName");
         storage::GetActiveUniformsiv.load(&mut loadfn, "glGetActiveUniformsiv");
         storage::GetActiveVaryingNV.load(&mut loadfn, "glGetActiveVaryingNV");
         storage::GetArrayObjectfvATI.load(&mut loadfn, "glGetArrayObjectfvATI");
         storage::GetArrayObjectivATI.load(&mut loadfn, "glGetArrayObjectivATI");
         storage::GetAttachedObjectsARB.load(&mut loadfn, "glGetAttachedObjectsARB");
         storage::GetAttachedShaders.load(&mut loadfn, "glGetAttachedShaders");
         storage::GetAttribLocation.load(&mut loadfn, "glGetAttribLocation");
         storage::GetAttribLocationARB.load(&mut loadfn, "glGetAttribLocationARB");
         storage::GetBooleanIndexedvEXT.load(&mut loadfn, "glGetBooleanIndexedvEXT");
         storage::GetBooleani_v.load(&mut loadfn, "glGetBooleani_v");
         storage::GetBooleanv.load(&mut loadfn, "glGetBooleanv");
         storage::GetBufferParameteri64v.load(&mut loadfn, "glGetBufferParameteri64v");
         storage::GetBufferParameteriv.load(&mut loadfn, "glGetBufferParameteriv");
         storage::GetBufferParameterivARB.load(&mut loadfn, "glGetBufferParameterivARB");
         storage::GetBufferParameterui64vNV.load(&mut loadfn, "glGetBufferParameterui64vNV");
         storage::GetBufferPointerv.load(&mut loadfn, "glGetBufferPointerv");
         storage::GetBufferPointervARB.load(&mut loadfn, "glGetBufferPointervARB");
         storage::GetBufferSubData.load(&mut loadfn, "glGetBufferSubData");
         storage::GetBufferSubDataARB.load(&mut loadfn, "glGetBufferSubDataARB");
         storage::GetClipPlanefOES.load(&mut loadfn, "glGetClipPlanefOES");
         storage::GetClipPlanexOES.load(&mut loadfn, "glGetClipPlanexOES");
         storage::GetColorTable.load(&mut loadfn, "glGetColorTable");
         storage::GetColorTableEXT.load(&mut loadfn, "glGetColorTableEXT");
         storage::GetColorTableParameterfv.load(&mut loadfn, "glGetColorTableParameterfv");
         storage::GetColorTableParameterfvEXT.load(&mut loadfn, "glGetColorTableParameterfvEXT");
         storage::GetColorTableParameterfvSGI.load(&mut loadfn, "glGetColorTableParameterfvSGI");
         storage::GetColorTableParameteriv.load(&mut loadfn, "glGetColorTableParameteriv");
         storage::GetColorTableParameterivEXT.load(&mut loadfn, "glGetColorTableParameterivEXT");
         storage::GetColorTableParameterivSGI.load(&mut loadfn, "glGetColorTableParameterivSGI");
         storage::GetColorTableSGI.load(&mut loadfn, "glGetColorTableSGI");
         storage::GetCombinerInputParameterfvNV.load(&mut loadfn, "glGetCombinerInputParameterfvNV");
         storage::GetCombinerInputParameterivNV.load(&mut loadfn, "glGetCombinerInputParameterivNV");
         storage::GetCombinerOutputParameterfvNV.load(&mut loadfn, "glGetCombinerOutputParameterfvNV");
         storage::GetCombinerOutputParameterivNV.load(&mut loadfn, "glGetCombinerOutputParameterivNV");
         storage::GetCombinerStageParameterfvNV.load(&mut loadfn, "glGetCombinerStageParameterfvNV");
         storage::GetCommandHeaderNV.load(&mut loadfn, "glGetCommandHeaderNV");
         storage::GetCompressedMultiTexImageEXT.load(&mut loadfn, "glGetCompressedMultiTexImageEXT");
         storage::GetCompressedTexImage.load(&mut loadfn, "glGetCompressedTexImage");
         storage::GetCompressedTexImageARB.load(&mut loadfn, "glGetCompressedTexImageARB");
         storage::GetCompressedTextureImage.load(&mut loadfn, "glGetCompressedTextureImage");
         storage::GetCompressedTextureImageEXT.load(&mut loadfn, "glGetCompressedTextureImageEXT");
         storage::GetCompressedTextureSubImage.load(&mut loadfn, "glGetCompressedTextureSubImage");
         storage::GetConvolutionFilterEXT.load(&mut loadfn, "glGetConvolutionFilterEXT");
         storage::GetConvolutionParameterfvEXT.load(&mut loadfn, "glGetConvolutionParameterfvEXT");
         storage::GetConvolutionParameterivEXT.load(&mut loadfn, "glGetConvolutionParameterivEXT");
         storage::GetConvolutionParameterxvOES.load(&mut loadfn, "glGetConvolutionParameterxvOES");
         storage::GetCoverageModulationTableNV.load(&mut loadfn, "glGetCoverageModulationTableNV");
         storage::GetDebugMessageLog.load(&mut loadfn, "glGetDebugMessageLog");
         storage::GetDebugMessageLogAMD.load(&mut loadfn, "glGetDebugMessageLogAMD");
         storage::GetDebugMessageLogARB.load(&mut loadfn, "glGetDebugMessageLogARB");
         storage::GetDetailTexFuncSGIS.load(&mut loadfn, "glGetDetailTexFuncSGIS");
         storage::GetDoubleIndexedvEXT.load(&mut loadfn, "glGetDoubleIndexedvEXT");
         storage::GetDoublei_v.load(&mut loadfn, "glGetDoublei_v");
         storage::GetDoublei_vEXT.load(&mut loadfn, "glGetDoublei_vEXT");
         storage::GetDoublev.load(&mut loadfn, "glGetDoublev");
         storage::GetError.load(&mut loadfn, "glGetError");
         storage::GetFenceivNV.load(&mut loadfn, "glGetFenceivNV");
         storage::GetFinalCombinerInputParameterfvNV.load(&mut loadfn, "glGetFinalCombinerInputParameterfvNV");
         storage::GetFinalCombinerInputParameterivNV.load(&mut loadfn, "glGetFinalCombinerInputParameterivNV");
         storage::GetFirstPerfQueryIdINTEL.load(&mut loadfn, "glGetFirstPerfQueryIdINTEL");
         storage::GetFixedvOES.load(&mut loadfn, "glGetFixedvOES");
         storage::GetFloatIndexedvEXT.load(&mut loadfn, "glGetFloatIndexedvEXT");
         storage::GetFloati_v.load(&mut loadfn, "glGetFloati_v");
         storage::GetFloati_vEXT.load(&mut loadfn, "glGetFloati_vEXT");
         storage::GetFloatv.load(&mut loadfn, "glGetFloatv");
         storage::GetFogFuncSGIS.load(&mut loadfn, "glGetFogFuncSGIS");
         storage::GetFragDataIndex.load(&mut loadfn, "glGetFragDataIndex");
         storage::GetFragDataLocation.load(&mut loadfn, "glGetFragDataLocation");
         storage::GetFragDataLocationEXT.load(&mut loadfn, "glGetFragDataLocationEXT");
         storage::GetFragmentLightfvSGIX.load(&mut loadfn, "glGetFragmentLightfvSGIX");
         storage::GetFragmentLightivSGIX.load(&mut loadfn, "glGetFragmentLightivSGIX");
         storage::GetFragmentMaterialfvSGIX.load(&mut loadfn, "glGetFragmentMaterialfvSGIX");
         storage::GetFragmentMaterialivSGIX.load(&mut loadfn, "glGetFragmentMaterialivSGIX");
         storage::GetFramebufferAttachmentParameteriv.load(&mut loadfn, "glGetFramebufferAttachmentParameteriv");
         storage::GetFramebufferAttachmentParameterivEXT.load(&mut loadfn, "glGetFramebufferAttachmentParameterivEXT");
         storage::GetFramebufferParameterfvAMD.load(&mut loadfn, "glGetFramebufferParameterfvAMD");
         storage::GetFramebufferParameteriv.load(&mut loadfn, "glGetFramebufferParameteriv");
         storage::GetFramebufferParameterivEXT.load(&mut loadfn, "glGetFramebufferParameterivEXT");
         storage::GetGraphicsResetStatus.load(&mut loadfn, "glGetGraphicsResetStatus");
         storage::GetGraphicsResetStatusARB.load(&mut loadfn, "glGetGraphicsResetStatusARB");
         storage::GetHandleARB.load(&mut loadfn, "glGetHandleARB");
         storage::GetHistogramEXT.load(&mut loadfn, "glGetHistogramEXT");
         storage::GetHistogramParameterfvEXT.load(&mut loadfn, "glGetHistogramParameterfvEXT");
         storage::GetHistogramParameterivEXT.load(&mut loadfn, "glGetHistogramParameterivEXT");
         storage::GetHistogramParameterxvOES.load(&mut loadfn, "glGetHistogramParameterxvOES");
         storage::GetImageHandleARB.load(&mut loadfn, "glGetImageHandleARB");
         storage::GetImageHandleNV.load(&mut loadfn, "glGetImageHandleNV");
         storage::GetImageTransformParameterfvHP.load(&mut loadfn, "glGetImageTransformParameterfvHP");
         storage::GetImageTransformParameterivHP.load(&mut loadfn, "glGetImageTransformParameterivHP");
         storage::GetInfoLogARB.load(&mut loadfn, "glGetInfoLogARB");
         storage::GetInstrumentsSGIX.load(&mut loadfn, "glGetInstrumentsSGIX");
         storage::GetInteger64i_v.load(&mut loadfn, "glGetInteger64i_v");
         storage::GetInteger64v.load(&mut loadfn, "glGetInteger64v");
         storage::GetIntegerIndexedvEXT.load(&mut loadfn, "glGetIntegerIndexedvEXT");
         storage::GetIntegeri_v.load(&mut loadfn, "glGetIntegeri_v");
         storage::GetIntegerui64i_vNV.load(&mut loadfn, "glGetIntegerui64i_vNV");
         storage::GetIntegerui64vNV.load(&mut loadfn, "glGetIntegerui64vNV");
         storage::GetIntegerv.load(&mut loadfn, "glGetIntegerv");
         storage::GetInternalformatSampleivNV.load(&mut loadfn, "glGetInternalformatSampleivNV");
         storage::GetInternalformati64v.load(&mut loadfn, "glGetInternalformati64v");
         storage::GetInternalformativ.load(&mut loadfn, "glGetInternalformativ");
         storage::GetInvariantBooleanvEXT.load(&mut loadfn, "glGetInvariantBooleanvEXT");
         storage::GetInvariantFloatvEXT.load(&mut loadfn, "glGetInvariantFloatvEXT");
         storage::GetInvariantIntegervEXT.load(&mut loadfn, "glGetInvariantIntegervEXT");
         storage::GetLightxOES.load(&mut loadfn, "glGetLightxOES");
         storage::GetListParameterfvSGIX.load(&mut loadfn, "glGetListParameterfvSGIX");
         storage::GetListParameterivSGIX.load(&mut loadfn, "glGetListParameterivSGIX");
         storage::GetLocalConstantBooleanvEXT.load(&mut loadfn, "glGetLocalConstantBooleanvEXT");
         storage::GetLocalConstantFloatvEXT.load(&mut loadfn, "glGetLocalConstantFloatvEXT");
         storage::GetLocalConstantIntegervEXT.load(&mut loadfn, "glGetLocalConstantIntegervEXT");
         storage::GetMapAttribParameterfvNV.load(&mut loadfn, "glGetMapAttribParameterfvNV");
         storage::GetMapAttribParameterivNV.load(&mut loadfn, "glGetMapAttribParameterivNV");
         storage::GetMapControlPointsNV.load(&mut loadfn, "glGetMapControlPointsNV");
         storage::GetMapParameterfvNV.load(&mut loadfn, "glGetMapParameterfvNV");
         storage::GetMapParameterivNV.load(&mut loadfn, "glGetMapParameterivNV");
         storage::GetMapxvOES.load(&mut loadfn, "glGetMapxvOES");
         storage::GetMaterialxOES.load(&mut loadfn, "glGetMaterialxOES");
         storage::GetMemoryObjectDetachedResourcesuivNV.load(&mut loadfn, "glGetMemoryObjectDetachedResourcesuivNV");
         storage::GetMemoryObjectParameterivEXT.load(&mut loadfn, "glGetMemoryObjectParameterivEXT");
         storage::GetMinmaxEXT.load(&mut loadfn, "glGetMinmaxEXT");
         storage::GetMinmaxParameterfvEXT.load(&mut loadfn, "glGetMinmaxParameterfvEXT");
         storage::GetMinmaxParameterivEXT.load(&mut loadfn, "glGetMinmaxParameterivEXT");
         storage::GetMultiTexEnvfvEXT.load(&mut loadfn, "glGetMultiTexEnvfvEXT");
         storage::GetMultiTexEnvivEXT.load(&mut loadfn, "glGetMultiTexEnvivEXT");
         storage::GetMultiTexGendvEXT.load(&mut loadfn, "glGetMultiTexGendvEXT");
         storage::GetMultiTexGenfvEXT.load(&mut loadfn, "glGetMultiTexGenfvEXT");
         storage::GetMultiTexGenivEXT.load(&mut loadfn, "glGetMultiTexGenivEXT");
         storage::GetMultiTexImageEXT.load(&mut loadfn, "glGetMultiTexImageEXT");
         storage::GetMultiTexLevelParameterfvEXT.load(&mut loadfn, "glGetMultiTexLevelParameterfvEXT");
         storage::GetMultiTexLevelParameterivEXT.load(&mut loadfn, "glGetMultiTexLevelParameterivEXT");
         storage::GetMultiTexParameterIivEXT.load(&mut loadfn, "glGetMultiTexParameterIivEXT");
         storage::GetMultiTexParameterIuivEXT.load(&mut loadfn, "glGetMultiTexParameterIuivEXT");
         storage::GetMultiTexParameterfvEXT.load(&mut loadfn, "glGetMultiTexParameterfvEXT");
         storage::GetMultiTexParameterivEXT.load(&mut loadfn, "glGetMultiTexParameterivEXT");
         storage::GetMultisamplefv.load(&mut loadfn, "glGetMultisamplefv");
         storage::GetMultisamplefvNV.load(&mut loadfn, "glGetMultisamplefvNV");
         storage::GetNamedBufferParameteri64v.load(&mut loadfn, "glGetNamedBufferParameteri64v");
         storage::GetNamedBufferParameteriv.load(&mut loadfn, "glGetNamedBufferParameteriv");
         storage::GetNamedBufferParameterivEXT.load(&mut loadfn, "glGetNamedBufferParameterivEXT");
         storage::GetNamedBufferParameterui64vNV.load(&mut loadfn, "glGetNamedBufferParameterui64vNV");
         storage::GetNamedBufferPointerv.load(&mut loadfn, "glGetNamedBufferPointerv");
         storage::GetNamedBufferPointervEXT.load(&mut loadfn, "glGetNamedBufferPointervEXT");
         storage::GetNamedBufferSubData.load(&mut loadfn, "glGetNamedBufferSubData");
         storage::GetNamedBufferSubDataEXT.load(&mut loadfn, "glGetNamedBufferSubDataEXT");
         storage::GetNamedFramebufferAttachmentParameteriv.load(&mut loadfn, "glGetNamedFramebufferAttachmentParameteriv");
         storage::GetNamedFramebufferAttachmentParameterivEXT.load(&mut loadfn, "glGetNamedFramebufferAttachmentParameterivEXT");
         storage::GetNamedFramebufferParameterfvAMD.load(&mut loadfn, "glGetNamedFramebufferParameterfvAMD");
         storage::GetNamedFramebufferParameteriv.load(&mut loadfn, "glGetNamedFramebufferParameteriv");
         storage::GetNamedFramebufferParameterivEXT.load(&mut loadfn, "glGetNamedFramebufferParameterivEXT");
         storage::GetNamedProgramLocalParameterIivEXT.load(&mut loadfn, "glGetNamedProgramLocalParameterIivEXT");
         storage::GetNamedProgramLocalParameterIuivEXT.load(&mut loadfn, "glGetNamedProgramLocalParameterIuivEXT");
         storage::GetNamedProgramLocalParameterdvEXT.load(&mut loadfn, "glGetNamedProgramLocalParameterdvEXT");
         storage::GetNamedProgramLocalParameterfvEXT.load(&mut loadfn, "glGetNamedProgramLocalParameterfvEXT");
         storage::GetNamedProgramStringEXT.load(&mut loadfn, "glGetNamedProgramStringEXT");
         storage::GetNamedProgramivEXT.load(&mut loadfn, "glGetNamedProgramivEXT");
         storage::GetNamedRenderbufferParameteriv.load(&mut loadfn, "glGetNamedRenderbufferParameteriv");
         storage::GetNamedRenderbufferParameterivEXT.load(&mut loadfn, "glGetNamedRenderbufferParameterivEXT");
         storage::GetNamedStringARB.load(&mut loadfn, "glGetNamedStringARB");
         storage::GetNamedStringivARB.load(&mut loadfn, "glGetNamedStringivARB");
         storage::GetNextPerfQueryIdINTEL.load(&mut loadfn, "glGetNextPerfQueryIdINTEL");
         storage::GetObjectBufferfvATI.load(&mut loadfn, "glGetObjectBufferfvATI");
         storage::GetObjectBufferivATI.load(&mut loadfn, "glGetObjectBufferivATI");
         storage::GetObjectLabel.load(&mut loadfn, "glGetObjectLabel");
         storage::GetObjectLabelEXT.load(&mut loadfn, "glGetObjectLabelEXT");
         storage::GetObjectParameterfvARB.load(&mut loadfn, "glGetObjectParameterfvARB");
         storage::GetObjectParameterivAPPLE.load(&mut loadfn, "glGetObjectParameterivAPPLE");
         storage::GetObjectParameterivARB.load(&mut loadfn, "glGetObjectParameterivARB");
         storage::GetObjectPtrLabel.load(&mut loadfn, "glGetObjectPtrLabel");
         storage::GetOcclusionQueryivNV.load(&mut loadfn, "glGetOcclusionQueryivNV");
         storage::GetOcclusionQueryuivNV.load(&mut loadfn, "glGetOcclusionQueryuivNV");
         storage::GetPathCommandsNV.load(&mut loadfn, "glGetPathCommandsNV");
         storage::GetPathCoordsNV.load(&mut loadfn, "glGetPathCoordsNV");
         storage::GetPathDashArrayNV.load(&mut loadfn, "glGetPathDashArrayNV");
         storage::GetPathLengthNV.load(&mut loadfn, "glGetPathLengthNV");
         storage::GetPathMetricRangeNV.load(&mut loadfn, "glGetPathMetricRangeNV");
         storage::GetPathMetricsNV.load(&mut loadfn, "glGetPathMetricsNV");
         storage::GetPathParameterfvNV.load(&mut loadfn, "glGetPathParameterfvNV");
         storage::GetPathParameterivNV.load(&mut loadfn, "glGetPathParameterivNV");
         storage::GetPathSpacingNV.load(&mut loadfn, "glGetPathSpacingNV");
         storage::GetPerfCounterInfoINTEL.load(&mut loadfn, "glGetPerfCounterInfoINTEL");
         storage::GetPerfMonitorCounterDataAMD.load(&mut loadfn, "glGetPerfMonitorCounterDataAMD");
         storage::GetPerfMonitorCounterInfoAMD.load(&mut loadfn, "glGetPerfMonitorCounterInfoAMD");
         storage::GetPerfMonitorCounterStringAMD.load(&mut loadfn, "glGetPerfMonitorCounterStringAMD");
         storage::GetPerfMonitorCountersAMD.load(&mut loadfn, "glGetPerfMonitorCountersAMD");
         storage::GetPerfMonitorGroupStringAMD.load(&mut loadfn, "glGetPerfMonitorGroupStringAMD");
         storage::GetPerfMonitorGroupsAMD.load(&mut loadfn, "glGetPerfMonitorGroupsAMD");
         storage::GetPerfQueryDataINTEL.load(&mut loadfn, "glGetPerfQueryDataINTEL");
         storage::GetPerfQueryIdByNameINTEL.load(&mut loadfn, "glGetPerfQueryIdByNameINTEL");
         storage::GetPerfQueryInfoINTEL.load(&mut loadfn, "glGetPerfQueryInfoINTEL");
         storage::GetPixelMapxv.load(&mut loadfn, "glGetPixelMapxv");
         storage::GetPixelTexGenParameterfvSGIS.load(&mut loadfn, "glGetPixelTexGenParameterfvSGIS");
         storage::GetPixelTexGenParameterivSGIS.load(&mut loadfn, "glGetPixelTexGenParameterivSGIS");
         storage::GetPixelTransformParameterfvEXT.load(&mut loadfn, "glGetPixelTransformParameterfvEXT");
         storage::GetPixelTransformParameterivEXT.load(&mut loadfn, "glGetPixelTransformParameterivEXT");
         storage::GetPointerIndexedvEXT.load(&mut loadfn, "glGetPointerIndexedvEXT");
         storage::GetPointeri_vEXT.load(&mut loadfn, "glGetPointeri_vEXT");
         storage::GetPointerv.load(&mut loadfn, "glGetPointerv");
         storage::GetPointervEXT.load(&mut loadfn, "glGetPointervEXT");
         storage::GetProgramBinary.load(&mut loadfn, "glGetProgramBinary");
         storage::GetProgramEnvParameterIivNV.load(&mut loadfn, "glGetProgramEnvParameterIivNV");
         storage::GetProgramEnvParameterIuivNV.load(&mut loadfn, "glGetProgramEnvParameterIuivNV");
         storage::GetProgramEnvParameterdvARB.load(&mut loadfn, "glGetProgramEnvParameterdvARB");
         storage::GetProgramEnvParameterfvARB.load(&mut loadfn, "glGetProgramEnvParameterfvARB");
         storage::GetProgramInfoLog.load(&mut loadfn, "glGetProgramInfoLog");
         storage::GetProgramInterfaceiv.load(&mut loadfn, "glGetProgramInterfaceiv");
         storage::GetProgramLocalParameterIivNV.load(&mut loadfn, "glGetProgramLocalParameterIivNV");
         storage::GetProgramLocalParameterIuivNV.load(&mut loadfn, "glGetProgramLocalParameterIuivNV");
         storage::GetProgramLocalParameterdvARB.load(&mut loadfn, "glGetProgramLocalParameterdvARB");
         storage::GetProgramLocalParameterfvARB.load(&mut loadfn, "glGetProgramLocalParameterfvARB");
         storage::GetProgramNamedParameterdvNV.load(&mut loadfn, "glGetProgramNamedParameterdvNV");
         storage::GetProgramNamedParameterfvNV.load(&mut loadfn, "glGetProgramNamedParameterfvNV");
         storage::GetProgramParameterdvNV.load(&mut loadfn, "glGetProgramParameterdvNV");
         storage::GetProgramParameterfvNV.load(&mut loadfn, "glGetProgramParameterfvNV");
         storage::GetProgramPipelineInfoLog.load(&mut loadfn, "glGetProgramPipelineInfoLog");
         storage::GetProgramPipelineiv.load(&mut loadfn, "glGetProgramPipelineiv");
         storage::GetProgramResourceIndex.load(&mut loadfn, "glGetProgramResourceIndex");
         storage::GetProgramResourceLocation.load(&mut loadfn, "glGetProgramResourceLocation");
         storage::GetProgramResourceLocationIndex.load(&mut loadfn, "glGetProgramResourceLocationIndex");
         storage::GetProgramResourceName.load(&mut loadfn, "glGetProgramResourceName");
         storage::GetProgramResourcefvNV.load(&mut loadfn, "glGetProgramResourcefvNV");
         storage::GetProgramResourceiv.load(&mut loadfn, "glGetProgramResourceiv");
         storage::GetProgramStageiv.load(&mut loadfn, "glGetProgramStageiv");
         storage::GetProgramStringARB.load(&mut loadfn, "glGetProgramStringARB");
         storage::GetProgramStringNV.load(&mut loadfn, "glGetProgramStringNV");
         storage::GetProgramSubroutineParameteruivNV.load(&mut loadfn, "glGetProgramSubroutineParameteruivNV");
         storage::GetProgramiv.load(&mut loadfn, "glGetProgramiv");
         storage::GetProgramivARB.load(&mut loadfn, "glGetProgramivARB");
         storage::GetProgramivNV.load(&mut loadfn, "glGetProgramivNV");
         storage::GetQueryBufferObjecti64v.load(&mut loadfn, "glGetQueryBufferObjecti64v");
         storage::GetQueryBufferObjectiv.load(&mut loadfn, "glGetQueryBufferObjectiv");
         storage::GetQueryBufferObjectui64v.load(&mut loadfn, "glGetQueryBufferObjectui64v");
         storage::GetQueryBufferObjectuiv.load(&mut loadfn, "glGetQueryBufferObjectuiv");
         storage::GetQueryIndexediv.load(&mut loadfn, "glGetQueryIndexediv");
         storage::GetQueryObjecti64v.load(&mut loadfn, "glGetQueryObjecti64v");
         storage::GetQueryObjecti64vEXT.load(&mut loadfn, "glGetQueryObjecti64vEXT");
         storage::GetQueryObjectiv.load(&mut loadfn, "glGetQueryObjectiv");
         storage::GetQueryObjectivARB.load(&mut loadfn, "glGetQueryObjectivARB");
         storage::GetQueryObjectui64v.load(&mut loadfn, "glGetQueryObjectui64v");
         storage::GetQueryObjectui64vEXT.load(&mut loadfn, "glGetQueryObjectui64vEXT");
         storage::GetQueryObjectuiv.load(&mut loadfn, "glGetQueryObjectuiv");
         storage::GetQueryObjectuivARB.load(&mut loadfn, "glGetQueryObjectuivARB");
         storage::GetQueryiv.load(&mut loadfn, "glGetQueryiv");
         storage::GetQueryivARB.load(&mut loadfn, "glGetQueryivARB");
         storage::GetRenderbufferParameteriv.load(&mut loadfn, "glGetRenderbufferParameteriv");
         storage::GetRenderbufferParameterivEXT.load(&mut loadfn, "glGetRenderbufferParameterivEXT");
         storage::GetSamplerParameterIiv.load(&mut loadfn, "glGetSamplerParameterIiv");
         storage::GetSamplerParameterIuiv.load(&mut loadfn, "glGetSamplerParameterIuiv");
         storage::GetSamplerParameterfv.load(&mut loadfn, "glGetSamplerParameterfv");
         storage::GetSamplerParameteriv.load(&mut loadfn, "glGetSamplerParameteriv");
         storage::GetSemaphoreParameterui64vEXT.load(&mut loadfn, "glGetSemaphoreParameterui64vEXT");
         storage::GetSeparableFilterEXT.load(&mut loadfn, "glGetSeparableFilterEXT");
         storage::GetShaderInfoLog.load(&mut loadfn, "glGetShaderInfoLog");
         storage::GetShaderPrecisionFormat.load(&mut loadfn, "glGetShaderPrecisionFormat");
         storage::GetShaderSource.load(&mut loadfn, "glGetShaderSource");
         storage::GetShaderSourceARB.load(&mut loadfn, "glGetShaderSourceARB");
         storage::GetShaderiv.load(&mut loadfn, "glGetShaderiv");
         storage::GetShadingRateImagePaletteNV.load(&mut loadfn, "glGetShadingRateImagePaletteNV");
         storage::GetShadingRateSampleLocationivNV.load(&mut loadfn, "glGetShadingRateSampleLocationivNV");
         storage::GetSharpenTexFuncSGIS.load(&mut loadfn, "glGetSharpenTexFuncSGIS");
         storage::GetStageIndexNV.load(&mut loadfn, "glGetStageIndexNV");
         storage::GetString.load(&mut loadfn, "glGetString");
         storage::GetStringi.load(&mut loadfn, "glGetStringi");
         storage::GetSubroutineIndex.load(&mut loadfn, "glGetSubroutineIndex");
         storage::GetSubroutineUniformLocation.load(&mut loadfn, "glGetSubroutineUniformLocation");
         storage::GetSynciv.load(&mut loadfn, "glGetSynciv");
         storage::GetTexBumpParameterfvATI.load(&mut loadfn, "glGetTexBumpParameterfvATI");
         storage::GetTexBumpParameterivATI.load(&mut loadfn, "glGetTexBumpParameterivATI");
         storage::GetTexEnvxvOES.load(&mut loadfn, "glGetTexEnvxvOES");
         storage::GetTexFilterFuncSGIS.load(&mut loadfn, "glGetTexFilterFuncSGIS");
         storage::GetTexGenxvOES.load(&mut loadfn, "glGetTexGenxvOES");
         storage::GetTexImage.load(&mut loadfn, "glGetTexImage");
         storage::GetTexLevelParameterfv.load(&mut loadfn, "glGetTexLevelParameterfv");
         storage::GetTexLevelParameteriv.load(&mut loadfn, "glGetTexLevelParameteriv");
         storage::GetTexLevelParameterxvOES.load(&mut loadfn, "glGetTexLevelParameterxvOES");
         storage::GetTexParameterIiv.load(&mut loadfn, "glGetTexParameterIiv");
         storage::GetTexParameterIivEXT.load(&mut loadfn, "glGetTexParameterIivEXT");
         storage::GetTexParameterIuiv.load(&mut loadfn, "glGetTexParameterIuiv");
         storage::GetTexParameterIuivEXT.load(&mut loadfn, "glGetTexParameterIuivEXT");
         storage::GetTexParameterPointervAPPLE.load(&mut loadfn, "glGetTexParameterPointervAPPLE");
         storage::GetTexParameterfv.load(&mut loadfn, "glGetTexParameterfv");
         storage::GetTexParameteriv.load(&mut loadfn, "glGetTexParameteriv");
         storage::GetTexParameterxvOES.load(&mut loadfn, "glGetTexParameterxvOES");
         storage::GetTextureHandleARB.load(&mut loadfn, "glGetTextureHandleARB");
         storage::GetTextureHandleNV.load(&mut loadfn, "glGetTextureHandleNV");
         storage::GetTextureImage.load(&mut loadfn, "glGetTextureImage");
         storage::GetTextureImageEXT.load(&mut loadfn, "glGetTextureImageEXT");
         storage::GetTextureLevelParameterfv.load(&mut loadfn, "glGetTextureLevelParameterfv");
         storage::GetTextureLevelParameterfvEXT.load(&mut loadfn, "glGetTextureLevelParameterfvEXT");
         storage::GetTextureLevelParameteriv.load(&mut loadfn, "glGetTextureLevelParameteriv");
         storage::GetTextureLevelParameterivEXT.load(&mut loadfn, "glGetTextureLevelParameterivEXT");
         storage::GetTextureParameterIiv.load(&mut loadfn, "glGetTextureParameterIiv");
         storage::GetTextureParameterIivEXT.load(&mut loadfn, "glGetTextureParameterIivEXT");
         storage::GetTextureParameterIuiv.load(&mut loadfn, "glGetTextureParameterIuiv");
         storage::GetTextureParameterIuivEXT.load(&mut loadfn, "glGetTextureParameterIuivEXT");
         storage::GetTextureParameterfv.load(&mut loadfn, "glGetTextureParameterfv");
         storage::GetTextureParameterfvEXT.load(&mut loadfn, "glGetTextureParameterfvEXT");
         storage::GetTextureParameteriv.load(&mut loadfn, "glGetTextureParameteriv");
         storage::GetTextureParameterivEXT.load(&mut loadfn, "glGetTextureParameterivEXT");
         storage::GetTextureSamplerHandleARB.load(&mut loadfn, "glGetTextureSamplerHandleARB");
         storage::GetTextureSamplerHandleNV.load(&mut loadfn, "glGetTextureSamplerHandleNV");
         storage::GetTextureSubImage.load(&mut loadfn, "glGetTextureSubImage");
         storage::GetTrackMatrixivNV.load(&mut loadfn, "glGetTrackMatrixivNV");
         storage::GetTransformFeedbackVarying.load(&mut loadfn, "glGetTransformFeedbackVarying");
         storage::GetTransformFeedbackVaryingEXT.load(&mut loadfn, "glGetTransformFeedbackVaryingEXT");
         storage::GetTransformFeedbackVaryingNV.load(&mut loadfn, "glGetTransformFeedbackVaryingNV");
         storage::GetTransformFeedbacki64_v.load(&mut loadfn, "glGetTransformFeedbacki64_v");
         storage::GetTransformFeedbacki_v.load(&mut loadfn, "glGetTransformFeedbacki_v");
         storage::GetTransformFeedbackiv.load(&mut loadfn, "glGetTransformFeedbackiv");
         storage::GetUniformBlockIndex.load(&mut loadfn, "glGetUniformBlockIndex");
         storage::GetUniformBufferSizeEXT.load(&mut loadfn, "glGetUniformBufferSizeEXT");
         storage::GetUniformIndices.load(&mut loadfn, "glGetUniformIndices");
         storage::GetUniformLocation.load(&mut loadfn, "glGetUniformLocation");
         storage::GetUniformLocationARB.load(&mut loadfn, "glGetUniformLocationARB");
         storage::GetUniformOffsetEXT.load(&mut loadfn, "glGetUniformOffsetEXT");
         storage::GetUniformSubroutineuiv.load(&mut loadfn, "glGetUniformSubroutineuiv");
         storage::GetUniformdv.load(&mut loadfn, "glGetUniformdv");
         storage::GetUniformfv.load(&mut loadfn, "glGetUniformfv");
         storage::GetUniformfvARB.load(&mut loadfn, "glGetUniformfvARB");
         storage::GetUniformi64vARB.load(&mut loadfn, "glGetUniformi64vARB");
         storage::GetUniformi64vNV.load(&mut loadfn, "glGetUniformi64vNV");
         storage::GetUniformiv.load(&mut loadfn, "glGetUniformiv");
         storage::GetUniformivARB.load(&mut loadfn, "glGetUniformivARB");
         storage::GetUniformui64vARB.load(&mut loadfn, "glGetUniformui64vARB");
         storage::GetUniformui64vNV.load(&mut loadfn, "glGetUniformui64vNV");
         storage::GetUniformuiv.load(&mut loadfn, "glGetUniformuiv");
         storage::GetUniformuivEXT.load(&mut loadfn, "glGetUniformuivEXT");
         storage::GetUnsignedBytei_vEXT.load(&mut loadfn, "glGetUnsignedBytei_vEXT");
         storage::GetUnsignedBytevEXT.load(&mut loadfn, "glGetUnsignedBytevEXT");
         storage::GetVariantArrayObjectfvATI.load(&mut loadfn, "glGetVariantArrayObjectfvATI");
         storage::GetVariantArrayObjectivATI.load(&mut loadfn, "glGetVariantArrayObjectivATI");
         storage::GetVariantBooleanvEXT.load(&mut loadfn, "glGetVariantBooleanvEXT");
         storage::GetVariantFloatvEXT.load(&mut loadfn, "glGetVariantFloatvEXT");
         storage::GetVariantIntegervEXT.load(&mut loadfn, "glGetVariantIntegervEXT");
         storage::GetVariantPointervEXT.load(&mut loadfn, "glGetVariantPointervEXT");
         storage::GetVaryingLocationNV.load(&mut loadfn, "glGetVaryingLocationNV");
         storage::GetVertexArrayIndexed64iv.load(&mut loadfn, "glGetVertexArrayIndexed64iv");
         storage::GetVertexArrayIndexediv.load(&mut loadfn, "glGetVertexArrayIndexediv");
         storage::GetVertexArrayIntegeri_vEXT.load(&mut loadfn, "glGetVertexArrayIntegeri_vEXT");
         storage::GetVertexArrayIntegervEXT.load(&mut loadfn, "glGetVertexArrayIntegervEXT");
         storage::GetVertexArrayPointeri_vEXT.load(&mut loadfn, "glGetVertexArrayPointeri_vEXT");
         storage::GetVertexArrayPointervEXT.load(&mut loadfn, "glGetVertexArrayPointervEXT");
         storage::GetVertexArrayiv.load(&mut loadfn, "glGetVertexArrayiv");
         storage::GetVertexAttribArrayObjectfvATI.load(&mut loadfn, "glGetVertexAttribArrayObjectfvATI");
         storage::GetVertexAttribArrayObjectivATI.load(&mut loadfn, "glGetVertexAttribArrayObjectivATI");
         storage::GetVertexAttribIiv.load(&mut loadfn, "glGetVertexAttribIiv");
         storage::GetVertexAttribIivEXT.load(&mut loadfn, "glGetVertexAttribIivEXT");
         storage::GetVertexAttribIuiv.load(&mut loadfn, "glGetVertexAttribIuiv");
         storage::GetVertexAttribIuivEXT.load(&mut loadfn, "glGetVertexAttribIuivEXT");
         storage::GetVertexAttribLdv.load(&mut loadfn, "glGetVertexAttribLdv");
         storage::GetVertexAttribLdvEXT.load(&mut loadfn, "glGetVertexAttribLdvEXT");
         storage::GetVertexAttribLi64vNV.load(&mut loadfn, "glGetVertexAttribLi64vNV");
         storage::GetVertexAttribLui64vARB.load(&mut loadfn, "glGetVertexAttribLui64vARB");
         storage::GetVertexAttribLui64vNV.load(&mut loadfn, "glGetVertexAttribLui64vNV");
         storage::GetVertexAttribPointerv.load(&mut loadfn, "glGetVertexAttribPointerv");
         storage::GetVertexAttribPointervARB.load(&mut loadfn, "glGetVertexAttribPointervARB");
         storage::GetVertexAttribPointervNV.load(&mut loadfn, "glGetVertexAttribPointervNV");
         storage::GetVertexAttribdv.load(&mut loadfn, "glGetVertexAttribdv");
         storage::GetVertexAttribdvARB.load(&mut loadfn, "glGetVertexAttribdvARB");
         storage::GetVertexAttribdvNV.load(&mut loadfn, "glGetVertexAttribdvNV");
         storage::GetVertexAttribfv.load(&mut loadfn, "glGetVertexAttribfv");
         storage::GetVertexAttribfvARB.load(&mut loadfn, "glGetVertexAttribfvARB");
         storage::GetVertexAttribfvNV.load(&mut loadfn, "glGetVertexAttribfvNV");
         storage::GetVertexAttribiv.load(&mut loadfn, "glGetVertexAttribiv");
         storage::GetVertexAttribivARB.load(&mut loadfn, "glGetVertexAttribivARB");
         storage::GetVertexAttribivNV.load(&mut loadfn, "glGetVertexAttribivNV");
         storage::GetVideoCaptureStreamdvNV.load(&mut loadfn, "glGetVideoCaptureStreamdvNV");
         storage::GetVideoCaptureStreamfvNV.load(&mut loadfn, "glGetVideoCaptureStreamfvNV");
         storage::GetVideoCaptureStreamivNV.load(&mut loadfn, "glGetVideoCaptureStreamivNV");
         storage::GetVideoCaptureivNV.load(&mut loadfn, "glGetVideoCaptureivNV");
         storage::GetVideoi64vNV.load(&mut loadfn, "glGetVideoi64vNV");
         storage::GetVideoivNV.load(&mut loadfn, "glGetVideoivNV");
         storage::GetVideoui64vNV.load(&mut loadfn, "glGetVideoui64vNV");
         storage::GetVideouivNV.load(&mut loadfn, "glGetVideouivNV");
         storage::GetVkProcAddrNV.load(&mut loadfn, "glGetVkProcAddrNV");
         storage::GetnCompressedTexImage.load(&mut loadfn, "glGetnCompressedTexImage");
         storage::GetnCompressedTexImageARB.load(&mut loadfn, "glGetnCompressedTexImageARB");
         storage::GetnTexImage.load(&mut loadfn, "glGetnTexImage");
         storage::GetnTexImageARB.load(&mut loadfn, "glGetnTexImageARB");
         storage::GetnUniformdv.load(&mut loadfn, "glGetnUniformdv");
         storage::GetnUniformdvARB.load(&mut loadfn, "glGetnUniformdvARB");
         storage::GetnUniformfv.load(&mut loadfn, "glGetnUniformfv");
         storage::GetnUniformfvARB.load(&mut loadfn, "glGetnUniformfvARB");
         storage::GetnUniformi64vARB.load(&mut loadfn, "glGetnUniformi64vARB");
         storage::GetnUniformiv.load(&mut loadfn, "glGetnUniformiv");
         storage::GetnUniformivARB.load(&mut loadfn, "glGetnUniformivARB");
         storage::GetnUniformui64vARB.load(&mut loadfn, "glGetnUniformui64vARB");
         storage::GetnUniformuiv.load(&mut loadfn, "glGetnUniformuiv");
         storage::GetnUniformuivARB.load(&mut loadfn, "glGetnUniformuivARB");
         storage::GlobalAlphaFactorbSUN.load(&mut loadfn, "glGlobalAlphaFactorbSUN");
         storage::GlobalAlphaFactordSUN.load(&mut loadfn, "glGlobalAlphaFactordSUN");
         storage::GlobalAlphaFactorfSUN.load(&mut loadfn, "glGlobalAlphaFactorfSUN");
         storage::GlobalAlphaFactoriSUN.load(&mut loadfn, "glGlobalAlphaFactoriSUN");
         storage::GlobalAlphaFactorsSUN.load(&mut loadfn, "glGlobalAlphaFactorsSUN");
         storage::GlobalAlphaFactorubSUN.load(&mut loadfn, "glGlobalAlphaFactorubSUN");
         storage::GlobalAlphaFactoruiSUN.load(&mut loadfn, "glGlobalAlphaFactoruiSUN");
         storage::GlobalAlphaFactorusSUN.load(&mut loadfn, "glGlobalAlphaFactorusSUN");
         storage::Hint.load(&mut loadfn, "glHint");
         storage::HintPGI.load(&mut loadfn, "glHintPGI");
         storage::Histogram.load(&mut loadfn, "glHistogram");
         storage::HistogramEXT.load(&mut loadfn, "glHistogramEXT");
         storage::IglooInterfaceSGIX.load(&mut loadfn, "glIglooInterfaceSGIX");
         storage::ImageTransformParameterfHP.load(&mut loadfn, "glImageTransformParameterfHP");
         storage::ImageTransformParameterfvHP.load(&mut loadfn, "glImageTransformParameterfvHP");
         storage::ImageTransformParameteriHP.load(&mut loadfn, "glImageTransformParameteriHP");
         storage::ImageTransformParameterivHP.load(&mut loadfn, "glImageTransformParameterivHP");
         storage::ImportMemoryFdEXT.load(&mut loadfn, "glImportMemoryFdEXT");
         storage::ImportMemoryWin32HandleEXT.load(&mut loadfn, "glImportMemoryWin32HandleEXT");
         storage::ImportMemoryWin32NameEXT.load(&mut loadfn, "glImportMemoryWin32NameEXT");
         storage::ImportSemaphoreFdEXT.load(&mut loadfn, "glImportSemaphoreFdEXT");
         storage::ImportSemaphoreWin32HandleEXT.load(&mut loadfn, "glImportSemaphoreWin32HandleEXT");
         storage::ImportSemaphoreWin32NameEXT.load(&mut loadfn, "glImportSemaphoreWin32NameEXT");
         storage::ImportSyncEXT.load(&mut loadfn, "glImportSyncEXT");
         storage::IndexFormatNV.load(&mut loadfn, "glIndexFormatNV");
         storage::IndexFuncEXT.load(&mut loadfn, "glIndexFuncEXT");
         storage::IndexMaterialEXT.load(&mut loadfn, "glIndexMaterialEXT");
         storage::IndexPointerEXT.load(&mut loadfn, "glIndexPointerEXT");
         storage::IndexPointerListIBM.load(&mut loadfn, "glIndexPointerListIBM");
         storage::IndexxOES.load(&mut loadfn, "glIndexxOES");
         storage::IndexxvOES.load(&mut loadfn, "glIndexxvOES");
         storage::InsertComponentEXT.load(&mut loadfn, "glInsertComponentEXT");
         storage::InsertEventMarkerEXT.load(&mut loadfn, "glInsertEventMarkerEXT");
         storage::InstrumentsBufferSGIX.load(&mut loadfn, "glInstrumentsBufferSGIX");
         storage::InterpolatePathsNV.load(&mut loadfn, "glInterpolatePathsNV");
         storage::InvalidateBufferData.load(&mut loadfn, "glInvalidateBufferData");
         storage::InvalidateBufferSubData.load(&mut loadfn, "glInvalidateBufferSubData");
         storage::InvalidateFramebuffer.load(&mut loadfn, "glInvalidateFramebuffer");
         storage::InvalidateNamedFramebufferData.load(&mut loadfn, "glInvalidateNamedFramebufferData");
         storage::InvalidateNamedFramebufferSubData.load(&mut loadfn, "glInvalidateNamedFramebufferSubData");
         storage::InvalidateSubFramebuffer.load(&mut loadfn, "glInvalidateSubFramebuffer");
         storage::InvalidateTexImage.load(&mut loadfn, "glInvalidateTexImage");
         storage::InvalidateTexSubImage.load(&mut loadfn, "glInvalidateTexSubImage");
         storage::IsAsyncMarkerSGIX.load(&mut loadfn, "glIsAsyncMarkerSGIX");
         storage::IsBuffer.load(&mut loadfn, "glIsBuffer");
         storage::IsBufferARB.load(&mut loadfn, "glIsBufferARB");
         storage::IsBufferResidentNV.load(&mut loadfn, "glIsBufferResidentNV");
         storage::IsCommandListNV.load(&mut loadfn, "glIsCommandListNV");
         storage::IsEnabled.load(&mut loadfn, "glIsEnabled");
         storage::IsEnabledIndexedEXT.load(&mut loadfn, "glIsEnabledIndexedEXT");
         storage::IsEnabledi.load(&mut loadfn, "glIsEnabledi");
         storage::IsFenceAPPLE.load(&mut loadfn, "glIsFenceAPPLE");
         storage::IsFenceNV.load(&mut loadfn, "glIsFenceNV");
         storage::IsFramebuffer.load(&mut loadfn, "glIsFramebuffer");
         storage::IsFramebufferEXT.load(&mut loadfn, "glIsFramebufferEXT");
         storage::IsImageHandleResidentARB.load(&mut loadfn, "glIsImageHandleResidentARB");
         storage::IsImageHandleResidentNV.load(&mut loadfn, "glIsImageHandleResidentNV");
         storage::IsMemoryObjectEXT.load(&mut loadfn, "glIsMemoryObjectEXT");
         storage::IsNameAMD.load(&mut loadfn, "glIsNameAMD");
         storage::IsNamedBufferResidentNV.load(&mut loadfn, "glIsNamedBufferResidentNV");
         storage::IsNamedStringARB.load(&mut loadfn, "glIsNamedStringARB");
         storage::IsObjectBufferATI.load(&mut loadfn, "glIsObjectBufferATI");
         storage::IsOcclusionQueryNV.load(&mut loadfn, "glIsOcclusionQueryNV");
         storage::IsPathNV.load(&mut loadfn, "glIsPathNV");
         storage::IsPointInFillPathNV.load(&mut loadfn, "glIsPointInFillPathNV");
         storage::IsPointInStrokePathNV.load(&mut loadfn, "glIsPointInStrokePathNV");
         storage::IsProgram.load(&mut loadfn, "glIsProgram");
         storage::IsProgramARB.load(&mut loadfn, "glIsProgramARB");
         storage::IsProgramNV.load(&mut loadfn, "glIsProgramNV");
         storage::IsProgramPipeline.load(&mut loadfn, "glIsProgramPipeline");
         storage::IsQuery.load(&mut loadfn, "glIsQuery");
         storage::IsQueryARB.load(&mut loadfn, "glIsQueryARB");
         storage::IsRenderbuffer.load(&mut loadfn, "glIsRenderbuffer");
         storage::IsRenderbufferEXT.load(&mut loadfn, "glIsRenderbufferEXT");
         storage::IsSampler.load(&mut loadfn, "glIsSampler");
         storage::IsSemaphoreEXT.load(&mut loadfn, "glIsSemaphoreEXT");
         storage::IsShader.load(&mut loadfn, "glIsShader");
         storage::IsStateNV.load(&mut loadfn, "glIsStateNV");
         storage::IsSync.load(&mut loadfn, "glIsSync");
         storage::IsTexture.load(&mut loadfn, "glIsTexture");
         storage::IsTextureEXT.load(&mut loadfn, "glIsTextureEXT");
         storage::IsTextureHandleResidentARB.load(&mut loadfn, "glIsTextureHandleResidentARB");
         storage::IsTextureHandleResidentNV.load(&mut loadfn, "glIsTextureHandleResidentNV");
         storage::IsTransformFeedback.load(&mut loadfn, "glIsTransformFeedback");
         storage::IsTransformFeedbackNV.load(&mut loadfn, "glIsTransformFeedbackNV");
         storage::IsVariantEnabledEXT.load(&mut loadfn, "glIsVariantEnabledEXT");
         storage::IsVertexArray.load(&mut loadfn, "glIsVertexArray");
         storage::IsVertexArrayAPPLE.load(&mut loadfn, "glIsVertexArrayAPPLE");
         storage::IsVertexAttribEnabledAPPLE.load(&mut loadfn, "glIsVertexAttribEnabledAPPLE");
         storage::LGPUCopyImageSubDataNVX.load(&mut loadfn, "glLGPUCopyImageSubDataNVX");
         storage::LGPUInterlockNVX.load(&mut loadfn, "glLGPUInterlockNVX");
         storage::LGPUNamedBufferSubDataNVX.load(&mut loadfn, "glLGPUNamedBufferSubDataNVX");
         storage::LabelObjectEXT.load(&mut loadfn, "glLabelObjectEXT");
         storage::LightEnviSGIX.load(&mut loadfn, "glLightEnviSGIX");
         storage::LightModelxOES.load(&mut loadfn, "glLightModelxOES");
         storage::LightModelxvOES.load(&mut loadfn, "glLightModelxvOES");
         storage::LightxOES.load(&mut loadfn, "glLightxOES");
         storage::LightxvOES.load(&mut loadfn, "glLightxvOES");
         storage::LineWidth.load(&mut loadfn, "glLineWidth");
         storage::LineWidthxOES.load(&mut loadfn, "glLineWidthxOES");
         storage::LinkProgram.load(&mut loadfn, "glLinkProgram");
         storage::LinkProgramARB.load(&mut loadfn, "glLinkProgramARB");
         storage::ListDrawCommandsStatesClientNV.load(&mut loadfn, "glListDrawCommandsStatesClientNV");
         storage::ListParameterfSGIX.load(&mut loadfn, "glListParameterfSGIX");
         storage::ListParameterfvSGIX.load(&mut loadfn, "glListParameterfvSGIX");
         storage::ListParameteriSGIX.load(&mut loadfn, "glListParameteriSGIX");
         storage::ListParameterivSGIX.load(&mut loadfn, "glListParameterivSGIX");
         storage::LoadIdentityDeformationMapSGIX.load(&mut loadfn, "glLoadIdentityDeformationMapSGIX");
         storage::LoadMatrixxOES.load(&mut loadfn, "glLoadMatrixxOES");
         storage::LoadProgramNV.load(&mut loadfn, "glLoadProgramNV");
         storage::LoadTransposeMatrixd.load(&mut loadfn, "glLoadTransposeMatrixd");
         storage::LoadTransposeMatrixdARB.load(&mut loadfn, "glLoadTransposeMatrixdARB");
         storage::LoadTransposeMatrixf.load(&mut loadfn, "glLoadTransposeMatrixf");
         storage::LoadTransposeMatrixfARB.load(&mut loadfn, "glLoadTransposeMatrixfARB");
         storage::LoadTransposeMatrixxOES.load(&mut loadfn, "glLoadTransposeMatrixxOES");
         storage::LockArraysEXT.load(&mut loadfn, "glLockArraysEXT");
         storage::LogicOp.load(&mut loadfn, "glLogicOp");
         storage::MakeBufferNonResidentNV.load(&mut loadfn, "glMakeBufferNonResidentNV");
         storage::MakeBufferResidentNV.load(&mut loadfn, "glMakeBufferResidentNV");
         storage::MakeImageHandleNonResidentARB.load(&mut loadfn, "glMakeImageHandleNonResidentARB");
         storage::MakeImageHandleNonResidentNV.load(&mut loadfn, "glMakeImageHandleNonResidentNV");
         storage::MakeImageHandleResidentARB.load(&mut loadfn, "glMakeImageHandleResidentARB");
         storage::MakeImageHandleResidentNV.load(&mut loadfn, "glMakeImageHandleResidentNV");
         storage::MakeNamedBufferNonResidentNV.load(&mut loadfn, "glMakeNamedBufferNonResidentNV");
         storage::MakeNamedBufferResidentNV.load(&mut loadfn, "glMakeNamedBufferResidentNV");
         storage::MakeTextureHandleNonResidentARB.load(&mut loadfn, "glMakeTextureHandleNonResidentARB");
         storage::MakeTextureHandleNonResidentNV.load(&mut loadfn, "glMakeTextureHandleNonResidentNV");
         storage::MakeTextureHandleResidentARB.load(&mut loadfn, "glMakeTextureHandleResidentARB");
         storage::MakeTextureHandleResidentNV.load(&mut loadfn, "glMakeTextureHandleResidentNV");
         storage::Map1xOES.load(&mut loadfn, "glMap1xOES");
         storage::Map2xOES.load(&mut loadfn, "glMap2xOES");
         storage::MapBuffer.load(&mut loadfn, "glMapBuffer");
         storage::MapBufferARB.load(&mut loadfn, "glMapBufferARB");
         storage::MapBufferRange.load(&mut loadfn, "glMapBufferRange");
         storage::MapControlPointsNV.load(&mut loadfn, "glMapControlPointsNV");
         storage::MapGrid1xOES.load(&mut loadfn, "glMapGrid1xOES");
         storage::MapGrid2xOES.load(&mut loadfn, "glMapGrid2xOES");
         storage::MapNamedBuffer.load(&mut loadfn, "glMapNamedBuffer");
         storage::MapNamedBufferEXT.load(&mut loadfn, "glMapNamedBufferEXT");
         storage::MapNamedBufferRange.load(&mut loadfn, "glMapNamedBufferRange");
         storage::MapNamedBufferRangeEXT.load(&mut loadfn, "glMapNamedBufferRangeEXT");
         storage::MapObjectBufferATI.load(&mut loadfn, "glMapObjectBufferATI");
         storage::MapParameterfvNV.load(&mut loadfn, "glMapParameterfvNV");
         storage::MapParameterivNV.load(&mut loadfn, "glMapParameterivNV");
         storage::MapTexture2DINTEL.load(&mut loadfn, "glMapTexture2DINTEL");
         storage::MapVertexAttrib1dAPPLE.load(&mut loadfn, "glMapVertexAttrib1dAPPLE");
         storage::MapVertexAttrib1fAPPLE.load(&mut loadfn, "glMapVertexAttrib1fAPPLE");
         storage::MapVertexAttrib2dAPPLE.load(&mut loadfn, "glMapVertexAttrib2dAPPLE");
         storage::MapVertexAttrib2fAPPLE.load(&mut loadfn, "glMapVertexAttrib2fAPPLE");
         storage::MaterialxOES.load(&mut loadfn, "glMaterialxOES");
         storage::MaterialxvOES.load(&mut loadfn, "glMaterialxvOES");
         storage::MatrixFrustumEXT.load(&mut loadfn, "glMatrixFrustumEXT");
         storage::MatrixIndexPointerARB.load(&mut loadfn, "glMatrixIndexPointerARB");
         storage::MatrixIndexubvARB.load(&mut loadfn, "glMatrixIndexubvARB");
         storage::MatrixIndexuivARB.load(&mut loadfn, "glMatrixIndexuivARB");
         storage::MatrixIndexusvARB.load(&mut loadfn, "glMatrixIndexusvARB");
         storage::MatrixLoad3x2fNV.load(&mut loadfn, "glMatrixLoad3x2fNV");
         storage::MatrixLoad3x3fNV.load(&mut loadfn, "glMatrixLoad3x3fNV");
         storage::MatrixLoadIdentityEXT.load(&mut loadfn, "glMatrixLoadIdentityEXT");
         storage::MatrixLoadTranspose3x3fNV.load(&mut loadfn, "glMatrixLoadTranspose3x3fNV");
         storage::MatrixLoadTransposedEXT.load(&mut loadfn, "glMatrixLoadTransposedEXT");
         storage::MatrixLoadTransposefEXT.load(&mut loadfn, "glMatrixLoadTransposefEXT");
         storage::MatrixLoaddEXT.load(&mut loadfn, "glMatrixLoaddEXT");
         storage::MatrixLoadfEXT.load(&mut loadfn, "glMatrixLoadfEXT");
         storage::MatrixMult3x2fNV.load(&mut loadfn, "glMatrixMult3x2fNV");
         storage::MatrixMult3x3fNV.load(&mut loadfn, "glMatrixMult3x3fNV");
         storage::MatrixMultTranspose3x3fNV.load(&mut loadfn, "glMatrixMultTranspose3x3fNV");
         storage::MatrixMultTransposedEXT.load(&mut loadfn, "glMatrixMultTransposedEXT");
         storage::MatrixMultTransposefEXT.load(&mut loadfn, "glMatrixMultTransposefEXT");
         storage::MatrixMultdEXT.load(&mut loadfn, "glMatrixMultdEXT");
         storage::MatrixMultfEXT.load(&mut loadfn, "glMatrixMultfEXT");
         storage::MatrixOrthoEXT.load(&mut loadfn, "glMatrixOrthoEXT");
         storage::MatrixPopEXT.load(&mut loadfn, "glMatrixPopEXT");
         storage::MatrixPushEXT.load(&mut loadfn, "glMatrixPushEXT");
         storage::MatrixRotatedEXT.load(&mut loadfn, "glMatrixRotatedEXT");
         storage::MatrixRotatefEXT.load(&mut loadfn, "glMatrixRotatefEXT");
         storage::MatrixScaledEXT.load(&mut loadfn, "glMatrixScaledEXT");
         storage::MatrixScalefEXT.load(&mut loadfn, "glMatrixScalefEXT");
         storage::MatrixTranslatedEXT.load(&mut loadfn, "glMatrixTranslatedEXT");
         storage::MatrixTranslatefEXT.load(&mut loadfn, "glMatrixTranslatefEXT");
         storage::MaxShaderCompilerThreadsARB.load(&mut loadfn, "glMaxShaderCompilerThreadsARB");
         storage::MaxShaderCompilerThreadsKHR.load(&mut loadfn, "glMaxShaderCompilerThreadsKHR");
         storage::MemoryBarrier.load(&mut loadfn, "glMemoryBarrier");
         storage::MemoryBarrierByRegion.load(&mut loadfn, "glMemoryBarrierByRegion");
         storage::MemoryBarrierEXT.load(&mut loadfn, "glMemoryBarrierEXT");
         storage::MemoryObjectParameterivEXT.load(&mut loadfn, "glMemoryObjectParameterivEXT");
         storage::MinSampleShading.load(&mut loadfn, "glMinSampleShading");
         storage::MinSampleShadingARB.load(&mut loadfn, "glMinSampleShadingARB");
         storage::Minmax.load(&mut loadfn, "glMinmax");
         storage::MinmaxEXT.load(&mut loadfn, "glMinmaxEXT");
         storage::MultMatrixxOES.load(&mut loadfn, "glMultMatrixxOES");
         storage::MultTransposeMatrixd.load(&mut loadfn, "glMultTransposeMatrixd");
         storage::MultTransposeMatrixdARB.load(&mut loadfn, "glMultTransposeMatrixdARB");
         storage::MultTransposeMatrixf.load(&mut loadfn, "glMultTransposeMatrixf");
         storage::MultTransposeMatrixfARB.load(&mut loadfn, "glMultTransposeMatrixfARB");
         storage::MultTransposeMatrixxOES.load(&mut loadfn, "glMultTransposeMatrixxOES");
         storage::MultiDrawArrays.load(&mut loadfn, "glMultiDrawArrays");
         storage::MultiDrawArraysEXT.load(&mut loadfn, "glMultiDrawArraysEXT");
         storage::MultiDrawArraysIndirect.load(&mut loadfn, "glMultiDrawArraysIndirect");
         storage::MultiDrawArraysIndirectAMD.load(&mut loadfn, "glMultiDrawArraysIndirectAMD");
         storage::MultiDrawArraysIndirectBindlessCountNV.load(&mut loadfn, "glMultiDrawArraysIndirectBindlessCountNV");
         storage::MultiDrawArraysIndirectBindlessNV.load(&mut loadfn, "glMultiDrawArraysIndirectBindlessNV");
         storage::MultiDrawArraysIndirectCount.load(&mut loadfn, "glMultiDrawArraysIndirectCount");
         storage::MultiDrawArraysIndirectCountARB.load(&mut loadfn, "glMultiDrawArraysIndirectCountARB");
         storage::MultiDrawElementArrayAPPLE.load(&mut loadfn, "glMultiDrawElementArrayAPPLE");
         storage::MultiDrawElements.load(&mut loadfn, "glMultiDrawElements");
         storage::MultiDrawElementsBaseVertex.load(&mut loadfn, "glMultiDrawElementsBaseVertex");
         storage::MultiDrawElementsEXT.load(&mut loadfn, "glMultiDrawElementsEXT");
         storage::MultiDrawElementsIndirect.load(&mut loadfn, "glMultiDrawElementsIndirect");
         storage::MultiDrawElementsIndirectAMD.load(&mut loadfn, "glMultiDrawElementsIndirectAMD");
         storage::MultiDrawElementsIndirectBindlessCountNV.load(&mut loadfn, "glMultiDrawElementsIndirectBindlessCountNV");
         storage::MultiDrawElementsIndirectBindlessNV.load(&mut loadfn, "glMultiDrawElementsIndirectBindlessNV");
         storage::MultiDrawElementsIndirectCount.load(&mut loadfn, "glMultiDrawElementsIndirectCount");
         storage::MultiDrawElementsIndirectCountARB.load(&mut loadfn, "glMultiDrawElementsIndirectCountARB");
         storage::MultiDrawMeshTasksIndirectCountNV.load(&mut loadfn, "glMultiDrawMeshTasksIndirectCountNV");
         storage::MultiDrawMeshTasksIndirectNV.load(&mut loadfn, "glMultiDrawMeshTasksIndirectNV");
         storage::MultiDrawRangeElementArrayAPPLE.load(&mut loadfn, "glMultiDrawRangeElementArrayAPPLE");
         storage::MultiModeDrawArraysIBM.load(&mut loadfn, "glMultiModeDrawArraysIBM");
         storage::MultiModeDrawElementsIBM.load(&mut loadfn, "glMultiModeDrawElementsIBM");
         storage::MultiTexBufferEXT.load(&mut loadfn, "glMultiTexBufferEXT");
         storage::MultiTexCoord1bOES.load(&mut loadfn, "glMultiTexCoord1bOES");
         storage::MultiTexCoord1bvOES.load(&mut loadfn, "glMultiTexCoord1bvOES");
         storage::MultiTexCoord1d.load(&mut loadfn, "glMultiTexCoord1d");
         storage::MultiTexCoord1dARB.load(&mut loadfn, "glMultiTexCoord1dARB");
         storage::MultiTexCoord1dv.load(&mut loadfn, "glMultiTexCoord1dv");
         storage::MultiTexCoord1dvARB.load(&mut loadfn, "glMultiTexCoord1dvARB");
         storage::MultiTexCoord1f.load(&mut loadfn, "glMultiTexCoord1f");
         storage::MultiTexCoord1fARB.load(&mut loadfn, "glMultiTexCoord1fARB");
         storage::MultiTexCoord1fv.load(&mut loadfn, "glMultiTexCoord1fv");
         storage::MultiTexCoord1fvARB.load(&mut loadfn, "glMultiTexCoord1fvARB");
         storage::MultiTexCoord1hNV.load(&mut loadfn, "glMultiTexCoord1hNV");
         storage::MultiTexCoord1hvNV.load(&mut loadfn, "glMultiTexCoord1hvNV");
         storage::MultiTexCoord1i.load(&mut loadfn, "glMultiTexCoord1i");
         storage::MultiTexCoord1iARB.load(&mut loadfn, "glMultiTexCoord1iARB");
         storage::MultiTexCoord1iv.load(&mut loadfn, "glMultiTexCoord1iv");
         storage::MultiTexCoord1ivARB.load(&mut loadfn, "glMultiTexCoord1ivARB");
         storage::MultiTexCoord1s.load(&mut loadfn, "glMultiTexCoord1s");
         storage::MultiTexCoord1sARB.load(&mut loadfn, "glMultiTexCoord1sARB");
         storage::MultiTexCoord1sv.load(&mut loadfn, "glMultiTexCoord1sv");
         storage::MultiTexCoord1svARB.load(&mut loadfn, "glMultiTexCoord1svARB");
         storage::MultiTexCoord1xOES.load(&mut loadfn, "glMultiTexCoord1xOES");
         storage::MultiTexCoord1xvOES.load(&mut loadfn, "glMultiTexCoord1xvOES");
         storage::MultiTexCoord2bOES.load(&mut loadfn, "glMultiTexCoord2bOES");
         storage::MultiTexCoord2bvOES.load(&mut loadfn, "glMultiTexCoord2bvOES");
         storage::MultiTexCoord2d.load(&mut loadfn, "glMultiTexCoord2d");
         storage::MultiTexCoord2dARB.load(&mut loadfn, "glMultiTexCoord2dARB");
         storage::MultiTexCoord2dv.load(&mut loadfn, "glMultiTexCoord2dv");
         storage::MultiTexCoord2dvARB.load(&mut loadfn, "glMultiTexCoord2dvARB");
         storage::MultiTexCoord2f.load(&mut loadfn, "glMultiTexCoord2f");
         storage::MultiTexCoord2fARB.load(&mut loadfn, "glMultiTexCoord2fARB");
         storage::MultiTexCoord2fv.load(&mut loadfn, "glMultiTexCoord2fv");
         storage::MultiTexCoord2fvARB.load(&mut loadfn, "glMultiTexCoord2fvARB");
         storage::MultiTexCoord2hNV.load(&mut loadfn, "glMultiTexCoord2hNV");
         storage::MultiTexCoord2hvNV.load(&mut loadfn, "glMultiTexCoord2hvNV");
         storage::MultiTexCoord2i.load(&mut loadfn, "glMultiTexCoord2i");
         storage::MultiTexCoord2iARB.load(&mut loadfn, "glMultiTexCoord2iARB");
         storage::MultiTexCoord2iv.load(&mut loadfn, "glMultiTexCoord2iv");
         storage::MultiTexCoord2ivARB.load(&mut loadfn, "glMultiTexCoord2ivARB");
         storage::MultiTexCoord2s.load(&mut loadfn, "glMultiTexCoord2s");
         storage::MultiTexCoord2sARB.load(&mut loadfn, "glMultiTexCoord2sARB");
         storage::MultiTexCoord2sv.load(&mut loadfn, "glMultiTexCoord2sv");
         storage::MultiTexCoord2svARB.load(&mut loadfn, "glMultiTexCoord2svARB");
         storage::MultiTexCoord2xOES.load(&mut loadfn, "glMultiTexCoord2xOES");
         storage::MultiTexCoord2xvOES.load(&mut loadfn, "glMultiTexCoord2xvOES");
         storage::MultiTexCoord3bOES.load(&mut loadfn, "glMultiTexCoord3bOES");
         storage::MultiTexCoord3bvOES.load(&mut loadfn, "glMultiTexCoord3bvOES");
         storage::MultiTexCoord3d.load(&mut loadfn, "glMultiTexCoord3d");
         storage::MultiTexCoord3dARB.load(&mut loadfn, "glMultiTexCoord3dARB");
         storage::MultiTexCoord3dv.load(&mut loadfn, "glMultiTexCoord3dv");
         storage::MultiTexCoord3dvARB.load(&mut loadfn, "glMultiTexCoord3dvARB");
         storage::MultiTexCoord3f.load(&mut loadfn, "glMultiTexCoord3f");
         storage::MultiTexCoord3fARB.load(&mut loadfn, "glMultiTexCoord3fARB");
         storage::MultiTexCoord3fv.load(&mut loadfn, "glMultiTexCoord3fv");
         storage::MultiTexCoord3fvARB.load(&mut loadfn, "glMultiTexCoord3fvARB");
         storage::MultiTexCoord3hNV.load(&mut loadfn, "glMultiTexCoord3hNV");
         storage::MultiTexCoord3hvNV.load(&mut loadfn, "glMultiTexCoord3hvNV");
         storage::MultiTexCoord3i.load(&mut loadfn, "glMultiTexCoord3i");
         storage::MultiTexCoord3iARB.load(&mut loadfn, "glMultiTexCoord3iARB");
         storage::MultiTexCoord3iv.load(&mut loadfn, "glMultiTexCoord3iv");
         storage::MultiTexCoord3ivARB.load(&mut loadfn, "glMultiTexCoord3ivARB");
         storage::MultiTexCoord3s.load(&mut loadfn, "glMultiTexCoord3s");
         storage::MultiTexCoord3sARB.load(&mut loadfn, "glMultiTexCoord3sARB");
         storage::MultiTexCoord3sv.load(&mut loadfn, "glMultiTexCoord3sv");
         storage::MultiTexCoord3svARB.load(&mut loadfn, "glMultiTexCoord3svARB");
         storage::MultiTexCoord3xOES.load(&mut loadfn, "glMultiTexCoord3xOES");
         storage::MultiTexCoord3xvOES.load(&mut loadfn, "glMultiTexCoord3xvOES");
         storage::MultiTexCoord4bOES.load(&mut loadfn, "glMultiTexCoord4bOES");
         storage::MultiTexCoord4bvOES.load(&mut loadfn, "glMultiTexCoord4bvOES");
         storage::MultiTexCoord4d.load(&mut loadfn, "glMultiTexCoord4d");
         storage::MultiTexCoord4dARB.load(&mut loadfn, "glMultiTexCoord4dARB");
         storage::MultiTexCoord4dv.load(&mut loadfn, "glMultiTexCoord4dv");
         storage::MultiTexCoord4dvARB.load(&mut loadfn, "glMultiTexCoord4dvARB");
         storage::MultiTexCoord4f.load(&mut loadfn, "glMultiTexCoord4f");
         storage::MultiTexCoord4fARB.load(&mut loadfn, "glMultiTexCoord4fARB");
         storage::MultiTexCoord4fv.load(&mut loadfn, "glMultiTexCoord4fv");
         storage::MultiTexCoord4fvARB.load(&mut loadfn, "glMultiTexCoord4fvARB");
         storage::MultiTexCoord4hNV.load(&mut loadfn, "glMultiTexCoord4hNV");
         storage::MultiTexCoord4hvNV.load(&mut loadfn, "glMultiTexCoord4hvNV");
         storage::MultiTexCoord4i.load(&mut loadfn, "glMultiTexCoord4i");
         storage::MultiTexCoord4iARB.load(&mut loadfn, "glMultiTexCoord4iARB");
         storage::MultiTexCoord4iv.load(&mut loadfn, "glMultiTexCoord4iv");
         storage::MultiTexCoord4ivARB.load(&mut loadfn, "glMultiTexCoord4ivARB");
         storage::MultiTexCoord4s.load(&mut loadfn, "glMultiTexCoord4s");
         storage::MultiTexCoord4sARB.load(&mut loadfn, "glMultiTexCoord4sARB");
         storage::MultiTexCoord4sv.load(&mut loadfn, "glMultiTexCoord4sv");
         storage::MultiTexCoord4svARB.load(&mut loadfn, "glMultiTexCoord4svARB");
         storage::MultiTexCoord4xOES.load(&mut loadfn, "glMultiTexCoord4xOES");
         storage::MultiTexCoord4xvOES.load(&mut loadfn, "glMultiTexCoord4xvOES");
         storage::MultiTexCoordPointerEXT.load(&mut loadfn, "glMultiTexCoordPointerEXT");
         storage::MultiTexEnvfEXT.load(&mut loadfn, "glMultiTexEnvfEXT");
         storage::MultiTexEnvfvEXT.load(&mut loadfn, "glMultiTexEnvfvEXT");
         storage::MultiTexEnviEXT.load(&mut loadfn, "glMultiTexEnviEXT");
         storage::MultiTexEnvivEXT.load(&mut loadfn, "glMultiTexEnvivEXT");
         storage::MultiTexGendEXT.load(&mut loadfn, "glMultiTexGendEXT");
         storage::MultiTexGendvEXT.load(&mut loadfn, "glMultiTexGendvEXT");
         storage::MultiTexGenfEXT.load(&mut loadfn, "glMultiTexGenfEXT");
         storage::MultiTexGenfvEXT.load(&mut loadfn, "glMultiTexGenfvEXT");
         storage::MultiTexGeniEXT.load(&mut loadfn, "glMultiTexGeniEXT");
         storage::MultiTexGenivEXT.load(&mut loadfn, "glMultiTexGenivEXT");
         storage::MultiTexImage1DEXT.load(&mut loadfn, "glMultiTexImage1DEXT");
         storage::MultiTexImage2DEXT.load(&mut loadfn, "glMultiTexImage2DEXT");
         storage::MultiTexImage3DEXT.load(&mut loadfn, "glMultiTexImage3DEXT");
         storage::MultiTexParameterIivEXT.load(&mut loadfn, "glMultiTexParameterIivEXT");
         storage::MultiTexParameterIuivEXT.load(&mut loadfn, "glMultiTexParameterIuivEXT");
         storage::MultiTexParameterfEXT.load(&mut loadfn, "glMultiTexParameterfEXT");
         storage::MultiTexParameterfvEXT.load(&mut loadfn, "glMultiTexParameterfvEXT");
         storage::MultiTexParameteriEXT.load(&mut loadfn, "glMultiTexParameteriEXT");
         storage::MultiTexParameterivEXT.load(&mut loadfn, "glMultiTexParameterivEXT");
         storage::MultiTexRenderbufferEXT.load(&mut loadfn, "glMultiTexRenderbufferEXT");
         storage::MultiTexSubImage1DEXT.load(&mut loadfn, "glMultiTexSubImage1DEXT");
         storage::MultiTexSubImage2DEXT.load(&mut loadfn, "glMultiTexSubImage2DEXT");
         storage::MultiTexSubImage3DEXT.load(&mut loadfn, "glMultiTexSubImage3DEXT");
         storage::MulticastBarrierNV.load(&mut loadfn, "glMulticastBarrierNV");
         storage::MulticastBlitFramebufferNV.load(&mut loadfn, "glMulticastBlitFramebufferNV");
         storage::MulticastBufferSubDataNV.load(&mut loadfn, "glMulticastBufferSubDataNV");
         storage::MulticastCopyBufferSubDataNV.load(&mut loadfn, "glMulticastCopyBufferSubDataNV");
         storage::MulticastCopyImageSubDataNV.load(&mut loadfn, "glMulticastCopyImageSubDataNV");
         storage::MulticastFramebufferSampleLocationsfvNV.load(&mut loadfn, "glMulticastFramebufferSampleLocationsfvNV");
         storage::MulticastGetQueryObjecti64vNV.load(&mut loadfn, "glMulticastGetQueryObjecti64vNV");
         storage::MulticastGetQueryObjectivNV.load(&mut loadfn, "glMulticastGetQueryObjectivNV");
         storage::MulticastGetQueryObjectui64vNV.load(&mut loadfn, "glMulticastGetQueryObjectui64vNV");
         storage::MulticastGetQueryObjectuivNV.load(&mut loadfn, "glMulticastGetQueryObjectuivNV");
         storage::MulticastScissorArrayvNVX.load(&mut loadfn, "glMulticastScissorArrayvNVX");
         storage::MulticastViewportArrayvNVX.load(&mut loadfn, "glMulticastViewportArrayvNVX");
         storage::MulticastViewportPositionWScaleNVX.load(&mut loadfn, "glMulticastViewportPositionWScaleNVX");
         storage::MulticastWaitSyncNV.load(&mut loadfn, "glMulticastWaitSyncNV");
         storage::NamedBufferAttachMemoryNV.load(&mut loadfn, "glNamedBufferAttachMemoryNV");
         storage::NamedBufferData.load(&mut loadfn, "glNamedBufferData");
         storage::NamedBufferDataEXT.load(&mut loadfn, "glNamedBufferDataEXT");
         storage::NamedBufferPageCommitmentARB.load(&mut loadfn, "glNamedBufferPageCommitmentARB");
         storage::NamedBufferPageCommitmentEXT.load(&mut loadfn, "glNamedBufferPageCommitmentEXT");
         storage::NamedBufferStorage.load(&mut loadfn, "glNamedBufferStorage");
         storage::NamedBufferStorageEXT.load(&mut loadfn, "glNamedBufferStorageEXT");
         storage::NamedBufferStorageExternalEXT.load(&mut loadfn, "glNamedBufferStorageExternalEXT");
         storage::NamedBufferStorageMemEXT.load(&mut loadfn, "glNamedBufferStorageMemEXT");
         storage::NamedBufferSubData.load(&mut loadfn, "glNamedBufferSubData");
         storage::NamedBufferSubDataEXT.load(&mut loadfn, "glNamedBufferSubDataEXT");
         storage::NamedCopyBufferSubDataEXT.load(&mut loadfn, "glNamedCopyBufferSubDataEXT");
         storage::NamedFramebufferDrawBuffer.load(&mut loadfn, "glNamedFramebufferDrawBuffer");
         storage::NamedFramebufferDrawBuffers.load(&mut loadfn, "glNamedFramebufferDrawBuffers");
         storage::NamedFramebufferParameteri.load(&mut loadfn, "glNamedFramebufferParameteri");
         storage::NamedFramebufferParameteriEXT.load(&mut loadfn, "glNamedFramebufferParameteriEXT");
         storage::NamedFramebufferReadBuffer.load(&mut loadfn, "glNamedFramebufferReadBuffer");
         storage::NamedFramebufferRenderbuffer.load(&mut loadfn, "glNamedFramebufferRenderbuffer");
         storage::NamedFramebufferRenderbufferEXT.load(&mut loadfn, "glNamedFramebufferRenderbufferEXT");
         storage::NamedFramebufferSampleLocationsfvARB.load(&mut loadfn, "glNamedFramebufferSampleLocationsfvARB");
         storage::NamedFramebufferSampleLocationsfvNV.load(&mut loadfn, "glNamedFramebufferSampleLocationsfvNV");
         storage::NamedFramebufferSamplePositionsfvAMD.load(&mut loadfn, "glNamedFramebufferSamplePositionsfvAMD");
         storage::NamedFramebufferTexture.load(&mut loadfn, "glNamedFramebufferTexture");
         storage::NamedFramebufferTexture1DEXT.load(&mut loadfn, "glNamedFramebufferTexture1DEXT");
         storage::NamedFramebufferTexture2DEXT.load(&mut loadfn, "glNamedFramebufferTexture2DEXT");
         storage::NamedFramebufferTexture3DEXT.load(&mut loadfn, "glNamedFramebufferTexture3DEXT");
         storage::NamedFramebufferTextureEXT.load(&mut loadfn, "glNamedFramebufferTextureEXT");
         storage::NamedFramebufferTextureFaceEXT.load(&mut loadfn, "glNamedFramebufferTextureFaceEXT");
         storage::NamedFramebufferTextureLayer.load(&mut loadfn, "glNamedFramebufferTextureLayer");
         storage::NamedFramebufferTextureLayerEXT.load(&mut loadfn, "glNamedFramebufferTextureLayerEXT");
         storage::NamedProgramLocalParameter4dEXT.load(&mut loadfn, "glNamedProgramLocalParameter4dEXT");
         storage::NamedProgramLocalParameter4dvEXT.load(&mut loadfn, "glNamedProgramLocalParameter4dvEXT");
         storage::NamedProgramLocalParameter4fEXT.load(&mut loadfn, "glNamedProgramLocalParameter4fEXT");
         storage::NamedProgramLocalParameter4fvEXT.load(&mut loadfn, "glNamedProgramLocalParameter4fvEXT");
         storage::NamedProgramLocalParameterI4iEXT.load(&mut loadfn, "glNamedProgramLocalParameterI4iEXT");
         storage::NamedProgramLocalParameterI4ivEXT.load(&mut loadfn, "glNamedProgramLocalParameterI4ivEXT");
         storage::NamedProgramLocalParameterI4uiEXT.load(&mut loadfn, "glNamedProgramLocalParameterI4uiEXT");
         storage::NamedProgramLocalParameterI4uivEXT.load(&mut loadfn, "glNamedProgramLocalParameterI4uivEXT");
         storage::NamedProgramLocalParameters4fvEXT.load(&mut loadfn, "glNamedProgramLocalParameters4fvEXT");
         storage::NamedProgramLocalParametersI4ivEXT.load(&mut loadfn, "glNamedProgramLocalParametersI4ivEXT");
         storage::NamedProgramLocalParametersI4uivEXT.load(&mut loadfn, "glNamedProgramLocalParametersI4uivEXT");
         storage::NamedProgramStringEXT.load(&mut loadfn, "glNamedProgramStringEXT");
         storage::NamedRenderbufferStorage.load(&mut loadfn, "glNamedRenderbufferStorage");
         storage::NamedRenderbufferStorageEXT.load(&mut loadfn, "glNamedRenderbufferStorageEXT");
         storage::NamedRenderbufferStorageMultisample.load(&mut loadfn, "glNamedRenderbufferStorageMultisample");
         storage::NamedRenderbufferStorageMultisampleAdvancedAMD.load(&mut loadfn, "glNamedRenderbufferStorageMultisampleAdvancedAMD");
         storage::NamedRenderbufferStorageMultisampleCoverageEXT.load(&mut loadfn, "glNamedRenderbufferStorageMultisampleCoverageEXT");
         storage::NamedRenderbufferStorageMultisampleEXT.load(&mut loadfn, "glNamedRenderbufferStorageMultisampleEXT");
         storage::NamedStringARB.load(&mut loadfn, "glNamedStringARB");
         storage::NewObjectBufferATI.load(&mut loadfn, "glNewObjectBufferATI");
         storage::Normal3fVertex3fSUN.load(&mut loadfn, "glNormal3fVertex3fSUN");
         storage::Normal3fVertex3fvSUN.load(&mut loadfn, "glNormal3fVertex3fvSUN");
         storage::Normal3hNV.load(&mut loadfn, "glNormal3hNV");
         storage::Normal3hvNV.load(&mut loadfn, "glNormal3hvNV");
         storage::Normal3xOES.load(&mut loadfn, "glNormal3xOES");
         storage::Normal3xvOES.load(&mut loadfn, "glNormal3xvOES");
         storage::NormalFormatNV.load(&mut loadfn, "glNormalFormatNV");
         storage::NormalPointerEXT.load(&mut loadfn, "glNormalPointerEXT");
         storage::NormalPointerListIBM.load(&mut loadfn, "glNormalPointerListIBM");
         storage::NormalPointervINTEL.load(&mut loadfn, "glNormalPointervINTEL");
         storage::NormalStream3bATI.load(&mut loadfn, "glNormalStream3bATI");
         storage::NormalStream3bvATI.load(&mut loadfn, "glNormalStream3bvATI");
         storage::NormalStream3dATI.load(&mut loadfn, "glNormalStream3dATI");
         storage::NormalStream3dvATI.load(&mut loadfn, "glNormalStream3dvATI");
         storage::NormalStream3fATI.load(&mut loadfn, "glNormalStream3fATI");
         storage::NormalStream3fvATI.load(&mut loadfn, "glNormalStream3fvATI");
         storage::NormalStream3iATI.load(&mut loadfn, "glNormalStream3iATI");
         storage::NormalStream3ivATI.load(&mut loadfn, "glNormalStream3ivATI");
         storage::NormalStream3sATI.load(&mut loadfn, "glNormalStream3sATI");
         storage::NormalStream3svATI.load(&mut loadfn, "glNormalStream3svATI");
         storage::ObjectLabel.load(&mut loadfn, "glObjectLabel");
         storage::ObjectPtrLabel.load(&mut loadfn, "glObjectPtrLabel");
         storage::ObjectPurgeableAPPLE.load(&mut loadfn, "glObjectPurgeableAPPLE");
         storage::ObjectUnpurgeableAPPLE.load(&mut loadfn, "glObjectUnpurgeableAPPLE");
         storage::OrthofOES.load(&mut loadfn, "glOrthofOES");
         storage::OrthoxOES.load(&mut loadfn, "glOrthoxOES");
         storage::PNTrianglesfATI.load(&mut loadfn, "glPNTrianglesfATI");
         storage::PNTrianglesiATI.load(&mut loadfn, "glPNTrianglesiATI");
         storage::PassTexCoordATI.load(&mut loadfn, "glPassTexCoordATI");
         storage::PassThroughxOES.load(&mut loadfn, "glPassThroughxOES");
         storage::PatchParameterfv.load(&mut loadfn, "glPatchParameterfv");
         storage::PatchParameteri.load(&mut loadfn, "glPatchParameteri");
         storage::PathCommandsNV.load(&mut loadfn, "glPathCommandsNV");
         storage::PathCoordsNV.load(&mut loadfn, "glPathCoordsNV");
         storage::PathCoverDepthFuncNV.load(&mut loadfn, "glPathCoverDepthFuncNV");
         storage::PathDashArrayNV.load(&mut loadfn, "glPathDashArrayNV");
         storage::PathGlyphIndexArrayNV.load(&mut loadfn, "glPathGlyphIndexArrayNV");
         storage::PathGlyphIndexRangeNV.load(&mut loadfn, "glPathGlyphIndexRangeNV");
         storage::PathGlyphRangeNV.load(&mut loadfn, "glPathGlyphRangeNV");
         storage::PathGlyphsNV.load(&mut loadfn, "glPathGlyphsNV");
         storage::PathMemoryGlyphIndexArrayNV.load(&mut loadfn, "glPathMemoryGlyphIndexArrayNV");
         storage::PathParameterfNV.load(&mut loadfn, "glPathParameterfNV");
         storage::PathParameterfvNV.load(&mut loadfn, "glPathParameterfvNV");
         storage::PathParameteriNV.load(&mut loadfn, "glPathParameteriNV");
         storage::PathParameterivNV.load(&mut loadfn, "glPathParameterivNV");
         storage::PathStencilDepthOffsetNV.load(&mut loadfn, "glPathStencilDepthOffsetNV");
         storage::PathStencilFuncNV.load(&mut loadfn, "glPathStencilFuncNV");
         storage::PathStringNV.load(&mut loadfn, "glPathStringNV");
         storage::PathSubCommandsNV.load(&mut loadfn, "glPathSubCommandsNV");
         storage::PathSubCoordsNV.load(&mut loadfn, "glPathSubCoordsNV");
         storage::PauseTransformFeedback.load(&mut loadfn, "glPauseTransformFeedback");
         storage::PauseTransformFeedbackNV.load(&mut loadfn, "glPauseTransformFeedbackNV");
         storage::PixelDataRangeNV.load(&mut loadfn, "glPixelDataRangeNV");
         storage::PixelMapx.load(&mut loadfn, "glPixelMapx");
         storage::PixelStoref.load(&mut loadfn, "glPixelStoref");
         storage::PixelStorei.load(&mut loadfn, "glPixelStorei");
         storage::PixelStorex.load(&mut loadfn, "glPixelStorex");
         storage::PixelTexGenParameterfSGIS.load(&mut loadfn, "glPixelTexGenParameterfSGIS");
         storage::PixelTexGenParameterfvSGIS.load(&mut loadfn, "glPixelTexGenParameterfvSGIS");
         storage::PixelTexGenParameteriSGIS.load(&mut loadfn, "glPixelTexGenParameteriSGIS");
         storage::PixelTexGenParameterivSGIS.load(&mut loadfn, "glPixelTexGenParameterivSGIS");
         storage::PixelTexGenSGIX.load(&mut loadfn, "glPixelTexGenSGIX");
         storage::PixelTransferxOES.load(&mut loadfn, "glPixelTransferxOES");
         storage::PixelTransformParameterfEXT.load(&mut loadfn, "glPixelTransformParameterfEXT");
         storage::PixelTransformParameterfvEXT.load(&mut loadfn, "glPixelTransformParameterfvEXT");
         storage::PixelTransformParameteriEXT.load(&mut loadfn, "glPixelTransformParameteriEXT");
         storage::PixelTransformParameterivEXT.load(&mut loadfn, "glPixelTransformParameterivEXT");
         storage::PixelZoomxOES.load(&mut loadfn, "glPixelZoomxOES");
         storage::PointAlongPathNV.load(&mut loadfn, "glPointAlongPathNV");
         storage::PointParameterf.load(&mut loadfn, "glPointParameterf");
         storage::PointParameterfARB.load(&mut loadfn, "glPointParameterfARB");
         storage::PointParameterfEXT.load(&mut loadfn, "glPointParameterfEXT");
         storage::PointParameterfSGIS.load(&mut loadfn, "glPointParameterfSGIS");
         storage::PointParameterfv.load(&mut loadfn, "glPointParameterfv");
         storage::PointParameterfvARB.load(&mut loadfn, "glPointParameterfvARB");
         storage::PointParameterfvEXT.load(&mut loadfn, "glPointParameterfvEXT");
         storage::PointParameterfvSGIS.load(&mut loadfn, "glPointParameterfvSGIS");
         storage::PointParameteri.load(&mut loadfn, "glPointParameteri");
         storage::PointParameteriNV.load(&mut loadfn, "glPointParameteriNV");
         storage::PointParameteriv.load(&mut loadfn, "glPointParameteriv");
         storage::PointParameterivNV.load(&mut loadfn, "glPointParameterivNV");
         storage::PointParameterxvOES.load(&mut loadfn, "glPointParameterxvOES");
         storage::PointSize.load(&mut loadfn, "glPointSize");
         storage::PointSizexOES.load(&mut loadfn, "glPointSizexOES");
         storage::PollAsyncSGIX.load(&mut loadfn, "glPollAsyncSGIX");
         storage::PollInstrumentsSGIX.load(&mut loadfn, "glPollInstrumentsSGIX");
         storage::PolygonMode.load(&mut loadfn, "glPolygonMode");
         storage::PolygonOffset.load(&mut loadfn, "glPolygonOffset");
         storage::PolygonOffsetClamp.load(&mut loadfn, "glPolygonOffsetClamp");
         storage::PolygonOffsetClampEXT.load(&mut loadfn, "glPolygonOffsetClampEXT");
         storage::PolygonOffsetEXT.load(&mut loadfn, "glPolygonOffsetEXT");
         storage::PolygonOffsetxOES.load(&mut loadfn, "glPolygonOffsetxOES");
         storage::PopDebugGroup.load(&mut loadfn, "glPopDebugGroup");
         storage::PopGroupMarkerEXT.load(&mut loadfn, "glPopGroupMarkerEXT");
         storage::PresentFrameDualFillNV.load(&mut loadfn, "glPresentFrameDualFillNV");
         storage::PresentFrameKeyedNV.load(&mut loadfn, "glPresentFrameKeyedNV");
         storage::PrimitiveBoundingBox.load(&mut loadfn, "glPrimitiveBoundingBox");
         storage::PrimitiveBoundingBoxARB.load(&mut loadfn, "glPrimitiveBoundingBoxARB");
         storage::PrimitiveRestartIndex.load(&mut loadfn, "glPrimitiveRestartIndex");
         storage::PrimitiveRestartIndexNV.load(&mut loadfn, "glPrimitiveRestartIndexNV");
         storage::PrimitiveRestartNV.load(&mut loadfn, "glPrimitiveRestartNV");
         storage::PrioritizeTextures.load(&mut loadfn, "glPrioritizeTextures");
         storage::PrioritizeTexturesEXT.load(&mut loadfn, "glPrioritizeTexturesEXT");
         storage::PrioritizeTexturesxOES.load(&mut loadfn, "glPrioritizeTexturesxOES");
         storage::ProgramBinary.load(&mut loadfn, "glProgramBinary");
         storage::ProgramBufferParametersIivNV.load(&mut loadfn, "glProgramBufferParametersIivNV");
         storage::ProgramBufferParametersIuivNV.load(&mut loadfn, "glProgramBufferParametersIuivNV");
         storage::ProgramBufferParametersfvNV.load(&mut loadfn, "glProgramBufferParametersfvNV");
         storage::ProgramEnvParameter4dARB.load(&mut loadfn, "glProgramEnvParameter4dARB");
         storage::ProgramEnvParameter4dvARB.load(&mut loadfn, "glProgramEnvParameter4dvARB");
         storage::ProgramEnvParameter4fARB.load(&mut loadfn, "glProgramEnvParameter4fARB");
         storage::ProgramEnvParameter4fvARB.load(&mut loadfn, "glProgramEnvParameter4fvARB");
         storage::ProgramEnvParameterI4iNV.load(&mut loadfn, "glProgramEnvParameterI4iNV");
         storage::ProgramEnvParameterI4ivNV.load(&mut loadfn, "glProgramEnvParameterI4ivNV");
         storage::ProgramEnvParameterI4uiNV.load(&mut loadfn, "glProgramEnvParameterI4uiNV");
         storage::ProgramEnvParameterI4uivNV.load(&mut loadfn, "glProgramEnvParameterI4uivNV");
         storage::ProgramEnvParameters4fvEXT.load(&mut loadfn, "glProgramEnvParameters4fvEXT");
         storage::ProgramEnvParametersI4ivNV.load(&mut loadfn, "glProgramEnvParametersI4ivNV");
         storage::ProgramEnvParametersI4uivNV.load(&mut loadfn, "glProgramEnvParametersI4uivNV");
         storage::ProgramLocalParameter4dARB.load(&mut loadfn, "glProgramLocalParameter4dARB");
         storage::ProgramLocalParameter4dvARB.load(&mut loadfn, "glProgramLocalParameter4dvARB");
         storage::ProgramLocalParameter4fARB.load(&mut loadfn, "glProgramLocalParameter4fARB");
         storage::ProgramLocalParameter4fvARB.load(&mut loadfn, "glProgramLocalParameter4fvARB");
         storage::ProgramLocalParameterI4iNV.load(&mut loadfn, "glProgramLocalParameterI4iNV");
         storage::ProgramLocalParameterI4ivNV.load(&mut loadfn, "glProgramLocalParameterI4ivNV");
         storage::ProgramLocalParameterI4uiNV.load(&mut loadfn, "glProgramLocalParameterI4uiNV");
         storage::ProgramLocalParameterI4uivNV.load(&mut loadfn, "glProgramLocalParameterI4uivNV");
         storage::ProgramLocalParameters4fvEXT.load(&mut loadfn, "glProgramLocalParameters4fvEXT");
         storage::ProgramLocalParametersI4ivNV.load(&mut loadfn, "glProgramLocalParametersI4ivNV");
         storage::ProgramLocalParametersI4uivNV.load(&mut loadfn, "glProgramLocalParametersI4uivNV");
         storage::ProgramNamedParameter4dNV.load(&mut loadfn, "glProgramNamedParameter4dNV");
         storage::ProgramNamedParameter4dvNV.load(&mut loadfn, "glProgramNamedParameter4dvNV");
         storage::ProgramNamedParameter4fNV.load(&mut loadfn, "glProgramNamedParameter4fNV");
         storage::ProgramNamedParameter4fvNV.load(&mut loadfn, "glProgramNamedParameter4fvNV");
         storage::ProgramParameter4dNV.load(&mut loadfn, "glProgramParameter4dNV");
         storage::ProgramParameter4dvNV.load(&mut loadfn, "glProgramParameter4dvNV");
         storage::ProgramParameter4fNV.load(&mut loadfn, "glProgramParameter4fNV");
         storage::ProgramParameter4fvNV.load(&mut loadfn, "glProgramParameter4fvNV");
         storage::ProgramParameteri.load(&mut loadfn, "glProgramParameteri");
         storage::ProgramParameteriARB.load(&mut loadfn, "glProgramParameteriARB");
         storage::ProgramParameteriEXT.load(&mut loadfn, "glProgramParameteriEXT");
         storage::ProgramParameters4dvNV.load(&mut loadfn, "glProgramParameters4dvNV");
         storage::ProgramParameters4fvNV.load(&mut loadfn, "glProgramParameters4fvNV");
         storage::ProgramPathFragmentInputGenNV.load(&mut loadfn, "glProgramPathFragmentInputGenNV");
         storage::ProgramStringARB.load(&mut loadfn, "glProgramStringARB");
         storage::ProgramSubroutineParametersuivNV.load(&mut loadfn, "glProgramSubroutineParametersuivNV");
         storage::ProgramUniform1d.load(&mut loadfn, "glProgramUniform1d");
         storage::ProgramUniform1dEXT.load(&mut loadfn, "glProgramUniform1dEXT");
         storage::ProgramUniform1dv.load(&mut loadfn, "glProgramUniform1dv");
         storage::ProgramUniform1dvEXT.load(&mut loadfn, "glProgramUniform1dvEXT");
         storage::ProgramUniform1f.load(&mut loadfn, "glProgramUniform1f");
         storage::ProgramUniform1fEXT.load(&mut loadfn, "glProgramUniform1fEXT");
         storage::ProgramUniform1fv.load(&mut loadfn, "glProgramUniform1fv");
         storage::ProgramUniform1fvEXT.load(&mut loadfn, "glProgramUniform1fvEXT");
         storage::ProgramUniform1i.load(&mut loadfn, "glProgramUniform1i");
         storage::ProgramUniform1i64ARB.load(&mut loadfn, "glProgramUniform1i64ARB");
         storage::ProgramUniform1i64NV.load(&mut loadfn, "glProgramUniform1i64NV");
         storage::ProgramUniform1i64vARB.load(&mut loadfn, "glProgramUniform1i64vARB");
         storage::ProgramUniform1i64vNV.load(&mut loadfn, "glProgramUniform1i64vNV");
         storage::ProgramUniform1iEXT.load(&mut loadfn, "glProgramUniform1iEXT");
         storage::ProgramUniform1iv.load(&mut loadfn, "glProgramUniform1iv");
         storage::ProgramUniform1ivEXT.load(&mut loadfn, "glProgramUniform1ivEXT");
         storage::ProgramUniform1ui.load(&mut loadfn, "glProgramUniform1ui");
         storage::ProgramUniform1ui64ARB.load(&mut loadfn, "glProgramUniform1ui64ARB");
         storage::ProgramUniform1ui64NV.load(&mut loadfn, "glProgramUniform1ui64NV");
         storage::ProgramUniform1ui64vARB.load(&mut loadfn, "glProgramUniform1ui64vARB");
         storage::ProgramUniform1ui64vNV.load(&mut loadfn, "glProgramUniform1ui64vNV");
         storage::ProgramUniform1uiEXT.load(&mut loadfn, "glProgramUniform1uiEXT");
         storage::ProgramUniform1uiv.load(&mut loadfn, "glProgramUniform1uiv");
         storage::ProgramUniform1uivEXT.load(&mut loadfn, "glProgramUniform1uivEXT");
         storage::ProgramUniform2d.load(&mut loadfn, "glProgramUniform2d");
         storage::ProgramUniform2dEXT.load(&mut loadfn, "glProgramUniform2dEXT");
         storage::ProgramUniform2dv.load(&mut loadfn, "glProgramUniform2dv");
         storage::ProgramUniform2dvEXT.load(&mut loadfn, "glProgramUniform2dvEXT");
         storage::ProgramUniform2f.load(&mut loadfn, "glProgramUniform2f");
         storage::ProgramUniform2fEXT.load(&mut loadfn, "glProgramUniform2fEXT");
         storage::ProgramUniform2fv.load(&mut loadfn, "glProgramUniform2fv");
         storage::ProgramUniform2fvEXT.load(&mut loadfn, "glProgramUniform2fvEXT");
         storage::ProgramUniform2i.load(&mut loadfn, "glProgramUniform2i");
         storage::ProgramUniform2i64ARB.load(&mut loadfn, "glProgramUniform2i64ARB");
         storage::ProgramUniform2i64NV.load(&mut loadfn, "glProgramUniform2i64NV");
         storage::ProgramUniform2i64vARB.load(&mut loadfn, "glProgramUniform2i64vARB");
         storage::ProgramUniform2i64vNV.load(&mut loadfn, "glProgramUniform2i64vNV");
         storage::ProgramUniform2iEXT.load(&mut loadfn, "glProgramUniform2iEXT");
         storage::ProgramUniform2iv.load(&mut loadfn, "glProgramUniform2iv");
         storage::ProgramUniform2ivEXT.load(&mut loadfn, "glProgramUniform2ivEXT");
         storage::ProgramUniform2ui.load(&mut loadfn, "glProgramUniform2ui");
         storage::ProgramUniform2ui64ARB.load(&mut loadfn, "glProgramUniform2ui64ARB");
         storage::ProgramUniform2ui64NV.load(&mut loadfn, "glProgramUniform2ui64NV");
         storage::ProgramUniform2ui64vARB.load(&mut loadfn, "glProgramUniform2ui64vARB");
         storage::ProgramUniform2ui64vNV.load(&mut loadfn, "glProgramUniform2ui64vNV");
         storage::ProgramUniform2uiEXT.load(&mut loadfn, "glProgramUniform2uiEXT");
         storage::ProgramUniform2uiv.load(&mut loadfn, "glProgramUniform2uiv");
         storage::ProgramUniform2uivEXT.load(&mut loadfn, "glProgramUniform2uivEXT");
         storage::ProgramUniform3d.load(&mut loadfn, "glProgramUniform3d");
         storage::ProgramUniform3dEXT.load(&mut loadfn, "glProgramUniform3dEXT");
         storage::ProgramUniform3dv.load(&mut loadfn, "glProgramUniform3dv");
         storage::ProgramUniform3dvEXT.load(&mut loadfn, "glProgramUniform3dvEXT");
         storage::ProgramUniform3f.load(&mut loadfn, "glProgramUniform3f");
         storage::ProgramUniform3fEXT.load(&mut loadfn, "glProgramUniform3fEXT");
         storage::ProgramUniform3fv.load(&mut loadfn, "glProgramUniform3fv");
         storage::ProgramUniform3fvEXT.load(&mut loadfn, "glProgramUniform3fvEXT");
         storage::ProgramUniform3i.load(&mut loadfn, "glProgramUniform3i");
         storage::ProgramUniform3i64ARB.load(&mut loadfn, "glProgramUniform3i64ARB");
         storage::ProgramUniform3i64NV.load(&mut loadfn, "glProgramUniform3i64NV");
         storage::ProgramUniform3i64vARB.load(&mut loadfn, "glProgramUniform3i64vARB");
         storage::ProgramUniform3i64vNV.load(&mut loadfn, "glProgramUniform3i64vNV");
         storage::ProgramUniform3iEXT.load(&mut loadfn, "glProgramUniform3iEXT");
         storage::ProgramUniform3iv.load(&mut loadfn, "glProgramUniform3iv");
         storage::ProgramUniform3ivEXT.load(&mut loadfn, "glProgramUniform3ivEXT");
         storage::ProgramUniform3ui.load(&mut loadfn, "glProgramUniform3ui");
         storage::ProgramUniform3ui64ARB.load(&mut loadfn, "glProgramUniform3ui64ARB");
         storage::ProgramUniform3ui64NV.load(&mut loadfn, "glProgramUniform3ui64NV");
         storage::ProgramUniform3ui64vARB.load(&mut loadfn, "glProgramUniform3ui64vARB");
         storage::ProgramUniform3ui64vNV.load(&mut loadfn, "glProgramUniform3ui64vNV");
         storage::ProgramUniform3uiEXT.load(&mut loadfn, "glProgramUniform3uiEXT");
         storage::ProgramUniform3uiv.load(&mut loadfn, "glProgramUniform3uiv");
         storage::ProgramUniform3uivEXT.load(&mut loadfn, "glProgramUniform3uivEXT");
         storage::ProgramUniform4d.load(&mut loadfn, "glProgramUniform4d");
         storage::ProgramUniform4dEXT.load(&mut loadfn, "glProgramUniform4dEXT");
         storage::ProgramUniform4dv.load(&mut loadfn, "glProgramUniform4dv");
         storage::ProgramUniform4dvEXT.load(&mut loadfn, "glProgramUniform4dvEXT");
         storage::ProgramUniform4f.load(&mut loadfn, "glProgramUniform4f");
         storage::ProgramUniform4fEXT.load(&mut loadfn, "glProgramUniform4fEXT");
         storage::ProgramUniform4fv.load(&mut loadfn, "glProgramUniform4fv");
         storage::ProgramUniform4fvEXT.load(&mut loadfn, "glProgramUniform4fvEXT");
         storage::ProgramUniform4i.load(&mut loadfn, "glProgramUniform4i");
         storage::ProgramUniform4i64ARB.load(&mut loadfn, "glProgramUniform4i64ARB");
         storage::ProgramUniform4i64NV.load(&mut loadfn, "glProgramUniform4i64NV");
         storage::ProgramUniform4i64vARB.load(&mut loadfn, "glProgramUniform4i64vARB");
         storage::ProgramUniform4i64vNV.load(&mut loadfn, "glProgramUniform4i64vNV");
         storage::ProgramUniform4iEXT.load(&mut loadfn, "glProgramUniform4iEXT");
         storage::ProgramUniform4iv.load(&mut loadfn, "glProgramUniform4iv");
         storage::ProgramUniform4ivEXT.load(&mut loadfn, "glProgramUniform4ivEXT");
         storage::ProgramUniform4ui.load(&mut loadfn, "glProgramUniform4ui");
         storage::ProgramUniform4ui64ARB.load(&mut loadfn, "glProgramUniform4ui64ARB");
         storage::ProgramUniform4ui64NV.load(&mut loadfn, "glProgramUniform4ui64NV");
         storage::ProgramUniform4ui64vARB.load(&mut loadfn, "glProgramUniform4ui64vARB");
         storage::ProgramUniform4ui64vNV.load(&mut loadfn, "glProgramUniform4ui64vNV");
         storage::ProgramUniform4uiEXT.load(&mut loadfn, "glProgramUniform4uiEXT");
         storage::ProgramUniform4uiv.load(&mut loadfn, "glProgramUniform4uiv");
         storage::ProgramUniform4uivEXT.load(&mut loadfn, "glProgramUniform4uivEXT");
         storage::ProgramUniformHandleui64ARB.load(&mut loadfn, "glProgramUniformHandleui64ARB");
         storage::ProgramUniformHandleui64NV.load(&mut loadfn, "glProgramUniformHandleui64NV");
         storage::ProgramUniformHandleui64vARB.load(&mut loadfn, "glProgramUniformHandleui64vARB");
         storage::ProgramUniformHandleui64vNV.load(&mut loadfn, "glProgramUniformHandleui64vNV");
         storage::ProgramUniformMatrix2dv.load(&mut loadfn, "glProgramUniformMatrix2dv");
         storage::ProgramUniformMatrix2dvEXT.load(&mut loadfn, "glProgramUniformMatrix2dvEXT");
         storage::ProgramUniformMatrix2fv.load(&mut loadfn, "glProgramUniformMatrix2fv");
         storage::ProgramUniformMatrix2fvEXT.load(&mut loadfn, "glProgramUniformMatrix2fvEXT");
         storage::ProgramUniformMatrix2x3dv.load(&mut loadfn, "glProgramUniformMatrix2x3dv");
         storage::ProgramUniformMatrix2x3dvEXT.load(&mut loadfn, "glProgramUniformMatrix2x3dvEXT");
         storage::ProgramUniformMatrix2x3fv.load(&mut loadfn, "glProgramUniformMatrix2x3fv");
         storage::ProgramUniformMatrix2x3fvEXT.load(&mut loadfn, "glProgramUniformMatrix2x3fvEXT");
         storage::ProgramUniformMatrix2x4dv.load(&mut loadfn, "glProgramUniformMatrix2x4dv");
         storage::ProgramUniformMatrix2x4dvEXT.load(&mut loadfn, "glProgramUniformMatrix2x4dvEXT");
         storage::ProgramUniformMatrix2x4fv.load(&mut loadfn, "glProgramUniformMatrix2x4fv");
         storage::ProgramUniformMatrix2x4fvEXT.load(&mut loadfn, "glProgramUniformMatrix2x4fvEXT");
         storage::ProgramUniformMatrix3dv.load(&mut loadfn, "glProgramUniformMatrix3dv");
         storage::ProgramUniformMatrix3dvEXT.load(&mut loadfn, "glProgramUniformMatrix3dvEXT");
         storage::ProgramUniformMatrix3fv.load(&mut loadfn, "glProgramUniformMatrix3fv");
         storage::ProgramUniformMatrix3fvEXT.load(&mut loadfn, "glProgramUniformMatrix3fvEXT");
         storage::ProgramUniformMatrix3x2dv.load(&mut loadfn, "glProgramUniformMatrix3x2dv");
         storage::ProgramUniformMatrix3x2dvEXT.load(&mut loadfn, "glProgramUniformMatrix3x2dvEXT");
         storage::ProgramUniformMatrix3x2fv.load(&mut loadfn, "glProgramUniformMatrix3x2fv");
         storage::ProgramUniformMatrix3x2fvEXT.load(&mut loadfn, "glProgramUniformMatrix3x2fvEXT");
         storage::ProgramUniformMatrix3x4dv.load(&mut loadfn, "glProgramUniformMatrix3x4dv");
         storage::ProgramUniformMatrix3x4dvEXT.load(&mut loadfn, "glProgramUniformMatrix3x4dvEXT");
         storage::ProgramUniformMatrix3x4fv.load(&mut loadfn, "glProgramUniformMatrix3x4fv");
         storage::ProgramUniformMatrix3x4fvEXT.load(&mut loadfn, "glProgramUniformMatrix3x4fvEXT");
         storage::ProgramUniformMatrix4dv.load(&mut loadfn, "glProgramUniformMatrix4dv");
         storage::ProgramUniformMatrix4dvEXT.load(&mut loadfn, "glProgramUniformMatrix4dvEXT");
         storage::ProgramUniformMatrix4fv.load(&mut loadfn, "glProgramUniformMatrix4fv");
         storage::ProgramUniformMatrix4fvEXT.load(&mut loadfn, "glProgramUniformMatrix4fvEXT");
         storage::ProgramUniformMatrix4x2dv.load(&mut loadfn, "glProgramUniformMatrix4x2dv");
         storage::ProgramUniformMatrix4x2dvEXT.load(&mut loadfn, "glProgramUniformMatrix4x2dvEXT");
         storage::ProgramUniformMatrix4x2fv.load(&mut loadfn, "glProgramUniformMatrix4x2fv");
         storage::ProgramUniformMatrix4x2fvEXT.load(&mut loadfn, "glProgramUniformMatrix4x2fvEXT");
         storage::ProgramUniformMatrix4x3dv.load(&mut loadfn, "glProgramUniformMatrix4x3dv");
         storage::ProgramUniformMatrix4x3dvEXT.load(&mut loadfn, "glProgramUniformMatrix4x3dvEXT");
         storage::ProgramUniformMatrix4x3fv.load(&mut loadfn, "glProgramUniformMatrix4x3fv");
         storage::ProgramUniformMatrix4x3fvEXT.load(&mut loadfn, "glProgramUniformMatrix4x3fvEXT");
         storage::ProgramUniformui64NV.load(&mut loadfn, "glProgramUniformui64NV");
         storage::ProgramUniformui64vNV.load(&mut loadfn, "glProgramUniformui64vNV");
         storage::ProgramVertexLimitNV.load(&mut loadfn, "glProgramVertexLimitNV");
         storage::ProvokingVertex.load(&mut loadfn, "glProvokingVertex");
         storage::ProvokingVertexEXT.load(&mut loadfn, "glProvokingVertexEXT");
         storage::PushClientAttribDefaultEXT.load(&mut loadfn, "glPushClientAttribDefaultEXT");
         storage::PushDebugGroup.load(&mut loadfn, "glPushDebugGroup");
         storage::PushGroupMarkerEXT.load(&mut loadfn, "glPushGroupMarkerEXT");
         storage::QueryCounter.load(&mut loadfn, "glQueryCounter");
         storage::QueryMatrixxOES.load(&mut loadfn, "glQueryMatrixxOES");
         storage::QueryObjectParameteruiAMD.load(&mut loadfn, "glQueryObjectParameteruiAMD");
         storage::QueryResourceNV.load(&mut loadfn, "glQueryResourceNV");
         storage::QueryResourceTagNV.load(&mut loadfn, "glQueryResourceTagNV");
         storage::RasterPos2xOES.load(&mut loadfn, "glRasterPos2xOES");
         storage::RasterPos2xvOES.load(&mut loadfn, "glRasterPos2xvOES");
         storage::RasterPos3xOES.load(&mut loadfn, "glRasterPos3xOES");
         storage::RasterPos3xvOES.load(&mut loadfn, "glRasterPos3xvOES");
         storage::RasterPos4xOES.load(&mut loadfn, "glRasterPos4xOES");
         storage::RasterPos4xvOES.load(&mut loadfn, "glRasterPos4xvOES");
         storage::RasterSamplesEXT.load(&mut loadfn, "glRasterSamplesEXT");
         storage::ReadBuffer.load(&mut loadfn, "glReadBuffer");
         storage::ReadInstrumentsSGIX.load(&mut loadfn, "glReadInstrumentsSGIX");
         storage::ReadPixels.load(&mut loadfn, "glReadPixels");
         storage::ReadnPixels.load(&mut loadfn, "glReadnPixels");
         storage::ReadnPixelsARB.load(&mut loadfn, "glReadnPixelsARB");
         storage::RectxOES.load(&mut loadfn, "glRectxOES");
         storage::RectxvOES.load(&mut loadfn, "glRectxvOES");
         storage::ReferencePlaneSGIX.load(&mut loadfn, "glReferencePlaneSGIX");
         storage::ReleaseKeyedMutexWin32EXT.load(&mut loadfn, "glReleaseKeyedMutexWin32EXT");
         storage::ReleaseShaderCompiler.load(&mut loadfn, "glReleaseShaderCompiler");
         storage::RenderGpuMaskNV.load(&mut loadfn, "glRenderGpuMaskNV");
         storage::RenderbufferStorage.load(&mut loadfn, "glRenderbufferStorage");
         storage::RenderbufferStorageEXT.load(&mut loadfn, "glRenderbufferStorageEXT");
         storage::RenderbufferStorageMultisample.load(&mut loadfn, "glRenderbufferStorageMultisample");
         storage::RenderbufferStorageMultisampleAdvancedAMD.load(&mut loadfn, "glRenderbufferStorageMultisampleAdvancedAMD");
         storage::RenderbufferStorageMultisampleCoverageNV.load(&mut loadfn, "glRenderbufferStorageMultisampleCoverageNV");
         storage::RenderbufferStorageMultisampleEXT.load(&mut loadfn, "glRenderbufferStorageMultisampleEXT");
         storage::ReplacementCodePointerSUN.load(&mut loadfn, "glReplacementCodePointerSUN");
         storage::ReplacementCodeubSUN.load(&mut loadfn, "glReplacementCodeubSUN");
         storage::ReplacementCodeubvSUN.load(&mut loadfn, "glReplacementCodeubvSUN");
         storage::ReplacementCodeuiColor3fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiColor3fVertex3fSUN");
         storage::ReplacementCodeuiColor3fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiColor3fVertex3fvSUN");
         storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiColor4fNormal3fVertex3fSUN");
         storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
         storage::ReplacementCodeuiColor4ubVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiColor4ubVertex3fSUN");
         storage::ReplacementCodeuiColor4ubVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiColor4ubVertex3fvSUN");
         storage::ReplacementCodeuiNormal3fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiNormal3fVertex3fSUN");
         storage::ReplacementCodeuiNormal3fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiNormal3fVertex3fvSUN");
         storage::ReplacementCodeuiSUN.load(&mut loadfn, "glReplacementCodeuiSUN");
         storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
         storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
         storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
         storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
         storage::ReplacementCodeuiTexCoord2fVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fVertex3fSUN");
         storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiTexCoord2fVertex3fvSUN");
         storage::ReplacementCodeuiVertex3fSUN.load(&mut loadfn, "glReplacementCodeuiVertex3fSUN");
         storage::ReplacementCodeuiVertex3fvSUN.load(&mut loadfn, "glReplacementCodeuiVertex3fvSUN");
         storage::ReplacementCodeuivSUN.load(&mut loadfn, "glReplacementCodeuivSUN");
         storage::ReplacementCodeusSUN.load(&mut loadfn, "glReplacementCodeusSUN");
         storage::ReplacementCodeusvSUN.load(&mut loadfn, "glReplacementCodeusvSUN");
         storage::RequestResidentProgramsNV.load(&mut loadfn, "glRequestResidentProgramsNV");
         storage::ResetHistogram.load(&mut loadfn, "glResetHistogram");
         storage::ResetHistogramEXT.load(&mut loadfn, "glResetHistogramEXT");
         storage::ResetMemoryObjectParameterNV.load(&mut loadfn, "glResetMemoryObjectParameterNV");
         storage::ResetMinmax.load(&mut loadfn, "glResetMinmax");
         storage::ResetMinmaxEXT.load(&mut loadfn, "glResetMinmaxEXT");
         storage::ResizeBuffersMESA.load(&mut loadfn, "glResizeBuffersMESA");
         storage::ResolveDepthValuesNV.load(&mut loadfn, "glResolveDepthValuesNV");
         storage::ResumeTransformFeedback.load(&mut loadfn, "glResumeTransformFeedback");
         storage::ResumeTransformFeedbackNV.load(&mut loadfn, "glResumeTransformFeedbackNV");
         storage::RotatexOES.load(&mut loadfn, "glRotatexOES");
         storage::SampleCoverage.load(&mut loadfn, "glSampleCoverage");
         storage::SampleCoverageARB.load(&mut loadfn, "glSampleCoverageARB");
         storage::SampleMapATI.load(&mut loadfn, "glSampleMapATI");
         storage::SampleMaskEXT.load(&mut loadfn, "glSampleMaskEXT");
         storage::SampleMaskIndexedNV.load(&mut loadfn, "glSampleMaskIndexedNV");
         storage::SampleMaskSGIS.load(&mut loadfn, "glSampleMaskSGIS");
         storage::SampleMaski.load(&mut loadfn, "glSampleMaski");
         storage::SamplePatternEXT.load(&mut loadfn, "glSamplePatternEXT");
         storage::SamplePatternSGIS.load(&mut loadfn, "glSamplePatternSGIS");
         storage::SamplerParameterIiv.load(&mut loadfn, "glSamplerParameterIiv");
         storage::SamplerParameterIuiv.load(&mut loadfn, "glSamplerParameterIuiv");
         storage::SamplerParameterf.load(&mut loadfn, "glSamplerParameterf");
         storage::SamplerParameterfv.load(&mut loadfn, "glSamplerParameterfv");
         storage::SamplerParameteri.load(&mut loadfn, "glSamplerParameteri");
         storage::SamplerParameteriv.load(&mut loadfn, "glSamplerParameteriv");
         storage::ScalexOES.load(&mut loadfn, "glScalexOES");
         storage::Scissor.load(&mut loadfn, "glScissor");
         storage::ScissorArrayv.load(&mut loadfn, "glScissorArrayv");
         storage::ScissorExclusiveArrayvNV.load(&mut loadfn, "glScissorExclusiveArrayvNV");
         storage::ScissorExclusiveNV.load(&mut loadfn, "glScissorExclusiveNV");
         storage::ScissorIndexed.load(&mut loadfn, "glScissorIndexed");
         storage::ScissorIndexedv.load(&mut loadfn, "glScissorIndexedv");
         storage::SecondaryColor3b.load(&mut loadfn, "glSecondaryColor3b");
         storage::SecondaryColor3bEXT.load(&mut loadfn, "glSecondaryColor3bEXT");
         storage::SecondaryColor3bv.load(&mut loadfn, "glSecondaryColor3bv");
         storage::SecondaryColor3bvEXT.load(&mut loadfn, "glSecondaryColor3bvEXT");
         storage::SecondaryColor3d.load(&mut loadfn, "glSecondaryColor3d");
         storage::SecondaryColor3dEXT.load(&mut loadfn, "glSecondaryColor3dEXT");
         storage::SecondaryColor3dv.load(&mut loadfn, "glSecondaryColor3dv");
         storage::SecondaryColor3dvEXT.load(&mut loadfn, "glSecondaryColor3dvEXT");
         storage::SecondaryColor3f.load(&mut loadfn, "glSecondaryColor3f");
         storage::SecondaryColor3fEXT.load(&mut loadfn, "glSecondaryColor3fEXT");
         storage::SecondaryColor3fv.load(&mut loadfn, "glSecondaryColor3fv");
         storage::SecondaryColor3fvEXT.load(&mut loadfn, "glSecondaryColor3fvEXT");
         storage::SecondaryColor3hNV.load(&mut loadfn, "glSecondaryColor3hNV");
         storage::SecondaryColor3hvNV.load(&mut loadfn, "glSecondaryColor3hvNV");
         storage::SecondaryColor3i.load(&mut loadfn, "glSecondaryColor3i");
         storage::SecondaryColor3iEXT.load(&mut loadfn, "glSecondaryColor3iEXT");
         storage::SecondaryColor3iv.load(&mut loadfn, "glSecondaryColor3iv");
         storage::SecondaryColor3ivEXT.load(&mut loadfn, "glSecondaryColor3ivEXT");
         storage::SecondaryColor3s.load(&mut loadfn, "glSecondaryColor3s");
         storage::SecondaryColor3sEXT.load(&mut loadfn, "glSecondaryColor3sEXT");
         storage::SecondaryColor3sv.load(&mut loadfn, "glSecondaryColor3sv");
         storage::SecondaryColor3svEXT.load(&mut loadfn, "glSecondaryColor3svEXT");
         storage::SecondaryColor3ub.load(&mut loadfn, "glSecondaryColor3ub");
         storage::SecondaryColor3ubEXT.load(&mut loadfn, "glSecondaryColor3ubEXT");
         storage::SecondaryColor3ubv.load(&mut loadfn, "glSecondaryColor3ubv");
         storage::SecondaryColor3ubvEXT.load(&mut loadfn, "glSecondaryColor3ubvEXT");
         storage::SecondaryColor3ui.load(&mut loadfn, "glSecondaryColor3ui");
         storage::SecondaryColor3uiEXT.load(&mut loadfn, "glSecondaryColor3uiEXT");
         storage::SecondaryColor3uiv.load(&mut loadfn, "glSecondaryColor3uiv");
         storage::SecondaryColor3uivEXT.load(&mut loadfn, "glSecondaryColor3uivEXT");
         storage::SecondaryColor3us.load(&mut loadfn, "glSecondaryColor3us");
         storage::SecondaryColor3usEXT.load(&mut loadfn, "glSecondaryColor3usEXT");
         storage::SecondaryColor3usv.load(&mut loadfn, "glSecondaryColor3usv");
         storage::SecondaryColor3usvEXT.load(&mut loadfn, "glSecondaryColor3usvEXT");
         storage::SecondaryColorFormatNV.load(&mut loadfn, "glSecondaryColorFormatNV");
         storage::SecondaryColorPointer.load(&mut loadfn, "glSecondaryColorPointer");
         storage::SecondaryColorPointerEXT.load(&mut loadfn, "glSecondaryColorPointerEXT");
         storage::SecondaryColorPointerListIBM.load(&mut loadfn, "glSecondaryColorPointerListIBM");
         storage::SelectPerfMonitorCountersAMD.load(&mut loadfn, "glSelectPerfMonitorCountersAMD");
         storage::SemaphoreParameterui64vEXT.load(&mut loadfn, "glSemaphoreParameterui64vEXT");
         storage::SeparableFilter2D.load(&mut loadfn, "glSeparableFilter2D");
         storage::SeparableFilter2DEXT.load(&mut loadfn, "glSeparableFilter2DEXT");
         storage::SetFenceAPPLE.load(&mut loadfn, "glSetFenceAPPLE");
         storage::SetFenceNV.load(&mut loadfn, "glSetFenceNV");
         storage::SetFragmentShaderConstantATI.load(&mut loadfn, "glSetFragmentShaderConstantATI");
         storage::SetInvariantEXT.load(&mut loadfn, "glSetInvariantEXT");
         storage::SetLocalConstantEXT.load(&mut loadfn, "glSetLocalConstantEXT");
         storage::SetMultisamplefvAMD.load(&mut loadfn, "glSetMultisamplefvAMD");
         storage::ShaderBinary.load(&mut loadfn, "glShaderBinary");
         storage::ShaderOp1EXT.load(&mut loadfn, "glShaderOp1EXT");
         storage::ShaderOp2EXT.load(&mut loadfn, "glShaderOp2EXT");
         storage::ShaderOp3EXT.load(&mut loadfn, "glShaderOp3EXT");
         storage::ShaderSource.load(&mut loadfn, "glShaderSource");
         storage::ShaderSourceARB.load(&mut loadfn, "glShaderSourceARB");
         storage::ShaderStorageBlockBinding.load(&mut loadfn, "glShaderStorageBlockBinding");
         storage::ShadingRateImageBarrierNV.load(&mut loadfn, "glShadingRateImageBarrierNV");
         storage::ShadingRateImagePaletteNV.load(&mut loadfn, "glShadingRateImagePaletteNV");
         storage::ShadingRateSampleOrderCustomNV.load(&mut loadfn, "glShadingRateSampleOrderCustomNV");
         storage::ShadingRateSampleOrderNV.load(&mut loadfn, "glShadingRateSampleOrderNV");
         storage::SharpenTexFuncSGIS.load(&mut loadfn, "glSharpenTexFuncSGIS");
         storage::SignalSemaphoreEXT.load(&mut loadfn, "glSignalSemaphoreEXT");
         storage::SignalSemaphoreui64NVX.load(&mut loadfn, "glSignalSemaphoreui64NVX");
         storage::SignalVkFenceNV.load(&mut loadfn, "glSignalVkFenceNV");
         storage::SignalVkSemaphoreNV.load(&mut loadfn, "glSignalVkSemaphoreNV");
         storage::SpecializeShader.load(&mut loadfn, "glSpecializeShader");
         storage::SpecializeShaderARB.load(&mut loadfn, "glSpecializeShaderARB");
         storage::SpriteParameterfSGIX.load(&mut loadfn, "glSpriteParameterfSGIX");
         storage::SpriteParameterfvSGIX.load(&mut loadfn, "glSpriteParameterfvSGIX");
         storage::SpriteParameteriSGIX.load(&mut loadfn, "glSpriteParameteriSGIX");
         storage::SpriteParameterivSGIX.load(&mut loadfn, "glSpriteParameterivSGIX");
         storage::StartInstrumentsSGIX.load(&mut loadfn, "glStartInstrumentsSGIX");
         storage::StateCaptureNV.load(&mut loadfn, "glStateCaptureNV");
         storage::StencilClearTagEXT.load(&mut loadfn, "glStencilClearTagEXT");
         storage::StencilFillPathInstancedNV.load(&mut loadfn, "glStencilFillPathInstancedNV");
         storage::StencilFillPathNV.load(&mut loadfn, "glStencilFillPathNV");
         storage::StencilFunc.load(&mut loadfn, "glStencilFunc");
         storage::StencilFuncSeparate.load(&mut loadfn, "glStencilFuncSeparate");
         storage::StencilFuncSeparateATI.load(&mut loadfn, "glStencilFuncSeparateATI");
         storage::StencilMask.load(&mut loadfn, "glStencilMask");
         storage::StencilMaskSeparate.load(&mut loadfn, "glStencilMaskSeparate");
         storage::StencilOp.load(&mut loadfn, "glStencilOp");
         storage::StencilOpSeparate.load(&mut loadfn, "glStencilOpSeparate");
         storage::StencilOpSeparateATI.load(&mut loadfn, "glStencilOpSeparateATI");
         storage::StencilOpValueAMD.load(&mut loadfn, "glStencilOpValueAMD");
         storage::StencilStrokePathInstancedNV.load(&mut loadfn, "glStencilStrokePathInstancedNV");
         storage::StencilStrokePathNV.load(&mut loadfn, "glStencilStrokePathNV");
         storage::StencilThenCoverFillPathInstancedNV.load(&mut loadfn, "glStencilThenCoverFillPathInstancedNV");
         storage::StencilThenCoverFillPathNV.load(&mut loadfn, "glStencilThenCoverFillPathNV");
         storage::StencilThenCoverStrokePathInstancedNV.load(&mut loadfn, "glStencilThenCoverStrokePathInstancedNV");
         storage::StencilThenCoverStrokePathNV.load(&mut loadfn, "glStencilThenCoverStrokePathNV");
         storage::StopInstrumentsSGIX.load(&mut loadfn, "glStopInstrumentsSGIX");
         storage::StringMarkerGREMEDY.load(&mut loadfn, "glStringMarkerGREMEDY");
         storage::SubpixelPrecisionBiasNV.load(&mut loadfn, "glSubpixelPrecisionBiasNV");
         storage::SwizzleEXT.load(&mut loadfn, "glSwizzleEXT");
         storage::SyncTextureINTEL.load(&mut loadfn, "glSyncTextureINTEL");
         storage::TagSampleBufferSGIX.load(&mut loadfn, "glTagSampleBufferSGIX");
         storage::Tangent3bEXT.load(&mut loadfn, "glTangent3bEXT");
         storage::Tangent3bvEXT.load(&mut loadfn, "glTangent3bvEXT");
         storage::Tangent3dEXT.load(&mut loadfn, "glTangent3dEXT");
         storage::Tangent3dvEXT.load(&mut loadfn, "glTangent3dvEXT");
         storage::Tangent3fEXT.load(&mut loadfn, "glTangent3fEXT");
         storage::Tangent3fvEXT.load(&mut loadfn, "glTangent3fvEXT");
         storage::Tangent3iEXT.load(&mut loadfn, "glTangent3iEXT");
         storage::Tangent3ivEXT.load(&mut loadfn, "glTangent3ivEXT");
         storage::Tangent3sEXT.load(&mut loadfn, "glTangent3sEXT");
         storage::Tangent3svEXT.load(&mut loadfn, "glTangent3svEXT");
         storage::TangentPointerEXT.load(&mut loadfn, "glTangentPointerEXT");
         storage::TbufferMask3DFX.load(&mut loadfn, "glTbufferMask3DFX");
         storage::TessellationFactorAMD.load(&mut loadfn, "glTessellationFactorAMD");
         storage::TessellationModeAMD.load(&mut loadfn, "glTessellationModeAMD");
         storage::TestFenceAPPLE.load(&mut loadfn, "glTestFenceAPPLE");
         storage::TestFenceNV.load(&mut loadfn, "glTestFenceNV");
         storage::TestObjectAPPLE.load(&mut loadfn, "glTestObjectAPPLE");
         storage::TexAttachMemoryNV.load(&mut loadfn, "glTexAttachMemoryNV");
         storage::TexBuffer.load(&mut loadfn, "glTexBuffer");
         storage::TexBufferARB.load(&mut loadfn, "glTexBufferARB");
         storage::TexBufferEXT.load(&mut loadfn, "glTexBufferEXT");
         storage::TexBufferRange.load(&mut loadfn, "glTexBufferRange");
         storage::TexBumpParameterfvATI.load(&mut loadfn, "glTexBumpParameterfvATI");
         storage::TexBumpParameterivATI.load(&mut loadfn, "glTexBumpParameterivATI");
         storage::TexCoord1bOES.load(&mut loadfn, "glTexCoord1bOES");
         storage::TexCoord1bvOES.load(&mut loadfn, "glTexCoord1bvOES");
         storage::TexCoord1hNV.load(&mut loadfn, "glTexCoord1hNV");
         storage::TexCoord1hvNV.load(&mut loadfn, "glTexCoord1hvNV");
         storage::TexCoord1xOES.load(&mut loadfn, "glTexCoord1xOES");
         storage::TexCoord1xvOES.load(&mut loadfn, "glTexCoord1xvOES");
         storage::TexCoord2bOES.load(&mut loadfn, "glTexCoord2bOES");
         storage::TexCoord2bvOES.load(&mut loadfn, "glTexCoord2bvOES");
         storage::TexCoord2fColor3fVertex3fSUN.load(&mut loadfn, "glTexCoord2fColor3fVertex3fSUN");
         storage::TexCoord2fColor3fVertex3fvSUN.load(&mut loadfn, "glTexCoord2fColor3fVertex3fvSUN");
         storage::TexCoord2fColor4fNormal3fVertex3fSUN.load(&mut loadfn, "glTexCoord2fColor4fNormal3fVertex3fSUN");
         storage::TexCoord2fColor4fNormal3fVertex3fvSUN.load(&mut loadfn, "glTexCoord2fColor4fNormal3fVertex3fvSUN");
         storage::TexCoord2fColor4ubVertex3fSUN.load(&mut loadfn, "glTexCoord2fColor4ubVertex3fSUN");
         storage::TexCoord2fColor4ubVertex3fvSUN.load(&mut loadfn, "glTexCoord2fColor4ubVertex3fvSUN");
         storage::TexCoord2fNormal3fVertex3fSUN.load(&mut loadfn, "glTexCoord2fNormal3fVertex3fSUN");
         storage::TexCoord2fNormal3fVertex3fvSUN.load(&mut loadfn, "glTexCoord2fNormal3fVertex3fvSUN");
         storage::TexCoord2fVertex3fSUN.load(&mut loadfn, "glTexCoord2fVertex3fSUN");
         storage::TexCoord2fVertex3fvSUN.load(&mut loadfn, "glTexCoord2fVertex3fvSUN");
         storage::TexCoord2hNV.load(&mut loadfn, "glTexCoord2hNV");
         storage::TexCoord2hvNV.load(&mut loadfn, "glTexCoord2hvNV");
         storage::TexCoord2xOES.load(&mut loadfn, "glTexCoord2xOES");
         storage::TexCoord2xvOES.load(&mut loadfn, "glTexCoord2xvOES");
         storage::TexCoord3bOES.load(&mut loadfn, "glTexCoord3bOES");
         storage::TexCoord3bvOES.load(&mut loadfn, "glTexCoord3bvOES");
         storage::TexCoord3hNV.load(&mut loadfn, "glTexCoord3hNV");
         storage::TexCoord3hvNV.load(&mut loadfn, "glTexCoord3hvNV");
         storage::TexCoord3xOES.load(&mut loadfn, "glTexCoord3xOES");
         storage::TexCoord3xvOES.load(&mut loadfn, "glTexCoord3xvOES");
         storage::TexCoord4bOES.load(&mut loadfn, "glTexCoord4bOES");
         storage::TexCoord4bvOES.load(&mut loadfn, "glTexCoord4bvOES");
         storage::TexCoord4fColor4fNormal3fVertex4fSUN.load(&mut loadfn, "glTexCoord4fColor4fNormal3fVertex4fSUN");
         storage::TexCoord4fColor4fNormal3fVertex4fvSUN.load(&mut loadfn, "glTexCoord4fColor4fNormal3fVertex4fvSUN");
         storage::TexCoord4fVertex4fSUN.load(&mut loadfn, "glTexCoord4fVertex4fSUN");
         storage::TexCoord4fVertex4fvSUN.load(&mut loadfn, "glTexCoord4fVertex4fvSUN");
         storage::TexCoord4hNV.load(&mut loadfn, "glTexCoord4hNV");
         storage::TexCoord4hvNV.load(&mut loadfn, "glTexCoord4hvNV");
         storage::TexCoord4xOES.load(&mut loadfn, "glTexCoord4xOES");
         storage::TexCoord4xvOES.load(&mut loadfn, "glTexCoord4xvOES");
         storage::TexCoordFormatNV.load(&mut loadfn, "glTexCoordFormatNV");
         storage::TexCoordPointerEXT.load(&mut loadfn, "glTexCoordPointerEXT");
         storage::TexCoordPointerListIBM.load(&mut loadfn, "glTexCoordPointerListIBM");
         storage::TexCoordPointervINTEL.load(&mut loadfn, "glTexCoordPointervINTEL");
         storage::TexEnvxOES.load(&mut loadfn, "glTexEnvxOES");
         storage::TexEnvxvOES.load(&mut loadfn, "glTexEnvxvOES");
         storage::TexFilterFuncSGIS.load(&mut loadfn, "glTexFilterFuncSGIS");
         storage::TexGenxOES.load(&mut loadfn, "glTexGenxOES");
         storage::TexGenxvOES.load(&mut loadfn, "glTexGenxvOES");
         storage::TexImage1D.load(&mut loadfn, "glTexImage1D");
         storage::TexImage2D.load(&mut loadfn, "glTexImage2D");
         storage::TexImage2DMultisample.load(&mut loadfn, "glTexImage2DMultisample");
         storage::TexImage2DMultisampleCoverageNV.load(&mut loadfn, "glTexImage2DMultisampleCoverageNV");
         storage::TexImage3D.load(&mut loadfn, "glTexImage3D");
         storage::TexImage3DEXT.load(&mut loadfn, "glTexImage3DEXT");
         storage::TexImage3DMultisample.load(&mut loadfn, "glTexImage3DMultisample");
         storage::TexImage3DMultisampleCoverageNV.load(&mut loadfn, "glTexImage3DMultisampleCoverageNV");
         storage::TexImage4DSGIS.load(&mut loadfn, "glTexImage4DSGIS");
         storage::TexPageCommitmentARB.load(&mut loadfn, "glTexPageCommitmentARB");
         storage::TexParameterIiv.load(&mut loadfn, "glTexParameterIiv");
         storage::TexParameterIivEXT.load(&mut loadfn, "glTexParameterIivEXT");
         storage::TexParameterIuiv.load(&mut loadfn, "glTexParameterIuiv");
         storage::TexParameterIuivEXT.load(&mut loadfn, "glTexParameterIuivEXT");
         storage::TexParameterf.load(&mut loadfn, "glTexParameterf");
         storage::TexParameterfv.load(&mut loadfn, "glTexParameterfv");
         storage::TexParameteri.load(&mut loadfn, "glTexParameteri");
         storage::TexParameteriv.load(&mut loadfn, "glTexParameteriv");
         storage::TexParameterxOES.load(&mut loadfn, "glTexParameterxOES");
         storage::TexParameterxvOES.load(&mut loadfn, "glTexParameterxvOES");
         storage::TexRenderbufferNV.load(&mut loadfn, "glTexRenderbufferNV");
         storage::TexStorage1D.load(&mut loadfn, "glTexStorage1D");
         storage::TexStorage2D.load(&mut loadfn, "glTexStorage2D");
         storage::TexStorage2DMultisample.load(&mut loadfn, "glTexStorage2DMultisample");
         storage::TexStorage3D.load(&mut loadfn, "glTexStorage3D");
         storage::TexStorage3DMultisample.load(&mut loadfn, "glTexStorage3DMultisample");
         storage::TexStorageMem1DEXT.load(&mut loadfn, "glTexStorageMem1DEXT");
         storage::TexStorageMem2DEXT.load(&mut loadfn, "glTexStorageMem2DEXT");
         storage::TexStorageMem2DMultisampleEXT.load(&mut loadfn, "glTexStorageMem2DMultisampleEXT");
         storage::TexStorageMem3DEXT.load(&mut loadfn, "glTexStorageMem3DEXT");
         storage::TexStorageMem3DMultisampleEXT.load(&mut loadfn, "glTexStorageMem3DMultisampleEXT");
         storage::TexStorageSparseAMD.load(&mut loadfn, "glTexStorageSparseAMD");
         storage::TexSubImage1D.load(&mut loadfn, "glTexSubImage1D");
         storage::TexSubImage1DEXT.load(&mut loadfn, "glTexSubImage1DEXT");
         storage::TexSubImage2D.load(&mut loadfn, "glTexSubImage2D");
         storage::TexSubImage2DEXT.load(&mut loadfn, "glTexSubImage2DEXT");
         storage::TexSubImage3D.load(&mut loadfn, "glTexSubImage3D");
         storage::TexSubImage3DEXT.load(&mut loadfn, "glTexSubImage3DEXT");
         storage::TexSubImage4DSGIS.load(&mut loadfn, "glTexSubImage4DSGIS");
         storage::TextureAttachMemoryNV.load(&mut loadfn, "glTextureAttachMemoryNV");
         storage::TextureBarrier.load(&mut loadfn, "glTextureBarrier");
         storage::TextureBarrierNV.load(&mut loadfn, "glTextureBarrierNV");
         storage::TextureBuffer.load(&mut loadfn, "glTextureBuffer");
         storage::TextureBufferEXT.load(&mut loadfn, "glTextureBufferEXT");
         storage::TextureBufferRange.load(&mut loadfn, "glTextureBufferRange");
         storage::TextureBufferRangeEXT.load(&mut loadfn, "glTextureBufferRangeEXT");
         storage::TextureColorMaskSGIS.load(&mut loadfn, "glTextureColorMaskSGIS");
         storage::TextureImage1DEXT.load(&mut loadfn, "glTextureImage1DEXT");
         storage::TextureImage2DEXT.load(&mut loadfn, "glTextureImage2DEXT");
         storage::TextureImage2DMultisampleCoverageNV.load(&mut loadfn, "glTextureImage2DMultisampleCoverageNV");
         storage::TextureImage2DMultisampleNV.load(&mut loadfn, "glTextureImage2DMultisampleNV");
         storage::TextureImage3DEXT.load(&mut loadfn, "glTextureImage3DEXT");
         storage::TextureImage3DMultisampleCoverageNV.load(&mut loadfn, "glTextureImage3DMultisampleCoverageNV");
         storage::TextureImage3DMultisampleNV.load(&mut loadfn, "glTextureImage3DMultisampleNV");
         storage::TextureLightEXT.load(&mut loadfn, "glTextureLightEXT");
         storage::TextureMaterialEXT.load(&mut loadfn, "glTextureMaterialEXT");
         storage::TextureNormalEXT.load(&mut loadfn, "glTextureNormalEXT");
         storage::TexturePageCommitmentEXT.load(&mut loadfn, "glTexturePageCommitmentEXT");
         storage::TextureParameterIiv.load(&mut loadfn, "glTextureParameterIiv");
         storage::TextureParameterIivEXT.load(&mut loadfn, "glTextureParameterIivEXT");
         storage::TextureParameterIuiv.load(&mut loadfn, "glTextureParameterIuiv");
         storage::TextureParameterIuivEXT.load(&mut loadfn, "glTextureParameterIuivEXT");
         storage::TextureParameterf.load(&mut loadfn, "glTextureParameterf");
         storage::TextureParameterfEXT.load(&mut loadfn, "glTextureParameterfEXT");
         storage::TextureParameterfv.load(&mut loadfn, "glTextureParameterfv");
         storage::TextureParameterfvEXT.load(&mut loadfn, "glTextureParameterfvEXT");
         storage::TextureParameteri.load(&mut loadfn, "glTextureParameteri");
         storage::TextureParameteriEXT.load(&mut loadfn, "glTextureParameteriEXT");
         storage::TextureParameteriv.load(&mut loadfn, "glTextureParameteriv");
         storage::TextureParameterivEXT.load(&mut loadfn, "glTextureParameterivEXT");
         storage::TextureRangeAPPLE.load(&mut loadfn, "glTextureRangeAPPLE");
         storage::TextureRenderbufferEXT.load(&mut loadfn, "glTextureRenderbufferEXT");
         storage::TextureStorage1D.load(&mut loadfn, "glTextureStorage1D");
         storage::TextureStorage1DEXT.load(&mut loadfn, "glTextureStorage1DEXT");
         storage::TextureStorage2D.load(&mut loadfn, "glTextureStorage2D");
         storage::TextureStorage2DEXT.load(&mut loadfn, "glTextureStorage2DEXT");
         storage::TextureStorage2DMultisample.load(&mut loadfn, "glTextureStorage2DMultisample");
         storage::TextureStorage2DMultisampleEXT.load(&mut loadfn, "glTextureStorage2DMultisampleEXT");
         storage::TextureStorage3D.load(&mut loadfn, "glTextureStorage3D");
         storage::TextureStorage3DEXT.load(&mut loadfn, "glTextureStorage3DEXT");
         storage::TextureStorage3DMultisample.load(&mut loadfn, "glTextureStorage3DMultisample");
         storage::TextureStorage3DMultisampleEXT.load(&mut loadfn, "glTextureStorage3DMultisampleEXT");
         storage::TextureStorageMem1DEXT.load(&mut loadfn, "glTextureStorageMem1DEXT");
         storage::TextureStorageMem2DEXT.load(&mut loadfn, "glTextureStorageMem2DEXT");
         storage::TextureStorageMem2DMultisampleEXT.load(&mut loadfn, "glTextureStorageMem2DMultisampleEXT");
         storage::TextureStorageMem3DEXT.load(&mut loadfn, "glTextureStorageMem3DEXT");
         storage::TextureStorageMem3DMultisampleEXT.load(&mut loadfn, "glTextureStorageMem3DMultisampleEXT");
         storage::TextureStorageSparseAMD.load(&mut loadfn, "glTextureStorageSparseAMD");
         storage::TextureSubImage1D.load(&mut loadfn, "glTextureSubImage1D");
         storage::TextureSubImage1DEXT.load(&mut loadfn, "glTextureSubImage1DEXT");
         storage::TextureSubImage2D.load(&mut loadfn, "glTextureSubImage2D");
         storage::TextureSubImage2DEXT.load(&mut loadfn, "glTextureSubImage2DEXT");
         storage::TextureSubImage3D.load(&mut loadfn, "glTextureSubImage3D");
         storage::TextureSubImage3DEXT.load(&mut loadfn, "glTextureSubImage3DEXT");
         storage::TextureView.load(&mut loadfn, "glTextureView");
         storage::TrackMatrixNV.load(&mut loadfn, "glTrackMatrixNV");
         storage::TransformFeedbackAttribsNV.load(&mut loadfn, "glTransformFeedbackAttribsNV");
         storage::TransformFeedbackBufferBase.load(&mut loadfn, "glTransformFeedbackBufferBase");
         storage::TransformFeedbackBufferRange.load(&mut loadfn, "glTransformFeedbackBufferRange");
         storage::TransformFeedbackStreamAttribsNV.load(&mut loadfn, "glTransformFeedbackStreamAttribsNV");
         storage::TransformFeedbackVaryings.load(&mut loadfn, "glTransformFeedbackVaryings");
         storage::TransformFeedbackVaryingsEXT.load(&mut loadfn, "glTransformFeedbackVaryingsEXT");
         storage::TransformFeedbackVaryingsNV.load(&mut loadfn, "glTransformFeedbackVaryingsNV");
         storage::TransformPathNV.load(&mut loadfn, "glTransformPathNV");
         storage::TranslatexOES.load(&mut loadfn, "glTranslatexOES");
         storage::Uniform1d.load(&mut loadfn, "glUniform1d");
         storage::Uniform1dv.load(&mut loadfn, "glUniform1dv");
         storage::Uniform1f.load(&mut loadfn, "glUniform1f");
         storage::Uniform1fARB.load(&mut loadfn, "glUniform1fARB");
         storage::Uniform1fv.load(&mut loadfn, "glUniform1fv");
         storage::Uniform1fvARB.load(&mut loadfn, "glUniform1fvARB");
         storage::Uniform1i.load(&mut loadfn, "glUniform1i");
         storage::Uniform1i64ARB.load(&mut loadfn, "glUniform1i64ARB");
         storage::Uniform1i64NV.load(&mut loadfn, "glUniform1i64NV");
         storage::Uniform1i64vARB.load(&mut loadfn, "glUniform1i64vARB");
         storage::Uniform1i64vNV.load(&mut loadfn, "glUniform1i64vNV");
         storage::Uniform1iARB.load(&mut loadfn, "glUniform1iARB");
         storage::Uniform1iv.load(&mut loadfn, "glUniform1iv");
         storage::Uniform1ivARB.load(&mut loadfn, "glUniform1ivARB");
         storage::Uniform1ui.load(&mut loadfn, "glUniform1ui");
         storage::Uniform1ui64ARB.load(&mut loadfn, "glUniform1ui64ARB");
         storage::Uniform1ui64NV.load(&mut loadfn, "glUniform1ui64NV");
         storage::Uniform1ui64vARB.load(&mut loadfn, "glUniform1ui64vARB");
         storage::Uniform1ui64vNV.load(&mut loadfn, "glUniform1ui64vNV");
         storage::Uniform1uiEXT.load(&mut loadfn, "glUniform1uiEXT");
         storage::Uniform1uiv.load(&mut loadfn, "glUniform1uiv");
         storage::Uniform1uivEXT.load(&mut loadfn, "glUniform1uivEXT");
         storage::Uniform2d.load(&mut loadfn, "glUniform2d");
         storage::Uniform2dv.load(&mut loadfn, "glUniform2dv");
         storage::Uniform2f.load(&mut loadfn, "glUniform2f");
         storage::Uniform2fARB.load(&mut loadfn, "glUniform2fARB");
         storage::Uniform2fv.load(&mut loadfn, "glUniform2fv");
         storage::Uniform2fvARB.load(&mut loadfn, "glUniform2fvARB");
         storage::Uniform2i.load(&mut loadfn, "glUniform2i");
         storage::Uniform2i64ARB.load(&mut loadfn, "glUniform2i64ARB");
         storage::Uniform2i64NV.load(&mut loadfn, "glUniform2i64NV");
         storage::Uniform2i64vARB.load(&mut loadfn, "glUniform2i64vARB");
         storage::Uniform2i64vNV.load(&mut loadfn, "glUniform2i64vNV");
         storage::Uniform2iARB.load(&mut loadfn, "glUniform2iARB");
         storage::Uniform2iv.load(&mut loadfn, "glUniform2iv");
         storage::Uniform2ivARB.load(&mut loadfn, "glUniform2ivARB");
         storage::Uniform2ui.load(&mut loadfn, "glUniform2ui");
         storage::Uniform2ui64ARB.load(&mut loadfn, "glUniform2ui64ARB");
         storage::Uniform2ui64NV.load(&mut loadfn, "glUniform2ui64NV");
         storage::Uniform2ui64vARB.load(&mut loadfn, "glUniform2ui64vARB");
         storage::Uniform2ui64vNV.load(&mut loadfn, "glUniform2ui64vNV");
         storage::Uniform2uiEXT.load(&mut loadfn, "glUniform2uiEXT");
         storage::Uniform2uiv.load(&mut loadfn, "glUniform2uiv");
         storage::Uniform2uivEXT.load(&mut loadfn, "glUniform2uivEXT");
         storage::Uniform3d.load(&mut loadfn, "glUniform3d");
         storage::Uniform3dv.load(&mut loadfn, "glUniform3dv");
         storage::Uniform3f.load(&mut loadfn, "glUniform3f");
         storage::Uniform3fARB.load(&mut loadfn, "glUniform3fARB");
         storage::Uniform3fv.load(&mut loadfn, "glUniform3fv");
         storage::Uniform3fvARB.load(&mut loadfn, "glUniform3fvARB");
         storage::Uniform3i.load(&mut loadfn, "glUniform3i");
         storage::Uniform3i64ARB.load(&mut loadfn, "glUniform3i64ARB");
         storage::Uniform3i64NV.load(&mut loadfn, "glUniform3i64NV");
         storage::Uniform3i64vARB.load(&mut loadfn, "glUniform3i64vARB");
         storage::Uniform3i64vNV.load(&mut loadfn, "glUniform3i64vNV");
         storage::Uniform3iARB.load(&mut loadfn, "glUniform3iARB");
         storage::Uniform3iv.load(&mut loadfn, "glUniform3iv");
         storage::Uniform3ivARB.load(&mut loadfn, "glUniform3ivARB");
         storage::Uniform3ui.load(&mut loadfn, "glUniform3ui");
         storage::Uniform3ui64ARB.load(&mut loadfn, "glUniform3ui64ARB");
         storage::Uniform3ui64NV.load(&mut loadfn, "glUniform3ui64NV");
         storage::Uniform3ui64vARB.load(&mut loadfn, "glUniform3ui64vARB");
         storage::Uniform3ui64vNV.load(&mut loadfn, "glUniform3ui64vNV");
         storage::Uniform3uiEXT.load(&mut loadfn, "glUniform3uiEXT");
         storage::Uniform3uiv.load(&mut loadfn, "glUniform3uiv");
         storage::Uniform3uivEXT.load(&mut loadfn, "glUniform3uivEXT");
         storage::Uniform4d.load(&mut loadfn, "glUniform4d");
         storage::Uniform4dv.load(&mut loadfn, "glUniform4dv");
         storage::Uniform4f.load(&mut loadfn, "glUniform4f");
         storage::Uniform4fARB.load(&mut loadfn, "glUniform4fARB");
         storage::Uniform4fv.load(&mut loadfn, "glUniform4fv");
         storage::Uniform4fvARB.load(&mut loadfn, "glUniform4fvARB");
         storage::Uniform4i.load(&mut loadfn, "glUniform4i");
         storage::Uniform4i64ARB.load(&mut loadfn, "glUniform4i64ARB");
         storage::Uniform4i64NV.load(&mut loadfn, "glUniform4i64NV");
         storage::Uniform4i64vARB.load(&mut loadfn, "glUniform4i64vARB");
         storage::Uniform4i64vNV.load(&mut loadfn, "glUniform4i64vNV");
         storage::Uniform4iARB.load(&mut loadfn, "glUniform4iARB");
         storage::Uniform4iv.load(&mut loadfn, "glUniform4iv");
         storage::Uniform4ivARB.load(&mut loadfn, "glUniform4ivARB");
         storage::Uniform4ui.load(&mut loadfn, "glUniform4ui");
         storage::Uniform4ui64ARB.load(&mut loadfn, "glUniform4ui64ARB");
         storage::Uniform4ui64NV.load(&mut loadfn, "glUniform4ui64NV");
         storage::Uniform4ui64vARB.load(&mut loadfn, "glUniform4ui64vARB");
         storage::Uniform4ui64vNV.load(&mut loadfn, "glUniform4ui64vNV");
         storage::Uniform4uiEXT.load(&mut loadfn, "glUniform4uiEXT");
         storage::Uniform4uiv.load(&mut loadfn, "glUniform4uiv");
         storage::Uniform4uivEXT.load(&mut loadfn, "glUniform4uivEXT");
         storage::UniformBlockBinding.load(&mut loadfn, "glUniformBlockBinding");
         storage::UniformBufferEXT.load(&mut loadfn, "glUniformBufferEXT");
         storage::UniformHandleui64ARB.load(&mut loadfn, "glUniformHandleui64ARB");
         storage::UniformHandleui64NV.load(&mut loadfn, "glUniformHandleui64NV");
         storage::UniformHandleui64vARB.load(&mut loadfn, "glUniformHandleui64vARB");
         storage::UniformHandleui64vNV.load(&mut loadfn, "glUniformHandleui64vNV");
         storage::UniformMatrix2dv.load(&mut loadfn, "glUniformMatrix2dv");
         storage::UniformMatrix2fv.load(&mut loadfn, "glUniformMatrix2fv");
         storage::UniformMatrix2fvARB.load(&mut loadfn, "glUniformMatrix2fvARB");
         storage::UniformMatrix2x3dv.load(&mut loadfn, "glUniformMatrix2x3dv");
         storage::UniformMatrix2x3fv.load(&mut loadfn, "glUniformMatrix2x3fv");
         storage::UniformMatrix2x4dv.load(&mut loadfn, "glUniformMatrix2x4dv");
         storage::UniformMatrix2x4fv.load(&mut loadfn, "glUniformMatrix2x4fv");
         storage::UniformMatrix3dv.load(&mut loadfn, "glUniformMatrix3dv");
         storage::UniformMatrix3fv.load(&mut loadfn, "glUniformMatrix3fv");
         storage::UniformMatrix3fvARB.load(&mut loadfn, "glUniformMatrix3fvARB");
         storage::UniformMatrix3x2dv.load(&mut loadfn, "glUniformMatrix3x2dv");
         storage::UniformMatrix3x2fv.load(&mut loadfn, "glUniformMatrix3x2fv");
         storage::UniformMatrix3x4dv.load(&mut loadfn, "glUniformMatrix3x4dv");
         storage::UniformMatrix3x4fv.load(&mut loadfn, "glUniformMatrix3x4fv");
         storage::UniformMatrix4dv.load(&mut loadfn, "glUniformMatrix4dv");
         storage::UniformMatrix4fv.load(&mut loadfn, "glUniformMatrix4fv");
         storage::UniformMatrix4fvARB.load(&mut loadfn, "glUniformMatrix4fvARB");
         storage::UniformMatrix4x2dv.load(&mut loadfn, "glUniformMatrix4x2dv");
         storage::UniformMatrix4x2fv.load(&mut loadfn, "glUniformMatrix4x2fv");
         storage::UniformMatrix4x3dv.load(&mut loadfn, "glUniformMatrix4x3dv");
         storage::UniformMatrix4x3fv.load(&mut loadfn, "glUniformMatrix4x3fv");
         storage::UniformSubroutinesuiv.load(&mut loadfn, "glUniformSubroutinesuiv");
         storage::Uniformui64NV.load(&mut loadfn, "glUniformui64NV");
         storage::Uniformui64vNV.load(&mut loadfn, "glUniformui64vNV");
         storage::UnlockArraysEXT.load(&mut loadfn, "glUnlockArraysEXT");
         storage::UnmapBuffer.load(&mut loadfn, "glUnmapBuffer");
         storage::UnmapBufferARB.load(&mut loadfn, "glUnmapBufferARB");
         storage::UnmapNamedBuffer.load(&mut loadfn, "glUnmapNamedBuffer");
         storage::UnmapNamedBufferEXT.load(&mut loadfn, "glUnmapNamedBufferEXT");
         storage::UnmapObjectBufferATI.load(&mut loadfn, "glUnmapObjectBufferATI");
         storage::UnmapTexture2DINTEL.load(&mut loadfn, "glUnmapTexture2DINTEL");
         storage::UpdateObjectBufferATI.load(&mut loadfn, "glUpdateObjectBufferATI");
         storage::UploadGpuMaskNVX.load(&mut loadfn, "glUploadGpuMaskNVX");
         storage::UseProgram.load(&mut loadfn, "glUseProgram");
         storage::UseProgramObjectARB.load(&mut loadfn, "glUseProgramObjectARB");
         storage::UseProgramStages.load(&mut loadfn, "glUseProgramStages");
         storage::UseShaderProgramEXT.load(&mut loadfn, "glUseShaderProgramEXT");
         storage::VDPAUFiniNV.load(&mut loadfn, "glVDPAUFiniNV");
         storage::VDPAUGetSurfaceivNV.load(&mut loadfn, "glVDPAUGetSurfaceivNV");
         storage::VDPAUInitNV.load(&mut loadfn, "glVDPAUInitNV");
         storage::VDPAUIsSurfaceNV.load(&mut loadfn, "glVDPAUIsSurfaceNV");
         storage::VDPAUMapSurfacesNV.load(&mut loadfn, "glVDPAUMapSurfacesNV");
         storage::VDPAURegisterOutputSurfaceNV.load(&mut loadfn, "glVDPAURegisterOutputSurfaceNV");
         storage::VDPAURegisterVideoSurfaceNV.load(&mut loadfn, "glVDPAURegisterVideoSurfaceNV");
         storage::VDPAURegisterVideoSurfaceWithPictureStructureNV.load(&mut loadfn, "glVDPAURegisterVideoSurfaceWithPictureStructureNV");
         storage::VDPAUSurfaceAccessNV.load(&mut loadfn, "glVDPAUSurfaceAccessNV");
         storage::VDPAUUnmapSurfacesNV.load(&mut loadfn, "glVDPAUUnmapSurfacesNV");
         storage::VDPAUUnregisterSurfaceNV.load(&mut loadfn, "glVDPAUUnregisterSurfaceNV");
         storage::ValidateProgram.load(&mut loadfn, "glValidateProgram");
         storage::ValidateProgramARB.load(&mut loadfn, "glValidateProgramARB");
         storage::ValidateProgramPipeline.load(&mut loadfn, "glValidateProgramPipeline");
         storage::VariantArrayObjectATI.load(&mut loadfn, "glVariantArrayObjectATI");
         storage::VariantPointerEXT.load(&mut loadfn, "glVariantPointerEXT");
         storage::VariantbvEXT.load(&mut loadfn, "glVariantbvEXT");
         storage::VariantdvEXT.load(&mut loadfn, "glVariantdvEXT");
         storage::VariantfvEXT.load(&mut loadfn, "glVariantfvEXT");
         storage::VariantivEXT.load(&mut loadfn, "glVariantivEXT");
         storage::VariantsvEXT.load(&mut loadfn, "glVariantsvEXT");
         storage::VariantubvEXT.load(&mut loadfn, "glVariantubvEXT");
         storage::VariantuivEXT.load(&mut loadfn, "glVariantuivEXT");
         storage::VariantusvEXT.load(&mut loadfn, "glVariantusvEXT");
         storage::Vertex2bOES.load(&mut loadfn, "glVertex2bOES");
         storage::Vertex2bvOES.load(&mut loadfn, "glVertex2bvOES");
         storage::Vertex2hNV.load(&mut loadfn, "glVertex2hNV");
         storage::Vertex2hvNV.load(&mut loadfn, "glVertex2hvNV");
         storage::Vertex2xOES.load(&mut loadfn, "glVertex2xOES");
         storage::Vertex2xvOES.load(&mut loadfn, "glVertex2xvOES");
         storage::Vertex3bOES.load(&mut loadfn, "glVertex3bOES");
         storage::Vertex3bvOES.load(&mut loadfn, "glVertex3bvOES");
         storage::Vertex3hNV.load(&mut loadfn, "glVertex3hNV");
         storage::Vertex3hvNV.load(&mut loadfn, "glVertex3hvNV");
         storage::Vertex3xOES.load(&mut loadfn, "glVertex3xOES");
         storage::Vertex3xvOES.load(&mut loadfn, "glVertex3xvOES");
         storage::Vertex4bOES.load(&mut loadfn, "glVertex4bOES");
         storage::Vertex4bvOES.load(&mut loadfn, "glVertex4bvOES");
         storage::Vertex4hNV.load(&mut loadfn, "glVertex4hNV");
         storage::Vertex4hvNV.load(&mut loadfn, "glVertex4hvNV");
         storage::Vertex4xOES.load(&mut loadfn, "glVertex4xOES");
         storage::Vertex4xvOES.load(&mut loadfn, "glVertex4xvOES");
         storage::VertexArrayAttribBinding.load(&mut loadfn, "glVertexArrayAttribBinding");
         storage::VertexArrayAttribFormat.load(&mut loadfn, "glVertexArrayAttribFormat");
         storage::VertexArrayAttribIFormat.load(&mut loadfn, "glVertexArrayAttribIFormat");
         storage::VertexArrayAttribLFormat.load(&mut loadfn, "glVertexArrayAttribLFormat");
         storage::VertexArrayBindVertexBufferEXT.load(&mut loadfn, "glVertexArrayBindVertexBufferEXT");
         storage::VertexArrayBindingDivisor.load(&mut loadfn, "glVertexArrayBindingDivisor");
         storage::VertexArrayColorOffsetEXT.load(&mut loadfn, "glVertexArrayColorOffsetEXT");
         storage::VertexArrayEdgeFlagOffsetEXT.load(&mut loadfn, "glVertexArrayEdgeFlagOffsetEXT");
         storage::VertexArrayElementBuffer.load(&mut loadfn, "glVertexArrayElementBuffer");
         storage::VertexArrayFogCoordOffsetEXT.load(&mut loadfn, "glVertexArrayFogCoordOffsetEXT");
         storage::VertexArrayIndexOffsetEXT.load(&mut loadfn, "glVertexArrayIndexOffsetEXT");
         storage::VertexArrayMultiTexCoordOffsetEXT.load(&mut loadfn, "glVertexArrayMultiTexCoordOffsetEXT");
         storage::VertexArrayNormalOffsetEXT.load(&mut loadfn, "glVertexArrayNormalOffsetEXT");
         storage::VertexArrayParameteriAPPLE.load(&mut loadfn, "glVertexArrayParameteriAPPLE");
         storage::VertexArrayRangeAPPLE.load(&mut loadfn, "glVertexArrayRangeAPPLE");
         storage::VertexArrayRangeNV.load(&mut loadfn, "glVertexArrayRangeNV");
         storage::VertexArraySecondaryColorOffsetEXT.load(&mut loadfn, "glVertexArraySecondaryColorOffsetEXT");
         storage::VertexArrayTexCoordOffsetEXT.load(&mut loadfn, "glVertexArrayTexCoordOffsetEXT");
         storage::VertexArrayVertexAttribBindingEXT.load(&mut loadfn, "glVertexArrayVertexAttribBindingEXT");
         storage::VertexArrayVertexAttribDivisorEXT.load(&mut loadfn, "glVertexArrayVertexAttribDivisorEXT");
         storage::VertexArrayVertexAttribFormatEXT.load(&mut loadfn, "glVertexArrayVertexAttribFormatEXT");
         storage::VertexArrayVertexAttribIFormatEXT.load(&mut loadfn, "glVertexArrayVertexAttribIFormatEXT");
         storage::VertexArrayVertexAttribIOffsetEXT.load(&mut loadfn, "glVertexArrayVertexAttribIOffsetEXT");
         storage::VertexArrayVertexAttribLFormatEXT.load(&mut loadfn, "glVertexArrayVertexAttribLFormatEXT");
         storage::VertexArrayVertexAttribLOffsetEXT.load(&mut loadfn, "glVertexArrayVertexAttribLOffsetEXT");
         storage::VertexArrayVertexAttribOffsetEXT.load(&mut loadfn, "glVertexArrayVertexAttribOffsetEXT");
         storage::VertexArrayVertexBindingDivisorEXT.load(&mut loadfn, "glVertexArrayVertexBindingDivisorEXT");
         storage::VertexArrayVertexBuffer.load(&mut loadfn, "glVertexArrayVertexBuffer");
         storage::VertexArrayVertexBuffers.load(&mut loadfn, "glVertexArrayVertexBuffers");
         storage::VertexArrayVertexOffsetEXT.load(&mut loadfn, "glVertexArrayVertexOffsetEXT");
         storage::VertexAttrib1d.load(&mut loadfn, "glVertexAttrib1d");
         storage::VertexAttrib1dARB.load(&mut loadfn, "glVertexAttrib1dARB");
         storage::VertexAttrib1dNV.load(&mut loadfn, "glVertexAttrib1dNV");
         storage::VertexAttrib1dv.load(&mut loadfn, "glVertexAttrib1dv");
         storage::VertexAttrib1dvARB.load(&mut loadfn, "glVertexAttrib1dvARB");
         storage::VertexAttrib1dvNV.load(&mut loadfn, "glVertexAttrib1dvNV");
         storage::VertexAttrib1f.load(&mut loadfn, "glVertexAttrib1f");
         storage::VertexAttrib1fARB.load(&mut loadfn, "glVertexAttrib1fARB");
         storage::VertexAttrib1fNV.load(&mut loadfn, "glVertexAttrib1fNV");
         storage::VertexAttrib1fv.load(&mut loadfn, "glVertexAttrib1fv");
         storage::VertexAttrib1fvARB.load(&mut loadfn, "glVertexAttrib1fvARB");
         storage::VertexAttrib1fvNV.load(&mut loadfn, "glVertexAttrib1fvNV");
         storage::VertexAttrib1hNV.load(&mut loadfn, "glVertexAttrib1hNV");
         storage::VertexAttrib1hvNV.load(&mut loadfn, "glVertexAttrib1hvNV");
         storage::VertexAttrib1s.load(&mut loadfn, "glVertexAttrib1s");
         storage::VertexAttrib1sARB.load(&mut loadfn, "glVertexAttrib1sARB");
         storage::VertexAttrib1sNV.load(&mut loadfn, "glVertexAttrib1sNV");
         storage::VertexAttrib1sv.load(&mut loadfn, "glVertexAttrib1sv");
         storage::VertexAttrib1svARB.load(&mut loadfn, "glVertexAttrib1svARB");
         storage::VertexAttrib1svNV.load(&mut loadfn, "glVertexAttrib1svNV");
         storage::VertexAttrib2d.load(&mut loadfn, "glVertexAttrib2d");
         storage::VertexAttrib2dARB.load(&mut loadfn, "glVertexAttrib2dARB");
         storage::VertexAttrib2dNV.load(&mut loadfn, "glVertexAttrib2dNV");
         storage::VertexAttrib2dv.load(&mut loadfn, "glVertexAttrib2dv");
         storage::VertexAttrib2dvARB.load(&mut loadfn, "glVertexAttrib2dvARB");
         storage::VertexAttrib2dvNV.load(&mut loadfn, "glVertexAttrib2dvNV");
         storage::VertexAttrib2f.load(&mut loadfn, "glVertexAttrib2f");
         storage::VertexAttrib2fARB.load(&mut loadfn, "glVertexAttrib2fARB");
         storage::VertexAttrib2fNV.load(&mut loadfn, "glVertexAttrib2fNV");
         storage::VertexAttrib2fv.load(&mut loadfn, "glVertexAttrib2fv");
         storage::VertexAttrib2fvARB.load(&mut loadfn, "glVertexAttrib2fvARB");
         storage::VertexAttrib2fvNV.load(&mut loadfn, "glVertexAttrib2fvNV");
         storage::VertexAttrib2hNV.load(&mut loadfn, "glVertexAttrib2hNV");
         storage::VertexAttrib2hvNV.load(&mut loadfn, "glVertexAttrib2hvNV");
         storage::VertexAttrib2s.load(&mut loadfn, "glVertexAttrib2s");
         storage::VertexAttrib2sARB.load(&mut loadfn, "glVertexAttrib2sARB");
         storage::VertexAttrib2sNV.load(&mut loadfn, "glVertexAttrib2sNV");
         storage::VertexAttrib2sv.load(&mut loadfn, "glVertexAttrib2sv");
         storage::VertexAttrib2svARB.load(&mut loadfn, "glVertexAttrib2svARB");
         storage::VertexAttrib2svNV.load(&mut loadfn, "glVertexAttrib2svNV");
         storage::VertexAttrib3d.load(&mut loadfn, "glVertexAttrib3d");
         storage::VertexAttrib3dARB.load(&mut loadfn, "glVertexAttrib3dARB");
         storage::VertexAttrib3dNV.load(&mut loadfn, "glVertexAttrib3dNV");
         storage::VertexAttrib3dv.load(&mut loadfn, "glVertexAttrib3dv");
         storage::VertexAttrib3dvARB.load(&mut loadfn, "glVertexAttrib3dvARB");
         storage::VertexAttrib3dvNV.load(&mut loadfn, "glVertexAttrib3dvNV");
         storage::VertexAttrib3f.load(&mut loadfn, "glVertexAttrib3f");
         storage::VertexAttrib3fARB.load(&mut loadfn, "glVertexAttrib3fARB");
         storage::VertexAttrib3fNV.load(&mut loadfn, "glVertexAttrib3fNV");
         storage::VertexAttrib3fv.load(&mut loadfn, "glVertexAttrib3fv");
         storage::VertexAttrib3fvARB.load(&mut loadfn, "glVertexAttrib3fvARB");
         storage::VertexAttrib3fvNV.load(&mut loadfn, "glVertexAttrib3fvNV");
         storage::VertexAttrib3hNV.load(&mut loadfn, "glVertexAttrib3hNV");
         storage::VertexAttrib3hvNV.load(&mut loadfn, "glVertexAttrib3hvNV");
         storage::VertexAttrib3s.load(&mut loadfn, "glVertexAttrib3s");
         storage::VertexAttrib3sARB.load(&mut loadfn, "glVertexAttrib3sARB");
         storage::VertexAttrib3sNV.load(&mut loadfn, "glVertexAttrib3sNV");
         storage::VertexAttrib3sv.load(&mut loadfn, "glVertexAttrib3sv");
         storage::VertexAttrib3svARB.load(&mut loadfn, "glVertexAttrib3svARB");
         storage::VertexAttrib3svNV.load(&mut loadfn, "glVertexAttrib3svNV");
         storage::VertexAttrib4Nbv.load(&mut loadfn, "glVertexAttrib4Nbv");
         storage::VertexAttrib4NbvARB.load(&mut loadfn, "glVertexAttrib4NbvARB");
         storage::VertexAttrib4Niv.load(&mut loadfn, "glVertexAttrib4Niv");
         storage::VertexAttrib4NivARB.load(&mut loadfn, "glVertexAttrib4NivARB");
         storage::VertexAttrib4Nsv.load(&mut loadfn, "glVertexAttrib4Nsv");
         storage::VertexAttrib4NsvARB.load(&mut loadfn, "glVertexAttrib4NsvARB");
         storage::VertexAttrib4Nub.load(&mut loadfn, "glVertexAttrib4Nub");
         storage::VertexAttrib4NubARB.load(&mut loadfn, "glVertexAttrib4NubARB");
         storage::VertexAttrib4Nubv.load(&mut loadfn, "glVertexAttrib4Nubv");
         storage::VertexAttrib4NubvARB.load(&mut loadfn, "glVertexAttrib4NubvARB");
         storage::VertexAttrib4Nuiv.load(&mut loadfn, "glVertexAttrib4Nuiv");
         storage::VertexAttrib4NuivARB.load(&mut loadfn, "glVertexAttrib4NuivARB");
         storage::VertexAttrib4Nusv.load(&mut loadfn, "glVertexAttrib4Nusv");
         storage::VertexAttrib4NusvARB.load(&mut loadfn, "glVertexAttrib4NusvARB");
         storage::VertexAttrib4bv.load(&mut loadfn, "glVertexAttrib4bv");
         storage::VertexAttrib4bvARB.load(&mut loadfn, "glVertexAttrib4bvARB");
         storage::VertexAttrib4d.load(&mut loadfn, "glVertexAttrib4d");
         storage::VertexAttrib4dARB.load(&mut loadfn, "glVertexAttrib4dARB");
         storage::VertexAttrib4dNV.load(&mut loadfn, "glVertexAttrib4dNV");
         storage::VertexAttrib4dv.load(&mut loadfn, "glVertexAttrib4dv");
         storage::VertexAttrib4dvARB.load(&mut loadfn, "glVertexAttrib4dvARB");
         storage::VertexAttrib4dvNV.load(&mut loadfn, "glVertexAttrib4dvNV");
         storage::VertexAttrib4f.load(&mut loadfn, "glVertexAttrib4f");
         storage::VertexAttrib4fARB.load(&mut loadfn, "glVertexAttrib4fARB");
         storage::VertexAttrib4fNV.load(&mut loadfn, "glVertexAttrib4fNV");
         storage::VertexAttrib4fv.load(&mut loadfn, "glVertexAttrib4fv");
         storage::VertexAttrib4fvARB.load(&mut loadfn, "glVertexAttrib4fvARB");
         storage::VertexAttrib4fvNV.load(&mut loadfn, "glVertexAttrib4fvNV");
         storage::VertexAttrib4hNV.load(&mut loadfn, "glVertexAttrib4hNV");
         storage::VertexAttrib4hvNV.load(&mut loadfn, "glVertexAttrib4hvNV");
         storage::VertexAttrib4iv.load(&mut loadfn, "glVertexAttrib4iv");
         storage::VertexAttrib4ivARB.load(&mut loadfn, "glVertexAttrib4ivARB");
         storage::VertexAttrib4s.load(&mut loadfn, "glVertexAttrib4s");
         storage::VertexAttrib4sARB.load(&mut loadfn, "glVertexAttrib4sARB");
         storage::VertexAttrib4sNV.load(&mut loadfn, "glVertexAttrib4sNV");
         storage::VertexAttrib4sv.load(&mut loadfn, "glVertexAttrib4sv");
         storage::VertexAttrib4svARB.load(&mut loadfn, "glVertexAttrib4svARB");
         storage::VertexAttrib4svNV.load(&mut loadfn, "glVertexAttrib4svNV");
         storage::VertexAttrib4ubNV.load(&mut loadfn, "glVertexAttrib4ubNV");
         storage::VertexAttrib4ubv.load(&mut loadfn, "glVertexAttrib4ubv");
         storage::VertexAttrib4ubvARB.load(&mut loadfn, "glVertexAttrib4ubvARB");
         storage::VertexAttrib4ubvNV.load(&mut loadfn, "glVertexAttrib4ubvNV");
         storage::VertexAttrib4uiv.load(&mut loadfn, "glVertexAttrib4uiv");
         storage::VertexAttrib4uivARB.load(&mut loadfn, "glVertexAttrib4uivARB");
         storage::VertexAttrib4usv.load(&mut loadfn, "glVertexAttrib4usv");
         storage::VertexAttrib4usvARB.load(&mut loadfn, "glVertexAttrib4usvARB");
         storage::VertexAttribArrayObjectATI.load(&mut loadfn, "glVertexAttribArrayObjectATI");
         storage::VertexAttribBinding.load(&mut loadfn, "glVertexAttribBinding");
         storage::VertexAttribDivisor.load(&mut loadfn, "glVertexAttribDivisor");
         storage::VertexAttribDivisorARB.load(&mut loadfn, "glVertexAttribDivisorARB");
         storage::VertexAttribFormat.load(&mut loadfn, "glVertexAttribFormat");
         storage::VertexAttribFormatNV.load(&mut loadfn, "glVertexAttribFormatNV");
         storage::VertexAttribI1i.load(&mut loadfn, "glVertexAttribI1i");
         storage::VertexAttribI1iEXT.load(&mut loadfn, "glVertexAttribI1iEXT");
         storage::VertexAttribI1iv.load(&mut loadfn, "glVertexAttribI1iv");
         storage::VertexAttribI1ivEXT.load(&mut loadfn, "glVertexAttribI1ivEXT");
         storage::VertexAttribI1ui.load(&mut loadfn, "glVertexAttribI1ui");
         storage::VertexAttribI1uiEXT.load(&mut loadfn, "glVertexAttribI1uiEXT");
         storage::VertexAttribI1uiv.load(&mut loadfn, "glVertexAttribI1uiv");
         storage::VertexAttribI1uivEXT.load(&mut loadfn, "glVertexAttribI1uivEXT");
         storage::VertexAttribI2i.load(&mut loadfn, "glVertexAttribI2i");
         storage::VertexAttribI2iEXT.load(&mut loadfn, "glVertexAttribI2iEXT");
         storage::VertexAttribI2iv.load(&mut loadfn, "glVertexAttribI2iv");
         storage::VertexAttribI2ivEXT.load(&mut loadfn, "glVertexAttribI2ivEXT");
         storage::VertexAttribI2ui.load(&mut loadfn, "glVertexAttribI2ui");
         storage::VertexAttribI2uiEXT.load(&mut loadfn, "glVertexAttribI2uiEXT");
         storage::VertexAttribI2uiv.load(&mut loadfn, "glVertexAttribI2uiv");
         storage::VertexAttribI2uivEXT.load(&mut loadfn, "glVertexAttribI2uivEXT");
         storage::VertexAttribI3i.load(&mut loadfn, "glVertexAttribI3i");
         storage::VertexAttribI3iEXT.load(&mut loadfn, "glVertexAttribI3iEXT");
         storage::VertexAttribI3iv.load(&mut loadfn, "glVertexAttribI3iv");
         storage::VertexAttribI3ivEXT.load(&mut loadfn, "glVertexAttribI3ivEXT");
         storage::VertexAttribI3ui.load(&mut loadfn, "glVertexAttribI3ui");
         storage::VertexAttribI3uiEXT.load(&mut loadfn, "glVertexAttribI3uiEXT");
         storage::VertexAttribI3uiv.load(&mut loadfn, "glVertexAttribI3uiv");
         storage::VertexAttribI3uivEXT.load(&mut loadfn, "glVertexAttribI3uivEXT");
         storage::VertexAttribI4bv.load(&mut loadfn, "glVertexAttribI4bv");
         storage::VertexAttribI4bvEXT.load(&mut loadfn, "glVertexAttribI4bvEXT");
         storage::VertexAttribI4i.load(&mut loadfn, "glVertexAttribI4i");
         storage::VertexAttribI4iEXT.load(&mut loadfn, "glVertexAttribI4iEXT");
         storage::VertexAttribI4iv.load(&mut loadfn, "glVertexAttribI4iv");
         storage::VertexAttribI4ivEXT.load(&mut loadfn, "glVertexAttribI4ivEXT");
         storage::VertexAttribI4sv.load(&mut loadfn, "glVertexAttribI4sv");
         storage::VertexAttribI4svEXT.load(&mut loadfn, "glVertexAttribI4svEXT");
         storage::VertexAttribI4ubv.load(&mut loadfn, "glVertexAttribI4ubv");
         storage::VertexAttribI4ubvEXT.load(&mut loadfn, "glVertexAttribI4ubvEXT");
         storage::VertexAttribI4ui.load(&mut loadfn, "glVertexAttribI4ui");
         storage::VertexAttribI4uiEXT.load(&mut loadfn, "glVertexAttribI4uiEXT");
         storage::VertexAttribI4uiv.load(&mut loadfn, "glVertexAttribI4uiv");
         storage::VertexAttribI4uivEXT.load(&mut loadfn, "glVertexAttribI4uivEXT");
         storage::VertexAttribI4usv.load(&mut loadfn, "glVertexAttribI4usv");
         storage::VertexAttribI4usvEXT.load(&mut loadfn, "glVertexAttribI4usvEXT");
         storage::VertexAttribIFormat.load(&mut loadfn, "glVertexAttribIFormat");
         storage::VertexAttribIFormatNV.load(&mut loadfn, "glVertexAttribIFormatNV");
         storage::VertexAttribIPointer.load(&mut loadfn, "glVertexAttribIPointer");
         storage::VertexAttribIPointerEXT.load(&mut loadfn, "glVertexAttribIPointerEXT");
         storage::VertexAttribL1d.load(&mut loadfn, "glVertexAttribL1d");
         storage::VertexAttribL1dEXT.load(&mut loadfn, "glVertexAttribL1dEXT");
         storage::VertexAttribL1dv.load(&mut loadfn, "glVertexAttribL1dv");
         storage::VertexAttribL1dvEXT.load(&mut loadfn, "glVertexAttribL1dvEXT");
         storage::VertexAttribL1i64NV.load(&mut loadfn, "glVertexAttribL1i64NV");
         storage::VertexAttribL1i64vNV.load(&mut loadfn, "glVertexAttribL1i64vNV");
         storage::VertexAttribL1ui64ARB.load(&mut loadfn, "glVertexAttribL1ui64ARB");
         storage::VertexAttribL1ui64NV.load(&mut loadfn, "glVertexAttribL1ui64NV");
         storage::VertexAttribL1ui64vARB.load(&mut loadfn, "glVertexAttribL1ui64vARB");
         storage::VertexAttribL1ui64vNV.load(&mut loadfn, "glVertexAttribL1ui64vNV");
         storage::VertexAttribL2d.load(&mut loadfn, "glVertexAttribL2d");
         storage::VertexAttribL2dEXT.load(&mut loadfn, "glVertexAttribL2dEXT");
         storage::VertexAttribL2dv.load(&mut loadfn, "glVertexAttribL2dv");
         storage::VertexAttribL2dvEXT.load(&mut loadfn, "glVertexAttribL2dvEXT");
         storage::VertexAttribL2i64NV.load(&mut loadfn, "glVertexAttribL2i64NV");
         storage::VertexAttribL2i64vNV.load(&mut loadfn, "glVertexAttribL2i64vNV");
         storage::VertexAttribL2ui64NV.load(&mut loadfn, "glVertexAttribL2ui64NV");
         storage::VertexAttribL2ui64vNV.load(&mut loadfn, "glVertexAttribL2ui64vNV");
         storage::VertexAttribL3d.load(&mut loadfn, "glVertexAttribL3d");
         storage::VertexAttribL3dEXT.load(&mut loadfn, "glVertexAttribL3dEXT");
         storage::VertexAttribL3dv.load(&mut loadfn, "glVertexAttribL3dv");
         storage::VertexAttribL3dvEXT.load(&mut loadfn, "glVertexAttribL3dvEXT");
         storage::VertexAttribL3i64NV.load(&mut loadfn, "glVertexAttribL3i64NV");
         storage::VertexAttribL3i64vNV.load(&mut loadfn, "glVertexAttribL3i64vNV");
         storage::VertexAttribL3ui64NV.load(&mut loadfn, "glVertexAttribL3ui64NV");
         storage::VertexAttribL3ui64vNV.load(&mut loadfn, "glVertexAttribL3ui64vNV");
         storage::VertexAttribL4d.load(&mut loadfn, "glVertexAttribL4d");
         storage::VertexAttribL4dEXT.load(&mut loadfn, "glVertexAttribL4dEXT");
         storage::VertexAttribL4dv.load(&mut loadfn, "glVertexAttribL4dv");
         storage::VertexAttribL4dvEXT.load(&mut loadfn, "glVertexAttribL4dvEXT");
         storage::VertexAttribL4i64NV.load(&mut loadfn, "glVertexAttribL4i64NV");
         storage::VertexAttribL4i64vNV.load(&mut loadfn, "glVertexAttribL4i64vNV");
         storage::VertexAttribL4ui64NV.load(&mut loadfn, "glVertexAttribL4ui64NV");
         storage::VertexAttribL4ui64vNV.load(&mut loadfn, "glVertexAttribL4ui64vNV");
         storage::VertexAttribLFormat.load(&mut loadfn, "glVertexAttribLFormat");
         storage::VertexAttribLFormatNV.load(&mut loadfn, "glVertexAttribLFormatNV");
         storage::VertexAttribLPointer.load(&mut loadfn, "glVertexAttribLPointer");
         storage::VertexAttribLPointerEXT.load(&mut loadfn, "glVertexAttribLPointerEXT");
         storage::VertexAttribP1ui.load(&mut loadfn, "glVertexAttribP1ui");
         storage::VertexAttribP1uiv.load(&mut loadfn, "glVertexAttribP1uiv");
         storage::VertexAttribP2ui.load(&mut loadfn, "glVertexAttribP2ui");
         storage::VertexAttribP2uiv.load(&mut loadfn, "glVertexAttribP2uiv");
         storage::VertexAttribP3ui.load(&mut loadfn, "glVertexAttribP3ui");
         storage::VertexAttribP3uiv.load(&mut loadfn, "glVertexAttribP3uiv");
         storage::VertexAttribP4ui.load(&mut loadfn, "glVertexAttribP4ui");
         storage::VertexAttribP4uiv.load(&mut loadfn, "glVertexAttribP4uiv");
         storage::VertexAttribParameteriAMD.load(&mut loadfn, "glVertexAttribParameteriAMD");
         storage::VertexAttribPointer.load(&mut loadfn, "glVertexAttribPointer");
         storage::VertexAttribPointerARB.load(&mut loadfn, "glVertexAttribPointerARB");
         storage::VertexAttribPointerNV.load(&mut loadfn, "glVertexAttribPointerNV");
         storage::VertexAttribs1dvNV.load(&mut loadfn, "glVertexAttribs1dvNV");
         storage::VertexAttribs1fvNV.load(&mut loadfn, "glVertexAttribs1fvNV");
         storage::VertexAttribs1hvNV.load(&mut loadfn, "glVertexAttribs1hvNV");
         storage::VertexAttribs1svNV.load(&mut loadfn, "glVertexAttribs1svNV");
         storage::VertexAttribs2dvNV.load(&mut loadfn, "glVertexAttribs2dvNV");
         storage::VertexAttribs2fvNV.load(&mut loadfn, "glVertexAttribs2fvNV");
         storage::VertexAttribs2hvNV.load(&mut loadfn, "glVertexAttribs2hvNV");
         storage::VertexAttribs2svNV.load(&mut loadfn, "glVertexAttribs2svNV");
         storage::VertexAttribs3dvNV.load(&mut loadfn, "glVertexAttribs3dvNV");
         storage::VertexAttribs3fvNV.load(&mut loadfn, "glVertexAttribs3fvNV");
         storage::VertexAttribs3hvNV.load(&mut loadfn, "glVertexAttribs3hvNV");
         storage::VertexAttribs3svNV.load(&mut loadfn, "glVertexAttribs3svNV");
         storage::VertexAttribs4dvNV.load(&mut loadfn, "glVertexAttribs4dvNV");
         storage::VertexAttribs4fvNV.load(&mut loadfn, "glVertexAttribs4fvNV");
         storage::VertexAttribs4hvNV.load(&mut loadfn, "glVertexAttribs4hvNV");
         storage::VertexAttribs4svNV.load(&mut loadfn, "glVertexAttribs4svNV");
         storage::VertexAttribs4ubvNV.load(&mut loadfn, "glVertexAttribs4ubvNV");
         storage::VertexBindingDivisor.load(&mut loadfn, "glVertexBindingDivisor");
         storage::VertexBlendARB.load(&mut loadfn, "glVertexBlendARB");
         storage::VertexBlendEnvfATI.load(&mut loadfn, "glVertexBlendEnvfATI");
         storage::VertexBlendEnviATI.load(&mut loadfn, "glVertexBlendEnviATI");
         storage::VertexFormatNV.load(&mut loadfn, "glVertexFormatNV");
         storage::VertexPointerEXT.load(&mut loadfn, "glVertexPointerEXT");
         storage::VertexPointerListIBM.load(&mut loadfn, "glVertexPointerListIBM");
         storage::VertexPointervINTEL.load(&mut loadfn, "glVertexPointervINTEL");
         storage::VertexStream1dATI.load(&mut loadfn, "glVertexStream1dATI");
         storage::VertexStream1dvATI.load(&mut loadfn, "glVertexStream1dvATI");
         storage::VertexStream1fATI.load(&mut loadfn, "glVertexStream1fATI");
         storage::VertexStream1fvATI.load(&mut loadfn, "glVertexStream1fvATI");
         storage::VertexStream1iATI.load(&mut loadfn, "glVertexStream1iATI");
         storage::VertexStream1ivATI.load(&mut loadfn, "glVertexStream1ivATI");
         storage::VertexStream1sATI.load(&mut loadfn, "glVertexStream1sATI");
         storage::VertexStream1svATI.load(&mut loadfn, "glVertexStream1svATI");
         storage::VertexStream2dATI.load(&mut loadfn, "glVertexStream2dATI");
         storage::VertexStream2dvATI.load(&mut loadfn, "glVertexStream2dvATI");
         storage::VertexStream2fATI.load(&mut loadfn, "glVertexStream2fATI");
         storage::VertexStream2fvATI.load(&mut loadfn, "glVertexStream2fvATI");
         storage::VertexStream2iATI.load(&mut loadfn, "glVertexStream2iATI");
         storage::VertexStream2ivATI.load(&mut loadfn, "glVertexStream2ivATI");
         storage::VertexStream2sATI.load(&mut loadfn, "glVertexStream2sATI");
         storage::VertexStream2svATI.load(&mut loadfn, "glVertexStream2svATI");
         storage::VertexStream3dATI.load(&mut loadfn, "glVertexStream3dATI");
         storage::VertexStream3dvATI.load(&mut loadfn, "glVertexStream3dvATI");
         storage::VertexStream3fATI.load(&mut loadfn, "glVertexStream3fATI");
         storage::VertexStream3fvATI.load(&mut loadfn, "glVertexStream3fvATI");
         storage::VertexStream3iATI.load(&mut loadfn, "glVertexStream3iATI");
         storage::VertexStream3ivATI.load(&mut loadfn, "glVertexStream3ivATI");
         storage::VertexStream3sATI.load(&mut loadfn, "glVertexStream3sATI");
         storage::VertexStream3svATI.load(&mut loadfn, "glVertexStream3svATI");
         storage::VertexStream4dATI.load(&mut loadfn, "glVertexStream4dATI");
         storage::VertexStream4dvATI.load(&mut loadfn, "glVertexStream4dvATI");
         storage::VertexStream4fATI.load(&mut loadfn, "glVertexStream4fATI");
         storage::VertexStream4fvATI.load(&mut loadfn, "glVertexStream4fvATI");
         storage::VertexStream4iATI.load(&mut loadfn, "glVertexStream4iATI");
         storage::VertexStream4ivATI.load(&mut loadfn, "glVertexStream4ivATI");
         storage::VertexStream4sATI.load(&mut loadfn, "glVertexStream4sATI");
         storage::VertexStream4svATI.load(&mut loadfn, "glVertexStream4svATI");
         storage::VertexWeightPointerEXT.load(&mut loadfn, "glVertexWeightPointerEXT");
         storage::VertexWeightfEXT.load(&mut loadfn, "glVertexWeightfEXT");
         storage::VertexWeightfvEXT.load(&mut loadfn, "glVertexWeightfvEXT");
         storage::VertexWeighthNV.load(&mut loadfn, "glVertexWeighthNV");
         storage::VertexWeighthvNV.load(&mut loadfn, "glVertexWeighthvNV");
         storage::VideoCaptureNV.load(&mut loadfn, "glVideoCaptureNV");
         storage::VideoCaptureStreamParameterdvNV.load(&mut loadfn, "glVideoCaptureStreamParameterdvNV");
         storage::VideoCaptureStreamParameterfvNV.load(&mut loadfn, "glVideoCaptureStreamParameterfvNV");
         storage::VideoCaptureStreamParameterivNV.load(&mut loadfn, "glVideoCaptureStreamParameterivNV");
         storage::Viewport.load(&mut loadfn, "glViewport");
         storage::ViewportArrayv.load(&mut loadfn, "glViewportArrayv");
         storage::ViewportIndexedf.load(&mut loadfn, "glViewportIndexedf");
         storage::ViewportIndexedfv.load(&mut loadfn, "glViewportIndexedfv");
         storage::ViewportPositionWScaleNV.load(&mut loadfn, "glViewportPositionWScaleNV");
         storage::ViewportSwizzleNV.load(&mut loadfn, "glViewportSwizzleNV");
         storage::WaitSemaphoreEXT.load(&mut loadfn, "glWaitSemaphoreEXT");
         storage::WaitSemaphoreui64NVX.load(&mut loadfn, "glWaitSemaphoreui64NVX");
         storage::WaitSync.load(&mut loadfn, "glWaitSync");
         storage::WaitVkSemaphoreNV.load(&mut loadfn, "glWaitVkSemaphoreNV");
         storage::WeightPathsNV.load(&mut loadfn, "glWeightPathsNV");
         storage::WeightPointerARB.load(&mut loadfn, "glWeightPointerARB");
         storage::WeightbvARB.load(&mut loadfn, "glWeightbvARB");
         storage::WeightdvARB.load(&mut loadfn, "glWeightdvARB");
         storage::WeightfvARB.load(&mut loadfn, "glWeightfvARB");
         storage::WeightivARB.load(&mut loadfn, "glWeightivARB");
         storage::WeightsvARB.load(&mut loadfn, "glWeightsvARB");
         storage::WeightubvARB.load(&mut loadfn, "glWeightubvARB");
         storage::WeightuivARB.load(&mut loadfn, "glWeightuivARB");
         storage::WeightusvARB.load(&mut loadfn, "glWeightusvARB");
         storage::WindowPos2d.load(&mut loadfn, "glWindowPos2d");
         storage::WindowPos2dARB.load(&mut loadfn, "glWindowPos2dARB");
         storage::WindowPos2dMESA.load(&mut loadfn, "glWindowPos2dMESA");
         storage::WindowPos2dv.load(&mut loadfn, "glWindowPos2dv");
         storage::WindowPos2dvARB.load(&mut loadfn, "glWindowPos2dvARB");
         storage::WindowPos2dvMESA.load(&mut loadfn, "glWindowPos2dvMESA");
         storage::WindowPos2f.load(&mut loadfn, "glWindowPos2f");
         storage::WindowPos2fARB.load(&mut loadfn, "glWindowPos2fARB");
         storage::WindowPos2fMESA.load(&mut loadfn, "glWindowPos2fMESA");
         storage::WindowPos2fv.load(&mut loadfn, "glWindowPos2fv");
         storage::WindowPos2fvARB.load(&mut loadfn, "glWindowPos2fvARB");
         storage::WindowPos2fvMESA.load(&mut loadfn, "glWindowPos2fvMESA");
         storage::WindowPos2i.load(&mut loadfn, "glWindowPos2i");
         storage::WindowPos2iARB.load(&mut loadfn, "glWindowPos2iARB");
         storage::WindowPos2iMESA.load(&mut loadfn, "glWindowPos2iMESA");
         storage::WindowPos2iv.load(&mut loadfn, "glWindowPos2iv");
         storage::WindowPos2ivARB.load(&mut loadfn, "glWindowPos2ivARB");
         storage::WindowPos2ivMESA.load(&mut loadfn, "glWindowPos2ivMESA");
         storage::WindowPos2s.load(&mut loadfn, "glWindowPos2s");
         storage::WindowPos2sARB.load(&mut loadfn, "glWindowPos2sARB");
         storage::WindowPos2sMESA.load(&mut loadfn, "glWindowPos2sMESA");
         storage::WindowPos2sv.load(&mut loadfn, "glWindowPos2sv");
         storage::WindowPos2svARB.load(&mut loadfn, "glWindowPos2svARB");
         storage::WindowPos2svMESA.load(&mut loadfn, "glWindowPos2svMESA");
         storage::WindowPos3d.load(&mut loadfn, "glWindowPos3d");
         storage::WindowPos3dARB.load(&mut loadfn, "glWindowPos3dARB");
         storage::WindowPos3dMESA.load(&mut loadfn, "glWindowPos3dMESA");
         storage::WindowPos3dv.load(&mut loadfn, "glWindowPos3dv");
         storage::WindowPos3dvARB.load(&mut loadfn, "glWindowPos3dvARB");
         storage::WindowPos3dvMESA.load(&mut loadfn, "glWindowPos3dvMESA");
         storage::WindowPos3f.load(&mut loadfn, "glWindowPos3f");
         storage::WindowPos3fARB.load(&mut loadfn, "glWindowPos3fARB");
         storage::WindowPos3fMESA.load(&mut loadfn, "glWindowPos3fMESA");
         storage::WindowPos3fv.load(&mut loadfn, "glWindowPos3fv");
         storage::WindowPos3fvARB.load(&mut loadfn, "glWindowPos3fvARB");
         storage::WindowPos3fvMESA.load(&mut loadfn, "glWindowPos3fvMESA");
         storage::WindowPos3i.load(&mut loadfn, "glWindowPos3i");
         storage::WindowPos3iARB.load(&mut loadfn, "glWindowPos3iARB");
         storage::WindowPos3iMESA.load(&mut loadfn, "glWindowPos3iMESA");
         storage::WindowPos3iv.load(&mut loadfn, "glWindowPos3iv");
         storage::WindowPos3ivARB.load(&mut loadfn, "glWindowPos3ivARB");
         storage::WindowPos3ivMESA.load(&mut loadfn, "glWindowPos3ivMESA");
         storage::WindowPos3s.load(&mut loadfn, "glWindowPos3s");
         storage::WindowPos3sARB.load(&mut loadfn, "glWindowPos3sARB");
         storage::WindowPos3sMESA.load(&mut loadfn, "glWindowPos3sMESA");
         storage::WindowPos3sv.load(&mut loadfn, "glWindowPos3sv");
         storage::WindowPos3svARB.load(&mut loadfn, "glWindowPos3svARB");
         storage::WindowPos3svMESA.load(&mut loadfn, "glWindowPos3svMESA");
         storage::WindowPos4dMESA.load(&mut loadfn, "glWindowPos4dMESA");
         storage::WindowPos4dvMESA.load(&mut loadfn, "glWindowPos4dvMESA");
         storage::WindowPos4fMESA.load(&mut loadfn, "glWindowPos4fMESA");
         storage::WindowPos4fvMESA.load(&mut loadfn, "glWindowPos4fvMESA");
         storage::WindowPos4iMESA.load(&mut loadfn, "glWindowPos4iMESA");
         storage::WindowPos4ivMESA.load(&mut loadfn, "glWindowPos4ivMESA");
         storage::WindowPos4sMESA.load(&mut loadfn, "glWindowPos4sMESA");
         storage::WindowPos4svMESA.load(&mut loadfn, "glWindowPos4svMESA");
         storage::WindowRectanglesEXT.load(&mut loadfn, "glWindowRectanglesEXT");
         storage::WriteMaskEXT.load(&mut loadfn, "glWriteMaskEXT");

         storage::ActiveTexture.aliased(&storage::ActiveTextureARB);
         storage::ActiveTextureARB.aliased(&storage::ActiveTexture);
         storage::ArrayElement.aliased(&storage::ArrayElementEXT);
         storage::ArrayElementEXT.aliased(&storage::ArrayElement);
         storage::AttachObjectARB.aliased(&storage::AttachShader);
         storage::AttachShader.aliased(&storage::AttachObjectARB);
         storage::BeginConditionalRender.aliased(&storage::BeginConditionalRenderNV);
         storage::BeginConditionalRenderNV.aliased(&storage::BeginConditionalRender);
         storage::BeginQuery.aliased(&storage::BeginQueryARB);
         storage::BeginQueryARB.aliased(&storage::BeginQuery);
         storage::BeginTransformFeedback.aliased(&storage::BeginTransformFeedbackEXT);
         storage::BeginTransformFeedback.aliased(&storage::BeginTransformFeedbackNV);
         storage::BeginTransformFeedbackEXT.aliased(&storage::BeginTransformFeedback);
         storage::BeginTransformFeedbackEXT.aliased(&storage::BeginTransformFeedbackNV);
         storage::BeginTransformFeedbackNV.aliased(&storage::BeginTransformFeedback);
         storage::BeginTransformFeedbackNV.aliased(&storage::BeginTransformFeedbackEXT);
         storage::BindAttribLocation.aliased(&storage::BindAttribLocationARB);
         storage::BindAttribLocationARB.aliased(&storage::BindAttribLocation);
         storage::BindBuffer.aliased(&storage::BindBufferARB);
         storage::BindBufferARB.aliased(&storage::BindBuffer);
         storage::BindBufferBase.aliased(&storage::BindBufferBaseEXT);
         storage::BindBufferBase.aliased(&storage::BindBufferBaseNV);
         storage::BindBufferBaseEXT.aliased(&storage::BindBufferBaseNV);
         storage::BindBufferBaseEXT.aliased(&storage::BindBufferBase);
         storage::BindBufferBaseNV.aliased(&storage::BindBufferBaseEXT);
         storage::BindBufferBaseNV.aliased(&storage::BindBufferBase);
         storage::BindBufferOffsetEXT.aliased(&storage::BindBufferOffsetNV);
         storage::BindBufferOffsetNV.aliased(&storage::BindBufferOffsetEXT);
         storage::BindBufferRange.aliased(&storage::BindBufferRangeNV);
         storage::BindBufferRange.aliased(&storage::BindBufferRangeEXT);
         storage::BindBufferRangeEXT.aliased(&storage::BindBufferRange);
         storage::BindBufferRangeEXT.aliased(&storage::BindBufferRangeNV);
         storage::BindBufferRangeNV.aliased(&storage::BindBufferRange);
         storage::BindBufferRangeNV.aliased(&storage::BindBufferRangeEXT);
         storage::BindFragDataLocation.aliased(&storage::BindFragDataLocationEXT);
         storage::BindFragDataLocationEXT.aliased(&storage::BindFragDataLocation);
         storage::BindProgramARB.aliased(&storage::BindProgramNV);
         storage::BindProgramNV.aliased(&storage::BindProgramARB);
         storage::BindTexture.aliased(&storage::BindTextureEXT);
         storage::BindTextureEXT.aliased(&storage::BindTexture);
         storage::BlendBarrier.aliased(&storage::BlendBarrierKHR);
         storage::BlendBarrier.aliased(&storage::BlendBarrierNV);
         storage::BlendBarrierKHR.aliased(&storage::BlendBarrierNV);
         storage::BlendBarrierKHR.aliased(&storage::BlendBarrier);
         storage::BlendBarrierNV.aliased(&storage::BlendBarrierKHR);
         storage::BlendBarrierNV.aliased(&storage::BlendBarrier);
         storage::BlendColor.aliased(&storage::BlendColorEXT);
         storage::BlendColorEXT.aliased(&storage::BlendColor);
         storage::BlendEquation.aliased(&storage::BlendEquationEXT);
         storage::BlendEquationEXT.aliased(&storage::BlendEquation);
         storage::BlendEquationi.aliased(&storage::BlendEquationiARB);
         storage::BlendEquationi.aliased(&storage::BlendEquationIndexedAMD);
         storage::BlendEquationiARB.aliased(&storage::BlendEquationi);
         storage::BlendEquationiARB.aliased(&storage::BlendEquationIndexedAMD);
         storage::BlendEquationIndexedAMD.aliased(&storage::BlendEquationi);
         storage::BlendEquationIndexedAMD.aliased(&storage::BlendEquationiARB);
         storage::BlendEquationSeparate.aliased(&storage::BlendEquationSeparateEXT);
         storage::BlendEquationSeparateEXT.aliased(&storage::BlendEquationSeparate);
         storage::BlendEquationSeparatei.aliased(&storage::BlendEquationSeparateIndexedAMD);
         storage::BlendEquationSeparatei.aliased(&storage::BlendEquationSeparateiARB);
         storage::BlendEquationSeparateiARB.aliased(&storage::BlendEquationSeparateIndexedAMD);
         storage::BlendEquationSeparateiARB.aliased(&storage::BlendEquationSeparatei);
         storage::BlendEquationSeparateIndexedAMD.aliased(&storage::BlendEquationSeparatei);
         storage::BlendEquationSeparateIndexedAMD.aliased(&storage::BlendEquationSeparateiARB);
         storage::BlendFunci.aliased(&storage::BlendFunciARB);
         storage::BlendFunci.aliased(&storage::BlendFuncIndexedAMD);
         storage::BlendFunciARB.aliased(&storage::BlendFunci);
         storage::BlendFunciARB.aliased(&storage::BlendFuncIndexedAMD);
         storage::BlendFuncIndexedAMD.aliased(&storage::BlendFunci);
         storage::BlendFuncIndexedAMD.aliased(&storage::BlendFunciARB);
         storage::BlendFuncSeparate.aliased(&storage::BlendFuncSeparateINGR);
         storage::BlendFuncSeparate.aliased(&storage::BlendFuncSeparateEXT);
         storage::BlendFuncSeparateEXT.aliased(&storage::BlendFuncSeparate);
         storage::BlendFuncSeparateEXT.aliased(&storage::BlendFuncSeparateINGR);
         storage::BlendFuncSeparatei.aliased(&storage::BlendFuncSeparateIndexedAMD);
         storage::BlendFuncSeparatei.aliased(&storage::BlendFuncSeparateiARB);
         storage::BlendFuncSeparateiARB.aliased(&storage::BlendFuncSeparateIndexedAMD);
         storage::BlendFuncSeparateiARB.aliased(&storage::BlendFuncSeparatei);
         storage::BlendFuncSeparateIndexedAMD.aliased(&storage::BlendFuncSeparatei);
         storage::BlendFuncSeparateIndexedAMD.aliased(&storage::BlendFuncSeparateiARB);
         storage::BlendFuncSeparateINGR.aliased(&storage::BlendFuncSeparate);
         storage::BlendFuncSeparateINGR.aliased(&storage::BlendFuncSeparateEXT);
         storage::BlitFramebuffer.aliased(&storage::BlitFramebufferEXT);
         storage::BlitFramebufferEXT.aliased(&storage::BlitFramebuffer);
         storage::BufferData.aliased(&storage::BufferDataARB);
         storage::BufferDataARB.aliased(&storage::BufferData);
         storage::BufferSubData.aliased(&storage::BufferSubDataARB);
         storage::BufferSubDataARB.aliased(&storage::BufferSubData);
         storage::CheckFramebufferStatus.aliased(&storage::CheckFramebufferStatusEXT);
         storage::CheckFramebufferStatusEXT.aliased(&storage::CheckFramebufferStatus);
         storage::ClampColor.aliased(&storage::ClampColorARB);
         storage::ClampColorARB.aliased(&storage::ClampColor);
         storage::ClearDepthf.aliased(&storage::ClearDepthfOES);
         storage::ClearDepthfOES.aliased(&storage::ClearDepthf);
         storage::ClientActiveTexture.aliased(&storage::ClientActiveTextureARB);
         storage::ClientActiveTextureARB.aliased(&storage::ClientActiveTexture);
         storage::ColorMaski.aliased(&storage::ColorMaskIndexedEXT);
         storage::ColorMaskIndexedEXT.aliased(&storage::ColorMaski);
         storage::ColorSubTable.aliased(&storage::ColorSubTableEXT);
         storage::ColorSubTableEXT.aliased(&storage::ColorSubTable);
         storage::ColorTable.aliased(&storage::ColorTableEXT);
         storage::ColorTable.aliased(&storage::ColorTableSGI);
         storage::ColorTableEXT.aliased(&storage::ColorTable);
         storage::ColorTableEXT.aliased(&storage::ColorTableSGI);
         storage::ColorTableParameterfv.aliased(&storage::ColorTableParameterfvSGI);
         storage::ColorTableParameterfvSGI.aliased(&storage::ColorTableParameterfv);
         storage::ColorTableParameteriv.aliased(&storage::ColorTableParameterivSGI);
         storage::ColorTableParameterivSGI.aliased(&storage::ColorTableParameteriv);
         storage::ColorTableSGI.aliased(&storage::ColorTableEXT);
         storage::ColorTableSGI.aliased(&storage::ColorTable);
         storage::CompileShader.aliased(&storage::CompileShaderARB);
         storage::CompileShaderARB.aliased(&storage::CompileShader);
         storage::CompressedTexImage1D.aliased(&storage::CompressedTexImage1DARB);
         storage::CompressedTexImage1DARB.aliased(&storage::CompressedTexImage1D);
         storage::CompressedTexImage2D.aliased(&storage::CompressedTexImage2DARB);
         storage::CompressedTexImage2DARB.aliased(&storage::CompressedTexImage2D);
         storage::CompressedTexImage3D.aliased(&storage::CompressedTexImage3DARB);
         storage::CompressedTexImage3DARB.aliased(&storage::CompressedTexImage3D);
         storage::CompressedTexSubImage1D.aliased(&storage::CompressedTexSubImage1DARB);
         storage::CompressedTexSubImage1DARB.aliased(&storage::CompressedTexSubImage1D);
         storage::CompressedTexSubImage2D.aliased(&storage::CompressedTexSubImage2DARB);
         storage::CompressedTexSubImage2DARB.aliased(&storage::CompressedTexSubImage2D);
         storage::CompressedTexSubImage3D.aliased(&storage::CompressedTexSubImage3DARB);
         storage::CompressedTexSubImage3DARB.aliased(&storage::CompressedTexSubImage3D);
         storage::ConvolutionFilter1D.aliased(&storage::ConvolutionFilter1DEXT);
         storage::ConvolutionFilter1DEXT.aliased(&storage::ConvolutionFilter1D);
         storage::ConvolutionFilter2D.aliased(&storage::ConvolutionFilter2DEXT);
         storage::ConvolutionFilter2DEXT.aliased(&storage::ConvolutionFilter2D);
         storage::ConvolutionParameterf.aliased(&storage::ConvolutionParameterfEXT);
         storage::ConvolutionParameterfEXT.aliased(&storage::ConvolutionParameterf);
         storage::ConvolutionParameterfv.aliased(&storage::ConvolutionParameterfvEXT);
         storage::ConvolutionParameterfvEXT.aliased(&storage::ConvolutionParameterfv);
         storage::ConvolutionParameteri.aliased(&storage::ConvolutionParameteriEXT);
         storage::ConvolutionParameteriEXT.aliased(&storage::ConvolutionParameteri);
         storage::ConvolutionParameteriv.aliased(&storage::ConvolutionParameterivEXT);
         storage::ConvolutionParameterivEXT.aliased(&storage::ConvolutionParameteriv);
         storage::CopyColorSubTable.aliased(&storage::CopyColorSubTableEXT);
         storage::CopyColorSubTableEXT.aliased(&storage::CopyColorSubTable);
         storage::CopyColorTable.aliased(&storage::CopyColorTableSGI);
         storage::CopyColorTableSGI.aliased(&storage::CopyColorTable);
         storage::CopyConvolutionFilter1D.aliased(&storage::CopyConvolutionFilter1DEXT);
         storage::CopyConvolutionFilter1DEXT.aliased(&storage::CopyConvolutionFilter1D);
         storage::CopyConvolutionFilter2D.aliased(&storage::CopyConvolutionFilter2DEXT);
         storage::CopyConvolutionFilter2DEXT.aliased(&storage::CopyConvolutionFilter2D);
         storage::CopyTexImage1D.aliased(&storage::CopyTexImage1DEXT);
         storage::CopyTexImage1DEXT.aliased(&storage::CopyTexImage1D);
         storage::CopyTexImage2D.aliased(&storage::CopyTexImage2DEXT);
         storage::CopyTexImage2DEXT.aliased(&storage::CopyTexImage2D);
         storage::CopyTexSubImage1D.aliased(&storage::CopyTexSubImage1DEXT);
         storage::CopyTexSubImage1DEXT.aliased(&storage::CopyTexSubImage1D);
         storage::CopyTexSubImage2D.aliased(&storage::CopyTexSubImage2DEXT);
         storage::CopyTexSubImage2DEXT.aliased(&storage::CopyTexSubImage2D);
         storage::CopyTexSubImage3D.aliased(&storage::CopyTexSubImage3DEXT);
         storage::CopyTexSubImage3DEXT.aliased(&storage::CopyTexSubImage3D);
         storage::CreateProgram.aliased(&storage::CreateProgramObjectARB);
         storage::CreateProgramObjectARB.aliased(&storage::CreateProgram);
         storage::CreateShader.aliased(&storage::CreateShaderObjectARB);
         storage::CreateShaderObjectARB.aliased(&storage::CreateShader);
         storage::DebugMessageCallback.aliased(&storage::DebugMessageCallbackARB);
         storage::DebugMessageCallbackARB.aliased(&storage::DebugMessageCallback);
         storage::DebugMessageControl.aliased(&storage::DebugMessageControlARB);
         storage::DebugMessageControlARB.aliased(&storage::DebugMessageControl);
         storage::DebugMessageInsert.aliased(&storage::DebugMessageInsertARB);
         storage::DebugMessageInsertARB.aliased(&storage::DebugMessageInsert);
         storage::DeleteBuffers.aliased(&storage::DeleteBuffersARB);
         storage::DeleteBuffersARB.aliased(&storage::DeleteBuffers);
         storage::DeleteFramebuffers.aliased(&storage::DeleteFramebuffersEXT);
         storage::DeleteFramebuffersEXT.aliased(&storage::DeleteFramebuffers);
         storage::DeleteProgramsARB.aliased(&storage::DeleteProgramsNV);
         storage::DeleteProgramsNV.aliased(&storage::DeleteProgramsARB);
         storage::DeleteQueries.aliased(&storage::DeleteQueriesARB);
         storage::DeleteQueriesARB.aliased(&storage::DeleteQueries);
         storage::DeleteRenderbuffers.aliased(&storage::DeleteRenderbuffersEXT);
         storage::DeleteRenderbuffersEXT.aliased(&storage::DeleteRenderbuffers);
         storage::DeleteTransformFeedbacks.aliased(&storage::DeleteTransformFeedbacksNV);
         storage::DeleteTransformFeedbacksNV.aliased(&storage::DeleteTransformFeedbacks);
         storage::DeleteVertexArrays.aliased(&storage::DeleteVertexArraysAPPLE);
         storage::DeleteVertexArraysAPPLE.aliased(&storage::DeleteVertexArrays);
         storage::DepthRangef.aliased(&storage::DepthRangefOES);
         storage::DepthRangefOES.aliased(&storage::DepthRangef);
         storage::DetachObjectARB.aliased(&storage::DetachShader);
         storage::DetachShader.aliased(&storage::DetachObjectARB);
         storage::Disablei.aliased(&storage::DisableIndexedEXT);
         storage::DisableIndexedEXT.aliased(&storage::Disablei);
         storage::DisableVertexAttribArray.aliased(&storage::DisableVertexAttribArrayARB);
         storage::DisableVertexAttribArrayARB.aliased(&storage::DisableVertexAttribArray);
         storage::DrawArrays.aliased(&storage::DrawArraysEXT);
         storage::DrawArraysEXT.aliased(&storage::DrawArrays);
         storage::DrawArraysInstanced.aliased(&storage::DrawArraysInstancedARB);
         storage::DrawArraysInstanced.aliased(&storage::DrawArraysInstancedEXT);
         storage::DrawArraysInstancedARB.aliased(&storage::DrawArraysInstanced);
         storage::DrawArraysInstancedARB.aliased(&storage::DrawArraysInstancedEXT);
         storage::DrawArraysInstancedEXT.aliased(&storage::DrawArraysInstanced);
         storage::DrawArraysInstancedEXT.aliased(&storage::DrawArraysInstancedARB);
         storage::DrawBuffers.aliased(&storage::DrawBuffersATI);
         storage::DrawBuffers.aliased(&storage::DrawBuffersARB);
         storage::DrawBuffersARB.aliased(&storage::DrawBuffersATI);
         storage::DrawBuffersARB.aliased(&storage::DrawBuffers);
         storage::DrawBuffersATI.aliased(&storage::DrawBuffers);
         storage::DrawBuffersATI.aliased(&storage::DrawBuffersARB);
         storage::DrawElementsInstanced.aliased(&storage::DrawElementsInstancedARB);
         storage::DrawElementsInstanced.aliased(&storage::DrawElementsInstancedEXT);
         storage::DrawElementsInstancedARB.aliased(&storage::DrawElementsInstanced);
         storage::DrawElementsInstancedARB.aliased(&storage::DrawElementsInstancedEXT);
         storage::DrawElementsInstancedEXT.aliased(&storage::DrawElementsInstanced);
         storage::DrawElementsInstancedEXT.aliased(&storage::DrawElementsInstancedARB);
         storage::DrawRangeElements.aliased(&storage::DrawRangeElementsEXT);
         storage::DrawRangeElementsEXT.aliased(&storage::DrawRangeElements);
         storage::DrawTransformFeedback.aliased(&storage::DrawTransformFeedbackNV);
         storage::DrawTransformFeedbackNV.aliased(&storage::DrawTransformFeedback);
         storage::Enablei.aliased(&storage::EnableIndexedEXT);
         storage::EnableIndexedEXT.aliased(&storage::Enablei);
         storage::EnableVertexAttribArray.aliased(&storage::EnableVertexAttribArrayARB);
         storage::EnableVertexAttribArrayARB.aliased(&storage::EnableVertexAttribArray);
         storage::EndConditionalRender.aliased(&storage::EndConditionalRenderNV);
         storage::EndConditionalRender.aliased(&storage::EndConditionalRenderNVX);
         storage::EndConditionalRenderNV.aliased(&storage::EndConditionalRenderNVX);
         storage::EndConditionalRenderNV.aliased(&storage::EndConditionalRender);
         storage::EndConditionalRenderNVX.aliased(&storage::EndConditionalRenderNV);
         storage::EndConditionalRenderNVX.aliased(&storage::EndConditionalRender);
         storage::EndQuery.aliased(&storage::EndQueryARB);
         storage::EndQueryARB.aliased(&storage::EndQuery);
         storage::EndTransformFeedback.aliased(&storage::EndTransformFeedbackNV);
         storage::EndTransformFeedback.aliased(&storage::EndTransformFeedbackEXT);
         storage::EndTransformFeedbackEXT.aliased(&storage::EndTransformFeedbackNV);
         storage::EndTransformFeedbackEXT.aliased(&storage::EndTransformFeedback);
         storage::EndTransformFeedbackNV.aliased(&storage::EndTransformFeedbackEXT);
         storage::EndTransformFeedbackNV.aliased(&storage::EndTransformFeedback);
         storage::FlushMappedBufferRange.aliased(&storage::FlushMappedBufferRangeAPPLE);
         storage::FlushMappedBufferRangeAPPLE.aliased(&storage::FlushMappedBufferRange);
         storage::FogCoordd.aliased(&storage::FogCoorddEXT);
         storage::FogCoorddEXT.aliased(&storage::FogCoordd);
         storage::FogCoorddv.aliased(&storage::FogCoorddvEXT);
         storage::FogCoorddvEXT.aliased(&storage::FogCoorddv);
         storage::FogCoordf.aliased(&storage::FogCoordfEXT);
         storage::FogCoordfEXT.aliased(&storage::FogCoordf);
         storage::FogCoordfv.aliased(&storage::FogCoordfvEXT);
         storage::FogCoordfvEXT.aliased(&storage::FogCoordfv);
         storage::FogCoordPointer.aliased(&storage::FogCoordPointerEXT);
         storage::FogCoordPointerEXT.aliased(&storage::FogCoordPointer);
         storage::FramebufferRenderbuffer.aliased(&storage::FramebufferRenderbufferEXT);
         storage::FramebufferRenderbufferEXT.aliased(&storage::FramebufferRenderbuffer);
         storage::FramebufferTexture.aliased(&storage::FramebufferTextureEXT);
         storage::FramebufferTexture.aliased(&storage::FramebufferTextureARB);
         storage::FramebufferTexture1D.aliased(&storage::FramebufferTexture1DEXT);
         storage::FramebufferTexture1DEXT.aliased(&storage::FramebufferTexture1D);
         storage::FramebufferTexture2D.aliased(&storage::FramebufferTexture2DEXT);
         storage::FramebufferTexture2DEXT.aliased(&storage::FramebufferTexture2D);
         storage::FramebufferTexture3D.aliased(&storage::FramebufferTexture3DEXT);
         storage::FramebufferTexture3DEXT.aliased(&storage::FramebufferTexture3D);
         storage::FramebufferTextureARB.aliased(&storage::FramebufferTextureEXT);
         storage::FramebufferTextureARB.aliased(&storage::FramebufferTexture);
         storage::FramebufferTextureEXT.aliased(&storage::FramebufferTexture);
         storage::FramebufferTextureEXT.aliased(&storage::FramebufferTextureARB);
         storage::FramebufferTextureFaceARB.aliased(&storage::FramebufferTextureFaceEXT);
         storage::FramebufferTextureFaceEXT.aliased(&storage::FramebufferTextureFaceARB);
         storage::FramebufferTextureLayer.aliased(&storage::FramebufferTextureLayerARB);
         storage::FramebufferTextureLayer.aliased(&storage::FramebufferTextureLayerEXT);
         storage::FramebufferTextureLayerARB.aliased(&storage::FramebufferTextureLayerEXT);
         storage::FramebufferTextureLayerARB.aliased(&storage::FramebufferTextureLayer);
         storage::FramebufferTextureLayerEXT.aliased(&storage::FramebufferTextureLayerARB);
         storage::FramebufferTextureLayerEXT.aliased(&storage::FramebufferTextureLayer);
         storage::GenBuffers.aliased(&storage::GenBuffersARB);
         storage::GenBuffersARB.aliased(&storage::GenBuffers);
         storage::GenerateMipmap.aliased(&storage::GenerateMipmapEXT);
         storage::GenerateMipmapEXT.aliased(&storage::GenerateMipmap);
         storage::GenFramebuffers.aliased(&storage::GenFramebuffersEXT);
         storage::GenFramebuffersEXT.aliased(&storage::GenFramebuffers);
         storage::GenProgramsARB.aliased(&storage::GenProgramsNV);
         storage::GenProgramsNV.aliased(&storage::GenProgramsARB);
         storage::GenQueries.aliased(&storage::GenQueriesARB);
         storage::GenQueriesARB.aliased(&storage::GenQueries);
         storage::GenRenderbuffers.aliased(&storage::GenRenderbuffersEXT);
         storage::GenRenderbuffersEXT.aliased(&storage::GenRenderbuffers);
         storage::GenTransformFeedbacks.aliased(&storage::GenTransformFeedbacksNV);
         storage::GenTransformFeedbacksNV.aliased(&storage::GenTransformFeedbacks);
         storage::GenVertexArrays.aliased(&storage::GenVertexArraysAPPLE);
         storage::GenVertexArraysAPPLE.aliased(&storage::GenVertexArrays);
         storage::GetActiveAttrib.aliased(&storage::GetActiveAttribARB);
         storage::GetActiveAttribARB.aliased(&storage::GetActiveAttrib);
         storage::GetActiveUniform.aliased(&storage::GetActiveUniformARB);
         storage::GetActiveUniformARB.aliased(&storage::GetActiveUniform);
         storage::GetAttribLocation.aliased(&storage::GetAttribLocationARB);
         storage::GetAttribLocationARB.aliased(&storage::GetAttribLocation);
         storage::GetBooleani_v.aliased(&storage::GetBooleanIndexedvEXT);
         storage::GetBooleanIndexedvEXT.aliased(&storage::GetBooleani_v);
         storage::GetBufferParameteriv.aliased(&storage::GetBufferParameterivARB);
         storage::GetBufferParameterivARB.aliased(&storage::GetBufferParameteriv);
         storage::GetBufferPointerv.aliased(&storage::GetBufferPointervARB);
         storage::GetBufferPointervARB.aliased(&storage::GetBufferPointerv);
         storage::GetBufferSubData.aliased(&storage::GetBufferSubDataARB);
         storage::GetBufferSubDataARB.aliased(&storage::GetBufferSubData);
         storage::GetColorTable.aliased(&storage::GetColorTableEXT);
         storage::GetColorTableEXT.aliased(&storage::GetColorTable);
         storage::GetColorTableParameterfv.aliased(&storage::GetColorTableParameterfvEXT);
         storage::GetColorTableParameterfvEXT.aliased(&storage::GetColorTableParameterfv);
         storage::GetColorTableParameteriv.aliased(&storage::GetColorTableParameterivEXT);
         storage::GetColorTableParameterivEXT.aliased(&storage::GetColorTableParameteriv);
         storage::GetCompressedTexImage.aliased(&storage::GetCompressedTexImageARB);
         storage::GetCompressedTexImageARB.aliased(&storage::GetCompressedTexImage);
         storage::GetDebugMessageLog.aliased(&storage::GetDebugMessageLogARB);
         storage::GetDebugMessageLogARB.aliased(&storage::GetDebugMessageLog);
         storage::GetDoublei_v.aliased(&storage::GetDoubleIndexedvEXT);
         storage::GetDoublei_v.aliased(&storage::GetDoublei_vEXT);
         storage::GetDoublei_vEXT.aliased(&storage::GetDoublei_v);
         storage::GetDoublei_vEXT.aliased(&storage::GetDoubleIndexedvEXT);
         storage::GetDoubleIndexedvEXT.aliased(&storage::GetDoublei_v);
         storage::GetDoubleIndexedvEXT.aliased(&storage::GetDoublei_vEXT);
         storage::GetFloati_v.aliased(&storage::GetFloatIndexedvEXT);
         storage::GetFloati_v.aliased(&storage::GetFloati_vEXT);
         storage::GetFloati_vEXT.aliased(&storage::GetFloatIndexedvEXT);
         storage::GetFloati_vEXT.aliased(&storage::GetFloati_v);
         storage::GetFloatIndexedvEXT.aliased(&storage::GetFloati_v);
         storage::GetFloatIndexedvEXT.aliased(&storage::GetFloati_vEXT);
         storage::GetFragDataLocation.aliased(&storage::GetFragDataLocationEXT);
         storage::GetFragDataLocationEXT.aliased(&storage::GetFragDataLocation);
         storage::GetFramebufferAttachmentParameteriv.aliased(&storage::GetFramebufferAttachmentParameterivEXT);
         storage::GetFramebufferAttachmentParameterivEXT.aliased(&storage::GetFramebufferAttachmentParameteriv);
         storage::GetIntegeri_v.aliased(&storage::GetIntegerIndexedvEXT);
         storage::GetIntegerIndexedvEXT.aliased(&storage::GetIntegeri_v);
         storage::GetMultisamplefv.aliased(&storage::GetMultisamplefvNV);
         storage::GetMultisamplefvNV.aliased(&storage::GetMultisamplefv);
         storage::GetPointerv.aliased(&storage::GetPointervEXT);
         storage::GetPointervEXT.aliased(&storage::GetPointerv);
         storage::GetQueryiv.aliased(&storage::GetQueryivARB);
         storage::GetQueryivARB.aliased(&storage::GetQueryiv);
         storage::GetQueryObjecti64v.aliased(&storage::GetQueryObjecti64vEXT);
         storage::GetQueryObjecti64vEXT.aliased(&storage::GetQueryObjecti64v);
         storage::GetQueryObjectiv.aliased(&storage::GetQueryObjectivARB);
         storage::GetQueryObjectivARB.aliased(&storage::GetQueryObjectiv);
         storage::GetQueryObjectui64v.aliased(&storage::GetQueryObjectui64vEXT);
         storage::GetQueryObjectui64vEXT.aliased(&storage::GetQueryObjectui64v);
         storage::GetQueryObjectuiv.aliased(&storage::GetQueryObjectuivARB);
         storage::GetQueryObjectuivARB.aliased(&storage::GetQueryObjectuiv);
         storage::GetRenderbufferParameteriv.aliased(&storage::GetRenderbufferParameterivEXT);
         storage::GetRenderbufferParameterivEXT.aliased(&storage::GetRenderbufferParameteriv);
         storage::GetShaderSource.aliased(&storage::GetShaderSourceARB);
         storage::GetShaderSourceARB.aliased(&storage::GetShaderSource);
         storage::GetTexParameterIiv.aliased(&storage::GetTexParameterIivEXT);
         storage::GetTexParameterIivEXT.aliased(&storage::GetTexParameterIiv);
         storage::GetTexParameterIuiv.aliased(&storage::GetTexParameterIuivEXT);
         storage::GetTexParameterIuivEXT.aliased(&storage::GetTexParameterIuiv);
         storage::GetTransformFeedbackVarying.aliased(&storage::GetTransformFeedbackVaryingEXT);
         storage::GetTransformFeedbackVaryingEXT.aliased(&storage::GetTransformFeedbackVarying);
         storage::GetUniformfv.aliased(&storage::GetUniformfvARB);
         storage::GetUniformfvARB.aliased(&storage::GetUniformfv);
         storage::GetUniformiv.aliased(&storage::GetUniformivARB);
         storage::GetUniformivARB.aliased(&storage::GetUniformiv);
         storage::GetUniformLocation.aliased(&storage::GetUniformLocationARB);
         storage::GetUniformLocationARB.aliased(&storage::GetUniformLocation);
         storage::GetUniformuiv.aliased(&storage::GetUniformuivEXT);
         storage::GetUniformuivEXT.aliased(&storage::GetUniformuiv);
         storage::GetVertexAttribdv.aliased(&storage::GetVertexAttribdvARB);
         storage::GetVertexAttribdv.aliased(&storage::GetVertexAttribdvNV);
         storage::GetVertexAttribdvARB.aliased(&storage::GetVertexAttribdv);
         storage::GetVertexAttribdvARB.aliased(&storage::GetVertexAttribdvNV);
         storage::GetVertexAttribdvNV.aliased(&storage::GetVertexAttribdv);
         storage::GetVertexAttribdvNV.aliased(&storage::GetVertexAttribdvARB);
         storage::GetVertexAttribfv.aliased(&storage::GetVertexAttribfvARB);
         storage::GetVertexAttribfv.aliased(&storage::GetVertexAttribfvNV);
         storage::GetVertexAttribfvARB.aliased(&storage::GetVertexAttribfv);
         storage::GetVertexAttribfvARB.aliased(&storage::GetVertexAttribfvNV);
         storage::GetVertexAttribfvNV.aliased(&storage::GetVertexAttribfvARB);
         storage::GetVertexAttribfvNV.aliased(&storage::GetVertexAttribfv);
         storage::GetVertexAttribIiv.aliased(&storage::GetVertexAttribIivEXT);
         storage::GetVertexAttribIivEXT.aliased(&storage::GetVertexAttribIiv);
         storage::GetVertexAttribIuiv.aliased(&storage::GetVertexAttribIuivEXT);
         storage::GetVertexAttribIuivEXT.aliased(&storage::GetVertexAttribIuiv);
         storage::GetVertexAttribiv.aliased(&storage::GetVertexAttribivNV);
         storage::GetVertexAttribiv.aliased(&storage::GetVertexAttribivARB);
         storage::GetVertexAttribivARB.aliased(&storage::GetVertexAttribivNV);
         storage::GetVertexAttribivARB.aliased(&storage::GetVertexAttribiv);
         storage::GetVertexAttribivNV.aliased(&storage::GetVertexAttribiv);
         storage::GetVertexAttribivNV.aliased(&storage::GetVertexAttribivARB);
         storage::GetVertexAttribLdv.aliased(&storage::GetVertexAttribLdvEXT);
         storage::GetVertexAttribLdvEXT.aliased(&storage::GetVertexAttribLdv);
         storage::GetVertexAttribPointerv.aliased(&storage::GetVertexAttribPointervNV);
         storage::GetVertexAttribPointerv.aliased(&storage::GetVertexAttribPointervARB);
         storage::GetVertexAttribPointervARB.aliased(&storage::GetVertexAttribPointervNV);
         storage::GetVertexAttribPointervARB.aliased(&storage::GetVertexAttribPointerv);
         storage::GetVertexAttribPointervNV.aliased(&storage::GetVertexAttribPointerv);
         storage::GetVertexAttribPointervNV.aliased(&storage::GetVertexAttribPointervARB);
         storage::Histogram.aliased(&storage::HistogramEXT);
         storage::HistogramEXT.aliased(&storage::Histogram);
         storage::IsBuffer.aliased(&storage::IsBufferARB);
         storage::IsBufferARB.aliased(&storage::IsBuffer);
         storage::IsEnabledi.aliased(&storage::IsEnabledIndexedEXT);
         storage::IsEnabledIndexedEXT.aliased(&storage::IsEnabledi);
         storage::IsFramebuffer.aliased(&storage::IsFramebufferEXT);
         storage::IsFramebufferEXT.aliased(&storage::IsFramebuffer);
         storage::IsProgramARB.aliased(&storage::IsProgramNV);
         storage::IsProgramNV.aliased(&storage::IsProgramARB);
         storage::IsQuery.aliased(&storage::IsQueryARB);
         storage::IsQueryARB.aliased(&storage::IsQuery);
         storage::IsRenderbuffer.aliased(&storage::IsRenderbufferEXT);
         storage::IsRenderbufferEXT.aliased(&storage::IsRenderbuffer);
         storage::IsTransformFeedback.aliased(&storage::IsTransformFeedbackNV);
         storage::IsTransformFeedbackNV.aliased(&storage::IsTransformFeedback);
         storage::IsVertexArray.aliased(&storage::IsVertexArrayAPPLE);
         storage::IsVertexArrayAPPLE.aliased(&storage::IsVertexArray);
         storage::LinkProgram.aliased(&storage::LinkProgramARB);
         storage::LinkProgramARB.aliased(&storage::LinkProgram);
         storage::LoadTransposeMatrixd.aliased(&storage::LoadTransposeMatrixdARB);
         storage::LoadTransposeMatrixdARB.aliased(&storage::LoadTransposeMatrixd);
         storage::LoadTransposeMatrixf.aliased(&storage::LoadTransposeMatrixfARB);
         storage::LoadTransposeMatrixfARB.aliased(&storage::LoadTransposeMatrixf);
         storage::MapBuffer.aliased(&storage::MapBufferARB);
         storage::MapBufferARB.aliased(&storage::MapBuffer);
         storage::MaxShaderCompilerThreadsARB.aliased(&storage::MaxShaderCompilerThreadsKHR);
         storage::MaxShaderCompilerThreadsKHR.aliased(&storage::MaxShaderCompilerThreadsARB);
         storage::MemoryBarrier.aliased(&storage::MemoryBarrierEXT);
         storage::MemoryBarrierEXT.aliased(&storage::MemoryBarrier);
         storage::Minmax.aliased(&storage::MinmaxEXT);
         storage::MinmaxEXT.aliased(&storage::Minmax);
         storage::MinSampleShading.aliased(&storage::MinSampleShadingARB);
         storage::MinSampleShadingARB.aliased(&storage::MinSampleShading);
         storage::MultiDrawArrays.aliased(&storage::MultiDrawArraysEXT);
         storage::MultiDrawArraysEXT.aliased(&storage::MultiDrawArrays);
         storage::MultiDrawArraysIndirect.aliased(&storage::MultiDrawArraysIndirectAMD);
         storage::MultiDrawArraysIndirectAMD.aliased(&storage::MultiDrawArraysIndirect);
         storage::MultiDrawArraysIndirectCount.aliased(&storage::MultiDrawArraysIndirectCountARB);
         storage::MultiDrawArraysIndirectCountARB.aliased(&storage::MultiDrawArraysIndirectCount);
         storage::MultiDrawElements.aliased(&storage::MultiDrawElementsEXT);
         storage::MultiDrawElementsEXT.aliased(&storage::MultiDrawElements);
         storage::MultiDrawElementsIndirect.aliased(&storage::MultiDrawElementsIndirectAMD);
         storage::MultiDrawElementsIndirectAMD.aliased(&storage::MultiDrawElementsIndirect);
         storage::MultiDrawElementsIndirectCount.aliased(&storage::MultiDrawElementsIndirectCountARB);
         storage::MultiDrawElementsIndirectCountARB.aliased(&storage::MultiDrawElementsIndirectCount);
         storage::MultiTexCoord1d.aliased(&storage::MultiTexCoord1dARB);
         storage::MultiTexCoord1dARB.aliased(&storage::MultiTexCoord1d);
         storage::MultiTexCoord1dv.aliased(&storage::MultiTexCoord1dvARB);
         storage::MultiTexCoord1dvARB.aliased(&storage::MultiTexCoord1dv);
         storage::MultiTexCoord1f.aliased(&storage::MultiTexCoord1fARB);
         storage::MultiTexCoord1fARB.aliased(&storage::MultiTexCoord1f);
         storage::MultiTexCoord1fv.aliased(&storage::MultiTexCoord1fvARB);
         storage::MultiTexCoord1fvARB.aliased(&storage::MultiTexCoord1fv);
         storage::MultiTexCoord1i.aliased(&storage::MultiTexCoord1iARB);
         storage::MultiTexCoord1iARB.aliased(&storage::MultiTexCoord1i);
         storage::MultiTexCoord1iv.aliased(&storage::MultiTexCoord1ivARB);
         storage::MultiTexCoord1ivARB.aliased(&storage::MultiTexCoord1iv);
         storage::MultiTexCoord1s.aliased(&storage::MultiTexCoord1sARB);
         storage::MultiTexCoord1sARB.aliased(&storage::MultiTexCoord1s);
         storage::MultiTexCoord1sv.aliased(&storage::MultiTexCoord1svARB);
         storage::MultiTexCoord1svARB.aliased(&storage::MultiTexCoord1sv);
         storage::MultiTexCoord2d.aliased(&storage::MultiTexCoord2dARB);
         storage::MultiTexCoord2dARB.aliased(&storage::MultiTexCoord2d);
         storage::MultiTexCoord2dv.aliased(&storage::MultiTexCoord2dvARB);
         storage::MultiTexCoord2dvARB.aliased(&storage::MultiTexCoord2dv);
         storage::MultiTexCoord2f.aliased(&storage::MultiTexCoord2fARB);
         storage::MultiTexCoord2fARB.aliased(&storage::MultiTexCoord2f);
         storage::MultiTexCoord2fv.aliased(&storage::MultiTexCoord2fvARB);
         storage::MultiTexCoord2fvARB.aliased(&storage::MultiTexCoord2fv);
         storage::MultiTexCoord2i.aliased(&storage::MultiTexCoord2iARB);
         storage::MultiTexCoord2iARB.aliased(&storage::MultiTexCoord2i);
         storage::MultiTexCoord2iv.aliased(&storage::MultiTexCoord2ivARB);
         storage::MultiTexCoord2ivARB.aliased(&storage::MultiTexCoord2iv);
         storage::MultiTexCoord2s.aliased(&storage::MultiTexCoord2sARB);
         storage::MultiTexCoord2sARB.aliased(&storage::MultiTexCoord2s);
         storage::MultiTexCoord2sv.aliased(&storage::MultiTexCoord2svARB);
         storage::MultiTexCoord2svARB.aliased(&storage::MultiTexCoord2sv);
         storage::MultiTexCoord3d.aliased(&storage::MultiTexCoord3dARB);
         storage::MultiTexCoord3dARB.aliased(&storage::MultiTexCoord3d);
         storage::MultiTexCoord3dv.aliased(&storage::MultiTexCoord3dvARB);
         storage::MultiTexCoord3dvARB.aliased(&storage::MultiTexCoord3dv);
         storage::MultiTexCoord3f.aliased(&storage::MultiTexCoord3fARB);
         storage::MultiTexCoord3fARB.aliased(&storage::MultiTexCoord3f);
         storage::MultiTexCoord3fv.aliased(&storage::MultiTexCoord3fvARB);
         storage::MultiTexCoord3fvARB.aliased(&storage::MultiTexCoord3fv);
         storage::MultiTexCoord3i.aliased(&storage::MultiTexCoord3iARB);
         storage::MultiTexCoord3iARB.aliased(&storage::MultiTexCoord3i);
         storage::MultiTexCoord3iv.aliased(&storage::MultiTexCoord3ivARB);
         storage::MultiTexCoord3ivARB.aliased(&storage::MultiTexCoord3iv);
         storage::MultiTexCoord3s.aliased(&storage::MultiTexCoord3sARB);
         storage::MultiTexCoord3sARB.aliased(&storage::MultiTexCoord3s);
         storage::MultiTexCoord3sv.aliased(&storage::MultiTexCoord3svARB);
         storage::MultiTexCoord3svARB.aliased(&storage::MultiTexCoord3sv);
         storage::MultiTexCoord4d.aliased(&storage::MultiTexCoord4dARB);
         storage::MultiTexCoord4dARB.aliased(&storage::MultiTexCoord4d);
         storage::MultiTexCoord4dv.aliased(&storage::MultiTexCoord4dvARB);
         storage::MultiTexCoord4dvARB.aliased(&storage::MultiTexCoord4dv);
         storage::MultiTexCoord4f.aliased(&storage::MultiTexCoord4fARB);
         storage::MultiTexCoord4fARB.aliased(&storage::MultiTexCoord4f);
         storage::MultiTexCoord4fv.aliased(&storage::MultiTexCoord4fvARB);
         storage::MultiTexCoord4fvARB.aliased(&storage::MultiTexCoord4fv);
         storage::MultiTexCoord4i.aliased(&storage::MultiTexCoord4iARB);
         storage::MultiTexCoord4iARB.aliased(&storage::MultiTexCoord4i);
         storage::MultiTexCoord4iv.aliased(&storage::MultiTexCoord4ivARB);
         storage::MultiTexCoord4ivARB.aliased(&storage::MultiTexCoord4iv);
         storage::MultiTexCoord4s.aliased(&storage::MultiTexCoord4sARB);
         storage::MultiTexCoord4sARB.aliased(&storage::MultiTexCoord4s);
         storage::MultiTexCoord4sv.aliased(&storage::MultiTexCoord4svARB);
         storage::MultiTexCoord4svARB.aliased(&storage::MultiTexCoord4sv);
         storage::MultTransposeMatrixd.aliased(&storage::MultTransposeMatrixdARB);
         storage::MultTransposeMatrixdARB.aliased(&storage::MultTransposeMatrixd);
         storage::MultTransposeMatrixf.aliased(&storage::MultTransposeMatrixfARB);
         storage::MultTransposeMatrixfARB.aliased(&storage::MultTransposeMatrixf);
         storage::NamedBufferStorage.aliased(&storage::NamedBufferStorageEXT);
         storage::NamedBufferStorageEXT.aliased(&storage::NamedBufferStorage);
         storage::NamedBufferSubData.aliased(&storage::NamedBufferSubDataEXT);
         storage::NamedBufferSubDataEXT.aliased(&storage::NamedBufferSubData);
         storage::PauseTransformFeedback.aliased(&storage::PauseTransformFeedbackNV);
         storage::PauseTransformFeedbackNV.aliased(&storage::PauseTransformFeedback);
         storage::PointParameterf.aliased(&storage::PointParameterfEXT);
         storage::PointParameterf.aliased(&storage::PointParameterfSGIS);
         storage::PointParameterf.aliased(&storage::PointParameterfARB);
         storage::PointParameterfARB.aliased(&storage::PointParameterfEXT);
         storage::PointParameterfARB.aliased(&storage::PointParameterfSGIS);
         storage::PointParameterfARB.aliased(&storage::PointParameterf);
         storage::PointParameterfEXT.aliased(&storage::PointParameterfSGIS);
         storage::PointParameterfEXT.aliased(&storage::PointParameterf);
         storage::PointParameterfEXT.aliased(&storage::PointParameterfARB);
         storage::PointParameterfSGIS.aliased(&storage::PointParameterfEXT);
         storage::PointParameterfSGIS.aliased(&storage::PointParameterf);
         storage::PointParameterfSGIS.aliased(&storage::PointParameterfARB);
         storage::PointParameterfv.aliased(&storage::PointParameterfvARB);
         storage::PointParameterfv.aliased(&storage::PointParameterfvEXT);
         storage::PointParameterfv.aliased(&storage::PointParameterfvSGIS);
         storage::PointParameterfvARB.aliased(&storage::PointParameterfv);
         storage::PointParameterfvARB.aliased(&storage::PointParameterfvEXT);
         storage::PointParameterfvARB.aliased(&storage::PointParameterfvSGIS);
         storage::PointParameterfvEXT.aliased(&storage::PointParameterfv);
         storage::PointParameterfvEXT.aliased(&storage::PointParameterfvARB);
         storage::PointParameterfvEXT.aliased(&storage::PointParameterfvSGIS);
         storage::PointParameterfvSGIS.aliased(&storage::PointParameterfv);
         storage::PointParameterfvSGIS.aliased(&storage::PointParameterfvARB);
         storage::PointParameterfvSGIS.aliased(&storage::PointParameterfvEXT);
         storage::PointParameteri.aliased(&storage::PointParameteriNV);
         storage::PointParameteriNV.aliased(&storage::PointParameteri);
         storage::PointParameteriv.aliased(&storage::PointParameterivNV);
         storage::PointParameterivNV.aliased(&storage::PointParameteriv);
         storage::PolygonOffsetClamp.aliased(&storage::PolygonOffsetClampEXT);
         storage::PolygonOffsetClampEXT.aliased(&storage::PolygonOffsetClamp);
         storage::PrimitiveBoundingBox.aliased(&storage::PrimitiveBoundingBoxARB);
         storage::PrimitiveBoundingBoxARB.aliased(&storage::PrimitiveBoundingBox);
         storage::PrioritizeTextures.aliased(&storage::PrioritizeTexturesEXT);
         storage::PrioritizeTexturesEXT.aliased(&storage::PrioritizeTextures);
         storage::ProgramParameteri.aliased(&storage::ProgramParameteriARB);
         storage::ProgramParameteri.aliased(&storage::ProgramParameteriEXT);
         storage::ProgramParameteriARB.aliased(&storage::ProgramParameteri);
         storage::ProgramParameteriARB.aliased(&storage::ProgramParameteriEXT);
         storage::ProgramParameteriEXT.aliased(&storage::ProgramParameteriARB);
         storage::ProgramParameteriEXT.aliased(&storage::ProgramParameteri);
         storage::ProgramUniform1f.aliased(&storage::ProgramUniform1fEXT);
         storage::ProgramUniform1fEXT.aliased(&storage::ProgramUniform1f);
         storage::ProgramUniform1fv.aliased(&storage::ProgramUniform1fvEXT);
         storage::ProgramUniform1fvEXT.aliased(&storage::ProgramUniform1fv);
         storage::ProgramUniform1i.aliased(&storage::ProgramUniform1iEXT);
         storage::ProgramUniform1iEXT.aliased(&storage::ProgramUniform1i);
         storage::ProgramUniform1iv.aliased(&storage::ProgramUniform1ivEXT);
         storage::ProgramUniform1ivEXT.aliased(&storage::ProgramUniform1iv);
         storage::ProgramUniform1ui.aliased(&storage::ProgramUniform1uiEXT);
         storage::ProgramUniform1uiEXT.aliased(&storage::ProgramUniform1ui);
         storage::ProgramUniform1uiv.aliased(&storage::ProgramUniform1uivEXT);
         storage::ProgramUniform1uivEXT.aliased(&storage::ProgramUniform1uiv);
         storage::ProgramUniform2f.aliased(&storage::ProgramUniform2fEXT);
         storage::ProgramUniform2fEXT.aliased(&storage::ProgramUniform2f);
         storage::ProgramUniform2fv.aliased(&storage::ProgramUniform2fvEXT);
         storage::ProgramUniform2fvEXT.aliased(&storage::ProgramUniform2fv);
         storage::ProgramUniform2i.aliased(&storage::ProgramUniform2iEXT);
         storage::ProgramUniform2iEXT.aliased(&storage::ProgramUniform2i);
         storage::ProgramUniform2iv.aliased(&storage::ProgramUniform2ivEXT);
         storage::ProgramUniform2ivEXT.aliased(&storage::ProgramUniform2iv);
         storage::ProgramUniform2ui.aliased(&storage::ProgramUniform2uiEXT);
         storage::ProgramUniform2uiEXT.aliased(&storage::ProgramUniform2ui);
         storage::ProgramUniform2uiv.aliased(&storage::ProgramUniform2uivEXT);
         storage::ProgramUniform2uivEXT.aliased(&storage::ProgramUniform2uiv);
         storage::ProgramUniform3f.aliased(&storage::ProgramUniform3fEXT);
         storage::ProgramUniform3fEXT.aliased(&storage::ProgramUniform3f);
         storage::ProgramUniform3fv.aliased(&storage::ProgramUniform3fvEXT);
         storage::ProgramUniform3fvEXT.aliased(&storage::ProgramUniform3fv);
         storage::ProgramUniform3i.aliased(&storage::ProgramUniform3iEXT);
         storage::ProgramUniform3iEXT.aliased(&storage::ProgramUniform3i);
         storage::ProgramUniform3iv.aliased(&storage::ProgramUniform3ivEXT);
         storage::ProgramUniform3ivEXT.aliased(&storage::ProgramUniform3iv);
         storage::ProgramUniform3ui.aliased(&storage::ProgramUniform3uiEXT);
         storage::ProgramUniform3uiEXT.aliased(&storage::ProgramUniform3ui);
         storage::ProgramUniform3uiv.aliased(&storage::ProgramUniform3uivEXT);
         storage::ProgramUniform3uivEXT.aliased(&storage::ProgramUniform3uiv);
         storage::ProgramUniform4f.aliased(&storage::ProgramUniform4fEXT);
         storage::ProgramUniform4fEXT.aliased(&storage::ProgramUniform4f);
         storage::ProgramUniform4fv.aliased(&storage::ProgramUniform4fvEXT);
         storage::ProgramUniform4fvEXT.aliased(&storage::ProgramUniform4fv);
         storage::ProgramUniform4i.aliased(&storage::ProgramUniform4iEXT);
         storage::ProgramUniform4iEXT.aliased(&storage::ProgramUniform4i);
         storage::ProgramUniform4iv.aliased(&storage::ProgramUniform4ivEXT);
         storage::ProgramUniform4ivEXT.aliased(&storage::ProgramUniform4iv);
         storage::ProgramUniform4ui.aliased(&storage::ProgramUniform4uiEXT);
         storage::ProgramUniform4uiEXT.aliased(&storage::ProgramUniform4ui);
         storage::ProgramUniform4uiv.aliased(&storage::ProgramUniform4uivEXT);
         storage::ProgramUniform4uivEXT.aliased(&storage::ProgramUniform4uiv);
         storage::ProgramUniformMatrix2fv.aliased(&storage::ProgramUniformMatrix2fvEXT);
         storage::ProgramUniformMatrix2fvEXT.aliased(&storage::ProgramUniformMatrix2fv);
         storage::ProgramUniformMatrix2x3fv.aliased(&storage::ProgramUniformMatrix2x3fvEXT);
         storage::ProgramUniformMatrix2x3fvEXT.aliased(&storage::ProgramUniformMatrix2x3fv);
         storage::ProgramUniformMatrix2x4fv.aliased(&storage::ProgramUniformMatrix2x4fvEXT);
         storage::ProgramUniformMatrix2x4fvEXT.aliased(&storage::ProgramUniformMatrix2x4fv);
         storage::ProgramUniformMatrix3fv.aliased(&storage::ProgramUniformMatrix3fvEXT);
         storage::ProgramUniformMatrix3fvEXT.aliased(&storage::ProgramUniformMatrix3fv);
         storage::ProgramUniformMatrix3x2fv.aliased(&storage::ProgramUniformMatrix3x2fvEXT);
         storage::ProgramUniformMatrix3x2fvEXT.aliased(&storage::ProgramUniformMatrix3x2fv);
         storage::ProgramUniformMatrix3x4fv.aliased(&storage::ProgramUniformMatrix3x4fvEXT);
         storage::ProgramUniformMatrix3x4fvEXT.aliased(&storage::ProgramUniformMatrix3x4fv);
         storage::ProgramUniformMatrix4fv.aliased(&storage::ProgramUniformMatrix4fvEXT);
         storage::ProgramUniformMatrix4fvEXT.aliased(&storage::ProgramUniformMatrix4fv);
         storage::ProgramUniformMatrix4x2fv.aliased(&storage::ProgramUniformMatrix4x2fvEXT);
         storage::ProgramUniformMatrix4x2fvEXT.aliased(&storage::ProgramUniformMatrix4x2fv);
         storage::ProgramUniformMatrix4x3fv.aliased(&storage::ProgramUniformMatrix4x3fvEXT);
         storage::ProgramUniformMatrix4x3fvEXT.aliased(&storage::ProgramUniformMatrix4x3fv);
         storage::ProvokingVertex.aliased(&storage::ProvokingVertexEXT);
         storage::ProvokingVertexEXT.aliased(&storage::ProvokingVertex);
         storage::ReadnPixels.aliased(&storage::ReadnPixelsARB);
         storage::ReadnPixelsARB.aliased(&storage::ReadnPixels);
         storage::RenderbufferStorage.aliased(&storage::RenderbufferStorageEXT);
         storage::RenderbufferStorageEXT.aliased(&storage::RenderbufferStorage);
         storage::RenderbufferStorageMultisample.aliased(&storage::RenderbufferStorageMultisampleEXT);
         storage::RenderbufferStorageMultisampleEXT.aliased(&storage::RenderbufferStorageMultisample);
         storage::ResetHistogram.aliased(&storage::ResetHistogramEXT);
         storage::ResetHistogramEXT.aliased(&storage::ResetHistogram);
         storage::ResetMinmax.aliased(&storage::ResetMinmaxEXT);
         storage::ResetMinmaxEXT.aliased(&storage::ResetMinmax);
         storage::ResumeTransformFeedback.aliased(&storage::ResumeTransformFeedbackNV);
         storage::ResumeTransformFeedbackNV.aliased(&storage::ResumeTransformFeedback);
         storage::SampleCoverage.aliased(&storage::SampleCoverageARB);
         storage::SampleCoverageARB.aliased(&storage::SampleCoverage);
         storage::SampleMaskEXT.aliased(&storage::SampleMaskSGIS);
         storage::SampleMaskSGIS.aliased(&storage::SampleMaskEXT);
         storage::SamplePatternEXT.aliased(&storage::SamplePatternSGIS);
         storage::SamplePatternSGIS.aliased(&storage::SamplePatternEXT);
         storage::SecondaryColor3b.aliased(&storage::SecondaryColor3bEXT);
         storage::SecondaryColor3bEXT.aliased(&storage::SecondaryColor3b);
         storage::SecondaryColor3bv.aliased(&storage::SecondaryColor3bvEXT);
         storage::SecondaryColor3bvEXT.aliased(&storage::SecondaryColor3bv);
         storage::SecondaryColor3d.aliased(&storage::SecondaryColor3dEXT);
         storage::SecondaryColor3dEXT.aliased(&storage::SecondaryColor3d);
         storage::SecondaryColor3dv.aliased(&storage::SecondaryColor3dvEXT);
         storage::SecondaryColor3dvEXT.aliased(&storage::SecondaryColor3dv);
         storage::SecondaryColor3f.aliased(&storage::SecondaryColor3fEXT);
         storage::SecondaryColor3fEXT.aliased(&storage::SecondaryColor3f);
         storage::SecondaryColor3fv.aliased(&storage::SecondaryColor3fvEXT);
         storage::SecondaryColor3fvEXT.aliased(&storage::SecondaryColor3fv);
         storage::SecondaryColor3i.aliased(&storage::SecondaryColor3iEXT);
         storage::SecondaryColor3iEXT.aliased(&storage::SecondaryColor3i);
         storage::SecondaryColor3iv.aliased(&storage::SecondaryColor3ivEXT);
         storage::SecondaryColor3ivEXT.aliased(&storage::SecondaryColor3iv);
         storage::SecondaryColor3s.aliased(&storage::SecondaryColor3sEXT);
         storage::SecondaryColor3sEXT.aliased(&storage::SecondaryColor3s);
         storage::SecondaryColor3sv.aliased(&storage::SecondaryColor3svEXT);
         storage::SecondaryColor3svEXT.aliased(&storage::SecondaryColor3sv);
         storage::SecondaryColor3ub.aliased(&storage::SecondaryColor3ubEXT);
         storage::SecondaryColor3ubEXT.aliased(&storage::SecondaryColor3ub);
         storage::SecondaryColor3ubv.aliased(&storage::SecondaryColor3ubvEXT);
         storage::SecondaryColor3ubvEXT.aliased(&storage::SecondaryColor3ubv);
         storage::SecondaryColor3ui.aliased(&storage::SecondaryColor3uiEXT);
         storage::SecondaryColor3uiEXT.aliased(&storage::SecondaryColor3ui);
         storage::SecondaryColor3uiv.aliased(&storage::SecondaryColor3uivEXT);
         storage::SecondaryColor3uivEXT.aliased(&storage::SecondaryColor3uiv);
         storage::SecondaryColor3us.aliased(&storage::SecondaryColor3usEXT);
         storage::SecondaryColor3usEXT.aliased(&storage::SecondaryColor3us);
         storage::SecondaryColor3usv.aliased(&storage::SecondaryColor3usvEXT);
         storage::SecondaryColor3usvEXT.aliased(&storage::SecondaryColor3usv);
         storage::SecondaryColorPointer.aliased(&storage::SecondaryColorPointerEXT);
         storage::SecondaryColorPointerEXT.aliased(&storage::SecondaryColorPointer);
         storage::SeparableFilter2D.aliased(&storage::SeparableFilter2DEXT);
         storage::SeparableFilter2DEXT.aliased(&storage::SeparableFilter2D);
         storage::ShaderSource.aliased(&storage::ShaderSourceARB);
         storage::ShaderSourceARB.aliased(&storage::ShaderSource);
         storage::SpecializeShader.aliased(&storage::SpecializeShaderARB);
         storage::SpecializeShaderARB.aliased(&storage::SpecializeShader);
         storage::StencilOpSeparate.aliased(&storage::StencilOpSeparateATI);
         storage::StencilOpSeparateATI.aliased(&storage::StencilOpSeparate);
         storage::TexBuffer.aliased(&storage::TexBufferARB);
         storage::TexBuffer.aliased(&storage::TexBufferEXT);
         storage::TexBufferARB.aliased(&storage::TexBuffer);
         storage::TexBufferARB.aliased(&storage::TexBufferEXT);
         storage::TexBufferEXT.aliased(&storage::TexBuffer);
         storage::TexBufferEXT.aliased(&storage::TexBufferARB);
         storage::TexImage3D.aliased(&storage::TexImage3DEXT);
         storage::TexImage3DEXT.aliased(&storage::TexImage3D);
         storage::TexParameterIiv.aliased(&storage::TexParameterIivEXT);
         storage::TexParameterIivEXT.aliased(&storage::TexParameterIiv);
         storage::TexParameterIuiv.aliased(&storage::TexParameterIuivEXT);
         storage::TexParameterIuivEXT.aliased(&storage::TexParameterIuiv);
         storage::TexSubImage1D.aliased(&storage::TexSubImage1DEXT);
         storage::TexSubImage1DEXT.aliased(&storage::TexSubImage1D);
         storage::TexSubImage2D.aliased(&storage::TexSubImage2DEXT);
         storage::TexSubImage2DEXT.aliased(&storage::TexSubImage2D);
         storage::TexSubImage3D.aliased(&storage::TexSubImage3DEXT);
         storage::TexSubImage3DEXT.aliased(&storage::TexSubImage3D);
         storage::TransformFeedbackVaryings.aliased(&storage::TransformFeedbackVaryingsEXT);
         storage::TransformFeedbackVaryingsEXT.aliased(&storage::TransformFeedbackVaryings);
         storage::Uniform1f.aliased(&storage::Uniform1fARB);
         storage::Uniform1fARB.aliased(&storage::Uniform1f);
         storage::Uniform1fv.aliased(&storage::Uniform1fvARB);
         storage::Uniform1fvARB.aliased(&storage::Uniform1fv);
         storage::Uniform1i.aliased(&storage::Uniform1iARB);
         storage::Uniform1iARB.aliased(&storage::Uniform1i);
         storage::Uniform1iv.aliased(&storage::Uniform1ivARB);
         storage::Uniform1ivARB.aliased(&storage::Uniform1iv);
         storage::Uniform1ui.aliased(&storage::Uniform1uiEXT);
         storage::Uniform1uiEXT.aliased(&storage::Uniform1ui);
         storage::Uniform1uiv.aliased(&storage::Uniform1uivEXT);
         storage::Uniform1uivEXT.aliased(&storage::Uniform1uiv);
         storage::Uniform2f.aliased(&storage::Uniform2fARB);
         storage::Uniform2fARB.aliased(&storage::Uniform2f);
         storage::Uniform2fv.aliased(&storage::Uniform2fvARB);
         storage::Uniform2fvARB.aliased(&storage::Uniform2fv);
         storage::Uniform2i.aliased(&storage::Uniform2iARB);
         storage::Uniform2iARB.aliased(&storage::Uniform2i);
         storage::Uniform2iv.aliased(&storage::Uniform2ivARB);
         storage::Uniform2ivARB.aliased(&storage::Uniform2iv);
         storage::Uniform2ui.aliased(&storage::Uniform2uiEXT);
         storage::Uniform2uiEXT.aliased(&storage::Uniform2ui);
         storage::Uniform2uiv.aliased(&storage::Uniform2uivEXT);
         storage::Uniform2uivEXT.aliased(&storage::Uniform2uiv);
         storage::Uniform3f.aliased(&storage::Uniform3fARB);
         storage::Uniform3fARB.aliased(&storage::Uniform3f);
         storage::Uniform3fv.aliased(&storage::Uniform3fvARB);
         storage::Uniform3fvARB.aliased(&storage::Uniform3fv);
         storage::Uniform3i.aliased(&storage::Uniform3iARB);
         storage::Uniform3iARB.aliased(&storage::Uniform3i);
         storage::Uniform3iv.aliased(&storage::Uniform3ivARB);
         storage::Uniform3ivARB.aliased(&storage::Uniform3iv);
         storage::Uniform3ui.aliased(&storage::Uniform3uiEXT);
         storage::Uniform3uiEXT.aliased(&storage::Uniform3ui);
         storage::Uniform3uiv.aliased(&storage::Uniform3uivEXT);
         storage::Uniform3uivEXT.aliased(&storage::Uniform3uiv);
         storage::Uniform4f.aliased(&storage::Uniform4fARB);
         storage::Uniform4fARB.aliased(&storage::Uniform4f);
         storage::Uniform4fv.aliased(&storage::Uniform4fvARB);
         storage::Uniform4fvARB.aliased(&storage::Uniform4fv);
         storage::Uniform4i.aliased(&storage::Uniform4iARB);
         storage::Uniform4iARB.aliased(&storage::Uniform4i);
         storage::Uniform4iv.aliased(&storage::Uniform4ivARB);
         storage::Uniform4ivARB.aliased(&storage::Uniform4iv);
         storage::Uniform4ui.aliased(&storage::Uniform4uiEXT);
         storage::Uniform4uiEXT.aliased(&storage::Uniform4ui);
         storage::Uniform4uiv.aliased(&storage::Uniform4uivEXT);
         storage::Uniform4uivEXT.aliased(&storage::Uniform4uiv);
         storage::UniformMatrix2fv.aliased(&storage::UniformMatrix2fvARB);
         storage::UniformMatrix2fvARB.aliased(&storage::UniformMatrix2fv);
         storage::UniformMatrix3fv.aliased(&storage::UniformMatrix3fvARB);
         storage::UniformMatrix3fvARB.aliased(&storage::UniformMatrix3fv);
         storage::UniformMatrix4fv.aliased(&storage::UniformMatrix4fvARB);
         storage::UniformMatrix4fvARB.aliased(&storage::UniformMatrix4fv);
         storage::UnmapBuffer.aliased(&storage::UnmapBufferARB);
         storage::UnmapBufferARB.aliased(&storage::UnmapBuffer);
         storage::UseProgram.aliased(&storage::UseProgramObjectARB);
         storage::UseProgramObjectARB.aliased(&storage::UseProgram);
         storage::ValidateProgram.aliased(&storage::ValidateProgramARB);
         storage::ValidateProgramARB.aliased(&storage::ValidateProgram);
         storage::VertexAttrib1d.aliased(&storage::VertexAttrib1dNV);
         storage::VertexAttrib1d.aliased(&storage::VertexAttrib1dARB);
         storage::VertexAttrib1dARB.aliased(&storage::VertexAttrib1dNV);
         storage::VertexAttrib1dARB.aliased(&storage::VertexAttrib1d);
         storage::VertexAttrib1dNV.aliased(&storage::VertexAttrib1d);
         storage::VertexAttrib1dNV.aliased(&storage::VertexAttrib1dARB);
         storage::VertexAttrib1dv.aliased(&storage::VertexAttrib1dvARB);
         storage::VertexAttrib1dv.aliased(&storage::VertexAttrib1dvNV);
         storage::VertexAttrib1dvARB.aliased(&storage::VertexAttrib1dvNV);
         storage::VertexAttrib1dvARB.aliased(&storage::VertexAttrib1dv);
         storage::VertexAttrib1dvNV.aliased(&storage::VertexAttrib1dvARB);
         storage::VertexAttrib1dvNV.aliased(&storage::VertexAttrib1dv);
         storage::VertexAttrib1f.aliased(&storage::VertexAttrib1fNV);
         storage::VertexAttrib1f.aliased(&storage::VertexAttrib1fARB);
         storage::VertexAttrib1fARB.aliased(&storage::VertexAttrib1fNV);
         storage::VertexAttrib1fARB.aliased(&storage::VertexAttrib1f);
         storage::VertexAttrib1fNV.aliased(&storage::VertexAttrib1fARB);
         storage::VertexAttrib1fNV.aliased(&storage::VertexAttrib1f);
         storage::VertexAttrib1fv.aliased(&storage::VertexAttrib1fvARB);
         storage::VertexAttrib1fv.aliased(&storage::VertexAttrib1fvNV);
         storage::VertexAttrib1fvARB.aliased(&storage::VertexAttrib1fvNV);
         storage::VertexAttrib1fvARB.aliased(&storage::VertexAttrib1fv);
         storage::VertexAttrib1fvNV.aliased(&storage::VertexAttrib1fvARB);
         storage::VertexAttrib1fvNV.aliased(&storage::VertexAttrib1fv);
         storage::VertexAttrib1s.aliased(&storage::VertexAttrib1sNV);
         storage::VertexAttrib1s.aliased(&storage::VertexAttrib1sARB);
         storage::VertexAttrib1sARB.aliased(&storage::VertexAttrib1sNV);
         storage::VertexAttrib1sARB.aliased(&storage::VertexAttrib1s);
         storage::VertexAttrib1sNV.aliased(&storage::VertexAttrib1s);
         storage::VertexAttrib1sNV.aliased(&storage::VertexAttrib1sARB);
         storage::VertexAttrib1sv.aliased(&storage::VertexAttrib1svNV);
         storage::VertexAttrib1sv.aliased(&storage::VertexAttrib1svARB);
         storage::VertexAttrib1svARB.aliased(&storage::VertexAttrib1svNV);
         storage::VertexAttrib1svARB.aliased(&storage::VertexAttrib1sv);
         storage::VertexAttrib1svNV.aliased(&storage::VertexAttrib1svARB);
         storage::VertexAttrib1svNV.aliased(&storage::VertexAttrib1sv);
         storage::VertexAttrib2d.aliased(&storage::VertexAttrib2dARB);
         storage::VertexAttrib2d.aliased(&storage::VertexAttrib2dNV);
         storage::VertexAttrib2dARB.aliased(&storage::VertexAttrib2d);
         storage::VertexAttrib2dARB.aliased(&storage::VertexAttrib2dNV);
         storage::VertexAttrib2dNV.aliased(&storage::VertexAttrib2dARB);
         storage::VertexAttrib2dNV.aliased(&storage::VertexAttrib2d);
         storage::VertexAttrib2dv.aliased(&storage::VertexAttrib2dvARB);
         storage::VertexAttrib2dv.aliased(&storage::VertexAttrib2dvNV);
         storage::VertexAttrib2dvARB.aliased(&storage::VertexAttrib2dv);
         storage::VertexAttrib2dvARB.aliased(&storage::VertexAttrib2dvNV);
         storage::VertexAttrib2dvNV.aliased(&storage::VertexAttrib2dv);
         storage::VertexAttrib2dvNV.aliased(&storage::VertexAttrib2dvARB);
         storage::VertexAttrib2f.aliased(&storage::VertexAttrib2fARB);
         storage::VertexAttrib2f.aliased(&storage::VertexAttrib2fNV);
         storage::VertexAttrib2fARB.aliased(&storage::VertexAttrib2fNV);
         storage::VertexAttrib2fARB.aliased(&storage::VertexAttrib2f);
         storage::VertexAttrib2fNV.aliased(&storage::VertexAttrib2fARB);
         storage::VertexAttrib2fNV.aliased(&storage::VertexAttrib2f);
         storage::VertexAttrib2fv.aliased(&storage::VertexAttrib2fvNV);
         storage::VertexAttrib2fv.aliased(&storage::VertexAttrib2fvARB);
         storage::VertexAttrib2fvARB.aliased(&storage::VertexAttrib2fvNV);
         storage::VertexAttrib2fvARB.aliased(&storage::VertexAttrib2fv);
         storage::VertexAttrib2fvNV.aliased(&storage::VertexAttrib2fvARB);
         storage::VertexAttrib2fvNV.aliased(&storage::VertexAttrib2fv);
         storage::VertexAttrib2s.aliased(&storage::VertexAttrib2sARB);
         storage::VertexAttrib2s.aliased(&storage::VertexAttrib2sNV);
         storage::VertexAttrib2sARB.aliased(&storage::VertexAttrib2s);
         storage::VertexAttrib2sARB.aliased(&storage::VertexAttrib2sNV);
         storage::VertexAttrib2sNV.aliased(&storage::VertexAttrib2sARB);
         storage::VertexAttrib2sNV.aliased(&storage::VertexAttrib2s);
         storage::VertexAttrib2sv.aliased(&storage::VertexAttrib2svARB);
         storage::VertexAttrib2sv.aliased(&storage::VertexAttrib2svNV);
         storage::VertexAttrib2svARB.aliased(&storage::VertexAttrib2sv);
         storage::VertexAttrib2svARB.aliased(&storage::VertexAttrib2svNV);
         storage::VertexAttrib2svNV.aliased(&storage::VertexAttrib2sv);
         storage::VertexAttrib2svNV.aliased(&storage::VertexAttrib2svARB);
         storage::VertexAttrib3d.aliased(&storage::VertexAttrib3dARB);
         storage::VertexAttrib3d.aliased(&storage::VertexAttrib3dNV);
         storage::VertexAttrib3dARB.aliased(&storage::VertexAttrib3d);
         storage::VertexAttrib3dARB.aliased(&storage::VertexAttrib3dNV);
         storage::VertexAttrib3dNV.aliased(&storage::VertexAttrib3dARB);
         storage::VertexAttrib3dNV.aliased(&storage::VertexAttrib3d);
         storage::VertexAttrib3dv.aliased(&storage::VertexAttrib3dvARB);
         storage::VertexAttrib3dv.aliased(&storage::VertexAttrib3dvNV);
         storage::VertexAttrib3dvARB.aliased(&storage::VertexAttrib3dv);
         storage::VertexAttrib3dvARB.aliased(&storage::VertexAttrib3dvNV);
         storage::VertexAttrib3dvNV.aliased(&storage::VertexAttrib3dv);
         storage::VertexAttrib3dvNV.aliased(&storage::VertexAttrib3dvARB);
         storage::VertexAttrib3f.aliased(&storage::VertexAttrib3fARB);
         storage::VertexAttrib3f.aliased(&storage::VertexAttrib3fNV);
         storage::VertexAttrib3fARB.aliased(&storage::VertexAttrib3f);
         storage::VertexAttrib3fARB.aliased(&storage::VertexAttrib3fNV);
         storage::VertexAttrib3fNV.aliased(&storage::VertexAttrib3f);
         storage::VertexAttrib3fNV.aliased(&storage::VertexAttrib3fARB);
         storage::VertexAttrib3fv.aliased(&storage::VertexAttrib3fvNV);
         storage::VertexAttrib3fv.aliased(&storage::VertexAttrib3fvARB);
         storage::VertexAttrib3fvARB.aliased(&storage::VertexAttrib3fvNV);
         storage::VertexAttrib3fvARB.aliased(&storage::VertexAttrib3fv);
         storage::VertexAttrib3fvNV.aliased(&storage::VertexAttrib3fv);
         storage::VertexAttrib3fvNV.aliased(&storage::VertexAttrib3fvARB);
         storage::VertexAttrib3s.aliased(&storage::VertexAttrib3sARB);
         storage::VertexAttrib3s.aliased(&storage::VertexAttrib3sNV);
         storage::VertexAttrib3sARB.aliased(&storage::VertexAttrib3s);
         storage::VertexAttrib3sARB.aliased(&storage::VertexAttrib3sNV);
         storage::VertexAttrib3sNV.aliased(&storage::VertexAttrib3sARB);
         storage::VertexAttrib3sNV.aliased(&storage::VertexAttrib3s);
         storage::VertexAttrib3sv.aliased(&storage::VertexAttrib3svARB);
         storage::VertexAttrib3sv.aliased(&storage::VertexAttrib3svNV);
         storage::VertexAttrib3svARB.aliased(&storage::VertexAttrib3sv);
         storage::VertexAttrib3svARB.aliased(&storage::VertexAttrib3svNV);
         storage::VertexAttrib3svNV.aliased(&storage::VertexAttrib3sv);
         storage::VertexAttrib3svNV.aliased(&storage::VertexAttrib3svARB);
         storage::VertexAttrib4bv.aliased(&storage::VertexAttrib4bvARB);
         storage::VertexAttrib4bvARB.aliased(&storage::VertexAttrib4bv);
         storage::VertexAttrib4d.aliased(&storage::VertexAttrib4dNV);
         storage::VertexAttrib4d.aliased(&storage::VertexAttrib4dARB);
         storage::VertexAttrib4dARB.aliased(&storage::VertexAttrib4dNV);
         storage::VertexAttrib4dARB.aliased(&storage::VertexAttrib4d);
         storage::VertexAttrib4dNV.aliased(&storage::VertexAttrib4d);
         storage::VertexAttrib4dNV.aliased(&storage::VertexAttrib4dARB);
         storage::VertexAttrib4dv.aliased(&storage::VertexAttrib4dvNV);
         storage::VertexAttrib4dv.aliased(&storage::VertexAttrib4dvARB);
         storage::VertexAttrib4dvARB.aliased(&storage::VertexAttrib4dvNV);
         storage::VertexAttrib4dvARB.aliased(&storage::VertexAttrib4dv);
         storage::VertexAttrib4dvNV.aliased(&storage::VertexAttrib4dvARB);
         storage::VertexAttrib4dvNV.aliased(&storage::VertexAttrib4dv);
         storage::VertexAttrib4f.aliased(&storage::VertexAttrib4fNV);
         storage::VertexAttrib4f.aliased(&storage::VertexAttrib4fARB);
         storage::VertexAttrib4fARB.aliased(&storage::VertexAttrib4f);
         storage::VertexAttrib4fARB.aliased(&storage::VertexAttrib4fNV);
         storage::VertexAttrib4fNV.aliased(&storage::VertexAttrib4f);
         storage::VertexAttrib4fNV.aliased(&storage::VertexAttrib4fARB);
         storage::VertexAttrib4fv.aliased(&storage::VertexAttrib4fvARB);
         storage::VertexAttrib4fv.aliased(&storage::VertexAttrib4fvNV);
         storage::VertexAttrib4fvARB.aliased(&storage::VertexAttrib4fv);
         storage::VertexAttrib4fvARB.aliased(&storage::VertexAttrib4fvNV);
         storage::VertexAttrib4fvNV.aliased(&storage::VertexAttrib4fv);
         storage::VertexAttrib4fvNV.aliased(&storage::VertexAttrib4fvARB);
         storage::VertexAttrib4iv.aliased(&storage::VertexAttrib4ivARB);
         storage::VertexAttrib4ivARB.aliased(&storage::VertexAttrib4iv);
         storage::VertexAttrib4Nbv.aliased(&storage::VertexAttrib4NbvARB);
         storage::VertexAttrib4NbvARB.aliased(&storage::VertexAttrib4Nbv);
         storage::VertexAttrib4Niv.aliased(&storage::VertexAttrib4NivARB);
         storage::VertexAttrib4NivARB.aliased(&storage::VertexAttrib4Niv);
         storage::VertexAttrib4Nsv.aliased(&storage::VertexAttrib4NsvARB);
         storage::VertexAttrib4NsvARB.aliased(&storage::VertexAttrib4Nsv);
         storage::VertexAttrib4Nub.aliased(&storage::VertexAttrib4ubNV);
         storage::VertexAttrib4Nub.aliased(&storage::VertexAttrib4NubARB);
         storage::VertexAttrib4NubARB.aliased(&storage::VertexAttrib4Nub);
         storage::VertexAttrib4NubARB.aliased(&storage::VertexAttrib4ubNV);
         storage::VertexAttrib4Nubv.aliased(&storage::VertexAttrib4ubvNV);
         storage::VertexAttrib4Nubv.aliased(&storage::VertexAttrib4NubvARB);
         storage::VertexAttrib4NubvARB.aliased(&storage::VertexAttrib4ubvNV);
         storage::VertexAttrib4NubvARB.aliased(&storage::VertexAttrib4Nubv);
         storage::VertexAttrib4Nuiv.aliased(&storage::VertexAttrib4NuivARB);
         storage::VertexAttrib4NuivARB.aliased(&storage::VertexAttrib4Nuiv);
         storage::VertexAttrib4Nusv.aliased(&storage::VertexAttrib4NusvARB);
         storage::VertexAttrib4NusvARB.aliased(&storage::VertexAttrib4Nusv);
         storage::VertexAttrib4s.aliased(&storage::VertexAttrib4sNV);
         storage::VertexAttrib4s.aliased(&storage::VertexAttrib4sARB);
         storage::VertexAttrib4sARB.aliased(&storage::VertexAttrib4sNV);
         storage::VertexAttrib4sARB.aliased(&storage::VertexAttrib4s);
         storage::VertexAttrib4sNV.aliased(&storage::VertexAttrib4s);
         storage::VertexAttrib4sNV.aliased(&storage::VertexAttrib4sARB);
         storage::VertexAttrib4sv.aliased(&storage::VertexAttrib4svARB);
         storage::VertexAttrib4sv.aliased(&storage::VertexAttrib4svNV);
         storage::VertexAttrib4svARB.aliased(&storage::VertexAttrib4sv);
         storage::VertexAttrib4svARB.aliased(&storage::VertexAttrib4svNV);
         storage::VertexAttrib4svNV.aliased(&storage::VertexAttrib4svARB);
         storage::VertexAttrib4svNV.aliased(&storage::VertexAttrib4sv);
         storage::VertexAttrib4ubNV.aliased(&storage::VertexAttrib4Nub);
         storage::VertexAttrib4ubNV.aliased(&storage::VertexAttrib4NubARB);
         storage::VertexAttrib4ubv.aliased(&storage::VertexAttrib4ubvARB);
         storage::VertexAttrib4ubvARB.aliased(&storage::VertexAttrib4ubv);
         storage::VertexAttrib4ubvNV.aliased(&storage::VertexAttrib4Nubv);
         storage::VertexAttrib4ubvNV.aliased(&storage::VertexAttrib4NubvARB);
         storage::VertexAttrib4uiv.aliased(&storage::VertexAttrib4uivARB);
         storage::VertexAttrib4uivARB.aliased(&storage::VertexAttrib4uiv);
         storage::VertexAttrib4usv.aliased(&storage::VertexAttrib4usvARB);
         storage::VertexAttrib4usvARB.aliased(&storage::VertexAttrib4usv);
         storage::VertexAttribDivisor.aliased(&storage::VertexAttribDivisorARB);
         storage::VertexAttribDivisorARB.aliased(&storage::VertexAttribDivisor);
         storage::VertexAttribI1i.aliased(&storage::VertexAttribI1iEXT);
         storage::VertexAttribI1iEXT.aliased(&storage::VertexAttribI1i);
         storage::VertexAttribI1iv.aliased(&storage::VertexAttribI1ivEXT);
         storage::VertexAttribI1ivEXT.aliased(&storage::VertexAttribI1iv);
         storage::VertexAttribI1ui.aliased(&storage::VertexAttribI1uiEXT);
         storage::VertexAttribI1uiEXT.aliased(&storage::VertexAttribI1ui);
         storage::VertexAttribI1uiv.aliased(&storage::VertexAttribI1uivEXT);
         storage::VertexAttribI1uivEXT.aliased(&storage::VertexAttribI1uiv);
         storage::VertexAttribI2i.aliased(&storage::VertexAttribI2iEXT);
         storage::VertexAttribI2iEXT.aliased(&storage::VertexAttribI2i);
         storage::VertexAttribI2iv.aliased(&storage::VertexAttribI2ivEXT);
         storage::VertexAttribI2ivEXT.aliased(&storage::VertexAttribI2iv);
         storage::VertexAttribI2ui.aliased(&storage::VertexAttribI2uiEXT);
         storage::VertexAttribI2uiEXT.aliased(&storage::VertexAttribI2ui);
         storage::VertexAttribI2uiv.aliased(&storage::VertexAttribI2uivEXT);
         storage::VertexAttribI2uivEXT.aliased(&storage::VertexAttribI2uiv);
         storage::VertexAttribI3i.aliased(&storage::VertexAttribI3iEXT);
         storage::VertexAttribI3iEXT.aliased(&storage::VertexAttribI3i);
         storage::VertexAttribI3iv.aliased(&storage::VertexAttribI3ivEXT);
         storage::VertexAttribI3ivEXT.aliased(&storage::VertexAttribI3iv);
         storage::VertexAttribI3ui.aliased(&storage::VertexAttribI3uiEXT);
         storage::VertexAttribI3uiEXT.aliased(&storage::VertexAttribI3ui);
         storage::VertexAttribI3uiv.aliased(&storage::VertexAttribI3uivEXT);
         storage::VertexAttribI3uivEXT.aliased(&storage::VertexAttribI3uiv);
         storage::VertexAttribI4bv.aliased(&storage::VertexAttribI4bvEXT);
         storage::VertexAttribI4bvEXT.aliased(&storage::VertexAttribI4bv);
         storage::VertexAttribI4i.aliased(&storage::VertexAttribI4iEXT);
         storage::VertexAttribI4iEXT.aliased(&storage::VertexAttribI4i);
         storage::VertexAttribI4iv.aliased(&storage::VertexAttribI4ivEXT);
         storage::VertexAttribI4ivEXT.aliased(&storage::VertexAttribI4iv);
         storage::VertexAttribI4sv.aliased(&storage::VertexAttribI4svEXT);
         storage::VertexAttribI4svEXT.aliased(&storage::VertexAttribI4sv);
         storage::VertexAttribI4ubv.aliased(&storage::VertexAttribI4ubvEXT);
         storage::VertexAttribI4ubvEXT.aliased(&storage::VertexAttribI4ubv);
         storage::VertexAttribI4ui.aliased(&storage::VertexAttribI4uiEXT);
         storage::VertexAttribI4uiEXT.aliased(&storage::VertexAttribI4ui);
         storage::VertexAttribI4uiv.aliased(&storage::VertexAttribI4uivEXT);
         storage::VertexAttribI4uivEXT.aliased(&storage::VertexAttribI4uiv);
         storage::VertexAttribI4usv.aliased(&storage::VertexAttribI4usvEXT);
         storage::VertexAttribI4usvEXT.aliased(&storage::VertexAttribI4usv);
         storage::VertexAttribIPointer.aliased(&storage::VertexAttribIPointerEXT);
         storage::VertexAttribIPointerEXT.aliased(&storage::VertexAttribIPointer);
         storage::VertexAttribL1d.aliased(&storage::VertexAttribL1dEXT);
         storage::VertexAttribL1dEXT.aliased(&storage::VertexAttribL1d);
         storage::VertexAttribL1dv.aliased(&storage::VertexAttribL1dvEXT);
         storage::VertexAttribL1dvEXT.aliased(&storage::VertexAttribL1dv);
         storage::VertexAttribL2d.aliased(&storage::VertexAttribL2dEXT);
         storage::VertexAttribL2dEXT.aliased(&storage::VertexAttribL2d);
         storage::VertexAttribL2dv.aliased(&storage::VertexAttribL2dvEXT);
         storage::VertexAttribL2dvEXT.aliased(&storage::VertexAttribL2dv);
         storage::VertexAttribL3d.aliased(&storage::VertexAttribL3dEXT);
         storage::VertexAttribL3dEXT.aliased(&storage::VertexAttribL3d);
         storage::VertexAttribL3dv.aliased(&storage::VertexAttribL3dvEXT);
         storage::VertexAttribL3dvEXT.aliased(&storage::VertexAttribL3dv);
         storage::VertexAttribL4d.aliased(&storage::VertexAttribL4dEXT);
         storage::VertexAttribL4dEXT.aliased(&storage::VertexAttribL4d);
         storage::VertexAttribL4dv.aliased(&storage::VertexAttribL4dvEXT);
         storage::VertexAttribL4dvEXT.aliased(&storage::VertexAttribL4dv);
         storage::VertexAttribLPointer.aliased(&storage::VertexAttribLPointerEXT);
         storage::VertexAttribLPointerEXT.aliased(&storage::VertexAttribLPointer);
         storage::VertexAttribPointer.aliased(&storage::VertexAttribPointerARB);
         storage::VertexAttribPointerARB.aliased(&storage::VertexAttribPointer);
         storage::WindowPos2d.aliased(&storage::WindowPos2dARB);
         storage::WindowPos2d.aliased(&storage::WindowPos2dMESA);
         storage::WindowPos2dARB.aliased(&storage::WindowPos2d);
         storage::WindowPos2dARB.aliased(&storage::WindowPos2dMESA);
         storage::WindowPos2dMESA.aliased(&storage::WindowPos2dARB);
         storage::WindowPos2dMESA.aliased(&storage::WindowPos2d);
         storage::WindowPos2dv.aliased(&storage::WindowPos2dvMESA);
         storage::WindowPos2dv.aliased(&storage::WindowPos2dvARB);
         storage::WindowPos2dvARB.aliased(&storage::WindowPos2dvMESA);
         storage::WindowPos2dvARB.aliased(&storage::WindowPos2dv);
         storage::WindowPos2dvMESA.aliased(&storage::WindowPos2dv);
         storage::WindowPos2dvMESA.aliased(&storage::WindowPos2dvARB);
         storage::WindowPos2f.aliased(&storage::WindowPos2fARB);
         storage::WindowPos2f.aliased(&storage::WindowPos2fMESA);
         storage::WindowPos2fARB.aliased(&storage::WindowPos2f);
         storage::WindowPos2fARB.aliased(&storage::WindowPos2fMESA);
         storage::WindowPos2fMESA.aliased(&storage::WindowPos2f);
         storage::WindowPos2fMESA.aliased(&storage::WindowPos2fARB);
         storage::WindowPos2fv.aliased(&storage::WindowPos2fvMESA);
         storage::WindowPos2fv.aliased(&storage::WindowPos2fvARB);
         storage::WindowPos2fvARB.aliased(&storage::WindowPos2fvMESA);
         storage::WindowPos2fvARB.aliased(&storage::WindowPos2fv);
         storage::WindowPos2fvMESA.aliased(&storage::WindowPos2fv);
         storage::WindowPos2fvMESA.aliased(&storage::WindowPos2fvARB);
         storage::WindowPos2i.aliased(&storage::WindowPos2iMESA);
         storage::WindowPos2i.aliased(&storage::WindowPos2iARB);
         storage::WindowPos2iARB.aliased(&storage::WindowPos2i);
         storage::WindowPos2iARB.aliased(&storage::WindowPos2iMESA);
         storage::WindowPos2iMESA.aliased(&storage::WindowPos2i);
         storage::WindowPos2iMESA.aliased(&storage::WindowPos2iARB);
         storage::WindowPos2iv.aliased(&storage::WindowPos2ivARB);
         storage::WindowPos2iv.aliased(&storage::WindowPos2ivMESA);
         storage::WindowPos2ivARB.aliased(&storage::WindowPos2ivMESA);
         storage::WindowPos2ivARB.aliased(&storage::WindowPos2iv);
         storage::WindowPos2ivMESA.aliased(&storage::WindowPos2ivARB);
         storage::WindowPos2ivMESA.aliased(&storage::WindowPos2iv);
         storage::WindowPos2s.aliased(&storage::WindowPos2sARB);
         storage::WindowPos2s.aliased(&storage::WindowPos2sMESA);
         storage::WindowPos2sARB.aliased(&storage::WindowPos2s);
         storage::WindowPos2sARB.aliased(&storage::WindowPos2sMESA);
         storage::WindowPos2sMESA.aliased(&storage::WindowPos2sARB);
         storage::WindowPos2sMESA.aliased(&storage::WindowPos2s);
         storage::WindowPos2sv.aliased(&storage::WindowPos2svARB);
         storage::WindowPos2sv.aliased(&storage::WindowPos2svMESA);
         storage::WindowPos2svARB.aliased(&storage::WindowPos2sv);
         storage::WindowPos2svARB.aliased(&storage::WindowPos2svMESA);
         storage::WindowPos2svMESA.aliased(&storage::WindowPos2sv);
         storage::WindowPos2svMESA.aliased(&storage::WindowPos2svARB);
         storage::WindowPos3d.aliased(&storage::WindowPos3dMESA);
         storage::WindowPos3d.aliased(&storage::WindowPos3dARB);
         storage::WindowPos3dARB.aliased(&storage::WindowPos3d);
         storage::WindowPos3dARB.aliased(&storage::WindowPos3dMESA);
         storage::WindowPos3dMESA.aliased(&storage::WindowPos3d);
         storage::WindowPos3dMESA.aliased(&storage::WindowPos3dARB);
         storage::WindowPos3dv.aliased(&storage::WindowPos3dvARB);
         storage::WindowPos3dv.aliased(&storage::WindowPos3dvMESA);
         storage::WindowPos3dvARB.aliased(&storage::WindowPos3dv);
         storage::WindowPos3dvARB.aliased(&storage::WindowPos3dvMESA);
         storage::WindowPos3dvMESA.aliased(&storage::WindowPos3dv);
         storage::WindowPos3dvMESA.aliased(&storage::WindowPos3dvARB);
         storage::WindowPos3f.aliased(&storage::WindowPos3fMESA);
         storage::WindowPos3f.aliased(&storage::WindowPos3fARB);
         storage::WindowPos3fARB.aliased(&storage::WindowPos3fMESA);
         storage::WindowPos3fARB.aliased(&storage::WindowPos3f);
         storage::WindowPos3fMESA.aliased(&storage::WindowPos3f);
         storage::WindowPos3fMESA.aliased(&storage::WindowPos3fARB);
         storage::WindowPos3fv.aliased(&storage::WindowPos3fvMESA);
         storage::WindowPos3fv.aliased(&storage::WindowPos3fvARB);
         storage::WindowPos3fvARB.aliased(&storage::WindowPos3fvMESA);
         storage::WindowPos3fvARB.aliased(&storage::WindowPos3fv);
         storage::WindowPos3fvMESA.aliased(&storage::WindowPos3fv);
         storage::WindowPos3fvMESA.aliased(&storage::WindowPos3fvARB);
         storage::WindowPos3i.aliased(&storage::WindowPos3iMESA);
         storage::WindowPos3i.aliased(&storage::WindowPos3iARB);
         storage::WindowPos3iARB.aliased(&storage::WindowPos3iMESA);
         storage::WindowPos3iARB.aliased(&storage::WindowPos3i);
         storage::WindowPos3iMESA.aliased(&storage::WindowPos3i);
         storage::WindowPos3iMESA.aliased(&storage::WindowPos3iARB);
         storage::WindowPos3iv.aliased(&storage::WindowPos3ivARB);
         storage::WindowPos3iv.aliased(&storage::WindowPos3ivMESA);
         storage::WindowPos3ivARB.aliased(&storage::WindowPos3iv);
         storage::WindowPos3ivARB.aliased(&storage::WindowPos3ivMESA);
         storage::WindowPos3ivMESA.aliased(&storage::WindowPos3iv);
         storage::WindowPos3ivMESA.aliased(&storage::WindowPos3ivARB);
         storage::WindowPos3s.aliased(&storage::WindowPos3sMESA);
         storage::WindowPos3s.aliased(&storage::WindowPos3sARB);
         storage::WindowPos3sARB.aliased(&storage::WindowPos3sMESA);
         storage::WindowPos3sARB.aliased(&storage::WindowPos3s);
         storage::WindowPos3sMESA.aliased(&storage::WindowPos3sARB);
         storage::WindowPos3sMESA.aliased(&storage::WindowPos3s);
         storage::WindowPos3sv.aliased(&storage::WindowPos3svARB);
         storage::WindowPos3sv.aliased(&storage::WindowPos3svMESA);
         storage::WindowPos3svARB.aliased(&storage::WindowPos3sv);
         storage::WindowPos3svARB.aliased(&storage::WindowPos3svMESA);
         storage::WindowPos3svMESA.aliased(&storage::WindowPos3svARB);
         storage::WindowPos3svMESA.aliased(&storage::WindowPos3sv);
    }
}

