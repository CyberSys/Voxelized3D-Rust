
pub use self::types::*;
pub use self::enumerations::*;
pub use self::functions::*;

use std::os::raw;

pub struct FnPtr {
    ptr: *const raw::c_void,
    is_loaded: bool
}

impl FnPtr {
    pub fn empty() -> FnPtr {
        FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false }
    }

    pub fn load<F>(&mut self, loadfn: &mut F, name: &'static str) where F: FnMut(&'static str) -> *const raw::c_void {
        let loaded = loadfn(name);
        if !loaded.is_null() {
            self.ptr = loaded;
            self.is_loaded = true;
        } else {
            self.ptr = FnPtr::not_initialized as *const raw::c_void;
            self.is_loaded = false;
        };
    }

    pub fn aliased(&mut self, other: &FnPtr) {
        if !self.is_loaded && other.is_loaded {
            self.ptr = other.ptr;
            self.is_loaded = other.is_loaded;
        }
    }

    #[inline(never)]
    fn not_initialized() -> ! { panic!("vulkan: function not initialized") }
}

pub mod types {
#![allow(dead_code, non_camel_case_types, non_snake_case)]


use std;

// types required for: xcb
pub type xcb_connection_t = std::os::raw::c_void;
pub type xcb_window_t = u32;
pub type xcb_visualid_t = u32;
// types required for: xlib(_xrandr)
pub type Display = std::os::raw::c_void;
pub type RROutput = std::os::raw::c_ulong;
pub type Window = std::os::raw::c_ulong;
pub type VisualID = std::os::raw::c_ulong;
// types required for: win32
pub type BOOL = std::os::raw::c_int;
pub type DWORD = std::os::raw::c_ulong;
pub type LPVOID = *mut std::os::raw::c_void;
pub type HANDLE = *mut std::os::raw::c_void;
pub type WCHAR = u16;
pub type LPCWSTR = *const WCHAR;
pub type HINSTANCE = *mut std::os::raw::c_void;
pub type HWND = *mut std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SECURITY_ATTRIBUTES {
    nLength: DWORD,
    lpSecurityDescriptor: LPVOID,
    bInheritHandle: BOOL,
}
// types required for: wayland
pub type wl_display = std::os::raw::c_void;
pub type wl_surface = std::os::raw::c_void;
// types required for: android
pub type AHardwareBuffer = std::os::raw::c_void;
pub type ANativeWindow = std::os::raw::c_void;
// types required for: mir
pub type MirConnection = std::os::raw::c_void;
pub type MirSurface = std::os::raw::c_void;


#[macro_export]
macro_rules! VK_MAKE_VERSION {
    ($major:expr, $minor:expr, $patch:expr) => ((($major) << 22) | (($minor) << 12) | ($patch));
}

#[macro_export]
macro_rules! VK_VERSION_MAJOR { ($version:expr) => ($version >> 22); }
#[macro_export]
macro_rules! VK_VERSION_MINOR { ($version:expr) => (($version >> 12) & 0x3ff); }
#[macro_export]
macro_rules! VK_VERSION_PATCH { ($version:expr) => ($version & 0xfff); }

#[macro_export]
macro_rules! VK_DEFINE_NON_DISPATCHABLE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(u64);
    );
}

#[macro_export]
macro_rules! VK_DEFINE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(*const std::os::raw::c_void);
    );
}

VK_DEFINE_HANDLE!(VkInstance);
VK_DEFINE_HANDLE!(VkPhysicalDevice);
VK_DEFINE_HANDLE!(VkDevice);
VK_DEFINE_HANDLE!(VkQueue);
VK_DEFINE_HANDLE!(VkCommandBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDeviceMemory);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkCommandPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBufferView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImage);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImageView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkShaderModule);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipeline);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSampler);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSet);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSetLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFence);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSemaphore);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkEvent);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkQueryPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFramebuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkRenderPass);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineCache);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkObjectTableNVX);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkIndirectCommandsLayoutNVX);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorUpdateTemplate);
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSamplerYcbcrConversion);
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkValidationCacheEXT);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkAccelerationStructureNV);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPerformanceConfigurationINTEL);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDisplayKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDisplayModeKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSurfaceKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSwapchainKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDebugReportCallbackEXT);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDebugUtilsMessengerEXT);

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentLoadOp {
     VK_ATTACHMENT_LOAD_OP_LOAD = 0,
     VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
     VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentStoreOp {
     VK_ATTACHMENT_STORE_OP_STORE = 0,
     VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendFactor {
     VK_BLEND_FACTOR_ZERO = 0,
     VK_BLEND_FACTOR_ONE = 1,
     VK_BLEND_FACTOR_SRC_COLOR = 2,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
     VK_BLEND_FACTOR_DST_COLOR = 4,
     VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
     VK_BLEND_FACTOR_SRC_ALPHA = 6,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
     VK_BLEND_FACTOR_DST_ALPHA = 8,
     VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
     VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
     VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
     VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
     VK_BLEND_FACTOR_SRC1_COLOR = 15,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
     VK_BLEND_FACTOR_SRC1_ALPHA = 17,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendOp {
     VK_BLEND_OP_ADD = 0,
     VK_BLEND_OP_SUBTRACT = 1,
     VK_BLEND_OP_REVERSE_SUBTRACT = 2,
     VK_BLEND_OP_MIN = 3,
     VK_BLEND_OP_MAX = 4,
     VK_BLEND_OP_ZERO_EXT = 1000148000,
     VK_BLEND_OP_SRC_EXT = 1000148001,
     VK_BLEND_OP_DST_EXT = 1000148002,
     VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
     VK_BLEND_OP_DST_OVER_EXT = 1000148004,
     VK_BLEND_OP_SRC_IN_EXT = 1000148005,
     VK_BLEND_OP_DST_IN_EXT = 1000148006,
     VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
     VK_BLEND_OP_DST_OUT_EXT = 1000148008,
     VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
     VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
     VK_BLEND_OP_XOR_EXT = 1000148011,
     VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
     VK_BLEND_OP_SCREEN_EXT = 1000148013,
     VK_BLEND_OP_OVERLAY_EXT = 1000148014,
     VK_BLEND_OP_DARKEN_EXT = 1000148015,
     VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
     VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
     VK_BLEND_OP_COLORBURN_EXT = 1000148018,
     VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
     VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
     VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
     VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
     VK_BLEND_OP_INVERT_EXT = 1000148023,
     VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
     VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
     VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
     VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
     VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
     VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
     VK_BLEND_OP_HARDMIX_EXT = 1000148030,
     VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
     VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
     VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
     VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
     VK_BLEND_OP_PLUS_EXT = 1000148035,
     VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
     VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
     VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
     VK_BLEND_OP_MINUS_EXT = 1000148039,
     VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
     VK_BLEND_OP_CONTRAST_EXT = 1000148041,
     VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
     VK_BLEND_OP_RED_EXT = 1000148043,
     VK_BLEND_OP_GREEN_EXT = 1000148044,
     VK_BLEND_OP_BLUE_EXT = 1000148045,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBorderColor {
     VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
     VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
     VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
     VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
     VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
     VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFramebufferCreateFlagBits {
     VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerCreateFlagBits {
     VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
     VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCacheHeaderVersion {
     VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineShaderStageCreateFlagBits {
     VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1,
     VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorSetLayoutCreateFlagBits {
     VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
     VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceQueueCreateFlagBits {
     VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferCreateFlagBits {
     VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
     VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_BUFFER_CREATE_PROTECTED_BIT = 8,
     VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferUsageFlagBits {
     VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
     VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
     VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
     VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
     VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
     VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
     VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
     VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
     VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
     VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
     VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
     VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
     VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024,
     VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkColorComponentFlagBits {
     VK_COLOR_COMPONENT_R_BIT = 1,
     VK_COLOR_COMPONENT_G_BIT = 2,
     VK_COLOR_COMPONENT_B_BIT = 4,
     VK_COLOR_COMPONENT_A_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkComponentSwizzle {
     VK_COMPONENT_SWIZZLE_IDENTITY = 0,
     VK_COMPONENT_SWIZZLE_ZERO = 1,
     VK_COMPONENT_SWIZZLE_ONE = 2,
     VK_COMPONENT_SWIZZLE_R = 3,
     VK_COMPONENT_SWIZZLE_G = 4,
     VK_COMPONENT_SWIZZLE_B = 5,
     VK_COMPONENT_SWIZZLE_A = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolCreateFlagBits {
     VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
     VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
     VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolResetFlagBits {
     VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferResetFlagBits {
     VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferLevel {
     VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
     VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferUsageFlagBits {
     VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
     VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
     VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCompareOp {
     VK_COMPARE_OP_NEVER = 0,
     VK_COMPARE_OP_LESS = 1,
     VK_COMPARE_OP_EQUAL = 2,
     VK_COMPARE_OP_LESS_OR_EQUAL = 3,
     VK_COMPARE_OP_GREATER = 4,
     VK_COMPARE_OP_NOT_EQUAL = 5,
     VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
     VK_COMPARE_OP_ALWAYS = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCullModeFlagBits {
     VK_CULL_MODE_NONE = 0,
     VK_CULL_MODE_FRONT_BIT = 1,
     VK_CULL_MODE_BACK_BIT = 2,
     VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorType {
     VK_DESCRIPTOR_TYPE_SAMPLER = 0,
     VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
     VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
     VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
     VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
     VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
     VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
     VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
     VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDynamicState {
     VK_DYNAMIC_STATE_VIEWPORT = 0,
     VK_DYNAMIC_STATE_SCISSOR = 1,
     VK_DYNAMIC_STATE_LINE_WIDTH = 2,
     VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
     VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
     VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
     VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
     VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
     VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
     VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
     VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
     VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
     VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
     VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
     VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
     VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceCreateFlagBits {
     VK_FENCE_CREATE_SIGNALED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPolygonMode {
     VK_POLYGON_MODE_FILL = 0,
     VK_POLYGON_MODE_LINE = 1,
     VK_POLYGON_MODE_POINT = 2,
     VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormat {
     VK_FORMAT_UNDEFINED = 0,
     VK_FORMAT_R4G4_UNORM_PACK8 = 1,
     VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
     VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
     VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
     VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
     VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
     VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
     VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
     VK_FORMAT_R8_UNORM = 9,
     VK_FORMAT_R8_SNORM = 10,
     VK_FORMAT_R8_USCALED = 11,
     VK_FORMAT_R8_SSCALED = 12,
     VK_FORMAT_R8_UINT = 13,
     VK_FORMAT_R8_SINT = 14,
     VK_FORMAT_R8_SRGB = 15,
     VK_FORMAT_R8G8_UNORM = 16,
     VK_FORMAT_R8G8_SNORM = 17,
     VK_FORMAT_R8G8_USCALED = 18,
     VK_FORMAT_R8G8_SSCALED = 19,
     VK_FORMAT_R8G8_UINT = 20,
     VK_FORMAT_R8G8_SINT = 21,
     VK_FORMAT_R8G8_SRGB = 22,
     VK_FORMAT_R8G8B8_UNORM = 23,
     VK_FORMAT_R8G8B8_SNORM = 24,
     VK_FORMAT_R8G8B8_USCALED = 25,
     VK_FORMAT_R8G8B8_SSCALED = 26,
     VK_FORMAT_R8G8B8_UINT = 27,
     VK_FORMAT_R8G8B8_SINT = 28,
     VK_FORMAT_R8G8B8_SRGB = 29,
     VK_FORMAT_B8G8R8_UNORM = 30,
     VK_FORMAT_B8G8R8_SNORM = 31,
     VK_FORMAT_B8G8R8_USCALED = 32,
     VK_FORMAT_B8G8R8_SSCALED = 33,
     VK_FORMAT_B8G8R8_UINT = 34,
     VK_FORMAT_B8G8R8_SINT = 35,
     VK_FORMAT_B8G8R8_SRGB = 36,
     VK_FORMAT_R8G8B8A8_UNORM = 37,
     VK_FORMAT_R8G8B8A8_SNORM = 38,
     VK_FORMAT_R8G8B8A8_USCALED = 39,
     VK_FORMAT_R8G8B8A8_SSCALED = 40,
     VK_FORMAT_R8G8B8A8_UINT = 41,
     VK_FORMAT_R8G8B8A8_SINT = 42,
     VK_FORMAT_R8G8B8A8_SRGB = 43,
     VK_FORMAT_B8G8R8A8_UNORM = 44,
     VK_FORMAT_B8G8R8A8_SNORM = 45,
     VK_FORMAT_B8G8R8A8_USCALED = 46,
     VK_FORMAT_B8G8R8A8_SSCALED = 47,
     VK_FORMAT_B8G8R8A8_UINT = 48,
     VK_FORMAT_B8G8R8A8_SINT = 49,
     VK_FORMAT_B8G8R8A8_SRGB = 50,
     VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
     VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
     VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
     VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
     VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
     VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
     VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
     VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
     VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
     VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
     VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
     VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
     VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
     VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
     VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
     VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
     VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
     VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
     VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
     VK_FORMAT_R16_UNORM = 70,
     VK_FORMAT_R16_SNORM = 71,
     VK_FORMAT_R16_USCALED = 72,
     VK_FORMAT_R16_SSCALED = 73,
     VK_FORMAT_R16_UINT = 74,
     VK_FORMAT_R16_SINT = 75,
     VK_FORMAT_R16_SFLOAT = 76,
     VK_FORMAT_R16G16_UNORM = 77,
     VK_FORMAT_R16G16_SNORM = 78,
     VK_FORMAT_R16G16_USCALED = 79,
     VK_FORMAT_R16G16_SSCALED = 80,
     VK_FORMAT_R16G16_UINT = 81,
     VK_FORMAT_R16G16_SINT = 82,
     VK_FORMAT_R16G16_SFLOAT = 83,
     VK_FORMAT_R16G16B16_UNORM = 84,
     VK_FORMAT_R16G16B16_SNORM = 85,
     VK_FORMAT_R16G16B16_USCALED = 86,
     VK_FORMAT_R16G16B16_SSCALED = 87,
     VK_FORMAT_R16G16B16_UINT = 88,
     VK_FORMAT_R16G16B16_SINT = 89,
     VK_FORMAT_R16G16B16_SFLOAT = 90,
     VK_FORMAT_R16G16B16A16_UNORM = 91,
     VK_FORMAT_R16G16B16A16_SNORM = 92,
     VK_FORMAT_R16G16B16A16_USCALED = 93,
     VK_FORMAT_R16G16B16A16_SSCALED = 94,
     VK_FORMAT_R16G16B16A16_UINT = 95,
     VK_FORMAT_R16G16B16A16_SINT = 96,
     VK_FORMAT_R16G16B16A16_SFLOAT = 97,
     VK_FORMAT_R32_UINT = 98,
     VK_FORMAT_R32_SINT = 99,
     VK_FORMAT_R32_SFLOAT = 100,
     VK_FORMAT_R32G32_UINT = 101,
     VK_FORMAT_R32G32_SINT = 102,
     VK_FORMAT_R32G32_SFLOAT = 103,
     VK_FORMAT_R32G32B32_UINT = 104,
     VK_FORMAT_R32G32B32_SINT = 105,
     VK_FORMAT_R32G32B32_SFLOAT = 106,
     VK_FORMAT_R32G32B32A32_UINT = 107,
     VK_FORMAT_R32G32B32A32_SINT = 108,
     VK_FORMAT_R32G32B32A32_SFLOAT = 109,
     VK_FORMAT_R64_UINT = 110,
     VK_FORMAT_R64_SINT = 111,
     VK_FORMAT_R64_SFLOAT = 112,
     VK_FORMAT_R64G64_UINT = 113,
     VK_FORMAT_R64G64_SINT = 114,
     VK_FORMAT_R64G64_SFLOAT = 115,
     VK_FORMAT_R64G64B64_UINT = 116,
     VK_FORMAT_R64G64B64_SINT = 117,
     VK_FORMAT_R64G64B64_SFLOAT = 118,
     VK_FORMAT_R64G64B64A64_UINT = 119,
     VK_FORMAT_R64G64B64A64_SINT = 120,
     VK_FORMAT_R64G64B64A64_SFLOAT = 121,
     VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
     VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
     VK_FORMAT_D16_UNORM = 124,
     VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
     VK_FORMAT_D32_SFLOAT = 126,
     VK_FORMAT_S8_UINT = 127,
     VK_FORMAT_D16_UNORM_S8_UINT = 128,
     VK_FORMAT_D24_UNORM_S8_UINT = 129,
     VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
     VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
     VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
     VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
     VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
     VK_FORMAT_BC2_UNORM_BLOCK = 135,
     VK_FORMAT_BC2_SRGB_BLOCK = 136,
     VK_FORMAT_BC3_UNORM_BLOCK = 137,
     VK_FORMAT_BC3_SRGB_BLOCK = 138,
     VK_FORMAT_BC4_UNORM_BLOCK = 139,
     VK_FORMAT_BC4_SNORM_BLOCK = 140,
     VK_FORMAT_BC5_UNORM_BLOCK = 141,
     VK_FORMAT_BC5_SNORM_BLOCK = 142,
     VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
     VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
     VK_FORMAT_BC7_UNORM_BLOCK = 145,
     VK_FORMAT_BC7_SRGB_BLOCK = 146,
     VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
     VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
     VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
     VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
     VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
     VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
     VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
     VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
     VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
     VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
     VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
     VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
     VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
     VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
     VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
     VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
     VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
     VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
     VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
     VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
     VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
     VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
     VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
     VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
     VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
     VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
     VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
     VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
     VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
     VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
     VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
     VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
     VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
     VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
     VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
     VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
     VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
     VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
     VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
     VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
     VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
     VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
     VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
     VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
     VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
     VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
     VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
     VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
     VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
     VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
     VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
     VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
     VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
     VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
     VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
     VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
     VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
     VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
     VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
     VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
     VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
     VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
     VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
     VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
     VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
     VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
     VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
     VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
     VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
     VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
     VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
     VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
     VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
     VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
     VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
     VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
     VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
     VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
     VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
     VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
     VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
     VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
     VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
     VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormatFeatureFlagBits {
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
     VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
     VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
     VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
     VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
     VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
     VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
     VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
     VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
     VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536,
     VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFrontFace {
     VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
     VK_FRONT_FACE_CLOCKWISE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageAspectFlagBits {
     VK_IMAGE_ASPECT_COLOR_BIT = 1,
     VK_IMAGE_ASPECT_DEPTH_BIT = 2,
     VK_IMAGE_ASPECT_STENCIL_BIT = 4,
     VK_IMAGE_ASPECT_METADATA_BIT = 8,
     VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
     VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
     VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
     VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
     VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
     VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
     VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageCreateFlagBits {
     VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
     VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
     VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
     VK_IMAGE_CREATE_ALIAS_BIT = 1024,
     VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
     VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
     VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
     VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
     VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
     VK_IMAGE_CREATE_DISJOINT_BIT = 512,
     VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
     VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
     VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageLayout {
     VK_IMAGE_LAYOUT_UNDEFINED = 0,
     VK_IMAGE_LAYOUT_GENERAL = 1,
     VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
     VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
     VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
     VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
     VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
     VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
     VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
     VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
     VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
     VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageTiling {
     VK_IMAGE_TILING_OPTIMAL = 0,
     VK_IMAGE_TILING_LINEAR = 1,
     VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageType {
     VK_IMAGE_TYPE_1D = 0,
     VK_IMAGE_TYPE_2D = 1,
     VK_IMAGE_TYPE_3D = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageUsageFlagBits {
     VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
     VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
     VK_IMAGE_USAGE_SAMPLED_BIT = 4,
     VK_IMAGE_USAGE_STORAGE_BIT = 8,
     VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
     VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
     VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
     VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
     VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
     VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageViewCreateFlagBits {
     VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageViewType {
     VK_IMAGE_VIEW_TYPE_1D = 0,
     VK_IMAGE_VIEW_TYPE_2D = 1,
     VK_IMAGE_VIEW_TYPE_3D = 2,
     VK_IMAGE_VIEW_TYPE_CUBE = 3,
     VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
     VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
     VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSharingMode {
     VK_SHARING_MODE_EXCLUSIVE = 0,
     VK_SHARING_MODE_CONCURRENT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndexType {
     VK_INDEX_TYPE_UINT16 = 0,
     VK_INDEX_TYPE_UINT32 = 1,
     VK_INDEX_TYPE_NONE_NV = 1000165000,
     VK_INDEX_TYPE_UINT8_EXT = 1000265000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkLogicOp {
     VK_LOGIC_OP_CLEAR = 0,
     VK_LOGIC_OP_AND = 1,
     VK_LOGIC_OP_AND_REVERSE = 2,
     VK_LOGIC_OP_COPY = 3,
     VK_LOGIC_OP_AND_INVERTED = 4,
     VK_LOGIC_OP_NO_OP = 5,
     VK_LOGIC_OP_XOR = 6,
     VK_LOGIC_OP_OR = 7,
     VK_LOGIC_OP_NOR = 8,
     VK_LOGIC_OP_EQUIVALENT = 9,
     VK_LOGIC_OP_INVERT = 10,
     VK_LOGIC_OP_OR_REVERSE = 11,
     VK_LOGIC_OP_COPY_INVERTED = 12,
     VK_LOGIC_OP_OR_INVERTED = 13,
     VK_LOGIC_OP_NAND = 14,
     VK_LOGIC_OP_SET = 15,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryHeapFlagBits {
     VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccessFlagBits {
     VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
     VK_ACCESS_INDEX_READ_BIT = 2,
     VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
     VK_ACCESS_UNIFORM_READ_BIT = 8,
     VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
     VK_ACCESS_SHADER_READ_BIT = 32,
     VK_ACCESS_SHADER_WRITE_BIT = 64,
     VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
     VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
     VK_ACCESS_TRANSFER_READ_BIT = 2048,
     VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
     VK_ACCESS_HOST_READ_BIT = 8192,
     VK_ACCESS_HOST_WRITE_BIT = 16384,
     VK_ACCESS_MEMORY_READ_BIT = 32768,
     VK_ACCESS_MEMORY_WRITE_BIT = 65536,
     VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
     VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
     VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
     VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
     VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 131072,
     VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 262144,
     VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
     VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
     VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152,
     VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304,
     VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryPropertyFlagBits {
     VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
     VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
     VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
     VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPhysicalDeviceType {
     VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
     VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
     VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
     VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
     VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineBindPoint {
     VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
     VK_PIPELINE_BIND_POINT_COMPUTE = 1,
     VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCreateFlagBits {
     VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
     VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
     VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
     VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
     VK_PIPELINE_CREATE_DISPATCH_BASE = 16,
     VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPrimitiveTopology {
     VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
     VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryControlFlagBits {
     VK_QUERY_CONTROL_PRECISE_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryPipelineStatisticFlagBits {
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
     VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
     VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
     VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryResultFlagBits {
     VK_QUERY_RESULT_64_BIT = 1,
     VK_QUERY_RESULT_WAIT_BIT = 2,
     VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
     VK_QUERY_RESULT_PARTIAL_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryType {
     VK_QUERY_TYPE_OCCLUSION = 0,
     VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
     VK_QUERY_TYPE_TIMESTAMP = 2,
     VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
     VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
     VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueueFlagBits {
     VK_QUEUE_GRAPHICS_BIT = 1,
     VK_QUEUE_COMPUTE_BIT = 2,
     VK_QUEUE_TRANSFER_BIT = 4,
     VK_QUEUE_SPARSE_BINDING_BIT = 8,
     VK_QUEUE_PROTECTED_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubpassContents {
     VK_SUBPASS_CONTENTS_INLINE = 0,
     VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResult {
     VK_SUCCESS = 0,
     VK_NOT_READY = 1,
     VK_TIMEOUT = 2,
     VK_EVENT_SET = 3,
     VK_EVENT_RESET = 4,
     VK_INCOMPLETE = 5,
     VK_ERROR_OUT_OF_HOST_MEMORY = -1,
     VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
     VK_ERROR_INITIALIZATION_FAILED = -3,
     VK_ERROR_DEVICE_LOST = -4,
     VK_ERROR_MEMORY_MAP_FAILED = -5,
     VK_ERROR_LAYER_NOT_PRESENT = -6,
     VK_ERROR_EXTENSION_NOT_PRESENT = -7,
     VK_ERROR_FEATURE_NOT_PRESENT = -8,
     VK_ERROR_INCOMPATIBLE_DRIVER = -9,
     VK_ERROR_TOO_MANY_OBJECTS = -10,
     VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
     VK_ERROR_FRAGMENTED_POOL = -12,
     VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
     VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
     VK_ERROR_SURFACE_LOST_KHR = -1000000000,
     VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
     VK_SUBOPTIMAL_KHR = 1000001003,
     VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
     VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
     VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
     VK_ERROR_INVALID_SHADER_NV = -1000012000,
     VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
     VK_ERROR_FRAGMENTATION_EXT = -1000161000,
     VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
     VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000244000,
     VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderStageFlagBits {
     VK_SHADER_STAGE_VERTEX_BIT = 1,
     VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
     VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
     VK_SHADER_STAGE_GEOMETRY_BIT = 8,
     VK_SHADER_STAGE_FRAGMENT_BIT = 16,
     VK_SHADER_STAGE_COMPUTE_BIT = 32,
     VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
     VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
     VK_SHADER_STAGE_RAYGEN_BIT_NV = 256,
     VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512,
     VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024,
     VK_SHADER_STAGE_MISS_BIT_NV = 2048,
     VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096,
     VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192,
     VK_SHADER_STAGE_TASK_BIT_NV = 64,
     VK_SHADER_STAGE_MESH_BIT_NV = 128,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseMemoryBindFlagBits {
     VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilFaceFlagBits {
     VK_STENCIL_FACE_FRONT_BIT = 1,
     VK_STENCIL_FACE_BACK_BIT = 2,
     VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilOp {
     VK_STENCIL_OP_KEEP = 0,
     VK_STENCIL_OP_ZERO = 1,
     VK_STENCIL_OP_REPLACE = 2,
     VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
     VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
     VK_STENCIL_OP_INVERT = 5,
     VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
     VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStructureType {
     VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
     VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
     VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
     VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
     VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
     VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
     VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
     VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
     VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
     VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
     VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
     VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
     VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
     VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
     VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
     VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
     VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
     VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
     VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
     VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
     VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
     VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
     VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
     VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
     VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
     VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
     VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
     VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
     VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
     VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
     VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
     VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
     VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
     VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
     VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
     VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
     VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
     VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
     VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
     VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
     VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
     VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
     VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
     VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
     VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
     VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
     VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
     VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
     VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
     VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
     VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
     VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
     VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
     VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
     VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
     VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
     VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
     VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
     VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
     VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
     VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
     VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
     VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
     VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
     VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
     VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
     VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
     VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
     VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
     VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
     VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
     VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
     VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
     VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
     VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
     VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
     VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
     VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000,
     VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
     VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
     VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
     VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
     VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
     VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
     VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
     VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
     VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
     VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
     VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
     VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
     VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
     VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002,
     VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003,
     VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
     VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
     VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
     VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
     VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
     VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
     VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
     VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
     VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
     VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
     VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
     VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
     VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
     VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
     VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
     VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
     VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
     VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
     VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
     VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
     VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
     VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
     VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
     VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
     VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
     VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
     VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
     VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
     VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
     VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
     VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
     VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
     VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
     VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
     VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
     VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
     VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
     VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
     VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
     VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
     VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
     VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
     VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
     VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
     VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
     VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
     VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000,
     VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
     VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
     VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
     VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
     VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
     VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
     VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
     VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
     VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
     VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
     VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
     VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
     VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
     VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
     VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
     VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
     VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
     VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000,
     VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
     VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
     VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSystemAllocationScope {
     VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
     VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
     VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
     VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
     VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkInternalAllocationType {
     VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerAddressMode {
     VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
     VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
     VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFilter {
     VK_FILTER_NEAREST = 0,
     VK_FILTER_LINEAR = 1,
     VK_FILTER_CUBIC_IMG = 1000015000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerMipmapMode {
     VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
     VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVertexInputRate {
     VK_VERTEX_INPUT_RATE_VERTEX = 0,
     VK_VERTEX_INPUT_RATE_INSTANCE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineStageFlagBits {
     VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
     VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
     VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
     VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
     VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
     VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
     VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
     VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
     VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
     VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
     VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
     VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
     VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
     VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
     VK_PIPELINE_STAGE_HOST_BIT = 16384,
     VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
     VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
     VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
     VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
     VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 131072,
     VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
     VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152,
     VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432,
     VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
     VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
     VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseImageFormatFlagBits {
     VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
     VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
     VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSampleCountFlagBits {
     VK_SAMPLE_COUNT_1_BIT = 1,
     VK_SAMPLE_COUNT_2_BIT = 2,
     VK_SAMPLE_COUNT_4_BIT = 4,
     VK_SAMPLE_COUNT_8_BIT = 8,
     VK_SAMPLE_COUNT_16_BIT = 16,
     VK_SAMPLE_COUNT_32_BIT = 32,
     VK_SAMPLE_COUNT_64_BIT = 64,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentDescriptionFlagBits {
     VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorPoolCreateFlagBits {
     VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
     VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDependencyFlagBits {
     VK_DEPENDENCY_BY_REGION_BIT = 1,
     VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
     VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkObjectType {
     VK_OBJECT_TYPE_UNKNOWN = 0,
     VK_OBJECT_TYPE_INSTANCE = 1,
     VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
     VK_OBJECT_TYPE_DEVICE = 3,
     VK_OBJECT_TYPE_QUEUE = 4,
     VK_OBJECT_TYPE_SEMAPHORE = 5,
     VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
     VK_OBJECT_TYPE_FENCE = 7,
     VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
     VK_OBJECT_TYPE_BUFFER = 9,
     VK_OBJECT_TYPE_IMAGE = 10,
     VK_OBJECT_TYPE_EVENT = 11,
     VK_OBJECT_TYPE_QUERY_POOL = 12,
     VK_OBJECT_TYPE_BUFFER_VIEW = 13,
     VK_OBJECT_TYPE_IMAGE_VIEW = 14,
     VK_OBJECT_TYPE_SHADER_MODULE = 15,
     VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
     VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
     VK_OBJECT_TYPE_RENDER_PASS = 18,
     VK_OBJECT_TYPE_PIPELINE = 19,
     VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
     VK_OBJECT_TYPE_SAMPLER = 21,
     VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
     VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
     VK_OBJECT_TYPE_FRAMEBUFFER = 24,
     VK_OBJECT_TYPE_COMMAND_POOL = 25,
     VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
     VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
     VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
     VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
     VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
     VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
     VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
     VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000,
     VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
     VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
     VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
     VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
     VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorBindingFlagBitsEXT {
     VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1,
     VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2,
     VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4,
     VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkConditionalRenderingFlagBitsEXT {
     VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndirectCommandsLayoutUsageFlagBitsNVX {
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 1,
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 2,
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 4,
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndirectCommandsTokenTypeNVX {
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkObjectEntryUsageFlagBitsNVX {
     VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 1,
     VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkObjectEntryTypeNVX {
     VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0,
     VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1,
     VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2,
     VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3,
     VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorUpdateTemplateType {
     VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
     VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkViewportCoordinateSwizzleNV {
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDiscardRectangleModeEXT {
     VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
     VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubpassDescriptionFlagBits {
     VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
     VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPointClippingBehavior {
     VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
     VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoverageModulationModeNV {
     VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
     VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
     VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
     VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoverageReductionModeNV {
     VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
     VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationCacheHeaderVersionEXT {
     VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderInfoTypeAMD {
     VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
     VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
     VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueueGlobalPriorityEXT {
     VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
     VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
     VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
     VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkTimeDomainEXT {
     VK_TIME_DOMAIN_DEVICE_EXT = 0,
     VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
     VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
     VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkConservativeRasterizationModeEXT {
     VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
     VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
     VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResolveModeFlagBitsKHR {
     VK_RESOLVE_MODE_NONE_KHR = 0,
     VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1,
     VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2,
     VK_RESOLVE_MODE_MIN_BIT_KHR = 4,
     VK_RESOLVE_MODE_MAX_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryFlagBitsNV {
     VK_GEOMETRY_OPAQUE_BIT_NV = 1,
     VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryInstanceFlagBitsNV {
     VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1,
     VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2,
     VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4,
     VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBuildAccelerationStructureFlagBitsNV {
     VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1,
     VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2,
     VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4,
     VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8,
     VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCopyAccelerationStructureModeNV {
     VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0,
     VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccelerationStructureTypeNV {
     VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0,
     VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryTypeNV {
     VK_GEOMETRY_TYPE_TRIANGLES_NV = 0,
     VK_GEOMETRY_TYPE_AABBS_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkRayTracingShaderGroupTypeNV {
     VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0,
     VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1,
     VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccelerationStructureMemoryRequirementsTypeNV {
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryOverallocationBehaviorAMD {
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkScopeNV {
     VK_SCOPE_DEVICE_NV = 1,
     VK_SCOPE_WORKGROUP_NV = 2,
     VK_SCOPE_SUBGROUP_NV = 3,
     VK_SCOPE_QUEUE_FAMILY_NV = 5,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkComponentTypeNV {
     VK_COMPONENT_TYPE_FLOAT16_NV = 0,
     VK_COMPONENT_TYPE_FLOAT32_NV = 1,
     VK_COMPONENT_TYPE_FLOAT64_NV = 2,
     VK_COMPONENT_TYPE_SINT8_NV = 3,
     VK_COMPONENT_TYPE_SINT16_NV = 4,
     VK_COMPONENT_TYPE_SINT32_NV = 5,
     VK_COMPONENT_TYPE_SINT64_NV = 6,
     VK_COMPONENT_TYPE_UINT8_NV = 7,
     VK_COMPONENT_TYPE_UINT16_NV = 8,
     VK_COMPONENT_TYPE_UINT32_NV = 9,
     VK_COMPONENT_TYPE_UINT64_NV = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCreationFeedbackFlagBitsEXT {
     VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1,
     VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2,
     VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceConfigurationTypeINTEL {
     VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryPoolSamplingModeINTEL {
     VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceOverrideTypeINTEL {
     VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
     VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceParameterTypeINTEL {
     VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
     VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceValueTypeINTEL {
     VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
     VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
     VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
     VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
     VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkLineRasterizationModeEXT {
     VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
     VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
     VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
     VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkColorSpaceKHR {
     VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
     VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
     VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
     VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
     VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
     VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
     VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
     VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
     VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
     VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
     VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
     VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
     VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
     VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
     VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
     VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCompositeAlphaFlagBitsKHR {
     VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
     VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
     VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
     VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayPlaneAlphaFlagBitsKHR {
     VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
     VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
     VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
     VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPresentModeKHR {
     VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
     VK_PRESENT_MODE_MAILBOX_KHR = 1,
     VK_PRESENT_MODE_FIFO_KHR = 2,
     VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
     VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
     VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSurfaceTransformFlagBitsKHR {
     VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
     VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
     VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
     VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
     VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugReportFlagBitsEXT {
     VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
     VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
     VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
     VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
     VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugReportObjectTypeEXT {
     VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
     VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
     VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
     VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
     VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
     VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
     VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
     VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
     VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
     VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
     VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
     VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
     VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
     VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
     VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
     VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
     VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
     VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
     VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
     VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
     VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
     VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
     VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31,
     VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32,
     VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
     VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
     VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkRasterizationOrderAMD {
     VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
     VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryHandleTypeFlagBitsNV {
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryFeatureFlagBitsNV {
     VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
     VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
     VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationCheckEXT {
     VK_VALIDATION_CHECK_ALL_EXT = 0,
     VK_VALIDATION_CHECK_SHADERS_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationFeatureEnableEXT {
     VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
     VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
     VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationFeatureDisableEXT {
     VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
     VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
     VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
     VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
     VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
     VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
     VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryHandleTypeFlagBits {
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryFeatureFlagBits {
     VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
     VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
     VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreHandleTypeFlagBits {
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreFeatureFlagBits {
     VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreImportFlagBits {
     VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceHandleTypeFlagBits {
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceFeatureFlagBits {
     VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceImportFlagBits {
     VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSurfaceCounterFlagBitsEXT {
     VK_SURFACE_COUNTER_VBLANK_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayPowerStateEXT {
     VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
     VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
     VK_DISPLAY_POWER_STATE_ON_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceEventTypeEXT {
     VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayEventTypeEXT {
     VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPeerMemoryFeatureFlagBits {
     VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
     VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
     VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
     VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryAllocateFlagBits {
     VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceGroupPresentModeFlagBitsKHR {
     VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
     VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
     VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
     VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSwapchainCreateFlagBitsKHR {
     VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
     VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
     VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubgroupFeatureFlagBits {
     VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
     VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
     VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
     VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
     VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
     VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
     VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
     VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
     VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkTessellationDomainOrigin {
     VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
     VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrModelConversion {
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrRange {
     VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
     VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkChromaLocation {
     VK_CHROMA_LOCATION_COSITED_EVEN = 0,
     VK_CHROMA_LOCATION_MIDPOINT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerReductionModeEXT {
     VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
     VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
     VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendOverlapEXT {
     VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
     VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
     VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugUtilsMessageSeverityFlagBitsEXT {
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugUtilsMessageTypeFlagBitsEXT {
     VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
     VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
     VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFullScreenExclusiveEXT {
     VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
     VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
     VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
     VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderFloatControlsIndependenceKHR {
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVendorId {
     VK_VENDOR_ID_VIV = 0x10001,
     VK_VENDOR_ID_VSI = 0x10002,
     VK_VENDOR_ID_KAZAN = 0x10003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDriverIdKHR {
     VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1,
     VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2,
     VK_DRIVER_ID_MESA_RADV_KHR = 3,
     VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4,
     VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5,
     VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6,
     VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7,
     VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8,
     VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9,
     VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10,
     VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11,
     VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShadingRatePaletteEntryNV {
     VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
     VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
     VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
     VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
     VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoarseSampleOrderTypeNV {
     VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
     VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
     VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
     VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
}
pub type PFN_vkInternalAllocationNotification = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkInternalFreeNotification = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkReallocationFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    pOriginal: *mut std::os::raw::c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut std::os::raw::c_void;
pub type PFN_vkAllocationFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut std::os::raw::c_void;
pub type PFN_vkFreeFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    pMemory: *mut std::os::raw::c_void,
) -> ();
pub type PFN_vkVoidFunction = extern "system" fn(
) -> ();

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseOutStructure {
    sType: VkStructureType,
    pNext: *mut VkBaseOutStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseInStructure {
    sType: VkStructureType,
    pNext: *const VkBaseInStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset2D {
    x: i32,
    y: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset3D {
    x: i32,
    y: i32,
    z: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent2D {
    width: u32,
    height: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent3D {
    width: u32,
    height: u32,
    depth: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewport {
    x: std::os::raw::c_float,
    y: std::os::raw::c_float,
    width: std::os::raw::c_float,
    height: std::os::raw::c_float,
    minDepth: std::os::raw::c_float,
    maxDepth: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRect2D {
    offset: VkOffset2D,
    extent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearRect {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComponentMapping {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtensionProperties {
    extensionName: std::os::raw::c_char,
    specVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerProperties {
    layerName: std::os::raw::c_char,
    specVersion: u32,
    implementationVersion: u32,
    description: std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkApplicationInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pApplicationName: *const std::os::raw::c_char,
    applicationVersion: u32,
    pEngineName: *const std::os::raw::c_char,
    engineVersion: u32,
    apiVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pUserData: *mut std::os::raw::c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorImageInfo {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyDescriptorSet {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolSize {
    type_: VkDescriptorType,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationMapEntry {
    constantID: u32,
    offset: u32,
    size: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationInfo {
    mapEntryCount: u32,
    pMapEntries: *const VkSpecializationMapEntry,
    dataSize: usize,
    pData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStencilOpState {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    float32: [std::os::raw::c_float;4],
    int32: [i32;4],
    uint32: [u32;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearDepthStencilValue {
    depth: std::os::raw::c_float,
    stencil: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference {
    attachment: u32,
    layout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndirectCommand {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    x: u32,
    y: u32,
    z: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlanePropertiesKHR {
    currentDisplay: VkDisplayKHR,
    currentStackIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeParametersKHR {
    visibleRegion: VkExtent2D,
    refreshRate: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModePropertiesKHR {
    displayMode: VkDisplayModeKHR,
    parameters: VkDisplayModeParametersKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormatKHR {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    swapchainCount: u32,
    pSwapchains: *const VkSwapchainKHR,
    pImageIndices: *const u32,
    pResults: *mut VkResult,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFlagsEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: *const VkValidationCheckEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFeaturesEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    rasterizationOrder: VkRasterizationOrderAMD,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    pObjectName: *const std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: usize,
    pTag: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerMarkerInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pMarkerName: *const std::os::raw::c_char,
    color: [std::os::raw::c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
    buffer: VkBuffer,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryWin32HandleInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    acquireCount: u32,
    pAcquireSyncs: *const VkDeviceMemory,
    pAcquireKeys: *const u64,
    pAcquireTimeoutMilliseconds: *const u32,
    releaseCount: u32,
    pReleaseSyncs: *const VkDeviceMemory,
    pReleaseKeys: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGeneratedCommandsLimitsNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    maxIndirectCommandsLayoutTokenCount: u32,
    maxObjectEntryCounts: u32,
    minSequenceCountBufferOffsetAlignment: u32,
    minSequenceIndexBufferOffsetAlignment: u32,
    minCommandsTokenBufferOffsetAlignment: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenNVX {
    tokenType: VkIndirectCommandsTokenTypeNVX,
    bindingUnit: u32,
    dynamicCount: u32,
    divisor: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCmdReserveSpaceForCommandsInfoNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectTable: VkObjectTableNVX,
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX,
    maxSequencesCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxPushDescriptors: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConformanceVersionKHR {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDriverPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    driverID: VkDriverIdKHR,
    driverName: std::os::raw::c_char,
    driverInfo: std::os::raw::c_char,
    conformanceVersion: VkConformanceVersionKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRectLayerKHR {
    offset: VkOffset2D,
    extent: VkExtent2D,
    layer: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryWin32HandlePropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryTypeBits: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    fd: std::os::raw::c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryFdPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    acquireCount: u32,
    pAcquireSyncs: *const VkDeviceMemory,
    pAcquireKeys: *const u64,
    pAcquireTimeouts: *const u32,
    releaseCount: u32,
    pReleaseSyncs: *const VkDeviceMemory,
    pReleaseKeys: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkD3D12FenceSubmitInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreValuesCount: u32,
    pWaitSemaphoreValues: *const u64,
    signalSemaphoreValuesCount: u32,
    pSignalSemaphoreValues: *const u64,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalFenceHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
}
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    subpassCount: u32,
    pViewMasks: *const u32,
    dependencyCount: u32,
    pViewOffsets: *const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: *const u32,
}
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPowerInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    powerState: VkDisplayPowerStateEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceEventInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceEvent: VkDeviceEventTypeEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayEventInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    displayEvent: VkDisplayEventTypeEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
}
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: *const VkRect2D,
}
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: *const VkRect2D,
}
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceMask: u32,
}
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: *const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: *const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: *const u32,
}
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
}
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchain: VkSwapchainKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchain: VkSwapchainKHR,
    imageIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireNextImageInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchain: VkSwapchainKHR,
    timeout: u64,
    semaphore: VkSemaphore,
    fence: VkFence,
    deviceMask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchainCount: u32,
    pDeviceMasks: *const u32,
    mode: VkDeviceGroupPresentModeFlagBitsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: *const VkPhysicalDevice,
}
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: usize,
    stride: usize,
}
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXYColorEXT {
    x: std::os::raw::c_float,
    y: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHdrMetadataEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    displayPrimaryRed: VkXYColorEXT,
    displayPrimaryGreen: VkXYColorEXT,
    displayPrimaryBlue: VkXYColorEXT,
    whitePoint: VkXYColorEXT,
    maxLuminance: std::os::raw::c_float,
    minLuminance: std::os::raw::c_float,
    maxContentLightLevel: std::os::raw::c_float,
    maxFrameAverageLightLevel: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRefreshCycleDurationGOOGLE {
    refreshDuration: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPastPresentationTimingGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimeGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportWScalingNV {
    xcoeff: std::os::raw::c_float,
    ycoeff: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportSwizzleNV {
    x: VkViewportCoordinateSwizzleNV,
    y: VkViewportCoordinateSwizzleNV,
    z: VkViewportCoordinateSwizzleNV,
    w: VkViewportCoordinateSwizzleNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxDiscardRectangles: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    surface: VkSurfaceKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormat2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    surfaceFormat: VkSurfaceFormatKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneProperties2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeProperties2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    displayModeProperties: VkDisplayModePropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneInfo2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    mode: VkDisplayModeKHR,
    planeIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
}
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
}
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
}
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    pointClippingBehavior: VkPointClippingBehavior,
}
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
    buffer: VkBuffer,
}
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    domainOrigin: VkTessellationDomainOrigin,
}
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    conversion: VkSamplerYcbcrConversion,
}
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    planeAspect: VkImageAspectFlagBits,
}
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    planeAspect: VkImageAspectFlagBits,
}
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    combinedImageSamplerDescriptorCount: u32,
}
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationEXT {
    x: std::os::raw::c_float,
    y: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationsInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    sampleLocationsPerPixel: VkSampleCountFlagBits,
    sampleLocationGridSize: VkExtent2D,
    sampleLocationsCount: u32,
    pSampleLocations: *const VkSampleLocationEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentSampleLocationsEXT {
    attachmentIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassSampleLocationsEXT {
    subpassIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultisamplePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxSampleLocationGridSize: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    reductionMode: VkSamplerReductionModeEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlockEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    dataSize: u32,
    pData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    maxInlineUniformBlockBindings: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatListCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    validationCache: VkValidationCacheEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderResourceUsageAMD {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: usize,
    scratchMemUsageInBytes: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    globalPriority: VkQueueGlobalPriorityEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    pObjectName: *const std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: usize,
    pTag: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsLabelEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pLabelName: *const std::os::raw::c_char,
    color: [std::os::raw::c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryHostPointerInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    pHostPointer: *mut std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHostPointerPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCalibratedTimestampInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    timeDomain: VkTimeDomainEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxVariableDescriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassBeginInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    contents: VkSubpassContents,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassEndInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    binding: u32,
    divisor: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescriptionEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxVertexAttribDivisor: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportAndroidHardwareBufferInfoANDROID {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: *mut AHardwareBuffer,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferUsageANDROID {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    androidHardwareBufferUsage: u64,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFormatANDROID {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    externalFormat: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCheckpointDataNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    stage: VkPipelineStageFlagBits,
    pCheckpointMarker: *mut std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewASTCDecodeModeEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    decodeMode: VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    exclusiveScissorCount: u32,
    pExclusiveScissors: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShadingRatePaletteNV {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shadingRateTexelSize: VkExtent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleLocationNV {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleOrderCustomNV {
    shadingRate: VkShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: *const VkCoarseSampleLocationNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    sampleOrderType: VkCoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: [u32;3],
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: [u32;3],
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    taskCount: u32,
    firstTask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    type_: VkRayTracingShaderGroupTypeNV,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    accelerationStructureCount: u32,
    pAccelerationStructures: *const VkAccelerationStructureNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: VkAccelerationStructureNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    drmFormatModifier: u64,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    drmFormatModifier: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    fragmentDensityMapAttachment: VkAttachmentReference,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    priority: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imageViewType: VkImageViewType,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: VkComponentTypeNV,
    BType: VkComponentTypeNV,
    CType: VkComponentTypeNV,
    DType: VkComponentTypeNV,
    scope: VkScopeNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewHandleInfoNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    imageView: VkImageView,
    descriptorType: VkDescriptorType,
    sampler: VkSampler,
}
#[cfg(any(feature = "VK_USE_PLATFORM_GGP"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentFrameTokenGGP {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    frameToken: GgpFrameToken,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFullScreenExclusiveInfoEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    fullScreenExclusive: VkFullScreenExclusiveEXT,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    hmonitor: HMONITOR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInitializePerformanceApiInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pUserData: *mut std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    marker: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    marker: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    type_: VkPerformanceConfigurationTypeINTEL,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    requiredSubgroupSize: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    lineSubPixelPrecisionBits: u32,
}
pub type VkSampleMask = u32;
pub type VkBool32 = u32;
pub type VkFlags = u32;
pub type VkDeviceSize = u64;
pub type VkDeviceAddress = u64;
pub type VkFramebufferCreateFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub type VkRenderPassCreateFlags = VkFlags;
pub type VkSamplerCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub type VkInstanceCreateFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub type VkQueueFlags = VkFlags;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkAccessFlags = VkFlags;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkImageUsageFlags = VkFlags;
pub type VkImageCreateFlags = VkFlags;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkPipelineCreateFlags = VkFlags;
pub type VkColorComponentFlags = VkFlags;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkFormatFeatureFlags = VkFlags;
pub type VkQueryControlFlags = VkFlags;
pub type VkQueryResultFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub type VkEventCreateFlags = VkFlags;
pub type VkCommandPoolCreateFlags = VkFlags;
pub type VkCommandPoolResetFlags = VkFlags;
pub type VkCommandBufferResetFlags = VkFlags;
pub type VkCommandBufferUsageFlags = VkFlags;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
pub type VkImageAspectFlags = VkFlags;
pub type VkSparseMemoryBindFlags = VkFlags;
pub type VkSparseImageFormatFlags = VkFlags;
pub type VkSubpassDescriptionFlags = VkFlags;
pub type VkPipelineStageFlags = VkFlags;
pub type VkSampleCountFlags = VkFlags;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub type VkStencilFaceFlags = VkFlags;
pub type VkCullModeFlags = VkFlags;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub type VkDependencyFlags = VkFlags;
pub type VkSubgroupFeatureFlags = VkFlags;
pub type VkIndirectCommandsLayoutUsageFlagsNVX = VkFlags;
pub type VkObjectEntryUsageFlagsNVX = VkFlags;
pub type VkGeometryFlagsNV = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkPipelineCreationFeedbackFlagsEXT = VkFlags;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub type VkAndroidSurfaceCreateFlagsKHR = VkFlags;
pub type VkViSurfaceCreateFlagsNN = VkFlags;
pub type VkWaylandSurfaceCreateFlagsKHR = VkFlags;
pub type VkWin32SurfaceCreateFlagsKHR = VkFlags;
pub type VkXlibSurfaceCreateFlagsKHR = VkFlags;
pub type VkXcbSurfaceCreateFlagsKHR = VkFlags;
pub type VkIOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMacOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMetalSurfaceCreateFlagsEXT = VkFlags;
pub type VkImagePipeSurfaceCreateFlagsFUCHSIA = VkFlags;
pub type VkStreamDescriptorSurfaceCreateFlagsGGP = VkFlags;
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub type VkSemaphoreImportFlags = VkFlags;
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub type VkFenceImportFlags = VkFlags;
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub type VkSurfaceCounterFlagsEXT = VkFlags;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub type VkDescriptorBindingFlagsEXT = VkFlags;
pub type VkConditionalRenderingFlagsEXT = VkFlags;
pub type VkResolveModeFlagsKHR = VkFlags;
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT = extern "system" fn(
    flags: VkDebugReportFlagsEXT,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    location: usize,
    messageCode: i32,
    pLayerPrefix: *const std::os::raw::c_char,
    pMessage: *const std::os::raw::c_char,
    pUserData: *mut std::os::raw::c_void,
) -> VkBool32;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: *const std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstanceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: *const VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *const *const std::os::raw::c_char,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *const *const std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryType {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHeap {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMappedMemoryRange {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSet {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: *const VkDescriptorImageInfo,
    pBufferInfo: *const VkDescriptorBufferInfo,
    pTexelBufferView: *const VkBufferView,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresource {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceLayers {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceRange {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
    initialLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubresourceLayout {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCopy {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseMemoryBind {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseImageMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindSparseInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    bufferBindCount: u32,
    pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: *const VkSparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCopy {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageBlit {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [VkOffset3D;2],
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [VkOffset3D;2],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferImageCopy {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageResolve {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkShaderModuleCreateFlags,
    codeSize: usize,
    pCode: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: *const VkSampler,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: *const VkDescriptorSetLayoutBinding,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: *const VkDescriptorPoolSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: *const std::os::raw::c_char,
    pSpecializationInfo: *const VkSpecializationInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: *const VkViewport,
    scissorCount: u32,
    pScissors: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: std::os::raw::c_float,
    depthBiasClamp: std::os::raw::c_float,
    depthBiasSlopeFactor: std::os::raw::c_float,
    lineWidth: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: std::os::raw::c_float,
    pSampleMask: *const VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: *const VkPipelineColorBlendAttachmentState,
    blendConstants: [std::os::raw::c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: *const VkDynamicState,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: std::os::raw::c_float,
    maxDepthBounds: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pViewportState: *const VkPipelineViewportStateCreateInfo,
    pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushConstantRange {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: *const VkPushConstantRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: std::os::raw::c_float,
    anisotropyEnable: VkBool32,
    maxAnisotropy: std::os::raw::c_float,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: std::os::raw::c_float,
    maxLod: std::os::raw::c_float,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: *const VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference,
    pResolveAttachments: *const VkAttachmentReference,
    pDepthStencilAttachment: *const VkAttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEventCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkEventCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkFenceCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [u32;3],
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [u32;3],
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: std::os::raw::c_float,
    maxSamplerAnisotropy: std::os::raw::c_float,
    maxViewports: u32,
    maxViewportDimensions: [u32;2],
    viewportBoundsRange: [std::os::raw::c_float;2],
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: std::os::raw::c_float,
    maxInterpolationOffset: std::os::raw::c_float,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: std::os::raw::c_float,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [std::os::raw::c_float;2],
    lineWidthRange: [std::os::raw::c_float;2],
    pointSizeGranularity: std::os::raw::c_float,
    lineWidthGranularity: std::os::raw::c_float,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSemaphoreCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
    width: u32,
    height: u32,
    layers: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    pWaitDstStageMask: *const VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: *const VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPropertiesKHR {
    display: VkDisplayKHR,
    displayName: *const std::os::raw::c_char,
    physicalDimensions: VkExtent2D,
    physicalResolution: VkExtent2D,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    planeReorderPossible: VkBool32,
    persistentContent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDisplayModeCreateFlagsKHR,
    parameters: VkDisplayModeParametersKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    minSrcPosition: VkOffset2D,
    maxSrcPosition: VkOffset2D,
    minSrcExtent: VkExtent2D,
    maxSrcExtent: VkExtent2D,
    minDstPosition: VkOffset2D,
    maxDstPosition: VkOffset2D,
    minDstExtent: VkExtent2D,
    maxDstExtent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDisplaySurfaceCreateFlagsKHR,
    displayMode: VkDisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: VkSurfaceTransformFlagBitsKHR,
    globalAlpha: std::os::raw::c_float,
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    imageExtent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcRect: VkRect2D,
    dstRect: VkRect2D,
    persistent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesKHR {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkAndroidSurfaceCreateFlagsKHR,
    window: *mut ANativeWindow,
}
#[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViSurfaceCreateInfoNN {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkViSurfaceCreateFlagsNN,
    window: *mut std::os::raw::c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWaylandSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkWaylandSurfaceCreateFlagsKHR,
    display: *mut wl_display,
    surface: *mut wl_surface,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32SurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkWin32SurfaceCreateFlagsKHR,
    hinstance: HINSTANCE,
    hwnd: HWND,
}
#[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXlibSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkXlibSurfaceCreateFlagsKHR,
    dpy: *mut Display,
    window: Window,
}
#[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXcbSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkXcbSurfaceCreateFlagsKHR,
    connection: *mut xcb_connection_t,
    window: xcb_window_t,
}
#[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePipeSurfaceCreateInfoFUCHSIA {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImagePipeSurfaceCreateFlagsFUCHSIA,
    imagePipeHandle: zx_handle_t,
}
#[cfg(any(feature = "VK_USE_PLATFORM_GGP"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStreamDescriptorSurfaceCreateInfoGGP {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkStreamDescriptorSurfaceCreateFlagsGGP,
    streamDescriptor: GgpStreamDescriptor,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: *mut std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    dedicatedAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    dedicatedAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatPropertiesNV {
    imageFormatProperties: VkImageFormatProperties,
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryWin32HandleInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagsNV,
    handle: HANDLE,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGeneratedCommandsFeaturesNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    computeBindingPointSupport: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsTokenNVX {
    tokenType: VkIndirectCommandsTokenTypeNVX,
    buffer: VkBuffer,
    offset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    flags: VkIndirectCommandsLayoutUsageFlagsNVX,
    tokenCount: u32,
    pTokens: *const VkIndirectCommandsLayoutTokenNVX,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCmdProcessCommandsInfoNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectTable: VkObjectTableNVX,
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX,
    indirectCommandsTokenCount: u32,
    pIndirectCommandsTokens: *const VkIndirectCommandsTokenNVX,
    maxSequencesCount: u32,
    targetCommandBuffer: VkCommandBuffer,
    sequencesCountBuffer: VkBuffer,
    sequencesCountOffset: VkDeviceSize,
    sequencesIndexBuffer: VkBuffer,
    sequencesIndexOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTableCreateInfoNVX {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    objectCount: u32,
    pObjectEntryTypes: *const VkObjectEntryTypeNVX,
    pObjectEntryCounts: *const u32,
    pObjectEntryUsageFlags: *const VkObjectEntryUsageFlagsNVX,
    maxUniformBuffersPerDescriptor: u32,
    maxStorageBuffersPerDescriptor: u32,
    maxStorageImagesPerDescriptor: u32,
    maxSampledImagesPerDescriptor: u32,
    maxPipelineLayouts: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTableEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTablePipelineEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipeline: VkPipeline,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTableDescriptorSetEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipelineLayout: VkPipelineLayout,
    descriptorSet: VkDescriptorSet,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTableVertexBufferEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    buffer: VkBuffer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTableIndexBufferEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    buffer: VkBuffer,
    indexType: VkIndexType,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkObjectTablePushConstantEntryNVX {
    type_: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipelineLayout: VkPipelineLayout,
    stageFlags: VkShaderStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    features: VkPhysicalDeviceFeatures,
}
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    formatProperties: VkFormatProperties,
}
pub type VkFormatProperties2KHR = VkFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imageFormatProperties: VkImageFormatProperties,
}
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    type_: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
}
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    queueFamilyProperties: VkQueueFamilyProperties,
}
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    properties: VkSparseImageFormatProperties,
}
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    type_: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
}
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionKHR {
    rectangleCount: u32,
    pRectangles: *const VkRectLayerKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
}
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryProperties {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalBufferProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    deviceUUID: u8,
    driverUUID: u8,
    deviceLUID: u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
}
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    fd: std::os::raw::c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFenceProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
}
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalFenceHandleTypeFlags,
}
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceFdInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    fd: std::os::raw::c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
}
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2EXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCounterCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    surfaceCounters: VkSurfaceCounterFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    physicalDeviceCount: u32,
    physicalDevices: VkPhysicalDevice,
    subsetAllocation: VkBool32,
}
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
}
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    presentMask: u32,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
}
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    localDimmingSupport: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    localDimmingEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimesInfoGOOGLE {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchainCount: u32,
    pTimes: *const VkPresentTimeGOOGLE,
}
#[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIOSSurfaceCreateInfoMVK {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkIOSSurfaceCreateFlagsMVK,
    pView: *const std::os::raw::c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMacOSSurfaceCreateInfoMVK {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkMacOSSurfaceCreateFlagsMVK,
    pView: *const std::os::raw::c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMetalSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkMetalSurfaceCreateFlagsEXT,
    pLayer: *const CAMetalLayer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    viewportWScalingEnable: VkBool32,
    viewportCount: u32,
    pViewportWScalings: *const VkViewportWScalingNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: *const VkViewportSwizzleNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: VkDiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    perViewPositionAllComponents: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
}
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    aspectReferenceCount: u32,
    pAspectReferences: *const VkInputAttachmentAspectReference,
}
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayProperties2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    displayProperties: VkDisplayPropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    capabilities: VkDisplayPlaneCapabilitiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
}
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryRequirements: VkMemoryRequirements,
}
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryRequirements: VkSparseImageMemoryRequirements,
}
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
}
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    usage: VkImageUsageFlags,
}
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
}
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    samplerYcbcrConversion: VkBool32,
}
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    supportsTextureGatherLODBiasAMD: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConditionalRenderingBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    flags: VkConditionalRenderingFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    protectedSubmit: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    protectedMemory: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    protectedNoFault: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: VkBool32,
    coverageToColorLocation: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    sampleLocationsEnable: VkBool32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    sampleLocationSampleCounts: VkSampleCountFlags,
    maxSampleLocationGridSize: VkExtent2D,
    sampleLocationCoordinateRange: [std::os::raw::c_float;2],
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    advancedBlendCoherentOperations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: VkBool32,
    advancedBlendNonPremultipliedSrcColor: VkBool32,
    advancedBlendNonPremultipliedDstColor: VkBool32,
    advancedBlendCorrelatedOverlap: VkBool32,
    advancedBlendAllOperations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcPremultiplied: VkBool32,
    dstPremultiplied: VkBool32,
    blendOverlap: VkBlendOverlapEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: VkCoverageModulationModeNV,
    coverageModulationTableEnable: VkBool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: *const std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkValidationCacheCreateFlagsEXT,
    initialDataSize: usize,
    pInitialData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    supported: VkBool32,
}
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderDrawParameters: VkBool32,
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8FeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
}
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    denormBehaviorIndependence: VkShaderFloatControlsIndependenceKHR,
    roundingModeIndependence: VkShaderFloatControlsIndependenceKHR,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    hostQueryReset: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderStatisticsInfoAMD {
    shaderStageMask: VkShaderStageFlags,
    resourceUsage: VkShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: [u32;3],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: *const std::os::raw::c_char,
    messageIdNumber: i32,
    pMessage: *const std::os::raw::c_char,
    queueLabelCount: u32,
    pQueueLabels: *const VkDebugUtilsLabelEXT,
    cmdBufLabelCount: u32,
    pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    objectCount: u32,
    pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    minImportedHostPointerAlignment: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    primitiveOverestimationSize: std::os::raw::c_float,
    maxExtraPrimitiveOverestimationSize: std::os::raw::c_float,
    extraPrimitiveOverestimationSizeGranularity: std::os::raw::c_float,
    primitiveUnderestimation: VkBool32,
    conservativePointAndLineRasterization: VkBool32,
    degenerateTrianglesRasterized: VkBool32,
    degenerateLinesRasterized: VkBool32,
    fullyCoveredFragmentShaderInputVariable: VkBool32,
    conservativeRasterizationPostDepthCoverage: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    bindingCount: u32,
    pBindingFlags: *const VkDescriptorBindingFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference2KHR,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference2KHR,
    pResolveAttachments: *const VkAttachmentReference2KHR,
    pDepthStencilAttachment: *const VkAttachmentReference2KHR,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo2KHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription2KHR,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription2KHR,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency2KHR,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: *const u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferPropertiesANDROID {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    allocationSize: VkDeviceSize,
    memoryTypeBits: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferFormatPropertiesANDROID {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    format: VkFormat,
    externalFormat: u64,
    formatFeatures: VkFormatFeatureFlags,
    samplerYcbcrConversionComponents: VkComponentMapping,
    suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
    suggestedYcbcrRange: VkSamplerYcbcrRange,
    suggestedXChromaOffset: VkChromaLocation,
    suggestedYChromaOffset: VkChromaLocation,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    conditionalRenderingEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    conditionalRendering: VkBool32,
    inheritedConditionalRendering: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    vertexAttributeInstanceRateDivisor: VkBool32,
    vertexAttributeInstanceRateZeroDivisor: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    checkpointExecutionStageMask: VkPipelineStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    supportedDepthResolveModes: VkResolveModeFlagsKHR,
    supportedStencilResolveModes: VkResolveModeFlagsKHR,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolveKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    depthResolveMode: VkResolveModeFlagBitsKHR,
    stencilResolveMode: VkResolveModeFlagBitsKHR,
    pDepthStencilResolveAttachment: *const VkAttachmentReference2KHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    decodeModeSharedExponent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    transformFeedback: VkBool32,
    geometryStreams: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: VkDeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: VkBool32,
    transformFeedbackStreamsLinesTriangles: VkBool32,
    transformFeedbackRasterizationStreamSelect: VkBool32,
    transformFeedbackDraw: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    representativeFragmentTest: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    representativeFragmentTestEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    exclusiveScissor: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    cornerSampledImage: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    computeDerivativeGroupQuads: VkBool32,
    computeDerivativeGroupLinear: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    fragmentShaderBarycentric: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imageFootprint: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    dedicatedAllocationImageAliasing: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    shadingRateImageEnable: VkBool32,
    viewportCount: u32,
    pShadingRatePalettes: *const VkShadingRatePaletteNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shadingRateImage: VkBool32,
    shadingRateCoarseSampleOrder: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    taskShader: VkBool32,
    meshShader: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    maxRecursionDepth: u32,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryTrianglesNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    vertexData: VkBuffer,
    vertexOffset: VkDeviceSize,
    vertexCount: u32,
    vertexStride: VkDeviceSize,
    vertexFormat: VkFormat,
    indexData: VkBuffer,
    indexOffset: VkDeviceSize,
    indexCount: u32,
    indexType: VkIndexType,
    transformData: VkBuffer,
    transformOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryAABBNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    aabbData: VkBuffer,
    numAABBs: u32,
    stride: u32,
    offset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryDataNV {
    triangles: VkGeometryTrianglesNV,
    aabbs: VkGeometryAABBNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    geometryType: VkGeometryTypeNV,
    geometry: VkGeometryDataNV,
    flags: VkGeometryFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    type_: VkAccelerationStructureTypeNV,
    flags: VkBuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: *const VkGeometryNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    compactedSize: VkDeviceSize,
    info: VkAccelerationStructureInfoNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    accelerationStructure: VkAccelerationStructureNV,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesEXT {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: *const VkSubresourceLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageStencilUsageCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    stencilUsage: VkImageUsageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    fragmentDensityMap: VkBool32,
    fragmentDensityMapDynamic: VkBool32,
    fragmentDensityMapNonSubsampledImages: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    minFragmentDensityTexelSize: VkExtent2D,
    maxFragmentDensityTexelSize: VkExtent2D,
    fragmentDensityInvocations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    scalarBlockLayout: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    supportsProtected: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    uniformBufferStandardLayout: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    depthClipEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    heapBudget: VkDeviceSize,
    heapUsage: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryPriority: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceAddress: VkDeviceAddress,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    filterCubic: VkBool32,
    filterCubicMinmax: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imagelessFramebuffer: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    textureCompressionASTC_HDR: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    cooperativeMatrix: VkBool32,
    cooperativeMatrixRobustBufferAccess: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    cooperativeMatrixSupportedStages: VkShaderStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    ycbcrImageArrays: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedbackEXT {
    flags: VkPipelineCreationFeedbackFlagsEXT,
    duration: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedbackCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pPipelineCreationFeedback: *mut VkPipelineCreationFeedbackEXT,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedbackEXT,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    fullScreenExclusiveSupported: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkHeadlessSurfaceCreateFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    coverageReductionMode: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: VkCoverageReductionModeNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    coverageReductionMode: VkCoverageReductionModeNV,
    rasterizationSamples: VkSampleCountFlagBits,
    depthStencilSamples: VkSampleCountFlags,
    colorSamples: VkSampleCountFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderIntegerFunctions2: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    value32: u32,
    value64: u64,
    valueFloat: std::os::raw::c_float,
    valueBool: VkBool32,
    valueString: *const std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    type_: VkPerformanceValueTypeINTEL,
    data: VkPerformanceValueDataINTEL,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceOverrideInfoINTEL {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    type_: VkPerformanceOverrideTypeINTEL,
    enable: VkBool32,
    parameter: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    indexTypeUint8: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderSMBuiltins: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    fragmentShaderSampleInterlock: VkBool32,
    fragmentShaderPixelInterlock: VkBool32,
    fragmentShaderShadingRateInterlock: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderDemoteToHelperInvocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    texelBufferAlignment: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    rectangularLines: VkBool32,
    bresenhamLines: VkBool32,
    smoothLines: VkBool32,
    stippledRectangularLines: VkBool32,
    stippledBresenhamLines: VkBool32,
    stippledSmoothLines: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    lineRasterizationMode: VkLineRasterizationModeEXT,
    stippledLineEnable: VkBool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
}
pub type PFN_vkDebugUtilsMessengerCallbackEXT = extern "system" fn(
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
    messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
    pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    pUserData: *mut std::os::raw::c_void,
) -> VkBool32;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    deviceName: std::os::raw::c_char,
    pipelineCacheUUID: u8,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *const *const std::os::raw::c_char,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *const *const std::os::raw::c_char,
    pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    memoryTypeCount: u32,
    memoryTypes: VkMemoryType,
    memoryHeapCount: u32,
    memoryHeaps: VkMemoryHeap,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    properties: VkPhysicalDeviceProperties,
}
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
}
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionsKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    swapchainCount: u32,
    pRegions: *const VkPresentRegionKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: *mut std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfoKHR,
}
}

pub mod enumerations {
    #![allow(dead_code, non_upper_case_globals, unused_imports)]

    use std;
    use super::types::*;

    pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: &str = "VK_AMD_buffer_marker\0";
    pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &str = "VK_AMD_display_native_hdr\0";
    pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &str = "VK_AMD_draw_indirect_count\0";
    pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_GCN_SHADER_EXTENSION_NAME: &str = "VK_AMD_gcn_shader\0";
    pub const VK_AMD_GCN_SHADER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &str = "VK_AMD_gpu_shader_half_float\0";
    pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: &str = "VK_AMD_gpu_shader_int16\0";
    pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &str = "VK_AMD_memory_overallocation_behavior\0";
    pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &str = "VK_AMD_mixed_attachment_samples\0";
    pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &str = "VK_AMD_negative_viewport_height\0";
    pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &str = "VK_AMD_rasterization_order\0";
    pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: &str = "VK_AMD_shader_ballot\0";
    pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &str = "VK_AMD_shader_core_properties\0";
    pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &str = "VK_AMD_shader_explicit_vertex_parameter\0";
    pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &str = "VK_AMD_shader_fragment_mask\0";
    pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &str = "VK_AMD_shader_image_load_store_lod\0";
    pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_INFO_EXTENSION_NAME: &str = "VK_AMD_shader_info\0";
    pub const VK_AMD_SHADER_INFO_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &str = "VK_AMD_shader_trinary_minmax\0";
    pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &str = "VK_AMD_texture_gather_bias_lod\0";
    pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME: &str = "VK_ANDROID_external_memory_android_hardware_buffer\0";
    pub const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_ATTACHMENT_UNUSED: std::os::raw::c_uint = !0;
    pub const VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME: &str = "VK_EXT_acquire_xlib_display\0";
    pub const VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &str = "VK_EXT_astc_decode_mode\0";
    pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &str = "VK_EXT_blend_operation_advanced\0";
    pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &str = "VK_EXT_buffer_device_address\0";
    pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &str = "VK_EXT_calibrated_timestamps\0";
    pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &str = "VK_EXT_conditional_rendering\0";
    pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &str = "VK_EXT_conservative_rasterization\0";
    pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: &str = "VK_EXT_debug_marker\0";
    pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION: std::os::raw::c_uint = 4;
    pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: &str = "VK_EXT_debug_report\0";
    pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION: std::os::raw::c_uint = 9;
    pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: &str = "VK_EXT_debug_utils\0";
    pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &str = "VK_EXT_depth_clip_enable\0";
    pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &str = "VK_EXT_depth_range_unrestricted\0";
    pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &str = "VK_EXT_descriptor_indexing\0";
    pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &str = "VK_EXT_direct_mode_display\0";
    pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &str = "VK_EXT_discard_rectangles\0";
    pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: &str = "VK_EXT_display_control\0";
    pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &str = "VK_EXT_display_surface_counter\0";
    pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &str = "VK_EXT_external_memory_dma_buf\0";
    pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &str = "VK_EXT_external_memory_host\0";
    pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: &str = "VK_EXT_filter_cubic\0";
    pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &str = "VK_EXT_fragment_density_map\0";
    pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &str = "VK_EXT_fragment_shader_interlock\0";
    pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME: &str = "VK_EXT_full_screen_exclusive\0";
    pub const VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &str = "VK_EXT_global_priority\0";
    pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_HDR_METADATA_EXTENSION_NAME: &str = "VK_EXT_hdr_metadata\0";
    pub const VK_EXT_HDR_METADATA_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: &str = "VK_EXT_headless_surface\0";
    pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 0;
    pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: &str = "VK_EXT_host_query_reset\0";
    pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &str = "VK_EXT_image_drm_format_modifier\0";
    pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &str = "VK_EXT_index_type_uint8\0";
    pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &str = "VK_EXT_inline_uniform_block\0";
    pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: &str = "VK_EXT_line_rasterization\0";
    pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: &str = "VK_EXT_memory_budget\0";
    pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: &str = "VK_EXT_memory_priority\0";
    pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_METAL_SURFACE_EXTENSION_NAME: &str = "VK_EXT_metal_surface\0";
    pub const VK_EXT_METAL_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: &str = "VK_EXT_pci_bus_info\0";
    pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &str = "VK_EXT_pipeline_creation_feedback\0";
    pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &str = "VK_EXT_post_depth_coverage\0";
    pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &str = "VK_EXT_queue_family_foreign\0";
    pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &str = "VK_EXT_sampler_filter_minmax\0";
    pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &str = "VK_EXT_sample_locations\0";
    pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &str = "VK_EXT_scalar_block_layout\0";
    pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &str = "VK_EXT_separate_stencil_usage\0";
    pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &str = "VK_EXT_shader_demote_to_helper_invocation\0";
    pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &str = "VK_EXT_shader_stencil_export\0";
    pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &str = "VK_EXT_shader_subgroup_ballot\0";
    pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &str = "VK_EXT_shader_subgroup_vote\0";
    pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &str = "VK_EXT_shader_viewport_index_layer\0";
    pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &str = "VK_EXT_subgroup_size_control\0";
    pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &str = "VK_EXT_swapchain_colorspace\0";
    pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: std::os::raw::c_uint = 4;
    pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &str = "VK_EXT_texel_buffer_alignment\0";
    pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &str = "VK_EXT_texture_compression_astc_hdr\0";
    pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &str = "VK_EXT_transform_feedback\0";
    pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: &str = "VK_EXT_validation_cache\0";
    pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: &str = "VK_EXT_validation_features\0";
    pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: &str = "VK_EXT_validation_flags\0";
    pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &str = "VK_EXT_vertex_attribute_divisor\0";
    pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &str = "VK_EXT_ycbcr_image_arrays\0";
    pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_FALSE: std::os::raw::c_uint = 0;
    pub const VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME: &str = "VK_FUCHSIA_imagepipe_surface\0";
    pub const VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_GGP_FRAME_TOKEN_EXTENSION_NAME: &str = "VK_GGP_frame_token\0";
    pub const VK_GGP_FRAME_TOKEN_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME: &str = "VK_GGP_stream_descriptor_surface\0";
    pub const VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: &str = "VK_GOOGLE_decorate_string\0";
    pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &str = "VK_GOOGLE_display_timing\0";
    pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &str = "VK_GOOGLE_hlsl_functionality1\0";
    pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: &str = "VK_IMG_filter_cubic\0";
    pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: &str = "VK_IMG_format_pvrtc\0";
    pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &str = "VK_INTEL_performance_query\0";
    pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &str = "VK_INTEL_shader_integer_functions2\0";
    pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: &str = "VK_KHR_16bit_storage\0";
    pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: &str = "VK_KHR_8bit_storage\0";
    pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_ANDROID_SURFACE_EXTENSION_NAME: &str = "VK_KHR_android_surface\0";
    pub const VK_KHR_ANDROID_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 6;
    pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: &str = "VK_KHR_bind_memory2\0";
    pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &str = "VK_KHR_create_renderpass2\0";
    pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &str = "VK_KHR_dedicated_allocation\0";
    pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &str = "VK_KHR_depth_stencil_resolve\0";
    pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &str = "VK_KHR_descriptor_update_template\0";
    pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &str = "VK_KHR_device_group_creation\0";
    pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: &str = "VK_KHR_device_group\0";
    pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_KHR_DISPLAY_EXTENSION_NAME: &str = "VK_KHR_display\0";
    pub const VK_KHR_DISPLAY_SPEC_VERSION: std::os::raw::c_uint = 21;
    pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &str = "VK_KHR_display_swapchain\0";
    pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: std::os::raw::c_uint = 9;
    pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &str = "VK_KHR_draw_indirect_count\0";
    pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &str = "VK_KHR_driver_properties\0";
    pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_fence_capabilities\0";
    pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: &str = "VK_KHR_external_fence\0";
    pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &str = "VK_KHR_external_fence_fd\0";
    pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_fence_win32\0";
    pub const VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_memory_capabilities\0";
    pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &str = "VK_KHR_external_memory\0";
    pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &str = "VK_KHR_external_memory_fd\0";
    pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_memory_win32\0";
    pub const VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_capabilities\0";
    pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &str = "VK_KHR_external_semaphore\0";
    pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_fd\0";
    pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_win32\0";
    pub const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &str = "VK_KHR_get_display_properties2\0";
    pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &str = "VK_KHR_get_memory_requirements2\0";
    pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &str = "VK_KHR_get_physical_device_properties2\0";
    pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &str = "VK_KHR_get_surface_capabilities2\0";
    pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &str = "VK_KHR_imageless_framebuffer\0";
    pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &str = "VK_KHR_image_format_list\0";
    pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &str = "VK_KHR_incremental_present\0";
    pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME: &str = "VK_KHR_maintenance1\0";
    pub const VK_KHR_MAINTENANCE1_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME: &str = "VK_KHR_maintenance2\0";
    pub const VK_KHR_MAINTENANCE2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME: &str = "VK_KHR_maintenance3\0";
    pub const VK_KHR_MAINTENANCE3_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_MULTIVIEW_EXTENSION_NAME: &str = "VK_KHR_multiview\0";
    pub const VK_KHR_MULTIVIEW_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &str = "VK_KHR_push_descriptor\0";
    pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &str = "VK_KHR_relaxed_block_layout\0";
    pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &str = "VK_KHR_sampler_mirror_clamp_to_edge\0";
    pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &str = "VK_KHR_sampler_ycbcr_conversion\0";
    pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &str = "VK_KHR_shader_atomic_int64\0";
    pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &str = "VK_KHR_shader_draw_parameters\0";
    pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &str = "VK_KHR_shader_float16_int8\0";
    pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &str = "VK_KHR_shader_float_controls\0";
    pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: std::os::raw::c_uint = 4;
    pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &str = "VK_KHR_shared_presentable_image\0";
    pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &str = "VK_KHR_storage_buffer_storage_class\0";
    pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SURFACE_EXTENSION_NAME: &str = "VK_KHR_surface\0";
    pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_surface_protected_capabilities\0";
    pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 25;
    pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME: &str = "VK_KHR_swapchain\0";
    pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &str = "VK_KHR_swapchain_mutable_format\0";
    pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_SWAPCHAIN_SPEC_VERSION: std::os::raw::c_uint = 70;
    pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &str = "VK_KHR_uniform_buffer_standard_layout\0";
    pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: &str = "VK_KHR_variable_pointers\0";
    pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &str = "VK_KHR_vulkan_memory_model\0";
    pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME: &str = "VK_KHR_wayland_surface\0";
    pub const VK_KHR_WAYLAND_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 6;
    pub const VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME: &str = "VK_KHR_win32_keyed_mutex\0";
    pub const VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_KHR_WIN32_SURFACE_EXTENSION_NAME: &str = "VK_KHR_win32_surface\0";
    pub const VK_KHR_WIN32_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 6;
    pub const VK_KHR_XCB_SURFACE_EXTENSION_NAME: &str = "VK_KHR_xcb_surface\0";
    pub const VK_KHR_XCB_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 6;
    pub const VK_KHR_XLIB_SURFACE_EXTENSION_NAME: &str = "VK_KHR_xlib_surface\0";
    pub const VK_KHR_XLIB_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 6;
    pub const VK_LOD_CLAMP_NONE: std::os::raw::c_float = 1000.0;
    pub const VK_LUID_SIZE: std::os::raw::c_uint = 8;
    pub const VK_LUID_SIZE_KHR: std::os::raw::c_uint = 8;
    pub const VK_MAX_DESCRIPTION_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_DEVICE_GROUP_SIZE: std::os::raw::c_uint = 32;
    pub const VK_MAX_DEVICE_GROUP_SIZE_KHR: std::os::raw::c_uint = 32;
    pub const VK_MAX_DRIVER_INFO_SIZE_KHR: std::os::raw::c_uint = 256;
    pub const VK_MAX_DRIVER_NAME_SIZE_KHR: std::os::raw::c_uint = 256;
    pub const VK_MAX_EXTENSION_NAME_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_MEMORY_HEAPS: std::os::raw::c_uint = 16;
    pub const VK_MAX_MEMORY_TYPES: std::os::raw::c_uint = 32;
    pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MVK_IOS_SURFACE_EXTENSION_NAME: &str = "VK_MVK_ios_surface\0";
    pub const VK_MVK_IOS_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_MVK_MACOS_SURFACE_EXTENSION_NAME: &str = "VK_MVK_macos_surface\0";
    pub const VK_MVK_MACOS_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_NN_VI_SURFACE_EXTENSION_NAME: &str = "VK_NN_vi_surface\0";
    pub const VK_NN_VI_SURFACE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &str = "VK_NVX_device_generated_commands\0";
    pub const VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &str = "VK_NVX_image_view_handle\0";
    pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &str = "VK_NVX_multiview_per_view_attributes\0";
    pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &str = "VK_NV_clip_space_w_scaling\0";
    pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &str = "VK_NV_compute_shader_derivatives\0";
    pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &str = "VK_NV_cooperative_matrix\0";
    pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &str = "VK_NV_corner_sampled_image\0";
    pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &str = "VK_NV_coverage_reduction_mode\0";
    pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &str = "VK_NV_dedicated_allocation\0";
    pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &str = "VK_NV_dedicated_allocation_image_aliasing\0";
    pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &str = "VK_NV_device_diagnostic_checkpoints\0";
    pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: std::os::raw::c_uint = 2;
    pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &str = "VK_NV_external_memory_capabilities\0";
    pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: &str = "VK_NV_external_memory\0";
    pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: &str = "VK_NV_external_memory_win32\0";
    pub const VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: &str = "VK_NV_fill_rectangle\0";
    pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &str = "VK_NV_fragment_coverage_to_color\0";
    pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &str = "VK_NV_fragment_shader_barycentric\0";
    pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &str = "VK_NV_framebuffer_mixed_samples\0";
    pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &str = "VK_NV_geometry_shader_passthrough\0";
    pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_GLSL_SHADER_EXTENSION_NAME: &str = "VK_NV_glsl_shader\0";
    pub const VK_NV_GLSL_SHADER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_MESH_SHADER_EXTENSION_NAME: &str = "VK_NV_mesh_shader\0";
    pub const VK_NV_MESH_SHADER_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_RAY_TRACING_EXTENSION_NAME: &str = "VK_NV_ray_tracing\0";
    pub const VK_NV_RAY_TRACING_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &str = "VK_NV_representative_fragment_test\0";
    pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &str = "VK_NV_sample_mask_override_coverage\0";
    pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &str = "VK_NV_scissor_exclusive\0";
    pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &str = "VK_NV_shader_image_footprint\0";
    pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &str = "VK_NV_shader_sm_builtins\0";
    pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &str = "VK_NV_shader_subgroup_partitioned\0";
    pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &str = "VK_NV_shading_rate_image\0";
    pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: std::os::raw::c_uint = 3;
    pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &str = "VK_NV_viewport_array2\0";
    pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &str = "VK_NV_viewport_swizzle\0";
    pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME: &str = "VK_NV_win32_keyed_mutex\0";
    pub const VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION: std::os::raw::c_uint = 1;
    pub const VK_QUEUE_FAMILY_EXTERNAL: std::os::raw::c_uint = !0-1;
    pub const VK_QUEUE_FAMILY_EXTERNAL_KHR: std::os::raw::c_uint = !0-1;
    pub const VK_QUEUE_FAMILY_FOREIGN_EXT: std::os::raw::c_uint = !0-2;
    pub const VK_QUEUE_FAMILY_IGNORED: std::os::raw::c_uint = !0;
    pub const VK_REMAINING_ARRAY_LAYERS: std::os::raw::c_uint = !0;
    pub const VK_REMAINING_MIP_LEVELS: std::os::raw::c_uint = !0;
    pub const VK_SHADER_UNUSED_NV: std::os::raw::c_uint = !0;
    pub const VK_SUBPASS_EXTERNAL: std::os::raw::c_uint = !0;
    pub const VK_TRUE: std::os::raw::c_uint = 1;
    pub const VK_UUID_SIZE: std::os::raw::c_uint = 16;
    pub const VK_WHOLE_SIZE: std::os::raw::c_uint = !0;
}

pub mod functions {
    #![allow(non_snake_case, unused_variables, dead_code)]

    use std;
    use std::mem;
    use super::storage;
    use super::types::*;

    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn AcquireFullScreenExclusiveModeEXT(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR) -> VkResult>(storage::AcquireFullScreenExclusiveModeEXT.ptr)(device, swapchain) }
     #[inline] pub unsafe fn AcquireNextImage2KHR(device: VkDevice, pAcquireInfo: *const VkAcquireNextImageInfoKHR, pImageIndex: *mut u32) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkAcquireNextImageInfoKHR, *mut u32) -> VkResult>(storage::AcquireNextImage2KHR.ptr)(device, pAcquireInfo, pImageIndex) }
     #[inline] pub unsafe fn AcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: *mut u32) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, *mut u32) -> VkResult>(storage::AcquireNextImageKHR.ptr)(device, swapchain, timeout, semaphore, fence, pImageIndex) }
     #[inline] pub unsafe fn AcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: *mut VkPerformanceConfigurationINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPerformanceConfigurationAcquireInfoINTEL, *mut VkPerformanceConfigurationINTEL) -> VkResult>(storage::AcquirePerformanceConfigurationINTEL.ptr)(device, pAcquireInfo, pConfiguration) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] #[inline] pub unsafe fn AcquireXlibDisplayEXT(physicalDevice: VkPhysicalDevice, dpy: *mut Display, display: VkDisplayKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut Display, VkDisplayKHR) -> VkResult>(storage::AcquireXlibDisplayEXT.ptr)(physicalDevice, dpy, display) }
     #[inline] pub unsafe fn AllocateCommandBuffers(device: VkDevice, pAllocateInfo: *const VkCommandBufferAllocateInfo, pCommandBuffers: *mut VkCommandBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkCommandBufferAllocateInfo, *mut VkCommandBuffer) -> VkResult>(storage::AllocateCommandBuffers.ptr)(device, pAllocateInfo, pCommandBuffers) }
     #[inline] pub unsafe fn AllocateDescriptorSets(device: VkDevice, pAllocateInfo: *const VkDescriptorSetAllocateInfo, pDescriptorSets: *mut VkDescriptorSet) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetAllocateInfo, *mut VkDescriptorSet) -> VkResult>(storage::AllocateDescriptorSets.ptr)(device, pAllocateInfo, pDescriptorSets) }
     #[inline] pub unsafe fn AllocateMemory(device: VkDevice, pAllocateInfo: *const VkMemoryAllocateInfo, pAllocator: *const VkAllocationCallbacks, pMemory: *mut VkDeviceMemory) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkMemoryAllocateInfo, *const VkAllocationCallbacks, *mut VkDeviceMemory) -> VkResult>(storage::AllocateMemory.ptr)(device, pAllocateInfo, pAllocator, pMemory) }
     #[inline] pub unsafe fn BeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: *const VkCommandBufferBeginInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkCommandBufferBeginInfo) -> VkResult>(storage::BeginCommandBuffer.ptr)(commandBuffer, pBeginInfo) }
     #[inline] pub unsafe fn BindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindAccelerationStructureMemoryInfoNV) -> VkResult>(storage::BindAccelerationStructureMemoryNV.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn BindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) -> VkResult>(storage::BindBufferMemory.ptr)(device, buffer, memory, memoryOffset) }
     #[inline] pub unsafe fn BindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindBufferMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindBufferMemoryInfo) -> VkResult>(storage::BindBufferMemory2.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn BindBufferMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindBufferMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindBufferMemoryInfo) -> VkResult>(storage::BindBufferMemory2KHR.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn BindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) -> VkResult>(storage::BindImageMemory.ptr)(device, image, memory, memoryOffset) }
     #[inline] pub unsafe fn BindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindImageMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindImageMemoryInfo) -> VkResult>(storage::BindImageMemory2.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn BindImageMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindImageMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindImageMemoryInfo) -> VkResult>(storage::BindImageMemory2KHR.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn CmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkConditionalRenderingBeginInfoEXT) -> ()>(storage::CmdBeginConditionalRenderingEXT.ptr)(commandBuffer, pConditionalRenderingBegin) }
     #[inline] pub unsafe fn CmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkDebugUtilsLabelEXT) -> ()>(storage::CmdBeginDebugUtilsLabelEXT.ptr)(commandBuffer, pLabelInfo) }
     #[inline] pub unsafe fn CmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) -> ()>(storage::CmdBeginQuery.ptr)(commandBuffer, queryPool, query, flags) }
     #[inline] pub unsafe fn CmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) -> ()>(storage::CmdBeginQueryIndexedEXT.ptr)(commandBuffer, queryPool, query, flags, index) }
     #[inline] pub unsafe fn CmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, contents: VkSubpassContents) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkRenderPassBeginInfo, VkSubpassContents) -> ()>(storage::CmdBeginRenderPass.ptr)(commandBuffer, pRenderPassBegin, contents) }
     #[inline] pub unsafe fn CmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, pSubpassBeginInfo: *const VkSubpassBeginInfoKHR) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkRenderPassBeginInfo, *const VkSubpassBeginInfoKHR) -> ()>(storage::CmdBeginRenderPass2KHR.ptr)(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) }
     #[inline] pub unsafe fn CmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *const VkBuffer, pCounterBufferOffsets: *const VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkBuffer, *const VkDeviceSize) -> ()>(storage::CmdBeginTransformFeedbackEXT.ptr)(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets) }
     #[inline] pub unsafe fn CmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *const u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, *const VkDescriptorSet, u32, *const u32) -> ()>(storage::CmdBindDescriptorSets.ptr)(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) }
     #[inline] pub unsafe fn CmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) -> ()>(storage::CmdBindIndexBuffer.ptr)(commandBuffer, buffer, offset, indexType) }
     #[inline] pub unsafe fn CmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineBindPoint, VkPipeline) -> ()>(storage::CmdBindPipeline.ptr)(commandBuffer, pipelineBindPoint, pipeline) }
     #[inline] pub unsafe fn CmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImageView, VkImageLayout) -> ()>(storage::CmdBindShadingRateImageNV.ptr)(commandBuffer, imageView, imageLayout) }
     #[inline] pub unsafe fn CmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize, pSizes: *const VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkBuffer, *const VkDeviceSize, *const VkDeviceSize) -> ()>(storage::CmdBindTransformFeedbackBuffersEXT.ptr)(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes) }
     #[inline] pub unsafe fn CmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkBuffer, *const VkDeviceSize) -> ()>(storage::CmdBindVertexBuffers.ptr)(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) }
     #[inline] pub unsafe fn CmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageBlit, filter: VkFilter) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageBlit, VkFilter) -> ()>(storage::CmdBlitImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) }
     #[inline] pub unsafe fn CmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: *const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) -> ()>(storage::CmdBuildAccelerationStructureNV.ptr)(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset) }
     #[inline] pub unsafe fn CmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: *const VkClearAttachment, rectCount: u32, pRects: *const VkClearRect) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkClearAttachment, u32, *const VkClearRect) -> ()>(storage::CmdClearAttachments.ptr)(commandBuffer, attachmentCount, pAttachments, rectCount, pRects) }
     #[inline] pub unsafe fn CmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: *const VkClearColorValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, *const VkClearColorValue, u32, *const VkImageSubresourceRange) -> ()>(storage::CmdClearColorImage.ptr)(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges) }
     #[inline] pub unsafe fn CmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: *const VkClearDepthStencilValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, *const VkClearDepthStencilValue, u32, *const VkImageSubresourceRange) -> ()>(storage::CmdClearDepthStencilImage.ptr)(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges) }
     #[inline] pub unsafe fn CmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeNV) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeNV) -> ()>(storage::CmdCopyAccelerationStructureNV.ptr)(commandBuffer, dst, src, mode) }
     #[inline] pub unsafe fn CmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkBuffer, u32, *const VkBufferCopy) -> ()>(storage::CmdCopyBuffer.ptr)(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkBufferImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, *const VkBufferImageCopy) -> ()>(storage::CmdCopyBufferToImage.ptr)(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageCopy) -> ()>(storage::CmdCopyImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, *const VkBufferImageCopy) -> ()>(storage::CmdCopyImageToBuffer.ptr)(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) -> ()>(storage::CmdCopyQueryPoolResults.ptr)(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) }
     #[inline] pub unsafe fn CmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkDebugMarkerMarkerInfoEXT) -> ()>(storage::CmdDebugMarkerBeginEXT.ptr)(commandBuffer, pMarkerInfo) }
     #[inline] pub unsafe fn CmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> ()>(storage::CmdDebugMarkerEndEXT.ptr)(commandBuffer) }
     #[inline] pub unsafe fn CmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkDebugMarkerMarkerInfoEXT) -> ()>(storage::CmdDebugMarkerInsertEXT.ptr)(commandBuffer, pMarkerInfo) }
     #[inline] pub unsafe fn CmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32) -> ()>(storage::CmdDispatch.ptr)(commandBuffer, groupCountX, groupCountY, groupCountZ) }
     #[inline] pub unsafe fn CmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, u32, u32, u32) -> ()>(storage::CmdDispatchBase.ptr)(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) }
     #[inline] pub unsafe fn CmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, u32, u32, u32) -> ()>(storage::CmdDispatchBaseKHR.ptr)(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) }
     #[inline] pub unsafe fn CmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize) -> ()>(storage::CmdDispatchIndirect.ptr)(commandBuffer, buffer, offset) }
     #[inline] pub unsafe fn CmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, u32) -> ()>(storage::CmdDraw.ptr)(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) }
     #[inline] pub unsafe fn CmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, i32, u32) -> ()>(storage::CmdDrawIndexed.ptr)(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) }
     #[inline] pub unsafe fn CmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndexedIndirect.ptr)(commandBuffer, buffer, offset, drawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndexedIndirectCountAMD.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndexedIndirectCountKHR.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirect.ptr)(commandBuffer, buffer, offset, drawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirectByteCountEXT.ptr)(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride) }
     #[inline] pub unsafe fn CmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirectCountAMD.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirectCountKHR.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawMeshTasksIndirectCountNV.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawMeshTasksIndirectNV.ptr)(commandBuffer, buffer, offset, drawCount, stride) }
     #[inline] pub unsafe fn CmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32) -> ()>(storage::CmdDrawMeshTasksNV.ptr)(commandBuffer, taskCount, firstTask) }
     #[inline] pub unsafe fn CmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> ()>(storage::CmdEndConditionalRenderingEXT.ptr)(commandBuffer) }
     #[inline] pub unsafe fn CmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> ()>(storage::CmdEndDebugUtilsLabelEXT.ptr)(commandBuffer) }
     #[inline] pub unsafe fn CmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32) -> ()>(storage::CmdEndQuery.ptr)(commandBuffer, queryPool, query) }
     #[inline] pub unsafe fn CmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, u32) -> ()>(storage::CmdEndQueryIndexedEXT.ptr)(commandBuffer, queryPool, query, index) }
     #[inline] pub unsafe fn CmdEndRenderPass(commandBuffer: VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> ()>(storage::CmdEndRenderPass.ptr)(commandBuffer) }
     #[inline] pub unsafe fn CmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfoKHR) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkSubpassEndInfoKHR) -> ()>(storage::CmdEndRenderPass2KHR.ptr)(commandBuffer, pSubpassEndInfo) }
     #[inline] pub unsafe fn CmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *const VkBuffer, pCounterBufferOffsets: *const VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkBuffer, *const VkDeviceSize) -> ()>(storage::CmdEndTransformFeedbackEXT.ptr)(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets) }
     #[inline] pub unsafe fn CmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkCommandBuffer) -> ()>(storage::CmdExecuteCommands.ptr)(commandBuffer, commandBufferCount, pCommandBuffers) }
     #[inline] pub unsafe fn CmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) -> ()>(storage::CmdFillBuffer.ptr)(commandBuffer, dstBuffer, dstOffset, size, data) }
     #[inline] pub unsafe fn CmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkDebugUtilsLabelEXT) -> ()>(storage::CmdInsertDebugUtilsLabelEXT.ptr)(commandBuffer, pLabelInfo) }
     #[inline] pub unsafe fn CmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkSubpassContents) -> ()>(storage::CmdNextSubpass.ptr)(commandBuffer, contents) }
     #[inline] pub unsafe fn CmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *const VkSubpassBeginInfoKHR, pSubpassEndInfo: *const VkSubpassEndInfoKHR) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkSubpassBeginInfoKHR, *const VkSubpassEndInfoKHR) -> ()>(storage::CmdNextSubpass2KHR.ptr)(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) }
     #[inline] pub unsafe fn CmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, *const VkMemoryBarrier, u32, *const VkBufferMemoryBarrier, u32, *const VkImageMemoryBarrier) -> ()>(storage::CmdPipelineBarrier.ptr)(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) }
     #[inline] pub unsafe fn CmdProcessCommandsNVX(commandBuffer: VkCommandBuffer, pProcessCommandsInfo: *const VkCmdProcessCommandsInfoNVX) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkCmdProcessCommandsInfoNVX) -> ()>(storage::CmdProcessCommandsNVX.ptr)(commandBuffer, pProcessCommandsInfo) }
     #[inline] pub unsafe fn CmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, *const std::os::raw::c_void) -> ()>(storage::CmdPushConstants.ptr)(commandBuffer, layout, stageFlags, offset, size, pValues) }
     #[inline] pub unsafe fn CmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: *const VkWriteDescriptorSet) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, *const VkWriteDescriptorSet) -> ()>(storage::CmdPushDescriptorSetKHR.ptr)(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites) }
     #[inline] pub unsafe fn CmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, *const std::os::raw::c_void) -> ()>(storage::CmdPushDescriptorSetWithTemplateKHR.ptr)(commandBuffer, descriptorUpdateTemplate, layout, set, pData) }
     #[inline] pub unsafe fn CmdReserveSpaceForCommandsNVX(commandBuffer: VkCommandBuffer, pReserveSpaceInfo: *const VkCmdReserveSpaceForCommandsInfoNVX) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkCmdReserveSpaceForCommandsInfoNVX) -> ()>(storage::CmdReserveSpaceForCommandsNVX.ptr)(commandBuffer, pReserveSpaceInfo) }
     #[inline] pub unsafe fn CmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkEvent, VkPipelineStageFlags) -> ()>(storage::CmdResetEvent.ptr)(commandBuffer, event, stageMask) }
     #[inline] pub unsafe fn CmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, u32) -> ()>(storage::CmdResetQueryPool.ptr)(commandBuffer, queryPool, firstQuery, queryCount) }
     #[inline] pub unsafe fn CmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageResolve) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageResolve) -> ()>(storage::CmdResolveImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [std::os::raw::c_float;4]) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, [std::os::raw::c_float;4]) -> ()>(storage::CmdSetBlendConstants.ptr)(commandBuffer, blendConstants) }
     #[inline] pub unsafe fn CmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const std::os::raw::c_void) -> ()>(storage::CmdSetCheckpointNV.ptr)(commandBuffer, pCheckpointMarker) }
     #[inline] pub unsafe fn CmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, *const VkCoarseSampleOrderCustomNV) -> ()>(storage::CmdSetCoarseSampleOrderNV.ptr)(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders) }
     #[inline] pub unsafe fn CmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: std::os::raw::c_float, depthBiasClamp: std::os::raw::c_float, depthBiasSlopeFactor: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float, std::os::raw::c_float, std::os::raw::c_float) -> ()>(storage::CmdSetDepthBias.ptr)(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) }
     #[inline] pub unsafe fn CmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: std::os::raw::c_float, maxDepthBounds: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float, std::os::raw::c_float) -> ()>(storage::CmdSetDepthBounds.ptr)(commandBuffer, minDepthBounds, maxDepthBounds) }
     #[inline] pub unsafe fn CmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32) -> ()>(storage::CmdSetDeviceMask.ptr)(commandBuffer, deviceMask) }
     #[inline] pub unsafe fn CmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32) -> ()>(storage::CmdSetDeviceMaskKHR.ptr)(commandBuffer, deviceMask) }
     #[inline] pub unsafe fn CmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: *const VkRect2D) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkRect2D) -> ()>(storage::CmdSetDiscardRectangleEXT.ptr)(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles) }
     #[inline] pub unsafe fn CmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkEvent, VkPipelineStageFlags) -> ()>(storage::CmdSetEvent.ptr)(commandBuffer, event, stageMask) }
     #[inline] pub unsafe fn CmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: *const VkRect2D) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkRect2D) -> ()>(storage::CmdSetExclusiveScissorNV.ptr)(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors) }
     #[inline] pub unsafe fn CmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u16) -> ()>(storage::CmdSetLineStippleEXT.ptr)(commandBuffer, lineStippleFactor, lineStipplePattern) }
     #[inline] pub unsafe fn CmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float) -> ()>(storage::CmdSetLineWidth.ptr)(commandBuffer, lineWidth) }
     #[inline] pub unsafe fn CmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkPerformanceMarkerInfoINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkPerformanceMarkerInfoINTEL) -> VkResult>(storage::CmdSetPerformanceMarkerINTEL.ptr)(commandBuffer, pMarkerInfo) }
     #[inline] pub unsafe fn CmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: *const VkPerformanceOverrideInfoINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkPerformanceOverrideInfoINTEL) -> VkResult>(storage::CmdSetPerformanceOverrideINTEL.ptr)(commandBuffer, pOverrideInfo) }
     #[inline] pub unsafe fn CmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkPerformanceStreamMarkerInfoINTEL) -> VkResult>(storage::CmdSetPerformanceStreamMarkerINTEL.ptr)(commandBuffer, pMarkerInfo) }
     #[inline] pub unsafe fn CmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: *const VkSampleLocationsInfoEXT) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkSampleLocationsInfoEXT) -> ()>(storage::CmdSetSampleLocationsEXT.ptr)(commandBuffer, pSampleLocationsInfo) }
     #[inline] pub unsafe fn CmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *const VkRect2D) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkRect2D) -> ()>(storage::CmdSetScissor.ptr)(commandBuffer, firstScissor, scissorCount, pScissors) }
     #[inline] pub unsafe fn CmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilCompareMask.ptr)(commandBuffer, faceMask, compareMask) }
     #[inline] pub unsafe fn CmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilReference.ptr)(commandBuffer, faceMask, reference) }
     #[inline] pub unsafe fn CmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilWriteMask.ptr)(commandBuffer, faceMask, writeMask) }
     #[inline] pub unsafe fn CmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *const VkViewport) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkViewport) -> ()>(storage::CmdSetViewport.ptr)(commandBuffer, firstViewport, viewportCount, pViewports) }
     #[inline] pub unsafe fn CmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: *const VkShadingRatePaletteNV) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkShadingRatePaletteNV) -> ()>(storage::CmdSetViewportShadingRatePaletteNV.ptr)(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes) }
     #[inline] pub unsafe fn CmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: *const VkViewportWScalingNV) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkViewportWScalingNV) -> ()>(storage::CmdSetViewportWScalingNV.ptr)(commandBuffer, firstViewport, viewportCount, pViewportWScalings) }
     #[inline] pub unsafe fn CmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) -> ()>(storage::CmdTraceRaysNV.ptr)(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth) }
     #[inline] pub unsafe fn CmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, *const std::os::raw::c_void) -> ()>(storage::CmdUpdateBuffer.ptr)(commandBuffer, dstBuffer, dstOffset, dataSize, pData) }
     #[inline] pub unsafe fn CmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: *const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, *const VkMemoryBarrier, u32, *const VkBufferMemoryBarrier, u32, *const VkImageMemoryBarrier) -> ()>(storage::CmdWaitEvents.ptr)(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) }
     #[inline] pub unsafe fn CmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) -> ()>(storage::CmdWriteAccelerationStructuresPropertiesNV.ptr)(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery) }
     #[inline] pub unsafe fn CmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) -> ()>(storage::CmdWriteBufferMarkerAMD.ptr)(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker) }
     #[inline] pub unsafe fn CmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) -> ()>(storage::CmdWriteTimestamp.ptr)(commandBuffer, pipelineStage, queryPool, query) }
     #[inline] pub unsafe fn CompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipeline, u32) -> VkResult>(storage::CompileDeferredNV.ptr)(device, pipeline, shader) }
     #[inline] pub unsafe fn CreateAccelerationStructureNV(device: VkDevice, pCreateInfo: *const VkAccelerationStructureCreateInfoNV, pAllocator: *const VkAllocationCallbacks, pAccelerationStructure: *mut VkAccelerationStructureNV) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkAccelerationStructureCreateInfoNV, *const VkAllocationCallbacks, *mut VkAccelerationStructureNV) -> VkResult>(storage::CreateAccelerationStructureNV.ptr)(device, pCreateInfo, pAllocator, pAccelerationStructure) }
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] #[inline] pub unsafe fn CreateAndroidSurfaceKHR(instance: VkInstance, pCreateInfo: *const VkAndroidSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkAndroidSurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateAndroidSurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateBuffer(device: VkDevice, pCreateInfo: *const VkBufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pBuffer: *mut VkBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferCreateInfo, *const VkAllocationCallbacks, *mut VkBuffer) -> VkResult>(storage::CreateBuffer.ptr)(device, pCreateInfo, pAllocator, pBuffer) }
     #[inline] pub unsafe fn CreateBufferView(device: VkDevice, pCreateInfo: *const VkBufferViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkBufferView) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferViewCreateInfo, *const VkAllocationCallbacks, *mut VkBufferView) -> VkResult>(storage::CreateBufferView.ptr)(device, pCreateInfo, pAllocator, pView) }
     #[inline] pub unsafe fn CreateCommandPool(device: VkDevice, pCreateInfo: *const VkCommandPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pCommandPool: *mut VkCommandPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkCommandPoolCreateInfo, *const VkAllocationCallbacks, *mut VkCommandPool) -> VkResult>(storage::CreateCommandPool.ptr)(device, pCreateInfo, pAllocator, pCommandPool) }
     #[inline] pub unsafe fn CreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkComputePipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkComputePipelineCreateInfo, *const VkAllocationCallbacks, *mut VkPipeline) -> VkResult>(storage::CreateComputePipelines.ptr)(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) }
     #[inline] pub unsafe fn CreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pCallback: *mut VkDebugReportCallbackEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkDebugReportCallbackCreateInfoEXT, *const VkAllocationCallbacks, *mut VkDebugReportCallbackEXT) -> VkResult>(storage::CreateDebugReportCallbackEXT.ptr)(instance, pCreateInfo, pAllocator, pCallback) }
     #[inline] pub unsafe fn CreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pMessenger: *mut VkDebugUtilsMessengerEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkDebugUtilsMessengerCreateInfoEXT, *const VkAllocationCallbacks, *mut VkDebugUtilsMessengerEXT) -> VkResult>(storage::CreateDebugUtilsMessengerEXT.ptr)(instance, pCreateInfo, pAllocator, pMessenger) }
     #[inline] pub unsafe fn CreateDescriptorPool(device: VkDevice, pCreateInfo: *const VkDescriptorPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorPool: *mut VkDescriptorPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorPoolCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorPool) -> VkResult>(storage::CreateDescriptorPool.ptr)(device, pCreateInfo, pAllocator, pDescriptorPool) }
     #[inline] pub unsafe fn CreateDescriptorSetLayout(device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pSetLayout: *mut VkDescriptorSetLayout) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetLayoutCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorSetLayout) -> VkResult>(storage::CreateDescriptorSetLayout.ptr)(device, pCreateInfo, pAllocator, pSetLayout) }
     #[inline] pub unsafe fn CreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorUpdateTemplateCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorUpdateTemplate) -> VkResult>(storage::CreateDescriptorUpdateTemplate.ptr)(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) }
     #[inline] pub unsafe fn CreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorUpdateTemplateCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorUpdateTemplate) -> VkResult>(storage::CreateDescriptorUpdateTemplateKHR.ptr)(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) }
     #[inline] pub unsafe fn CreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: *const VkDeviceCreateInfo, pAllocator: *const VkAllocationCallbacks, pDevice: *mut VkDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkDeviceCreateInfo, *const VkAllocationCallbacks, *mut VkDevice) -> VkResult>(storage::CreateDevice.ptr)(physicalDevice, pCreateInfo, pAllocator, pDevice) }
     #[inline] pub unsafe fn CreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: *const VkDisplayModeCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pMode: *mut VkDisplayModeKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkDisplayKHR, *const VkDisplayModeCreateInfoKHR, *const VkAllocationCallbacks, *mut VkDisplayModeKHR) -> VkResult>(storage::CreateDisplayModeKHR.ptr)(physicalDevice, display, pCreateInfo, pAllocator, pMode) }
     #[inline] pub unsafe fn CreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkDisplaySurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateDisplayPlaneSurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateEvent(device: VkDevice, pCreateInfo: *const VkEventCreateInfo, pAllocator: *const VkAllocationCallbacks, pEvent: *mut VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkEventCreateInfo, *const VkAllocationCallbacks, *mut VkEvent) -> VkResult>(storage::CreateEvent.ptr)(device, pCreateInfo, pAllocator, pEvent) }
     #[inline] pub unsafe fn CreateFence(device: VkDevice, pCreateInfo: *const VkFenceCreateInfo, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFenceCreateInfo, *const VkAllocationCallbacks, *mut VkFence) -> VkResult>(storage::CreateFence.ptr)(device, pCreateInfo, pAllocator, pFence) }
     #[inline] pub unsafe fn CreateFramebuffer(device: VkDevice, pCreateInfo: *const VkFramebufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pFramebuffer: *mut VkFramebuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFramebufferCreateInfo, *const VkAllocationCallbacks, *mut VkFramebuffer) -> VkResult>(storage::CreateFramebuffer.ptr)(device, pCreateInfo, pAllocator, pFramebuffer) }
     #[inline] pub unsafe fn CreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkGraphicsPipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkGraphicsPipelineCreateInfo, *const VkAllocationCallbacks, *mut VkPipeline) -> VkResult>(storage::CreateGraphicsPipelines.ptr)(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) }
     #[inline] pub unsafe fn CreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkHeadlessSurfaceCreateInfoEXT, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateHeadlessSurfaceEXT.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] #[inline] pub unsafe fn CreateIOSSurfaceMVK(instance: VkInstance, pCreateInfo: *const VkIOSSurfaceCreateInfoMVK, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkIOSSurfaceCreateInfoMVK, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateIOSSurfaceMVK.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateImage(device: VkDevice, pCreateInfo: *const VkImageCreateInfo, pAllocator: *const VkAllocationCallbacks, pImage: *mut VkImage) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageCreateInfo, *const VkAllocationCallbacks, *mut VkImage) -> VkResult>(storage::CreateImage.ptr)(device, pCreateInfo, pAllocator, pImage) }
    #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] #[inline] pub unsafe fn CreateImagePipeSurfaceFUCHSIA(instance: VkInstance, pCreateInfo: *const VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkImagePipeSurfaceCreateInfoFUCHSIA, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateImagePipeSurfaceFUCHSIA.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateImageView(device: VkDevice, pCreateInfo: *const VkImageViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkImageView) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageViewCreateInfo, *const VkAllocationCallbacks, *mut VkImageView) -> VkResult>(storage::CreateImageView.ptr)(device, pCreateInfo, pAllocator, pView) }
     #[inline] pub unsafe fn CreateIndirectCommandsLayoutNVX(device: VkDevice, pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNVX, pAllocator: *const VkAllocationCallbacks, pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNVX) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkIndirectCommandsLayoutCreateInfoNVX, *const VkAllocationCallbacks, *mut VkIndirectCommandsLayoutNVX) -> VkResult>(storage::CreateIndirectCommandsLayoutNVX.ptr)(device, pCreateInfo, pAllocator, pIndirectCommandsLayout) }
     #[inline] pub unsafe fn CreateInstance(pCreateInfo: *const VkInstanceCreateInfo, pAllocator: *const VkAllocationCallbacks, pInstance: *mut VkInstance) -> VkResult { mem::transmute::<_, extern "system" fn(*const VkInstanceCreateInfo, *const VkAllocationCallbacks, *mut VkInstance) -> VkResult>(storage::CreateInstance.ptr)(pCreateInfo, pAllocator, pInstance) }
    #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] #[inline] pub unsafe fn CreateMacOSSurfaceMVK(instance: VkInstance, pCreateInfo: *const VkMacOSSurfaceCreateInfoMVK, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkMacOSSurfaceCreateInfoMVK, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateMacOSSurfaceMVK.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] #[inline] pub unsafe fn CreateMetalSurfaceEXT(instance: VkInstance, pCreateInfo: *const VkMetalSurfaceCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkMetalSurfaceCreateInfoEXT, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateMetalSurfaceEXT.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateObjectTableNVX(device: VkDevice, pCreateInfo: *const VkObjectTableCreateInfoNVX, pAllocator: *const VkAllocationCallbacks, pObjectTable: *mut VkObjectTableNVX) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkObjectTableCreateInfoNVX, *const VkAllocationCallbacks, *mut VkObjectTableNVX) -> VkResult>(storage::CreateObjectTableNVX.ptr)(device, pCreateInfo, pAllocator, pObjectTable) }
     #[inline] pub unsafe fn CreatePipelineCache(device: VkDevice, pCreateInfo: *const VkPipelineCacheCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineCache: *mut VkPipelineCache) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPipelineCacheCreateInfo, *const VkAllocationCallbacks, *mut VkPipelineCache) -> VkResult>(storage::CreatePipelineCache.ptr)(device, pCreateInfo, pAllocator, pPipelineCache) }
     #[inline] pub unsafe fn CreatePipelineLayout(device: VkDevice, pCreateInfo: *const VkPipelineLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineLayout: *mut VkPipelineLayout) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPipelineLayoutCreateInfo, *const VkAllocationCallbacks, *mut VkPipelineLayout) -> VkResult>(storage::CreatePipelineLayout.ptr)(device, pCreateInfo, pAllocator, pPipelineLayout) }
     #[inline] pub unsafe fn CreateQueryPool(device: VkDevice, pCreateInfo: *const VkQueryPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pQueryPool: *mut VkQueryPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkQueryPoolCreateInfo, *const VkAllocationCallbacks, *mut VkQueryPool) -> VkResult>(storage::CreateQueryPool.ptr)(device, pCreateInfo, pAllocator, pQueryPool) }
     #[inline] pub unsafe fn CreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkRayTracingPipelineCreateInfoNV, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkRayTracingPipelineCreateInfoNV, *const VkAllocationCallbacks, *mut VkPipeline) -> VkResult>(storage::CreateRayTracingPipelinesNV.ptr)(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) }
     #[inline] pub unsafe fn CreateRenderPass(device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkRenderPassCreateInfo, *const VkAllocationCallbacks, *mut VkRenderPass) -> VkResult>(storage::CreateRenderPass.ptr)(device, pCreateInfo, pAllocator, pRenderPass) }
     #[inline] pub unsafe fn CreateRenderPass2KHR(device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo2KHR, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkRenderPassCreateInfo2KHR, *const VkAllocationCallbacks, *mut VkRenderPass) -> VkResult>(storage::CreateRenderPass2KHR.ptr)(device, pCreateInfo, pAllocator, pRenderPass) }
     #[inline] pub unsafe fn CreateSampler(device: VkDevice, pCreateInfo: *const VkSamplerCreateInfo, pAllocator: *const VkAllocationCallbacks, pSampler: *mut VkSampler) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSamplerCreateInfo, *const VkAllocationCallbacks, *mut VkSampler) -> VkResult>(storage::CreateSampler.ptr)(device, pCreateInfo, pAllocator, pSampler) }
     #[inline] pub unsafe fn CreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo, pAllocator: *const VkAllocationCallbacks, pYcbcrConversion: *mut VkSamplerYcbcrConversion) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSamplerYcbcrConversionCreateInfo, *const VkAllocationCallbacks, *mut VkSamplerYcbcrConversion) -> VkResult>(storage::CreateSamplerYcbcrConversion.ptr)(device, pCreateInfo, pAllocator, pYcbcrConversion) }
     #[inline] pub unsafe fn CreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo, pAllocator: *const VkAllocationCallbacks, pYcbcrConversion: *mut VkSamplerYcbcrConversion) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSamplerYcbcrConversionCreateInfo, *const VkAllocationCallbacks, *mut VkSamplerYcbcrConversion) -> VkResult>(storage::CreateSamplerYcbcrConversionKHR.ptr)(device, pCreateInfo, pAllocator, pYcbcrConversion) }
     #[inline] pub unsafe fn CreateSemaphore(device: VkDevice, pCreateInfo: *const VkSemaphoreCreateInfo, pAllocator: *const VkAllocationCallbacks, pSemaphore: *mut VkSemaphore) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreCreateInfo, *const VkAllocationCallbacks, *mut VkSemaphore) -> VkResult>(storage::CreateSemaphore.ptr)(device, pCreateInfo, pAllocator, pSemaphore) }
     #[inline] pub unsafe fn CreateShaderModule(device: VkDevice, pCreateInfo: *const VkShaderModuleCreateInfo, pAllocator: *const VkAllocationCallbacks, pShaderModule: *mut VkShaderModule) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkShaderModuleCreateInfo, *const VkAllocationCallbacks, *mut VkShaderModule) -> VkResult>(storage::CreateShaderModule.ptr)(device, pCreateInfo, pAllocator, pShaderModule) }
     #[inline] pub unsafe fn CreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: *const VkSwapchainCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSwapchains: *mut VkSwapchainKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkSwapchainCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSwapchainKHR) -> VkResult>(storage::CreateSharedSwapchainsKHR.ptr)(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains) }
    #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] #[inline] pub unsafe fn CreateStreamDescriptorSurfaceGGP(instance: VkInstance, pCreateInfo: *const VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkStreamDescriptorSurfaceCreateInfoGGP, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateStreamDescriptorSurfaceGGP.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn CreateSwapchainKHR(device: VkDevice, pCreateInfo: *const VkSwapchainCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSwapchain: *mut VkSwapchainKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSwapchainCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSwapchainKHR) -> VkResult>(storage::CreateSwapchainKHR.ptr)(device, pCreateInfo, pAllocator, pSwapchain) }
     #[inline] pub unsafe fn CreateValidationCacheEXT(device: VkDevice, pCreateInfo: *const VkValidationCacheCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pValidationCache: *mut VkValidationCacheEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkValidationCacheCreateInfoEXT, *const VkAllocationCallbacks, *mut VkValidationCacheEXT) -> VkResult>(storage::CreateValidationCacheEXT.ptr)(device, pCreateInfo, pAllocator, pValidationCache) }
    #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] #[inline] pub unsafe fn CreateViSurfaceNN(instance: VkInstance, pCreateInfo: *const VkViSurfaceCreateInfoNN, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkViSurfaceCreateInfoNN, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateViSurfaceNN.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] #[inline] pub unsafe fn CreateWaylandSurfaceKHR(instance: VkInstance, pCreateInfo: *const VkWaylandSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkWaylandSurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateWaylandSurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn CreateWin32SurfaceKHR(instance: VkInstance, pCreateInfo: *const VkWin32SurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkWin32SurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateWin32SurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] #[inline] pub unsafe fn CreateXcbSurfaceKHR(instance: VkInstance, pCreateInfo: *const VkXcbSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkXcbSurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateXcbSurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] #[inline] pub unsafe fn CreateXlibSurfaceKHR(instance: VkInstance, pCreateInfo: *const VkXlibSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *const VkXlibSurfaceCreateInfoKHR, *const VkAllocationCallbacks, *mut VkSurfaceKHR) -> VkResult>(storage::CreateXlibSurfaceKHR.ptr)(instance, pCreateInfo, pAllocator, pSurface) }
     #[inline] pub unsafe fn DebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: *const VkDebugMarkerObjectNameInfoEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDebugMarkerObjectNameInfoEXT) -> VkResult>(storage::DebugMarkerSetObjectNameEXT.ptr)(device, pNameInfo) }
     #[inline] pub unsafe fn DebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: *const VkDebugMarkerObjectTagInfoEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDebugMarkerObjectTagInfoEXT) -> VkResult>(storage::DebugMarkerSetObjectTagEXT.ptr)(device, pTagInfo) }
     #[inline] pub unsafe fn DebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: *const std::os::raw::c_char, pMessage: *const std::os::raw::c_char) -> () { mem::transmute::<_, extern "system" fn(VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, *const std::os::raw::c_char, *const std::os::raw::c_char) -> ()>(storage::DebugReportMessageEXT.ptr)(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage) }
     #[inline] pub unsafe fn DestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkAccelerationStructureNV, *const VkAllocationCallbacks) -> ()>(storage::DestroyAccelerationStructureNV.ptr)(device, accelerationStructure, pAllocator) }
     #[inline] pub unsafe fn DestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, *const VkAllocationCallbacks) -> ()>(storage::DestroyBuffer.ptr)(device, buffer, pAllocator) }
     #[inline] pub unsafe fn DestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBufferView, *const VkAllocationCallbacks) -> ()>(storage::DestroyBufferView.ptr)(device, bufferView, pAllocator) }
     #[inline] pub unsafe fn DestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyCommandPool.ptr)(device, commandPool, pAllocator) }
     #[inline] pub unsafe fn DestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkInstance, VkDebugReportCallbackEXT, *const VkAllocationCallbacks) -> ()>(storage::DestroyDebugReportCallbackEXT.ptr)(instance, callback, pAllocator) }
     #[inline] pub unsafe fn DestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkInstance, VkDebugUtilsMessengerEXT, *const VkAllocationCallbacks) -> ()>(storage::DestroyDebugUtilsMessengerEXT.ptr)(instance, messenger, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorPool.ptr)(device, descriptorPool, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorSetLayout, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorSetLayout.ptr)(device, descriptorSetLayout, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorUpdateTemplate, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorUpdateTemplate.ptr)(device, descriptorUpdateTemplate, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorUpdateTemplate, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorUpdateTemplateKHR.ptr)(device, descriptorUpdateTemplate, pAllocator) }
     #[inline] pub unsafe fn DestroyDevice(device: VkDevice, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkAllocationCallbacks) -> ()>(storage::DestroyDevice.ptr)(device, pAllocator) }
     #[inline] pub unsafe fn DestroyEvent(device: VkDevice, event: VkEvent, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent, *const VkAllocationCallbacks) -> ()>(storage::DestroyEvent.ptr)(device, event, pAllocator) }
     #[inline] pub unsafe fn DestroyFence(device: VkDevice, fence: VkFence, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkFence, *const VkAllocationCallbacks) -> ()>(storage::DestroyFence.ptr)(device, fence, pAllocator) }
     #[inline] pub unsafe fn DestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkFramebuffer, *const VkAllocationCallbacks) -> ()>(storage::DestroyFramebuffer.ptr)(device, framebuffer, pAllocator) }
     #[inline] pub unsafe fn DestroyImage(device: VkDevice, image: VkImage, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *const VkAllocationCallbacks) -> ()>(storage::DestroyImage.ptr)(device, image, pAllocator) }
     #[inline] pub unsafe fn DestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImageView, *const VkAllocationCallbacks) -> ()>(storage::DestroyImageView.ptr)(device, imageView, pAllocator) }
     #[inline] pub unsafe fn DestroyIndirectCommandsLayoutNVX(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNVX, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkIndirectCommandsLayoutNVX, *const VkAllocationCallbacks) -> ()>(storage::DestroyIndirectCommandsLayoutNVX.ptr)(device, indirectCommandsLayout, pAllocator) }
     #[inline] pub unsafe fn DestroyInstance(instance: VkInstance, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkInstance, *const VkAllocationCallbacks) -> ()>(storage::DestroyInstance.ptr)(instance, pAllocator) }
     #[inline] pub unsafe fn DestroyObjectTableNVX(device: VkDevice, objectTable: VkObjectTableNVX, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkObjectTableNVX, *const VkAllocationCallbacks) -> ()>(storage::DestroyObjectTableNVX.ptr)(device, objectTable, pAllocator) }
     #[inline] pub unsafe fn DestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipeline, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipeline.ptr)(device, pipeline, pAllocator) }
     #[inline] pub unsafe fn DestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipelineCache.ptr)(device, pipelineCache, pAllocator) }
     #[inline] pub unsafe fn DestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineLayout, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipelineLayout.ptr)(device, pipelineLayout, pAllocator) }
     #[inline] pub unsafe fn DestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyQueryPool.ptr)(device, queryPool, pAllocator) }
     #[inline] pub unsafe fn DestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkRenderPass, *const VkAllocationCallbacks) -> ()>(storage::DestroyRenderPass.ptr)(device, renderPass, pAllocator) }
     #[inline] pub unsafe fn DestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSampler, *const VkAllocationCallbacks) -> ()>(storage::DestroySampler.ptr)(device, sampler, pAllocator) }
     #[inline] pub unsafe fn DestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSamplerYcbcrConversion, *const VkAllocationCallbacks) -> ()>(storage::DestroySamplerYcbcrConversion.ptr)(device, ycbcrConversion, pAllocator) }
     #[inline] pub unsafe fn DestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSamplerYcbcrConversion, *const VkAllocationCallbacks) -> ()>(storage::DestroySamplerYcbcrConversionKHR.ptr)(device, ycbcrConversion, pAllocator) }
     #[inline] pub unsafe fn DestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSemaphore, *const VkAllocationCallbacks) -> ()>(storage::DestroySemaphore.ptr)(device, semaphore, pAllocator) }
     #[inline] pub unsafe fn DestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkShaderModule, *const VkAllocationCallbacks) -> ()>(storage::DestroyShaderModule.ptr)(device, shaderModule, pAllocator) }
     #[inline] pub unsafe fn DestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkInstance, VkSurfaceKHR, *const VkAllocationCallbacks) -> ()>(storage::DestroySurfaceKHR.ptr)(instance, surface, pAllocator) }
     #[inline] pub unsafe fn DestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, *const VkAllocationCallbacks) -> ()>(storage::DestroySwapchainKHR.ptr)(device, swapchain, pAllocator) }
     #[inline] pub unsafe fn DestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkValidationCacheEXT, *const VkAllocationCallbacks) -> ()>(storage::DestroyValidationCacheEXT.ptr)(device, validationCache, pAllocator) }
     #[inline] pub unsafe fn DeviceWaitIdle(device: VkDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice) -> VkResult>(storage::DeviceWaitIdle.ptr)(device) }
     #[inline] pub unsafe fn DisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: *const VkDisplayPowerInfoEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDisplayKHR, *const VkDisplayPowerInfoEXT) -> VkResult>(storage::DisplayPowerControlEXT.ptr)(device, display, pDisplayPowerInfo) }
     #[inline] pub unsafe fn EndCommandBuffer(commandBuffer: VkCommandBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> VkResult>(storage::EndCommandBuffer.ptr)(commandBuffer) }
     #[inline] pub unsafe fn EnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: *const std::os::raw::c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const std::os::raw::c_char, *mut u32, *mut VkExtensionProperties) -> VkResult>(storage::EnumerateDeviceExtensionProperties.ptr)(physicalDevice, pLayerName, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkLayerProperties) -> VkResult>(storage::EnumerateDeviceLayerProperties.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceExtensionProperties(pLayerName: *const std::os::raw::c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties) -> VkResult { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_char, *mut u32, *mut VkExtensionProperties) -> VkResult>(storage::EnumerateInstanceExtensionProperties.ptr)(pLayerName, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceLayerProperties(pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult { mem::transmute::<_, extern "system" fn(*mut u32, *mut VkLayerProperties) -> VkResult>(storage::EnumerateInstanceLayerProperties.ptr)(pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceVersion(pApiVersion: *mut u32) -> VkResult { mem::transmute::<_, extern "system" fn(*mut u32) -> VkResult>(storage::EnumerateInstanceVersion.ptr)(pApiVersion) }
     #[inline] pub unsafe fn EnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: *mut u32, pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *mut u32, *mut VkPhysicalDeviceGroupProperties) -> VkResult>(storage::EnumeratePhysicalDeviceGroups.ptr)(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) }
     #[inline] pub unsafe fn EnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: *mut u32, pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *mut u32, *mut VkPhysicalDeviceGroupProperties) -> VkResult>(storage::EnumeratePhysicalDeviceGroupsKHR.ptr)(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) }
     #[inline] pub unsafe fn EnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: *mut u32, pPhysicalDevices: *mut VkPhysicalDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *mut u32, *mut VkPhysicalDevice) -> VkResult>(storage::EnumeratePhysicalDevices.ptr)(instance, pPhysicalDeviceCount, pPhysicalDevices) }
     #[inline] pub unsafe fn FlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkMappedMemoryRange) -> VkResult>(storage::FlushMappedMemoryRanges.ptr)(device, memoryRangeCount, pMemoryRanges) }
     #[inline] pub unsafe fn FreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, u32, *const VkCommandBuffer) -> ()>(storage::FreeCommandBuffers.ptr)(device, commandPool, commandBufferCount, pCommandBuffers) }
     #[inline] pub unsafe fn FreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, u32, *const VkDescriptorSet) -> VkResult>(storage::FreeDescriptorSets.ptr)(device, descriptorPool, descriptorSetCount, pDescriptorSets) }
     #[inline] pub unsafe fn FreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, *const VkAllocationCallbacks) -> ()>(storage::FreeMemory.ptr)(device, memory, pAllocator) }
     #[inline] pub unsafe fn GetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkAccelerationStructureNV, usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetAccelerationStructureHandleNV.ptr)(device, accelerationStructure, dataSize, pData) }
     #[inline] pub unsafe fn GetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *mut VkMemoryRequirements2KHR) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkAccelerationStructureMemoryRequirementsInfoNV, *mut VkMemoryRequirements2KHR) -> ()>(storage::GetAccelerationStructureMemoryRequirementsNV.ptr)(device, pInfo, pMemoryRequirements) }
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] #[inline] pub unsafe fn GetAndroidHardwareBufferPropertiesANDROID(device: VkDevice, buffer: *const AHardwareBuffer, pProperties: *mut VkAndroidHardwareBufferPropertiesANDROID) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const AHardwareBuffer, *mut VkAndroidHardwareBufferPropertiesANDROID) -> VkResult>(storage::GetAndroidHardwareBufferPropertiesANDROID.ptr)(device, buffer, pProperties) }
     #[inline] pub unsafe fn GetBufferDeviceAddressEXT(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfoEXT) -> VkDeviceAddress { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferDeviceAddressInfoEXT) -> VkDeviceAddress>(storage::GetBufferDeviceAddressEXT.ptr)(device, pInfo) }
     #[inline] pub unsafe fn GetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: *mut VkMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, *mut VkMemoryRequirements) -> ()>(storage::GetBufferMemoryRequirements.ptr)(device, buffer, pMemoryRequirements) }
     #[inline] pub unsafe fn GetBufferMemoryRequirements2(device: VkDevice, pInfo: *const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetBufferMemoryRequirements2.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: *const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetBufferMemoryRequirements2KHR.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: *const VkCalibratedTimestampInfoEXT, pTimestamps: *mut u64, pMaxDeviation: *mut u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkCalibratedTimestampInfoEXT, *mut u64, *mut u64) -> VkResult>(storage::GetCalibratedTimestampsEXT.ptr)(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation) }
     #[inline] pub unsafe fn GetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pSupport: *mut VkDescriptorSetLayoutSupport) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetLayoutCreateInfo, *mut VkDescriptorSetLayoutSupport) -> ()>(storage::GetDescriptorSetLayoutSupport.ptr)(device, pCreateInfo, pSupport) }
     #[inline] pub unsafe fn GetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pSupport: *mut VkDescriptorSetLayoutSupport) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetLayoutCreateInfo, *mut VkDescriptorSetLayoutSupport) -> ()>(storage::GetDescriptorSetLayoutSupportKHR.ptr)(device, pCreateInfo, pSupport) }
     #[inline] pub unsafe fn GetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, u32, u32, *mut VkPeerMemoryFeatureFlags) -> ()>(storage::GetDeviceGroupPeerMemoryFeatures.ptr)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) }
     #[inline] pub unsafe fn GetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, u32, u32, *mut VkPeerMemoryFeatureFlags) -> ()>(storage::GetDeviceGroupPeerMemoryFeaturesKHR.ptr)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) }
     #[inline] pub unsafe fn GetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *mut VkDeviceGroupPresentCapabilitiesKHR) -> VkResult>(storage::GetDeviceGroupPresentCapabilitiesKHR.ptr)(device, pDeviceGroupPresentCapabilities) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetDeviceGroupSurfacePresentModes2EXT(device: VkDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pModes: *mut VkDeviceGroupPresentModeFlagsKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPhysicalDeviceSurfaceInfo2KHR, *mut VkDeviceGroupPresentModeFlagsKHR) -> VkResult>(storage::GetDeviceGroupSurfacePresentModes2EXT.ptr)(device, pSurfaceInfo, pModes) }
     #[inline] pub unsafe fn GetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: *mut VkDeviceGroupPresentModeFlagsKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSurfaceKHR, *mut VkDeviceGroupPresentModeFlagsKHR) -> VkResult>(storage::GetDeviceGroupSurfacePresentModesKHR.ptr)(device, surface, pModes) }
     #[inline] pub unsafe fn GetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: *mut VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, *mut VkDeviceSize) -> ()>(storage::GetDeviceMemoryCommitment.ptr)(device, memory, pCommittedMemoryInBytes) }
     #[inline] pub unsafe fn GetDeviceProcAddr(device: VkDevice, pName: *const std::os::raw::c_char) -> PFN_vkVoidFunction { mem::transmute::<_, extern "system" fn(VkDevice, *const std::os::raw::c_char) -> PFN_vkVoidFunction>(storage::GetDeviceProcAddr.ptr)(device, pName) }
     #[inline] pub unsafe fn GetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: *mut VkQueue) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, u32, *mut VkQueue) -> ()>(storage::GetDeviceQueue.ptr)(device, queueFamilyIndex, queueIndex, pQueue) }
     #[inline] pub unsafe fn GetDeviceQueue2(device: VkDevice, pQueueInfo: *const VkDeviceQueueInfo2, pQueue: *mut VkQueue) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDeviceQueueInfo2, *mut VkQueue) -> ()>(storage::GetDeviceQueue2.ptr)(device, pQueueInfo, pQueue) }
     #[inline] pub unsafe fn GetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *mut u32, pProperties: *mut VkDisplayModeProperties2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkDisplayKHR, *mut u32, *mut VkDisplayModeProperties2KHR) -> VkResult>(storage::GetDisplayModeProperties2KHR.ptr)(physicalDevice, display, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *mut u32, pProperties: *mut VkDisplayModePropertiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkDisplayKHR, *mut u32, *mut VkDisplayModePropertiesKHR) -> VkResult>(storage::GetDisplayModePropertiesKHR.ptr)(physicalDevice, display, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR, pCapabilities: *mut VkDisplayPlaneCapabilities2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkDisplayPlaneInfo2KHR, *mut VkDisplayPlaneCapabilities2KHR) -> VkResult>(storage::GetDisplayPlaneCapabilities2KHR.ptr)(physicalDevice, pDisplayPlaneInfo, pCapabilities) }
     #[inline] pub unsafe fn GetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkDisplayModeKHR, u32, *mut VkDisplayPlaneCapabilitiesKHR) -> VkResult>(storage::GetDisplayPlaneCapabilitiesKHR.ptr)(physicalDevice, mode, planeIndex, pCapabilities) }
     #[inline] pub unsafe fn GetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: *mut u32, pDisplays: *mut VkDisplayKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32, *mut u32, *mut VkDisplayKHR) -> VkResult>(storage::GetDisplayPlaneSupportedDisplaysKHR.ptr)(physicalDevice, planeIndex, pDisplayCount, pDisplays) }
     #[inline] pub unsafe fn GetEventStatus(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::GetEventStatus.ptr)(device, event) }
     #[inline] pub unsafe fn GetFenceFdKHR(device: VkDevice, pGetFdInfo: *const VkFenceGetFdInfoKHR, pFd: *mut std::os::raw::c_int) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFenceGetFdInfoKHR, *mut std::os::raw::c_int) -> VkResult>(storage::GetFenceFdKHR.ptr)(device, pGetFdInfo, pFd) }
     #[inline] pub unsafe fn GetFenceStatus(device: VkDevice, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkFence) -> VkResult>(storage::GetFenceStatus.ptr)(device, fence) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetFenceWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: *const VkFenceGetWin32HandleInfoKHR, pHandle: *mut HANDLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFenceGetWin32HandleInfoKHR, *mut HANDLE) -> VkResult>(storage::GetFenceWin32HandleKHR.ptr)(device, pGetWin32HandleInfo, pHandle) }
     #[inline] pub unsafe fn GetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: *mut VkImageDrmFormatModifierPropertiesEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *mut VkImageDrmFormatModifierPropertiesEXT) -> VkResult>(storage::GetImageDrmFormatModifierPropertiesEXT.ptr)(device, image, pProperties) }
     #[inline] pub unsafe fn GetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: *mut VkMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *mut VkMemoryRequirements) -> ()>(storage::GetImageMemoryRequirements.ptr)(device, image, pMemoryRequirements) }
     #[inline] pub unsafe fn GetImageMemoryRequirements2(device: VkDevice, pInfo: *const VkImageMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetImageMemoryRequirements2.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetImageMemoryRequirements2KHR(device: VkDevice, pInfo: *const VkImageMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetImageMemoryRequirements2KHR.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *mut u32, *mut VkSparseImageMemoryRequirements) -> ()>(storage::GetImageSparseMemoryRequirements.ptr)(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSparseMemoryRequirements2(device: VkDevice, pInfo: *const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageSparseMemoryRequirementsInfo2, *mut u32, *mut VkSparseImageMemoryRequirements2) -> ()>(storage::GetImageSparseMemoryRequirements2.ptr)(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: *const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageSparseMemoryRequirementsInfo2, *mut u32, *mut VkSparseImageMemoryRequirements2) -> ()>(storage::GetImageSparseMemoryRequirements2KHR.ptr)(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: *const VkImageSubresource, pLayout: *mut VkSubresourceLayout) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *const VkImageSubresource, *mut VkSubresourceLayout) -> ()>(storage::GetImageSubresourceLayout.ptr)(device, image, pSubresource, pLayout) }
     #[inline] pub unsafe fn GetImageViewHandleNVX(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u32 { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageViewHandleInfoNVX) -> u32>(storage::GetImageViewHandleNVX.ptr)(device, pInfo) }
     #[inline] pub unsafe fn GetInstanceProcAddr(instance: VkInstance, pName: *const std::os::raw::c_char) -> PFN_vkVoidFunction { mem::transmute::<_, extern "system" fn(VkInstance, *const std::os::raw::c_char) -> PFN_vkVoidFunction>(storage::GetInstanceProcAddr.ptr)(instance, pName) }
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] #[inline] pub unsafe fn GetMemoryAndroidHardwareBufferANDROID(device: VkDevice, pInfo: *const VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: *mut *mut AHardwareBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkMemoryGetAndroidHardwareBufferInfoANDROID, *mut *mut AHardwareBuffer) -> VkResult>(storage::GetMemoryAndroidHardwareBufferANDROID.ptr)(device, pInfo, pBuffer) }
     #[inline] pub unsafe fn GetMemoryFdKHR(device: VkDevice, pGetFdInfo: *const VkMemoryGetFdInfoKHR, pFd: *mut std::os::raw::c_int) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkMemoryGetFdInfoKHR, *mut std::os::raw::c_int) -> VkResult>(storage::GetMemoryFdKHR.ptr)(device, pGetFdInfo, pFd) }
     #[inline] pub unsafe fn GetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: std::os::raw::c_int, pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkExternalMemoryHandleTypeFlagBits, std::os::raw::c_int, *mut VkMemoryFdPropertiesKHR) -> VkResult>(storage::GetMemoryFdPropertiesKHR.ptr)(device, handleType, fd, pMemoryFdProperties) }
     #[inline] pub unsafe fn GetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: *const std::os::raw::c_void, pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkExternalMemoryHandleTypeFlagBits, *const std::os::raw::c_void, *mut VkMemoryHostPointerPropertiesEXT) -> VkResult>(storage::GetMemoryHostPointerPropertiesEXT.ptr)(device, handleType, pHostPointer, pMemoryHostPointerProperties) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetMemoryWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: *const VkMemoryGetWin32HandleInfoKHR, pHandle: *mut HANDLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkMemoryGetWin32HandleInfoKHR, *mut HANDLE) -> VkResult>(storage::GetMemoryWin32HandleKHR.ptr)(device, pGetWin32HandleInfo, pHandle) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetMemoryWin32HandleNV(device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: *mut HANDLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, *mut HANDLE) -> VkResult>(storage::GetMemoryWin32HandleNV.ptr)(device, memory, handleType, pHandle) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetMemoryWin32HandlePropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: *mut VkMemoryWin32HandlePropertiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkExternalMemoryHandleTypeFlagBits, HANDLE, *mut VkMemoryWin32HandlePropertiesKHR) -> VkResult>(storage::GetMemoryWin32HandlePropertiesKHR.ptr)(device, handleType, handle, pMemoryWin32HandleProperties) }
     #[inline] pub unsafe fn GetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: *mut u32, pPresentationTimings: *mut VkPastPresentationTimingGOOGLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, *mut u32, *mut VkPastPresentationTimingGOOGLE) -> VkResult>(storage::GetPastPresentationTimingGOOGLE.ptr)(device, swapchain, pPresentationTimingCount, pPresentationTimings) }
     #[inline] pub unsafe fn GetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: *mut VkPerformanceValueINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPerformanceParameterTypeINTEL, *mut VkPerformanceValueINTEL) -> VkResult>(storage::GetPerformanceParameterINTEL.ptr)(device, parameter, pValue) }
     #[inline] pub unsafe fn GetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: *mut u32, pTimeDomains: *mut VkTimeDomainEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkTimeDomainEXT) -> VkResult>(storage::GetPhysicalDeviceCalibrateableTimeDomainsEXT.ptr)(physicalDevice, pTimeDomainCount, pTimeDomains) }
     #[inline] pub unsafe fn GetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkCooperativeMatrixPropertiesNV) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkCooperativeMatrixPropertiesNV) -> VkResult>(storage::GetPhysicalDeviceCooperativeMatrixPropertiesNV.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPlaneProperties2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkDisplayPlaneProperties2KHR) -> VkResult>(storage::GetPhysicalDeviceDisplayPlaneProperties2KHR.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPlanePropertiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkDisplayPlanePropertiesKHR) -> VkResult>(storage::GetPhysicalDeviceDisplayPlanePropertiesKHR.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayProperties2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkDisplayProperties2KHR) -> VkResult>(storage::GetPhysicalDeviceDisplayProperties2KHR.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPropertiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkDisplayPropertiesKHR) -> VkResult>(storage::GetPhysicalDeviceDisplayPropertiesKHR.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *mut VkExternalBufferProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalBufferInfo, *mut VkExternalBufferProperties) -> ()>(storage::GetPhysicalDeviceExternalBufferProperties.ptr)(physicalDevice, pExternalBufferInfo, pExternalBufferProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *mut VkExternalBufferProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalBufferInfo, *mut VkExternalBufferProperties) -> ()>(storage::GetPhysicalDeviceExternalBufferPropertiesKHR.ptr)(physicalDevice, pExternalBufferInfo, pExternalBufferProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *mut VkExternalFenceProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalFenceInfo, *mut VkExternalFenceProperties) -> ()>(storage::GetPhysicalDeviceExternalFenceProperties.ptr)(physicalDevice, pExternalFenceInfo, pExternalFenceProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *mut VkExternalFenceProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalFenceInfo, *mut VkExternalFenceProperties) -> ()>(storage::GetPhysicalDeviceExternalFencePropertiesKHR.ptr)(physicalDevice, pExternalFenceInfo, pExternalFenceProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, *mut VkExternalImageFormatPropertiesNV) -> VkResult>(storage::GetPhysicalDeviceExternalImageFormatPropertiesNV.ptr)(physicalDevice, format, type_, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalSemaphoreInfo, *mut VkExternalSemaphoreProperties) -> ()>(storage::GetPhysicalDeviceExternalSemaphoreProperties.ptr)(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalSemaphoreInfo, *mut VkExternalSemaphoreProperties) -> ()>(storage::GetPhysicalDeviceExternalSemaphorePropertiesKHR.ptr)(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceFeatures) -> ()>(storage::GetPhysicalDeviceFeatures.ptr)(physicalDevice, pFeatures) }
     #[inline] pub unsafe fn GetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceFeatures2) -> ()>(storage::GetPhysicalDeviceFeatures2.ptr)(physicalDevice, pFeatures) }
     #[inline] pub unsafe fn GetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceFeatures2) -> ()>(storage::GetPhysicalDeviceFeatures2KHR.ptr)(physicalDevice, pFeatures) }
     #[inline] pub unsafe fn GetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, *mut VkFormatProperties) -> ()>(storage::GetPhysicalDeviceFormatProperties.ptr)(physicalDevice, format, pFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, *mut VkFormatProperties2) -> ()>(storage::GetPhysicalDeviceFormatProperties2.ptr)(physicalDevice, format, pFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, *mut VkFormatProperties2) -> ()>(storage::GetPhysicalDeviceFormatProperties2KHR.ptr)(physicalDevice, format, pFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkDeviceGeneratedCommandsFeaturesNVX, pLimits: *mut VkDeviceGeneratedCommandsLimitsNVX) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkDeviceGeneratedCommandsFeaturesNVX, *mut VkDeviceGeneratedCommandsLimitsNVX) -> ()>(storage::GetPhysicalDeviceGeneratedCommandsPropertiesNVX.ptr)(physicalDevice, pFeatures, pLimits) }
     #[inline] pub unsafe fn GetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: *mut VkImageFormatProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, *mut VkImageFormatProperties) -> VkResult>(storage::GetPhysicalDeviceImageFormatProperties.ptr)(physicalDevice, format, type_, tiling, usage, flags, pImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *mut VkImageFormatProperties2) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceImageFormatInfo2, *mut VkImageFormatProperties2) -> VkResult>(storage::GetPhysicalDeviceImageFormatProperties2.ptr)(physicalDevice, pImageFormatInfo, pImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *mut VkImageFormatProperties2) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceImageFormatInfo2, *mut VkImageFormatProperties2) -> VkResult>(storage::GetPhysicalDeviceImageFormatProperties2KHR.ptr)(physicalDevice, pImageFormatInfo, pImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceMemoryProperties) -> ()>(storage::GetPhysicalDeviceMemoryProperties.ptr)(physicalDevice, pMemoryProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceMemoryProperties2) -> ()>(storage::GetPhysicalDeviceMemoryProperties2.ptr)(physicalDevice, pMemoryProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceMemoryProperties2) -> ()>(storage::GetPhysicalDeviceMemoryProperties2KHR.ptr)(physicalDevice, pMemoryProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: *mut VkMultisamplePropertiesEXT) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSampleCountFlagBits, *mut VkMultisamplePropertiesEXT) -> ()>(storage::GetPhysicalDeviceMultisamplePropertiesEXT.ptr)(physicalDevice, samples, pMultisampleProperties) }
     #[inline] pub unsafe fn GetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: *mut u32, pRects: *mut VkRect2D) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSurfaceKHR, *mut u32, *mut VkRect2D) -> VkResult>(storage::GetPhysicalDevicePresentRectanglesKHR.ptr)(physicalDevice, surface, pRectCount, pRects) }
     #[inline] pub unsafe fn GetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceProperties) -> ()>(storage::GetPhysicalDeviceProperties.ptr)(physicalDevice, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceProperties2) -> ()>(storage::GetPhysicalDeviceProperties2.ptr)(physicalDevice, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceProperties2) -> ()>(storage::GetPhysicalDeviceProperties2KHR.ptr)(physicalDevice, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkQueueFamilyProperties) -> ()>(storage::GetPhysicalDeviceQueueFamilyProperties.ptr)(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkQueueFamilyProperties2) -> ()>(storage::GetPhysicalDeviceQueueFamilyProperties2.ptr)(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkQueueFamilyProperties2) -> ()>(storage::GetPhysicalDeviceQueueFamilyProperties2KHR.ptr)(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, *mut u32, *mut VkSparseImageFormatProperties) -> ()>(storage::GetPhysicalDeviceSparseImageFormatProperties.ptr)(physicalDevice, format, type_, samples, usage, tiling, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSparseImageFormatInfo2, *mut u32, *mut VkSparseImageFormatProperties2) -> ()>(storage::GetPhysicalDeviceSparseImageFormatProperties2.ptr)(physicalDevice, pFormatInfo, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSparseImageFormatInfo2, *mut u32, *mut VkSparseImageFormatProperties2) -> ()>(storage::GetPhysicalDeviceSparseImageFormatProperties2KHR.ptr)(physicalDevice, pFormatInfo, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: *mut u32, pCombinations: *mut VkFramebufferMixedSamplesCombinationNV) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkFramebufferMixedSamplesCombinationNV) -> VkResult>(storage::GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.ptr)(physicalDevice, pCombinationCount, pCombinations) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSurfaceKHR, *mut VkSurfaceCapabilities2EXT) -> VkResult>(storage::GetPhysicalDeviceSurfaceCapabilities2EXT.ptr)(physicalDevice, surface, pSurfaceCapabilities) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSurfaceInfo2KHR, *mut VkSurfaceCapabilities2KHR) -> VkResult>(storage::GetPhysicalDeviceSurfaceCapabilities2KHR.ptr)(physicalDevice, pSurfaceInfo, pSurfaceCapabilities) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSurfaceKHR, *mut VkSurfaceCapabilitiesKHR) -> VkResult>(storage::GetPhysicalDeviceSurfaceCapabilitiesKHR.ptr)(physicalDevice, surface, pSurfaceCapabilities) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *mut u32, pSurfaceFormats: *mut VkSurfaceFormat2KHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSurfaceInfo2KHR, *mut u32, *mut VkSurfaceFormat2KHR) -> VkResult>(storage::GetPhysicalDeviceSurfaceFormats2KHR.ptr)(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: *mut u32, pSurfaceFormats: *mut VkSurfaceFormatKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSurfaceKHR, *mut u32, *mut VkSurfaceFormatKHR) -> VkResult>(storage::GetPhysicalDeviceSurfaceFormatsKHR.ptr)(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: *mut u32, pPresentModes: *mut VkPresentModeKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSurfaceInfo2KHR, *mut u32, *mut VkPresentModeKHR) -> VkResult>(storage::GetPhysicalDeviceSurfacePresentModes2EXT.ptr)(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: *mut u32, pPresentModes: *mut VkPresentModeKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkSurfaceKHR, *mut u32, *mut VkPresentModeKHR) -> VkResult>(storage::GetPhysicalDeviceSurfacePresentModesKHR.ptr)(physicalDevice, surface, pPresentModeCount, pPresentModes) }
     #[inline] pub unsafe fn GetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: *mut VkBool32) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32, VkSurfaceKHR, *mut VkBool32) -> VkResult>(storage::GetPhysicalDeviceSurfaceSupportKHR.ptr)(physicalDevice, queueFamilyIndex, surface, pSupported) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] #[inline] pub unsafe fn GetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, display: *mut wl_display) -> VkBool32 { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32, *mut wl_display) -> VkBool32>(storage::GetPhysicalDeviceWaylandPresentationSupportKHR.ptr)(physicalDevice, queueFamilyIndex, display) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32) -> VkBool32 { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32) -> VkBool32>(storage::GetPhysicalDeviceWin32PresentationSupportKHR.ptr)(physicalDevice, queueFamilyIndex) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] #[inline] pub unsafe fn GetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, connection: *mut xcb_connection_t, visual_id: xcb_visualid_t) -> VkBool32 { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32, *mut xcb_connection_t, xcb_visualid_t) -> VkBool32>(storage::GetPhysicalDeviceXcbPresentationSupportKHR.ptr)(physicalDevice, queueFamilyIndex, connection, visual_id) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] #[inline] pub unsafe fn GetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, dpy: *mut Display, visualID: VisualID) -> VkBool32 { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, u32, *mut Display, VisualID) -> VkBool32>(storage::GetPhysicalDeviceXlibPresentationSupportKHR.ptr)(physicalDevice, queueFamilyIndex, dpy, visualID) }
     #[inline] pub unsafe fn GetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: *mut usize, pData: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, *mut usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetPipelineCacheData.ptr)(device, pipelineCache, pDataSize, pData) }
     #[inline] pub unsafe fn GetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: *mut std::os::raw::c_void, stride: VkDeviceSize, flags: VkQueryResultFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, u32, u32, usize, *mut std::os::raw::c_void, VkDeviceSize, VkQueryResultFlags) -> VkResult>(storage::GetQueryPoolResults.ptr)(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags) }
     #[inline] pub unsafe fn GetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: *mut u32, pCheckpointData: *mut VkCheckpointDataNV) -> () { mem::transmute::<_, extern "system" fn(VkQueue, *mut u32, *mut VkCheckpointDataNV) -> ()>(storage::GetQueueCheckpointDataNV.ptr)(queue, pCheckpointDataCount, pCheckpointData) }
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] #[inline] pub unsafe fn GetRandROutputDisplayEXT(physicalDevice: VkPhysicalDevice, dpy: *mut Display, rrOutput: RROutput, pDisplay: *mut VkDisplayKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut Display, RROutput, *mut VkDisplayKHR) -> VkResult>(storage::GetRandROutputDisplayEXT.ptr)(physicalDevice, dpy, rrOutput, pDisplay) }
     #[inline] pub unsafe fn GetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipeline, u32, u32, usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetRayTracingShaderGroupHandlesNV.ptr)(device, pipeline, firstGroup, groupCount, dataSize, pData) }
     #[inline] pub unsafe fn GetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, *mut VkRefreshCycleDurationGOOGLE) -> VkResult>(storage::GetRefreshCycleDurationGOOGLE.ptr)(device, swapchain, pDisplayTimingProperties) }
     #[inline] pub unsafe fn GetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkRenderPass, *mut VkExtent2D) -> ()>(storage::GetRenderAreaGranularity.ptr)(device, renderPass, pGranularity) }
     #[inline] pub unsafe fn GetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: *const VkSemaphoreGetFdInfoKHR, pFd: *mut std::os::raw::c_int) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreGetFdInfoKHR, *mut std::os::raw::c_int) -> VkResult>(storage::GetSemaphoreFdKHR.ptr)(device, pGetFdInfo, pFd) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn GetSemaphoreWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: *const VkSemaphoreGetWin32HandleInfoKHR, pHandle: *mut HANDLE) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreGetWin32HandleInfoKHR, *mut HANDLE) -> VkResult>(storage::GetSemaphoreWin32HandleKHR.ptr)(device, pGetWin32HandleInfo, pHandle) }
     #[inline] pub unsafe fn GetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: *mut usize, pInfo: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, *mut usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetShaderInfoAMD.ptr)(device, pipeline, shaderStage, infoType, pInfoSize, pInfo) }
     #[inline] pub unsafe fn GetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: *mut u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, *mut u64) -> VkResult>(storage::GetSwapchainCounterEXT.ptr)(device, swapchain, counter, pCounterValue) }
     #[inline] pub unsafe fn GetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: *mut u32, pSwapchainImages: *mut VkImage) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, *mut u32, *mut VkImage) -> VkResult>(storage::GetSwapchainImagesKHR.ptr)(device, swapchain, pSwapchainImageCount, pSwapchainImages) }
     #[inline] pub unsafe fn GetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR) -> VkResult>(storage::GetSwapchainStatusKHR.ptr)(device, swapchain) }
     #[inline] pub unsafe fn GetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: *mut usize, pData: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkValidationCacheEXT, *mut usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetValidationCacheDataEXT.ptr)(device, validationCache, pDataSize, pData) }
     #[inline] pub unsafe fn ImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: *const VkImportFenceFdInfoKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImportFenceFdInfoKHR) -> VkResult>(storage::ImportFenceFdKHR.ptr)(device, pImportFenceFdInfo) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn ImportFenceWin32HandleKHR(device: VkDevice, pImportFenceWin32HandleInfo: *const VkImportFenceWin32HandleInfoKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImportFenceWin32HandleInfoKHR) -> VkResult>(storage::ImportFenceWin32HandleKHR.ptr)(device, pImportFenceWin32HandleInfo) }
     #[inline] pub unsafe fn ImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImportSemaphoreFdInfoKHR) -> VkResult>(storage::ImportSemaphoreFdKHR.ptr)(device, pImportSemaphoreFdInfo) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn ImportSemaphoreWin32HandleKHR(device: VkDevice, pImportSemaphoreWin32HandleInfo: *const VkImportSemaphoreWin32HandleInfoKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImportSemaphoreWin32HandleInfoKHR) -> VkResult>(storage::ImportSemaphoreWin32HandleKHR.ptr)(device, pImportSemaphoreWin32HandleInfo) }
     #[inline] pub unsafe fn InitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkInitializePerformanceApiInfoINTEL) -> VkResult>(storage::InitializePerformanceApiINTEL.ptr)(device, pInitializeInfo) }
     #[inline] pub unsafe fn InvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkMappedMemoryRange) -> VkResult>(storage::InvalidateMappedMemoryRanges.ptr)(device, memoryRangeCount, pMemoryRanges) }
     #[inline] pub unsafe fn MapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: *mut *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, *mut *mut std::os::raw::c_void) -> VkResult>(storage::MapMemory.ptr)(device, memory, offset, size, flags, ppData) }
     #[inline] pub unsafe fn MergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: *const VkPipelineCache) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkPipelineCache) -> VkResult>(storage::MergePipelineCaches.ptr)(device, dstCache, srcCacheCount, pSrcCaches) }
     #[inline] pub unsafe fn MergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: *const VkValidationCacheEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkValidationCacheEXT, u32, *const VkValidationCacheEXT) -> VkResult>(storage::MergeValidationCachesEXT.ptr)(device, dstCache, srcCacheCount, pSrcCaches) }
     #[inline] pub unsafe fn QueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT) -> () { mem::transmute::<_, extern "system" fn(VkQueue, *const VkDebugUtilsLabelEXT) -> ()>(storage::QueueBeginDebugUtilsLabelEXT.ptr)(queue, pLabelInfo) }
     #[inline] pub unsafe fn QueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: *const VkBindSparseInfo, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, u32, *const VkBindSparseInfo, VkFence) -> VkResult>(storage::QueueBindSparse.ptr)(queue, bindInfoCount, pBindInfo, fence) }
     #[inline] pub unsafe fn QueueEndDebugUtilsLabelEXT(queue: VkQueue) -> () { mem::transmute::<_, extern "system" fn(VkQueue) -> ()>(storage::QueueEndDebugUtilsLabelEXT.ptr)(queue) }
     #[inline] pub unsafe fn QueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT) -> () { mem::transmute::<_, extern "system" fn(VkQueue, *const VkDebugUtilsLabelEXT) -> ()>(storage::QueueInsertDebugUtilsLabelEXT.ptr)(queue, pLabelInfo) }
     #[inline] pub unsafe fn QueuePresentKHR(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, *const VkPresentInfoKHR) -> VkResult>(storage::QueuePresentKHR.ptr)(queue, pPresentInfo) }
     #[inline] pub unsafe fn QueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, VkPerformanceConfigurationINTEL) -> VkResult>(storage::QueueSetPerformanceConfigurationINTEL.ptr)(queue, configuration) }
     #[inline] pub unsafe fn QueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: *const VkSubmitInfo, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, u32, *const VkSubmitInfo, VkFence) -> VkResult>(storage::QueueSubmit.ptr)(queue, submitCount, pSubmits, fence) }
     #[inline] pub unsafe fn QueueWaitIdle(queue: VkQueue) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue) -> VkResult>(storage::QueueWaitIdle.ptr)(queue) }
     #[inline] pub unsafe fn RegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: *const VkDeviceEventInfoEXT, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDeviceEventInfoEXT, *const VkAllocationCallbacks, *mut VkFence) -> VkResult>(storage::RegisterDeviceEventEXT.ptr)(device, pDeviceEventInfo, pAllocator, pFence) }
     #[inline] pub unsafe fn RegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: *const VkDisplayEventInfoEXT, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDisplayKHR, *const VkDisplayEventInfoEXT, *const VkAllocationCallbacks, *mut VkFence) -> VkResult>(storage::RegisterDisplayEventEXT.ptr)(device, display, pDisplayEventInfo, pAllocator, pFence) }
     #[inline] pub unsafe fn RegisterObjectsNVX(device: VkDevice, objectTable: VkObjectTableNVX, objectCount: u32, ppObjectTableEntries: *const *const VkObjectTableEntryNVX, pObjectIndices: *const u32) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkObjectTableNVX, u32, *const *const VkObjectTableEntryNVX, *const u32) -> VkResult>(storage::RegisterObjectsNVX.ptr)(device, objectTable, objectCount, ppObjectTableEntries, pObjectIndices) }
     #[inline] pub unsafe fn ReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkDisplayKHR) -> VkResult>(storage::ReleaseDisplayEXT.ptr)(physicalDevice, display) }
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] #[inline] pub unsafe fn ReleaseFullScreenExclusiveModeEXT(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR) -> VkResult>(storage::ReleaseFullScreenExclusiveModeEXT.ptr)(device, swapchain) }
     #[inline] pub unsafe fn ReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPerformanceConfigurationINTEL) -> VkResult>(storage::ReleasePerformanceConfigurationINTEL.ptr)(device, configuration) }
     #[inline] pub unsafe fn ResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkCommandBufferResetFlags) -> VkResult>(storage::ResetCommandBuffer.ptr)(commandBuffer, flags) }
     #[inline] pub unsafe fn ResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, VkCommandPoolResetFlags) -> VkResult>(storage::ResetCommandPool.ptr)(device, commandPool, flags) }
     #[inline] pub unsafe fn ResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) -> VkResult>(storage::ResetDescriptorPool.ptr)(device, descriptorPool, flags) }
     #[inline] pub unsafe fn ResetEvent(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::ResetEvent.ptr)(device, event) }
     #[inline] pub unsafe fn ResetFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkFence) -> VkResult>(storage::ResetFences.ptr)(device, fenceCount, pFences) }
     #[inline] pub unsafe fn ResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, u32, u32) -> ()>(storage::ResetQueryPoolEXT.ptr)(device, queryPool, firstQuery, queryCount) }
     #[inline] pub unsafe fn SetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: *const VkDebugUtilsObjectNameInfoEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDebugUtilsObjectNameInfoEXT) -> VkResult>(storage::SetDebugUtilsObjectNameEXT.ptr)(device, pNameInfo) }
     #[inline] pub unsafe fn SetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: *const VkDebugUtilsObjectTagInfoEXT) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDebugUtilsObjectTagInfoEXT) -> VkResult>(storage::SetDebugUtilsObjectTagEXT.ptr)(device, pTagInfo) }
     #[inline] pub unsafe fn SetEvent(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::SetEvent.ptr)(device, event) }
     #[inline] pub unsafe fn SetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: *const VkSwapchainKHR, pMetadata: *const VkHdrMetadataEXT) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkSwapchainKHR, *const VkHdrMetadataEXT) -> ()>(storage::SetHdrMetadataEXT.ptr)(device, swapchainCount, pSwapchains, pMetadata) }
     #[inline] pub unsafe fn SetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSwapchainKHR, VkBool32) -> ()>(storage::SetLocalDimmingAMD.ptr)(device, swapChain, localDimmingEnable) }
     #[inline] pub unsafe fn SubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT) -> () { mem::transmute::<_, extern "system" fn(VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, *const VkDebugUtilsMessengerCallbackDataEXT) -> ()>(storage::SubmitDebugUtilsMessageEXT.ptr)(instance, messageSeverity, messageTypes, pCallbackData) }
     #[inline] pub unsafe fn TrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, VkCommandPoolTrimFlags) -> ()>(storage::TrimCommandPool.ptr)(device, commandPool, flags) }
     #[inline] pub unsafe fn TrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, VkCommandPoolTrimFlags) -> ()>(storage::TrimCommandPoolKHR.ptr)(device, commandPool, flags) }
     #[inline] pub unsafe fn UninitializePerformanceApiINTEL(device: VkDevice) -> () { mem::transmute::<_, extern "system" fn(VkDevice) -> ()>(storage::UninitializePerformanceApiINTEL.ptr)(device) }
     #[inline] pub unsafe fn UnmapMemory(device: VkDevice, memory: VkDeviceMemory) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory) -> ()>(storage::UnmapMemory.ptr)(device, memory) }
     #[inline] pub unsafe fn UnregisterObjectsNVX(device: VkDevice, objectTable: VkObjectTableNVX, objectCount: u32, pObjectEntryTypes: *const VkObjectEntryTypeNVX, pObjectIndices: *const u32) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkObjectTableNVX, u32, *const VkObjectEntryTypeNVX, *const u32) -> VkResult>(storage::UnregisterObjectsNVX.ptr)(device, objectTable, objectCount, pObjectEntryTypes, pObjectIndices) }
     #[inline] pub unsafe fn UpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, *const std::os::raw::c_void) -> ()>(storage::UpdateDescriptorSetWithTemplate.ptr)(device, descriptorSet, descriptorUpdateTemplate, pData) }
     #[inline] pub unsafe fn UpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, *const std::os::raw::c_void) -> ()>(storage::UpdateDescriptorSetWithTemplateKHR.ptr)(device, descriptorSet, descriptorUpdateTemplate, pData) }
     #[inline] pub unsafe fn UpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: *const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *const VkCopyDescriptorSet) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkWriteDescriptorSet, u32, *const VkCopyDescriptorSet) -> ()>(storage::UpdateDescriptorSets.ptr)(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) }
     #[inline] pub unsafe fn WaitForFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence, waitAll: VkBool32, timeout: u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkFence, VkBool32, u64) -> VkResult>(storage::WaitForFences.ptr)(device, fenceCount, pFences, waitAll, timeout) }
}

mod storage {
    #![allow(non_snake_case, non_upper_case_globals)]

    use super::FnPtr;
    use std::os::raw;

    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut AcquireFullScreenExclusiveModeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AcquireNextImage2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AcquireNextImageKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AcquirePerformanceConfigurationINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] pub static mut AcquireXlibDisplayEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AllocateCommandBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AllocateDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AllocateMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindAccelerationStructureMemoryNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferMemory2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferMemory2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageMemory2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageMemory2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginConditionalRenderingEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginQueryIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginRenderPass2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginTransformFeedbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindIndexBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindShadingRateImageNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindTransformFeedbackBuffersEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindVertexBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBlitImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBuildAccelerationStructureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearAttachments: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearColorImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearDepthStencilImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyAccelerationStructureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyBufferToImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyImageToBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyQueryPoolResults: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDebugMarkerBeginEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDebugMarkerEndEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDebugMarkerInsertEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatch: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatchBase: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatchBaseKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatchIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDraw: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexedIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexedIndirectCountAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexedIndirectCountKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirectByteCountEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirectCountAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirectCountKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawMeshTasksIndirectCountNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawMeshTasksIndirectNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawMeshTasksNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndConditionalRenderingEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndQueryIndexedEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndRenderPass2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndTransformFeedbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdExecuteCommands: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdFillBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdInsertDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdNextSubpass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdNextSubpass2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPipelineBarrier: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdProcessCommandsNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPushConstants: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPushDescriptorSetKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPushDescriptorSetWithTemplateKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdReserveSpaceForCommandsNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResetQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResolveImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetBlendConstants: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetCheckpointNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetCoarseSampleOrderNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDepthBias: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDepthBounds: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDeviceMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDeviceMaskKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDiscardRectangleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetExclusiveScissorNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetLineStippleEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetLineWidth: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetPerformanceMarkerINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetPerformanceOverrideINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetPerformanceStreamMarkerINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetSampleLocationsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetScissor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilCompareMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilReference: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilWriteMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetViewport: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetViewportShadingRatePaletteNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetViewportWScalingNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdTraceRaysNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdUpdateBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWaitEvents: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWriteAccelerationStructuresPropertiesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWriteBufferMarkerAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWriteTimestamp: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CompileDeferredNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateAccelerationStructureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub static mut CreateAndroidSurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateBufferView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateComputePipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDebugReportCallbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDebugUtilsMessengerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorSetLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorUpdateTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorUpdateTemplateKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDevice: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDisplayModeKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDisplayPlaneSurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateFence: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateGraphicsPipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateHeadlessSurfaceEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] pub static mut CreateIOSSurfaceMVK: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] pub static mut CreateImagePipeSurfaceFUCHSIA: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateImageView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateIndirectCommandsLayoutNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] pub static mut CreateMacOSSurfaceMVK: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] pub static mut CreateMetalSurfaceEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateObjectTableNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreatePipelineCache: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreatePipelineLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRayTracingPipelinesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRenderPass2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSamplerYcbcrConversion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSamplerYcbcrConversionKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSemaphore: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShaderModule: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSharedSwapchainsKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] pub static mut CreateStreamDescriptorSurfaceGGP: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSwapchainKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateValidationCacheEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] pub static mut CreateViSurfaceNN: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] pub static mut CreateWaylandSurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut CreateWin32SurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] pub static mut CreateXcbSurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] pub static mut CreateXlibSurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMarkerSetObjectNameEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugMarkerSetObjectTagEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DebugReportMessageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyAccelerationStructureNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyBufferView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDebugReportCallbackEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDebugUtilsMessengerEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorSetLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorUpdateTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorUpdateTemplateKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDevice: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyFence: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyImageView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyIndirectCommandsLayoutNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyObjectTableNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipelineCache: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipelineLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySamplerYcbcrConversion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySamplerYcbcrConversionKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySemaphore: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyShaderModule: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySurfaceKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySwapchainKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyValidationCacheEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeviceWaitIdle: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DisplayPowerControlEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateDeviceExtensionProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateDeviceLayerProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceExtensionProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceLayerProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceVersion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumeratePhysicalDeviceGroups: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumeratePhysicalDeviceGroupsKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumeratePhysicalDevices: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedMemoryRanges: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeCommandBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAccelerationStructureHandleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetAccelerationStructureMemoryRequirementsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub static mut GetAndroidHardwareBufferPropertiesANDROID: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferDeviceAddressEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferMemoryRequirements2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetCalibratedTimestampsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDescriptorSetLayoutSupport: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDescriptorSetLayoutSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceGroupPeerMemoryFeatures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceGroupPeerMemoryFeaturesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceGroupPresentCapabilitiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetDeviceGroupSurfacePresentModes2EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceGroupSurfacePresentModesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceMemoryCommitment: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceProcAddr: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceQueue: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceQueue2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDisplayModeProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDisplayModePropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDisplayPlaneCapabilities2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDisplayPlaneCapabilitiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDisplayPlaneSupportedDisplaysKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetEventStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFenceFdKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFenceStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetFenceWin32HandleKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageDrmFormatModifierPropertiesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageMemoryRequirements2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSparseMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSparseMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSparseMemoryRequirements2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSubresourceLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageViewHandleNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInstanceProcAddr: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub static mut GetMemoryAndroidHardwareBufferANDROID: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMemoryFdKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMemoryFdPropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetMemoryHostPointerPropertiesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetMemoryWin32HandleKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetMemoryWin32HandleNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetMemoryWin32HandlePropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPastPresentationTimingGOOGLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPerformanceParameterINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceCalibrateableTimeDomainsEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceCooperativeMatrixPropertiesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceDisplayPlaneProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceDisplayPlanePropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceDisplayProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceDisplayPropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalBufferProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalBufferPropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalFenceProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalFencePropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalImageFormatPropertiesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalSemaphoreProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalSemaphorePropertiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFeatures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFeatures2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFeatures2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFormatProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceGeneratedCommandsPropertiesNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceImageFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceImageFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceImageFormatProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMemoryProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMemoryProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMemoryProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMultisamplePropertiesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDevicePresentRectanglesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceQueueFamilyProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceQueueFamilyProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceQueueFamilyProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSparseImageFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSparseImageFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSparseImageFormatProperties2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceCapabilities2EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceCapabilities2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceCapabilitiesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceFormats2KHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceFormatsKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetPhysicalDeviceSurfacePresentModes2EXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfacePresentModesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSurfaceSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] pub static mut GetPhysicalDeviceWaylandPresentationSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetPhysicalDeviceWin32PresentationSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] pub static mut GetPhysicalDeviceXcbPresentationSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] pub static mut GetPhysicalDeviceXlibPresentationSupportKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPipelineCacheData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryPoolResults: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueueCheckpointDataNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] pub static mut GetRandROutputDisplayEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRayTracingShaderGroupHandlesNV: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRefreshCycleDurationGOOGLE: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRenderAreaGranularity: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSemaphoreFdKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut GetSemaphoreWin32HandleKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetShaderInfoAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSwapchainCounterEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSwapchainImagesKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSwapchainStatusKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetValidationCacheDataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportFenceFdKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut ImportFenceWin32HandleKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ImportSemaphoreFdKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut ImportSemaphoreWin32HandleKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InitializePerformanceApiINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateMappedMemoryRanges: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MergePipelineCaches: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MergeValidationCachesEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueBeginDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueBindSparse: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueEndDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueInsertDebugUtilsLabelEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueuePresentKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueSetPerformanceConfigurationINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueSubmit: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueWaitIdle: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RegisterDeviceEventEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RegisterDisplayEventEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut RegisterObjectsNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReleaseDisplayEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub static mut ReleaseFullScreenExclusiveModeEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ReleasePerformanceConfigurationINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetFences: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetQueryPoolEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetDebugUtilsObjectNameEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetDebugUtilsObjectTagEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetHdrMetadataEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetLocalDimmingAMD: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SubmitDebugUtilsMessageEXT: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TrimCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TrimCommandPoolKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UninitializePerformanceApiINTEL: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnregisterObjectsNVX: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateDescriptorSetWithTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateDescriptorSetWithTemplateKHR: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitForFences: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
}

pub fn load<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const raw::c_void {
    unsafe {
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::AcquireFullScreenExclusiveModeEXT.load(&mut loadfn, "vkAcquireFullScreenExclusiveModeEXT");
         storage::AcquireNextImage2KHR.load(&mut loadfn, "vkAcquireNextImage2KHR");
         storage::AcquireNextImageKHR.load(&mut loadfn, "vkAcquireNextImageKHR");
         storage::AcquirePerformanceConfigurationINTEL.load(&mut loadfn, "vkAcquirePerformanceConfigurationINTEL");
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] storage::AcquireXlibDisplayEXT.load(&mut loadfn, "vkAcquireXlibDisplayEXT");
         storage::AllocateCommandBuffers.load(&mut loadfn, "vkAllocateCommandBuffers");
         storage::AllocateDescriptorSets.load(&mut loadfn, "vkAllocateDescriptorSets");
         storage::AllocateMemory.load(&mut loadfn, "vkAllocateMemory");
         storage::BeginCommandBuffer.load(&mut loadfn, "vkBeginCommandBuffer");
         storage::BindAccelerationStructureMemoryNV.load(&mut loadfn, "vkBindAccelerationStructureMemoryNV");
         storage::BindBufferMemory.load(&mut loadfn, "vkBindBufferMemory");
         storage::BindBufferMemory2.load(&mut loadfn, "vkBindBufferMemory2");
         storage::BindBufferMemory2KHR.load(&mut loadfn, "vkBindBufferMemory2KHR");
         storage::BindImageMemory.load(&mut loadfn, "vkBindImageMemory");
         storage::BindImageMemory2.load(&mut loadfn, "vkBindImageMemory2");
         storage::BindImageMemory2KHR.load(&mut loadfn, "vkBindImageMemory2KHR");
         storage::CmdBeginConditionalRenderingEXT.load(&mut loadfn, "vkCmdBeginConditionalRenderingEXT");
         storage::CmdBeginDebugUtilsLabelEXT.load(&mut loadfn, "vkCmdBeginDebugUtilsLabelEXT");
         storage::CmdBeginQuery.load(&mut loadfn, "vkCmdBeginQuery");
         storage::CmdBeginQueryIndexedEXT.load(&mut loadfn, "vkCmdBeginQueryIndexedEXT");
         storage::CmdBeginRenderPass.load(&mut loadfn, "vkCmdBeginRenderPass");
         storage::CmdBeginRenderPass2KHR.load(&mut loadfn, "vkCmdBeginRenderPass2KHR");
         storage::CmdBeginTransformFeedbackEXT.load(&mut loadfn, "vkCmdBeginTransformFeedbackEXT");
         storage::CmdBindDescriptorSets.load(&mut loadfn, "vkCmdBindDescriptorSets");
         storage::CmdBindIndexBuffer.load(&mut loadfn, "vkCmdBindIndexBuffer");
         storage::CmdBindPipeline.load(&mut loadfn, "vkCmdBindPipeline");
         storage::CmdBindShadingRateImageNV.load(&mut loadfn, "vkCmdBindShadingRateImageNV");
         storage::CmdBindTransformFeedbackBuffersEXT.load(&mut loadfn, "vkCmdBindTransformFeedbackBuffersEXT");
         storage::CmdBindVertexBuffers.load(&mut loadfn, "vkCmdBindVertexBuffers");
         storage::CmdBlitImage.load(&mut loadfn, "vkCmdBlitImage");
         storage::CmdBuildAccelerationStructureNV.load(&mut loadfn, "vkCmdBuildAccelerationStructureNV");
         storage::CmdClearAttachments.load(&mut loadfn, "vkCmdClearAttachments");
         storage::CmdClearColorImage.load(&mut loadfn, "vkCmdClearColorImage");
         storage::CmdClearDepthStencilImage.load(&mut loadfn, "vkCmdClearDepthStencilImage");
         storage::CmdCopyAccelerationStructureNV.load(&mut loadfn, "vkCmdCopyAccelerationStructureNV");
         storage::CmdCopyBuffer.load(&mut loadfn, "vkCmdCopyBuffer");
         storage::CmdCopyBufferToImage.load(&mut loadfn, "vkCmdCopyBufferToImage");
         storage::CmdCopyImage.load(&mut loadfn, "vkCmdCopyImage");
         storage::CmdCopyImageToBuffer.load(&mut loadfn, "vkCmdCopyImageToBuffer");
         storage::CmdCopyQueryPoolResults.load(&mut loadfn, "vkCmdCopyQueryPoolResults");
         storage::CmdDebugMarkerBeginEXT.load(&mut loadfn, "vkCmdDebugMarkerBeginEXT");
         storage::CmdDebugMarkerEndEXT.load(&mut loadfn, "vkCmdDebugMarkerEndEXT");
         storage::CmdDebugMarkerInsertEXT.load(&mut loadfn, "vkCmdDebugMarkerInsertEXT");
         storage::CmdDispatch.load(&mut loadfn, "vkCmdDispatch");
         storage::CmdDispatchBase.load(&mut loadfn, "vkCmdDispatchBase");
         storage::CmdDispatchBaseKHR.load(&mut loadfn, "vkCmdDispatchBaseKHR");
         storage::CmdDispatchIndirect.load(&mut loadfn, "vkCmdDispatchIndirect");
         storage::CmdDraw.load(&mut loadfn, "vkCmdDraw");
         storage::CmdDrawIndexed.load(&mut loadfn, "vkCmdDrawIndexed");
         storage::CmdDrawIndexedIndirect.load(&mut loadfn, "vkCmdDrawIndexedIndirect");
         storage::CmdDrawIndexedIndirectCountAMD.load(&mut loadfn, "vkCmdDrawIndexedIndirectCountAMD");
         storage::CmdDrawIndexedIndirectCountKHR.load(&mut loadfn, "vkCmdDrawIndexedIndirectCountKHR");
         storage::CmdDrawIndirect.load(&mut loadfn, "vkCmdDrawIndirect");
         storage::CmdDrawIndirectByteCountEXT.load(&mut loadfn, "vkCmdDrawIndirectByteCountEXT");
         storage::CmdDrawIndirectCountAMD.load(&mut loadfn, "vkCmdDrawIndirectCountAMD");
         storage::CmdDrawIndirectCountKHR.load(&mut loadfn, "vkCmdDrawIndirectCountKHR");
         storage::CmdDrawMeshTasksIndirectCountNV.load(&mut loadfn, "vkCmdDrawMeshTasksIndirectCountNV");
         storage::CmdDrawMeshTasksIndirectNV.load(&mut loadfn, "vkCmdDrawMeshTasksIndirectNV");
         storage::CmdDrawMeshTasksNV.load(&mut loadfn, "vkCmdDrawMeshTasksNV");
         storage::CmdEndConditionalRenderingEXT.load(&mut loadfn, "vkCmdEndConditionalRenderingEXT");
         storage::CmdEndDebugUtilsLabelEXT.load(&mut loadfn, "vkCmdEndDebugUtilsLabelEXT");
         storage::CmdEndQuery.load(&mut loadfn, "vkCmdEndQuery");
         storage::CmdEndQueryIndexedEXT.load(&mut loadfn, "vkCmdEndQueryIndexedEXT");
         storage::CmdEndRenderPass.load(&mut loadfn, "vkCmdEndRenderPass");
         storage::CmdEndRenderPass2KHR.load(&mut loadfn, "vkCmdEndRenderPass2KHR");
         storage::CmdEndTransformFeedbackEXT.load(&mut loadfn, "vkCmdEndTransformFeedbackEXT");
         storage::CmdExecuteCommands.load(&mut loadfn, "vkCmdExecuteCommands");
         storage::CmdFillBuffer.load(&mut loadfn, "vkCmdFillBuffer");
         storage::CmdInsertDebugUtilsLabelEXT.load(&mut loadfn, "vkCmdInsertDebugUtilsLabelEXT");
         storage::CmdNextSubpass.load(&mut loadfn, "vkCmdNextSubpass");
         storage::CmdNextSubpass2KHR.load(&mut loadfn, "vkCmdNextSubpass2KHR");
         storage::CmdPipelineBarrier.load(&mut loadfn, "vkCmdPipelineBarrier");
         storage::CmdProcessCommandsNVX.load(&mut loadfn, "vkCmdProcessCommandsNVX");
         storage::CmdPushConstants.load(&mut loadfn, "vkCmdPushConstants");
         storage::CmdPushDescriptorSetKHR.load(&mut loadfn, "vkCmdPushDescriptorSetKHR");
         storage::CmdPushDescriptorSetWithTemplateKHR.load(&mut loadfn, "vkCmdPushDescriptorSetWithTemplateKHR");
         storage::CmdReserveSpaceForCommandsNVX.load(&mut loadfn, "vkCmdReserveSpaceForCommandsNVX");
         storage::CmdResetEvent.load(&mut loadfn, "vkCmdResetEvent");
         storage::CmdResetQueryPool.load(&mut loadfn, "vkCmdResetQueryPool");
         storage::CmdResolveImage.load(&mut loadfn, "vkCmdResolveImage");
         storage::CmdSetBlendConstants.load(&mut loadfn, "vkCmdSetBlendConstants");
         storage::CmdSetCheckpointNV.load(&mut loadfn, "vkCmdSetCheckpointNV");
         storage::CmdSetCoarseSampleOrderNV.load(&mut loadfn, "vkCmdSetCoarseSampleOrderNV");
         storage::CmdSetDepthBias.load(&mut loadfn, "vkCmdSetDepthBias");
         storage::CmdSetDepthBounds.load(&mut loadfn, "vkCmdSetDepthBounds");
         storage::CmdSetDeviceMask.load(&mut loadfn, "vkCmdSetDeviceMask");
         storage::CmdSetDeviceMaskKHR.load(&mut loadfn, "vkCmdSetDeviceMaskKHR");
         storage::CmdSetDiscardRectangleEXT.load(&mut loadfn, "vkCmdSetDiscardRectangleEXT");
         storage::CmdSetEvent.load(&mut loadfn, "vkCmdSetEvent");
         storage::CmdSetExclusiveScissorNV.load(&mut loadfn, "vkCmdSetExclusiveScissorNV");
         storage::CmdSetLineStippleEXT.load(&mut loadfn, "vkCmdSetLineStippleEXT");
         storage::CmdSetLineWidth.load(&mut loadfn, "vkCmdSetLineWidth");
         storage::CmdSetPerformanceMarkerINTEL.load(&mut loadfn, "vkCmdSetPerformanceMarkerINTEL");
         storage::CmdSetPerformanceOverrideINTEL.load(&mut loadfn, "vkCmdSetPerformanceOverrideINTEL");
         storage::CmdSetPerformanceStreamMarkerINTEL.load(&mut loadfn, "vkCmdSetPerformanceStreamMarkerINTEL");
         storage::CmdSetSampleLocationsEXT.load(&mut loadfn, "vkCmdSetSampleLocationsEXT");
         storage::CmdSetScissor.load(&mut loadfn, "vkCmdSetScissor");
         storage::CmdSetStencilCompareMask.load(&mut loadfn, "vkCmdSetStencilCompareMask");
         storage::CmdSetStencilReference.load(&mut loadfn, "vkCmdSetStencilReference");
         storage::CmdSetStencilWriteMask.load(&mut loadfn, "vkCmdSetStencilWriteMask");
         storage::CmdSetViewport.load(&mut loadfn, "vkCmdSetViewport");
         storage::CmdSetViewportShadingRatePaletteNV.load(&mut loadfn, "vkCmdSetViewportShadingRatePaletteNV");
         storage::CmdSetViewportWScalingNV.load(&mut loadfn, "vkCmdSetViewportWScalingNV");
         storage::CmdTraceRaysNV.load(&mut loadfn, "vkCmdTraceRaysNV");
         storage::CmdUpdateBuffer.load(&mut loadfn, "vkCmdUpdateBuffer");
         storage::CmdWaitEvents.load(&mut loadfn, "vkCmdWaitEvents");
         storage::CmdWriteAccelerationStructuresPropertiesNV.load(&mut loadfn, "vkCmdWriteAccelerationStructuresPropertiesNV");
         storage::CmdWriteBufferMarkerAMD.load(&mut loadfn, "vkCmdWriteBufferMarkerAMD");
         storage::CmdWriteTimestamp.load(&mut loadfn, "vkCmdWriteTimestamp");
         storage::CompileDeferredNV.load(&mut loadfn, "vkCompileDeferredNV");
         storage::CreateAccelerationStructureNV.load(&mut loadfn, "vkCreateAccelerationStructureNV");
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] storage::CreateAndroidSurfaceKHR.load(&mut loadfn, "vkCreateAndroidSurfaceKHR");
         storage::CreateBuffer.load(&mut loadfn, "vkCreateBuffer");
         storage::CreateBufferView.load(&mut loadfn, "vkCreateBufferView");
         storage::CreateCommandPool.load(&mut loadfn, "vkCreateCommandPool");
         storage::CreateComputePipelines.load(&mut loadfn, "vkCreateComputePipelines");
         storage::CreateDebugReportCallbackEXT.load(&mut loadfn, "vkCreateDebugReportCallbackEXT");
         storage::CreateDebugUtilsMessengerEXT.load(&mut loadfn, "vkCreateDebugUtilsMessengerEXT");
         storage::CreateDescriptorPool.load(&mut loadfn, "vkCreateDescriptorPool");
         storage::CreateDescriptorSetLayout.load(&mut loadfn, "vkCreateDescriptorSetLayout");
         storage::CreateDescriptorUpdateTemplate.load(&mut loadfn, "vkCreateDescriptorUpdateTemplate");
         storage::CreateDescriptorUpdateTemplateKHR.load(&mut loadfn, "vkCreateDescriptorUpdateTemplateKHR");
         storage::CreateDevice.load(&mut loadfn, "vkCreateDevice");
         storage::CreateDisplayModeKHR.load(&mut loadfn, "vkCreateDisplayModeKHR");
         storage::CreateDisplayPlaneSurfaceKHR.load(&mut loadfn, "vkCreateDisplayPlaneSurfaceKHR");
         storage::CreateEvent.load(&mut loadfn, "vkCreateEvent");
         storage::CreateFence.load(&mut loadfn, "vkCreateFence");
         storage::CreateFramebuffer.load(&mut loadfn, "vkCreateFramebuffer");
         storage::CreateGraphicsPipelines.load(&mut loadfn, "vkCreateGraphicsPipelines");
         storage::CreateHeadlessSurfaceEXT.load(&mut loadfn, "vkCreateHeadlessSurfaceEXT");
        #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] storage::CreateIOSSurfaceMVK.load(&mut loadfn, "vkCreateIOSSurfaceMVK");
         storage::CreateImage.load(&mut loadfn, "vkCreateImage");
        #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] storage::CreateImagePipeSurfaceFUCHSIA.load(&mut loadfn, "vkCreateImagePipeSurfaceFUCHSIA");
         storage::CreateImageView.load(&mut loadfn, "vkCreateImageView");
         storage::CreateIndirectCommandsLayoutNVX.load(&mut loadfn, "vkCreateIndirectCommandsLayoutNVX");
         storage::CreateInstance.load(&mut loadfn, "vkCreateInstance");
        #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] storage::CreateMacOSSurfaceMVK.load(&mut loadfn, "vkCreateMacOSSurfaceMVK");
        #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] storage::CreateMetalSurfaceEXT.load(&mut loadfn, "vkCreateMetalSurfaceEXT");
         storage::CreateObjectTableNVX.load(&mut loadfn, "vkCreateObjectTableNVX");
         storage::CreatePipelineCache.load(&mut loadfn, "vkCreatePipelineCache");
         storage::CreatePipelineLayout.load(&mut loadfn, "vkCreatePipelineLayout");
         storage::CreateQueryPool.load(&mut loadfn, "vkCreateQueryPool");
         storage::CreateRayTracingPipelinesNV.load(&mut loadfn, "vkCreateRayTracingPipelinesNV");
         storage::CreateRenderPass.load(&mut loadfn, "vkCreateRenderPass");
         storage::CreateRenderPass2KHR.load(&mut loadfn, "vkCreateRenderPass2KHR");
         storage::CreateSampler.load(&mut loadfn, "vkCreateSampler");
         storage::CreateSamplerYcbcrConversion.load(&mut loadfn, "vkCreateSamplerYcbcrConversion");
         storage::CreateSamplerYcbcrConversionKHR.load(&mut loadfn, "vkCreateSamplerYcbcrConversionKHR");
         storage::CreateSemaphore.load(&mut loadfn, "vkCreateSemaphore");
         storage::CreateShaderModule.load(&mut loadfn, "vkCreateShaderModule");
         storage::CreateSharedSwapchainsKHR.load(&mut loadfn, "vkCreateSharedSwapchainsKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] storage::CreateStreamDescriptorSurfaceGGP.load(&mut loadfn, "vkCreateStreamDescriptorSurfaceGGP");
         storage::CreateSwapchainKHR.load(&mut loadfn, "vkCreateSwapchainKHR");
         storage::CreateValidationCacheEXT.load(&mut loadfn, "vkCreateValidationCacheEXT");
        #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] storage::CreateViSurfaceNN.load(&mut loadfn, "vkCreateViSurfaceNN");
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] storage::CreateWaylandSurfaceKHR.load(&mut loadfn, "vkCreateWaylandSurfaceKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::CreateWin32SurfaceKHR.load(&mut loadfn, "vkCreateWin32SurfaceKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] storage::CreateXcbSurfaceKHR.load(&mut loadfn, "vkCreateXcbSurfaceKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] storage::CreateXlibSurfaceKHR.load(&mut loadfn, "vkCreateXlibSurfaceKHR");
         storage::DebugMarkerSetObjectNameEXT.load(&mut loadfn, "vkDebugMarkerSetObjectNameEXT");
         storage::DebugMarkerSetObjectTagEXT.load(&mut loadfn, "vkDebugMarkerSetObjectTagEXT");
         storage::DebugReportMessageEXT.load(&mut loadfn, "vkDebugReportMessageEXT");
         storage::DestroyAccelerationStructureNV.load(&mut loadfn, "vkDestroyAccelerationStructureNV");
         storage::DestroyBuffer.load(&mut loadfn, "vkDestroyBuffer");
         storage::DestroyBufferView.load(&mut loadfn, "vkDestroyBufferView");
         storage::DestroyCommandPool.load(&mut loadfn, "vkDestroyCommandPool");
         storage::DestroyDebugReportCallbackEXT.load(&mut loadfn, "vkDestroyDebugReportCallbackEXT");
         storage::DestroyDebugUtilsMessengerEXT.load(&mut loadfn, "vkDestroyDebugUtilsMessengerEXT");
         storage::DestroyDescriptorPool.load(&mut loadfn, "vkDestroyDescriptorPool");
         storage::DestroyDescriptorSetLayout.load(&mut loadfn, "vkDestroyDescriptorSetLayout");
         storage::DestroyDescriptorUpdateTemplate.load(&mut loadfn, "vkDestroyDescriptorUpdateTemplate");
         storage::DestroyDescriptorUpdateTemplateKHR.load(&mut loadfn, "vkDestroyDescriptorUpdateTemplateKHR");
         storage::DestroyDevice.load(&mut loadfn, "vkDestroyDevice");
         storage::DestroyEvent.load(&mut loadfn, "vkDestroyEvent");
         storage::DestroyFence.load(&mut loadfn, "vkDestroyFence");
         storage::DestroyFramebuffer.load(&mut loadfn, "vkDestroyFramebuffer");
         storage::DestroyImage.load(&mut loadfn, "vkDestroyImage");
         storage::DestroyImageView.load(&mut loadfn, "vkDestroyImageView");
         storage::DestroyIndirectCommandsLayoutNVX.load(&mut loadfn, "vkDestroyIndirectCommandsLayoutNVX");
         storage::DestroyInstance.load(&mut loadfn, "vkDestroyInstance");
         storage::DestroyObjectTableNVX.load(&mut loadfn, "vkDestroyObjectTableNVX");
         storage::DestroyPipeline.load(&mut loadfn, "vkDestroyPipeline");
         storage::DestroyPipelineCache.load(&mut loadfn, "vkDestroyPipelineCache");
         storage::DestroyPipelineLayout.load(&mut loadfn, "vkDestroyPipelineLayout");
         storage::DestroyQueryPool.load(&mut loadfn, "vkDestroyQueryPool");
         storage::DestroyRenderPass.load(&mut loadfn, "vkDestroyRenderPass");
         storage::DestroySampler.load(&mut loadfn, "vkDestroySampler");
         storage::DestroySamplerYcbcrConversion.load(&mut loadfn, "vkDestroySamplerYcbcrConversion");
         storage::DestroySamplerYcbcrConversionKHR.load(&mut loadfn, "vkDestroySamplerYcbcrConversionKHR");
         storage::DestroySemaphore.load(&mut loadfn, "vkDestroySemaphore");
         storage::DestroyShaderModule.load(&mut loadfn, "vkDestroyShaderModule");
         storage::DestroySurfaceKHR.load(&mut loadfn, "vkDestroySurfaceKHR");
         storage::DestroySwapchainKHR.load(&mut loadfn, "vkDestroySwapchainKHR");
         storage::DestroyValidationCacheEXT.load(&mut loadfn, "vkDestroyValidationCacheEXT");
         storage::DeviceWaitIdle.load(&mut loadfn, "vkDeviceWaitIdle");
         storage::DisplayPowerControlEXT.load(&mut loadfn, "vkDisplayPowerControlEXT");
         storage::EndCommandBuffer.load(&mut loadfn, "vkEndCommandBuffer");
         storage::EnumerateDeviceExtensionProperties.load(&mut loadfn, "vkEnumerateDeviceExtensionProperties");
         storage::EnumerateDeviceLayerProperties.load(&mut loadfn, "vkEnumerateDeviceLayerProperties");
         storage::EnumerateInstanceExtensionProperties.load(&mut loadfn, "vkEnumerateInstanceExtensionProperties");
         storage::EnumerateInstanceLayerProperties.load(&mut loadfn, "vkEnumerateInstanceLayerProperties");
         storage::EnumerateInstanceVersion.load(&mut loadfn, "vkEnumerateInstanceVersion");
         storage::EnumeratePhysicalDeviceGroups.load(&mut loadfn, "vkEnumeratePhysicalDeviceGroups");
         storage::EnumeratePhysicalDeviceGroupsKHR.load(&mut loadfn, "vkEnumeratePhysicalDeviceGroupsKHR");
         storage::EnumeratePhysicalDevices.load(&mut loadfn, "vkEnumeratePhysicalDevices");
         storage::FlushMappedMemoryRanges.load(&mut loadfn, "vkFlushMappedMemoryRanges");
         storage::FreeCommandBuffers.load(&mut loadfn, "vkFreeCommandBuffers");
         storage::FreeDescriptorSets.load(&mut loadfn, "vkFreeDescriptorSets");
         storage::FreeMemory.load(&mut loadfn, "vkFreeMemory");
         storage::GetAccelerationStructureHandleNV.load(&mut loadfn, "vkGetAccelerationStructureHandleNV");
         storage::GetAccelerationStructureMemoryRequirementsNV.load(&mut loadfn, "vkGetAccelerationStructureMemoryRequirementsNV");
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] storage::GetAndroidHardwareBufferPropertiesANDROID.load(&mut loadfn, "vkGetAndroidHardwareBufferPropertiesANDROID");
         storage::GetBufferDeviceAddressEXT.load(&mut loadfn, "vkGetBufferDeviceAddressEXT");
         storage::GetBufferMemoryRequirements.load(&mut loadfn, "vkGetBufferMemoryRequirements");
         storage::GetBufferMemoryRequirements2.load(&mut loadfn, "vkGetBufferMemoryRequirements2");
         storage::GetBufferMemoryRequirements2KHR.load(&mut loadfn, "vkGetBufferMemoryRequirements2KHR");
         storage::GetCalibratedTimestampsEXT.load(&mut loadfn, "vkGetCalibratedTimestampsEXT");
         storage::GetDescriptorSetLayoutSupport.load(&mut loadfn, "vkGetDescriptorSetLayoutSupport");
         storage::GetDescriptorSetLayoutSupportKHR.load(&mut loadfn, "vkGetDescriptorSetLayoutSupportKHR");
         storage::GetDeviceGroupPeerMemoryFeatures.load(&mut loadfn, "vkGetDeviceGroupPeerMemoryFeatures");
         storage::GetDeviceGroupPeerMemoryFeaturesKHR.load(&mut loadfn, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
         storage::GetDeviceGroupPresentCapabilitiesKHR.load(&mut loadfn, "vkGetDeviceGroupPresentCapabilitiesKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetDeviceGroupSurfacePresentModes2EXT.load(&mut loadfn, "vkGetDeviceGroupSurfacePresentModes2EXT");
         storage::GetDeviceGroupSurfacePresentModesKHR.load(&mut loadfn, "vkGetDeviceGroupSurfacePresentModesKHR");
         storage::GetDeviceMemoryCommitment.load(&mut loadfn, "vkGetDeviceMemoryCommitment");
         storage::GetDeviceProcAddr.load(&mut loadfn, "vkGetDeviceProcAddr");
         storage::GetDeviceQueue.load(&mut loadfn, "vkGetDeviceQueue");
         storage::GetDeviceQueue2.load(&mut loadfn, "vkGetDeviceQueue2");
         storage::GetDisplayModeProperties2KHR.load(&mut loadfn, "vkGetDisplayModeProperties2KHR");
         storage::GetDisplayModePropertiesKHR.load(&mut loadfn, "vkGetDisplayModePropertiesKHR");
         storage::GetDisplayPlaneCapabilities2KHR.load(&mut loadfn, "vkGetDisplayPlaneCapabilities2KHR");
         storage::GetDisplayPlaneCapabilitiesKHR.load(&mut loadfn, "vkGetDisplayPlaneCapabilitiesKHR");
         storage::GetDisplayPlaneSupportedDisplaysKHR.load(&mut loadfn, "vkGetDisplayPlaneSupportedDisplaysKHR");
         storage::GetEventStatus.load(&mut loadfn, "vkGetEventStatus");
         storage::GetFenceFdKHR.load(&mut loadfn, "vkGetFenceFdKHR");
         storage::GetFenceStatus.load(&mut loadfn, "vkGetFenceStatus");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetFenceWin32HandleKHR.load(&mut loadfn, "vkGetFenceWin32HandleKHR");
         storage::GetImageDrmFormatModifierPropertiesEXT.load(&mut loadfn, "vkGetImageDrmFormatModifierPropertiesEXT");
         storage::GetImageMemoryRequirements.load(&mut loadfn, "vkGetImageMemoryRequirements");
         storage::GetImageMemoryRequirements2.load(&mut loadfn, "vkGetImageMemoryRequirements2");
         storage::GetImageMemoryRequirements2KHR.load(&mut loadfn, "vkGetImageMemoryRequirements2KHR");
         storage::GetImageSparseMemoryRequirements.load(&mut loadfn, "vkGetImageSparseMemoryRequirements");
         storage::GetImageSparseMemoryRequirements2.load(&mut loadfn, "vkGetImageSparseMemoryRequirements2");
         storage::GetImageSparseMemoryRequirements2KHR.load(&mut loadfn, "vkGetImageSparseMemoryRequirements2KHR");
         storage::GetImageSubresourceLayout.load(&mut loadfn, "vkGetImageSubresourceLayout");
         storage::GetImageViewHandleNVX.load(&mut loadfn, "vkGetImageViewHandleNVX");
         storage::GetInstanceProcAddr.load(&mut loadfn, "vkGetInstanceProcAddr");
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] storage::GetMemoryAndroidHardwareBufferANDROID.load(&mut loadfn, "vkGetMemoryAndroidHardwareBufferANDROID");
         storage::GetMemoryFdKHR.load(&mut loadfn, "vkGetMemoryFdKHR");
         storage::GetMemoryFdPropertiesKHR.load(&mut loadfn, "vkGetMemoryFdPropertiesKHR");
         storage::GetMemoryHostPointerPropertiesEXT.load(&mut loadfn, "vkGetMemoryHostPointerPropertiesEXT");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetMemoryWin32HandleKHR.load(&mut loadfn, "vkGetMemoryWin32HandleKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetMemoryWin32HandleNV.load(&mut loadfn, "vkGetMemoryWin32HandleNV");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetMemoryWin32HandlePropertiesKHR.load(&mut loadfn, "vkGetMemoryWin32HandlePropertiesKHR");
         storage::GetPastPresentationTimingGOOGLE.load(&mut loadfn, "vkGetPastPresentationTimingGOOGLE");
         storage::GetPerformanceParameterINTEL.load(&mut loadfn, "vkGetPerformanceParameterINTEL");
         storage::GetPhysicalDeviceCalibrateableTimeDomainsEXT.load(&mut loadfn, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
         storage::GetPhysicalDeviceCooperativeMatrixPropertiesNV.load(&mut loadfn, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
         storage::GetPhysicalDeviceDisplayPlaneProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
         storage::GetPhysicalDeviceDisplayPlanePropertiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
         storage::GetPhysicalDeviceDisplayProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceDisplayProperties2KHR");
         storage::GetPhysicalDeviceDisplayPropertiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceDisplayPropertiesKHR");
         storage::GetPhysicalDeviceExternalBufferProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalBufferProperties");
         storage::GetPhysicalDeviceExternalBufferPropertiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
         storage::GetPhysicalDeviceExternalFenceProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalFenceProperties");
         storage::GetPhysicalDeviceExternalFencePropertiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
         storage::GetPhysicalDeviceExternalImageFormatPropertiesNV.load(&mut loadfn, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
         storage::GetPhysicalDeviceExternalSemaphoreProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalSemaphoreProperties");
         storage::GetPhysicalDeviceExternalSemaphorePropertiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
         storage::GetPhysicalDeviceFeatures.load(&mut loadfn, "vkGetPhysicalDeviceFeatures");
         storage::GetPhysicalDeviceFeatures2.load(&mut loadfn, "vkGetPhysicalDeviceFeatures2");
         storage::GetPhysicalDeviceFeatures2KHR.load(&mut loadfn, "vkGetPhysicalDeviceFeatures2KHR");
         storage::GetPhysicalDeviceFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceFormatProperties");
         storage::GetPhysicalDeviceFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceFormatProperties2");
         storage::GetPhysicalDeviceFormatProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceFormatProperties2KHR");
         storage::GetPhysicalDeviceGeneratedCommandsPropertiesNVX.load(&mut loadfn, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX");
         storage::GetPhysicalDeviceImageFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceImageFormatProperties");
         storage::GetPhysicalDeviceImageFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceImageFormatProperties2");
         storage::GetPhysicalDeviceImageFormatProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceImageFormatProperties2KHR");
         storage::GetPhysicalDeviceMemoryProperties.load(&mut loadfn, "vkGetPhysicalDeviceMemoryProperties");
         storage::GetPhysicalDeviceMemoryProperties2.load(&mut loadfn, "vkGetPhysicalDeviceMemoryProperties2");
         storage::GetPhysicalDeviceMemoryProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceMemoryProperties2KHR");
         storage::GetPhysicalDeviceMultisamplePropertiesEXT.load(&mut loadfn, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
         storage::GetPhysicalDevicePresentRectanglesKHR.load(&mut loadfn, "vkGetPhysicalDevicePresentRectanglesKHR");
         storage::GetPhysicalDeviceProperties.load(&mut loadfn, "vkGetPhysicalDeviceProperties");
         storage::GetPhysicalDeviceProperties2.load(&mut loadfn, "vkGetPhysicalDeviceProperties2");
         storage::GetPhysicalDeviceProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceProperties2KHR");
         storage::GetPhysicalDeviceQueueFamilyProperties.load(&mut loadfn, "vkGetPhysicalDeviceQueueFamilyProperties");
         storage::GetPhysicalDeviceQueueFamilyProperties2.load(&mut loadfn, "vkGetPhysicalDeviceQueueFamilyProperties2");
         storage::GetPhysicalDeviceQueueFamilyProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
         storage::GetPhysicalDeviceSparseImageFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceSparseImageFormatProperties");
         storage::GetPhysicalDeviceSparseImageFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceSparseImageFormatProperties2");
         storage::GetPhysicalDeviceSparseImageFormatProperties2KHR.load(&mut loadfn, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
         storage::GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.load(&mut loadfn, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
         storage::GetPhysicalDeviceSurfaceCapabilities2EXT.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
         storage::GetPhysicalDeviceSurfaceCapabilities2KHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
         storage::GetPhysicalDeviceSurfaceCapabilitiesKHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
         storage::GetPhysicalDeviceSurfaceFormats2KHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceFormats2KHR");
         storage::GetPhysicalDeviceSurfaceFormatsKHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceFormatsKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetPhysicalDeviceSurfacePresentModes2EXT.load(&mut loadfn, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
         storage::GetPhysicalDeviceSurfacePresentModesKHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfacePresentModesKHR");
         storage::GetPhysicalDeviceSurfaceSupportKHR.load(&mut loadfn, "vkGetPhysicalDeviceSurfaceSupportKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] storage::GetPhysicalDeviceWaylandPresentationSupportKHR.load(&mut loadfn, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetPhysicalDeviceWin32PresentationSupportKHR.load(&mut loadfn, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] storage::GetPhysicalDeviceXcbPresentationSupportKHR.load(&mut loadfn, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] storage::GetPhysicalDeviceXlibPresentationSupportKHR.load(&mut loadfn, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
         storage::GetPipelineCacheData.load(&mut loadfn, "vkGetPipelineCacheData");
         storage::GetQueryPoolResults.load(&mut loadfn, "vkGetQueryPoolResults");
         storage::GetQueueCheckpointDataNV.load(&mut loadfn, "vkGetQueueCheckpointDataNV");
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] storage::GetRandROutputDisplayEXT.load(&mut loadfn, "vkGetRandROutputDisplayEXT");
         storage::GetRayTracingShaderGroupHandlesNV.load(&mut loadfn, "vkGetRayTracingShaderGroupHandlesNV");
         storage::GetRefreshCycleDurationGOOGLE.load(&mut loadfn, "vkGetRefreshCycleDurationGOOGLE");
         storage::GetRenderAreaGranularity.load(&mut loadfn, "vkGetRenderAreaGranularity");
         storage::GetSemaphoreFdKHR.load(&mut loadfn, "vkGetSemaphoreFdKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::GetSemaphoreWin32HandleKHR.load(&mut loadfn, "vkGetSemaphoreWin32HandleKHR");
         storage::GetShaderInfoAMD.load(&mut loadfn, "vkGetShaderInfoAMD");
         storage::GetSwapchainCounterEXT.load(&mut loadfn, "vkGetSwapchainCounterEXT");
         storage::GetSwapchainImagesKHR.load(&mut loadfn, "vkGetSwapchainImagesKHR");
         storage::GetSwapchainStatusKHR.load(&mut loadfn, "vkGetSwapchainStatusKHR");
         storage::GetValidationCacheDataEXT.load(&mut loadfn, "vkGetValidationCacheDataEXT");
         storage::ImportFenceFdKHR.load(&mut loadfn, "vkImportFenceFdKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::ImportFenceWin32HandleKHR.load(&mut loadfn, "vkImportFenceWin32HandleKHR");
         storage::ImportSemaphoreFdKHR.load(&mut loadfn, "vkImportSemaphoreFdKHR");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::ImportSemaphoreWin32HandleKHR.load(&mut loadfn, "vkImportSemaphoreWin32HandleKHR");
         storage::InitializePerformanceApiINTEL.load(&mut loadfn, "vkInitializePerformanceApiINTEL");
         storage::InvalidateMappedMemoryRanges.load(&mut loadfn, "vkInvalidateMappedMemoryRanges");
         storage::MapMemory.load(&mut loadfn, "vkMapMemory");
         storage::MergePipelineCaches.load(&mut loadfn, "vkMergePipelineCaches");
         storage::MergeValidationCachesEXT.load(&mut loadfn, "vkMergeValidationCachesEXT");
         storage::QueueBeginDebugUtilsLabelEXT.load(&mut loadfn, "vkQueueBeginDebugUtilsLabelEXT");
         storage::QueueBindSparse.load(&mut loadfn, "vkQueueBindSparse");
         storage::QueueEndDebugUtilsLabelEXT.load(&mut loadfn, "vkQueueEndDebugUtilsLabelEXT");
         storage::QueueInsertDebugUtilsLabelEXT.load(&mut loadfn, "vkQueueInsertDebugUtilsLabelEXT");
         storage::QueuePresentKHR.load(&mut loadfn, "vkQueuePresentKHR");
         storage::QueueSetPerformanceConfigurationINTEL.load(&mut loadfn, "vkQueueSetPerformanceConfigurationINTEL");
         storage::QueueSubmit.load(&mut loadfn, "vkQueueSubmit");
         storage::QueueWaitIdle.load(&mut loadfn, "vkQueueWaitIdle");
         storage::RegisterDeviceEventEXT.load(&mut loadfn, "vkRegisterDeviceEventEXT");
         storage::RegisterDisplayEventEXT.load(&mut loadfn, "vkRegisterDisplayEventEXT");
         storage::RegisterObjectsNVX.load(&mut loadfn, "vkRegisterObjectsNVX");
         storage::ReleaseDisplayEXT.load(&mut loadfn, "vkReleaseDisplayEXT");
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] storage::ReleaseFullScreenExclusiveModeEXT.load(&mut loadfn, "vkReleaseFullScreenExclusiveModeEXT");
         storage::ReleasePerformanceConfigurationINTEL.load(&mut loadfn, "vkReleasePerformanceConfigurationINTEL");
         storage::ResetCommandBuffer.load(&mut loadfn, "vkResetCommandBuffer");
         storage::ResetCommandPool.load(&mut loadfn, "vkResetCommandPool");
         storage::ResetDescriptorPool.load(&mut loadfn, "vkResetDescriptorPool");
         storage::ResetEvent.load(&mut loadfn, "vkResetEvent");
         storage::ResetFences.load(&mut loadfn, "vkResetFences");
         storage::ResetQueryPoolEXT.load(&mut loadfn, "vkResetQueryPoolEXT");
         storage::SetDebugUtilsObjectNameEXT.load(&mut loadfn, "vkSetDebugUtilsObjectNameEXT");
         storage::SetDebugUtilsObjectTagEXT.load(&mut loadfn, "vkSetDebugUtilsObjectTagEXT");
         storage::SetEvent.load(&mut loadfn, "vkSetEvent");
         storage::SetHdrMetadataEXT.load(&mut loadfn, "vkSetHdrMetadataEXT");
         storage::SetLocalDimmingAMD.load(&mut loadfn, "vkSetLocalDimmingAMD");
         storage::SubmitDebugUtilsMessageEXT.load(&mut loadfn, "vkSubmitDebugUtilsMessageEXT");
         storage::TrimCommandPool.load(&mut loadfn, "vkTrimCommandPool");
         storage::TrimCommandPoolKHR.load(&mut loadfn, "vkTrimCommandPoolKHR");
         storage::UninitializePerformanceApiINTEL.load(&mut loadfn, "vkUninitializePerformanceApiINTEL");
         storage::UnmapMemory.load(&mut loadfn, "vkUnmapMemory");
         storage::UnregisterObjectsNVX.load(&mut loadfn, "vkUnregisterObjectsNVX");
         storage::UpdateDescriptorSetWithTemplate.load(&mut loadfn, "vkUpdateDescriptorSetWithTemplate");
         storage::UpdateDescriptorSetWithTemplateKHR.load(&mut loadfn, "vkUpdateDescriptorSetWithTemplateKHR");
         storage::UpdateDescriptorSets.load(&mut loadfn, "vkUpdateDescriptorSets");
         storage::WaitForFences.load(&mut loadfn, "vkWaitForFences");

         storage::BindBufferMemory2.aliased(&storage::BindBufferMemory2KHR);
         storage::BindBufferMemory2KHR.aliased(&storage::BindBufferMemory2);
         storage::BindImageMemory2.aliased(&storage::BindImageMemory2KHR);
         storage::BindImageMemory2KHR.aliased(&storage::BindImageMemory2);
         storage::CmdDispatchBase.aliased(&storage::CmdDispatchBaseKHR);
         storage::CmdDispatchBaseKHR.aliased(&storage::CmdDispatchBase);
         storage::CmdDrawIndexedIndirectCountAMD.aliased(&storage::CmdDrawIndexedIndirectCountKHR);
         storage::CmdDrawIndexedIndirectCountKHR.aliased(&storage::CmdDrawIndexedIndirectCountAMD);
         storage::CmdDrawIndirectCountAMD.aliased(&storage::CmdDrawIndirectCountKHR);
         storage::CmdDrawIndirectCountKHR.aliased(&storage::CmdDrawIndirectCountAMD);
         storage::CmdSetDeviceMask.aliased(&storage::CmdSetDeviceMaskKHR);
         storage::CmdSetDeviceMaskKHR.aliased(&storage::CmdSetDeviceMask);
         storage::CreateDescriptorUpdateTemplate.aliased(&storage::CreateDescriptorUpdateTemplateKHR);
         storage::CreateDescriptorUpdateTemplateKHR.aliased(&storage::CreateDescriptorUpdateTemplate);
         storage::CreateSamplerYcbcrConversion.aliased(&storage::CreateSamplerYcbcrConversionKHR);
         storage::CreateSamplerYcbcrConversionKHR.aliased(&storage::CreateSamplerYcbcrConversion);
         storage::DestroyDescriptorUpdateTemplate.aliased(&storage::DestroyDescriptorUpdateTemplateKHR);
         storage::DestroyDescriptorUpdateTemplateKHR.aliased(&storage::DestroyDescriptorUpdateTemplate);
         storage::DestroySamplerYcbcrConversion.aliased(&storage::DestroySamplerYcbcrConversionKHR);
         storage::DestroySamplerYcbcrConversionKHR.aliased(&storage::DestroySamplerYcbcrConversion);
         storage::EnumeratePhysicalDeviceGroups.aliased(&storage::EnumeratePhysicalDeviceGroupsKHR);
         storage::EnumeratePhysicalDeviceGroupsKHR.aliased(&storage::EnumeratePhysicalDeviceGroups);
         storage::GetBufferMemoryRequirements2.aliased(&storage::GetBufferMemoryRequirements2KHR);
         storage::GetBufferMemoryRequirements2KHR.aliased(&storage::GetBufferMemoryRequirements2);
         storage::GetDescriptorSetLayoutSupport.aliased(&storage::GetDescriptorSetLayoutSupportKHR);
         storage::GetDescriptorSetLayoutSupportKHR.aliased(&storage::GetDescriptorSetLayoutSupport);
         storage::GetDeviceGroupPeerMemoryFeatures.aliased(&storage::GetDeviceGroupPeerMemoryFeaturesKHR);
         storage::GetDeviceGroupPeerMemoryFeaturesKHR.aliased(&storage::GetDeviceGroupPeerMemoryFeatures);
         storage::GetImageMemoryRequirements2.aliased(&storage::GetImageMemoryRequirements2KHR);
         storage::GetImageMemoryRequirements2KHR.aliased(&storage::GetImageMemoryRequirements2);
         storage::GetImageSparseMemoryRequirements2.aliased(&storage::GetImageSparseMemoryRequirements2KHR);
         storage::GetImageSparseMemoryRequirements2KHR.aliased(&storage::GetImageSparseMemoryRequirements2);
         storage::GetPhysicalDeviceExternalBufferProperties.aliased(&storage::GetPhysicalDeviceExternalBufferPropertiesKHR);
         storage::GetPhysicalDeviceExternalBufferPropertiesKHR.aliased(&storage::GetPhysicalDeviceExternalBufferProperties);
         storage::GetPhysicalDeviceExternalFenceProperties.aliased(&storage::GetPhysicalDeviceExternalFencePropertiesKHR);
         storage::GetPhysicalDeviceExternalFencePropertiesKHR.aliased(&storage::GetPhysicalDeviceExternalFenceProperties);
         storage::GetPhysicalDeviceExternalSemaphoreProperties.aliased(&storage::GetPhysicalDeviceExternalSemaphorePropertiesKHR);
         storage::GetPhysicalDeviceExternalSemaphorePropertiesKHR.aliased(&storage::GetPhysicalDeviceExternalSemaphoreProperties);
         storage::GetPhysicalDeviceFeatures2.aliased(&storage::GetPhysicalDeviceFeatures2KHR);
         storage::GetPhysicalDeviceFeatures2KHR.aliased(&storage::GetPhysicalDeviceFeatures2);
         storage::GetPhysicalDeviceFormatProperties2.aliased(&storage::GetPhysicalDeviceFormatProperties2KHR);
         storage::GetPhysicalDeviceFormatProperties2KHR.aliased(&storage::GetPhysicalDeviceFormatProperties2);
         storage::GetPhysicalDeviceImageFormatProperties2.aliased(&storage::GetPhysicalDeviceImageFormatProperties2KHR);
         storage::GetPhysicalDeviceImageFormatProperties2KHR.aliased(&storage::GetPhysicalDeviceImageFormatProperties2);
         storage::GetPhysicalDeviceMemoryProperties2.aliased(&storage::GetPhysicalDeviceMemoryProperties2KHR);
         storage::GetPhysicalDeviceMemoryProperties2KHR.aliased(&storage::GetPhysicalDeviceMemoryProperties2);
         storage::GetPhysicalDeviceProperties2.aliased(&storage::GetPhysicalDeviceProperties2KHR);
         storage::GetPhysicalDeviceProperties2KHR.aliased(&storage::GetPhysicalDeviceProperties2);
         storage::GetPhysicalDeviceQueueFamilyProperties2.aliased(&storage::GetPhysicalDeviceQueueFamilyProperties2KHR);
         storage::GetPhysicalDeviceQueueFamilyProperties2KHR.aliased(&storage::GetPhysicalDeviceQueueFamilyProperties2);
         storage::GetPhysicalDeviceSparseImageFormatProperties2.aliased(&storage::GetPhysicalDeviceSparseImageFormatProperties2KHR);
         storage::GetPhysicalDeviceSparseImageFormatProperties2KHR.aliased(&storage::GetPhysicalDeviceSparseImageFormatProperties2);
         storage::TrimCommandPool.aliased(&storage::TrimCommandPoolKHR);
         storage::TrimCommandPoolKHR.aliased(&storage::TrimCommandPool);
         storage::UpdateDescriptorSetWithTemplate.aliased(&storage::UpdateDescriptorSetWithTemplateKHR);
         storage::UpdateDescriptorSetWithTemplateKHR.aliased(&storage::UpdateDescriptorSetWithTemplate);
    }
}

