
/* pub struct VoxelGrid2<T : Real + Copy>{
    pub a : T,
    pub size_x : usize,
    pub size_y : usize,
    pub grid : Vec<T>,
}

impl<T : Real + SupersetOf<f32>> VoxelGrid2<T>{

    pub fn vertices_x(&self) -> usize {self.size_x + 1}
    pub fn vertices_y(&self) -> usize {self.size_y + 1}

    pub fn new(a : T, size_x : usize, size_y : usize) -> VoxelGrid2<T>{
        let grid = vec![convert(0.0);(size_x + 1) * (size_y + 1)];

        VoxelGrid2{a,size_x, size_y, grid}
    }

    pub fn get(&self, x : usize, y : usize) -> T{
        self.grid[y * self.vertices_x() + x]
    }

    pub fn set(&mut self, x : usize, y : usize, value : T){
        let vx = self.vertices_x();
        self.grid[y * vx + x] = value;
    }

    pub fn get_point(&self, x : usize, y : usize) -> Vector2<T>{
        Vector2::new(self.a * convert::<f32, T>(x as f32), self.a * convert::<f32, T>(y as f32))
    }

    pub fn square2(&self, x : usize, y : usize) -> Square2<T>{
        Square2{center : Vector2::new(convert::<f32,T>(x as f32 + 0.5) * self.a, convert::<f32,T>(y as f32 + 0.5) * self.a), extent: self.a / convert(2.0)}
    }
} */


/*fn calc_qef(point : &Vector2<f32>, lines : &Vec<Line2<f32>>) -> f32{
    let mut qef : f32 = 0.0;
    for line in lines{
        let dist = distance_point2_line2(point, line);
        qef += dist * dist;
    }

    qef
}

fn const_sign(a : f32, b : f32) -> bool {
    if a > 0.0 { b > 0.0} else {b <= 0.0}
}

fn sample_qef_brute(square : Square2<f32>, n : usize, lines : &Vec<Line2<f32>>) -> Vector2<f32> {
    let ext = Vector2::new(square.extent, square.extent);
    let min = square.center - ext;

    let mut best_qef = 100000000000.0; //TODO placeholder
    let mut best_point = min;

    for i in 0..n{
        for j in 0..n{
            let point = min + Vector2::new(ext.x * (2.0 * (i as f32) + 1.0) / (n as f32), ext.y * (2.0 * (j as f32) + 1.0) / (n as f32));
            let qef = calc_qef(&point, &lines);

            if qef < best_qef{
                best_qef = qef;
                best_point = point;
            }
        }
    }

    best_point
}


fn sample_intersection_brute(line : Line2<f32>, n : usize, f : &DenFn2<f32>) -> Vector2<f32>{
    let ext = line.end - line.start;

    let mut best_abs = 1000000000.0; //TODO placeholder
    let mut best_point : Option<Vector2<f32>> = None;

    for i in 0..n {
        let point = line.start + ext * (i as f32 / n as f32);
        let den = f(point);
        let abs = den.abs();

        if abs < best_abs {
            best_abs = abs;
            best_point = Some(point);
        }
    }

    best_point.unwrap()
}

fn sample_tangent(square : Square2<f32>, n : usize, f : &DenFn2<f32>) -> Vector2<f32>{
    let ext = Vector2::new(square.extent, square.extent);
    let min = square.center - ext;

    let den_at_center = f(square.center);

    let mut closest = den_at_center + 100000000.0; //TODO placeholder\
    let mut closest_point = square.center;

    for i in 0..n{
        for j in 0..n{
            let point = min + Vector2::new(ext.x * (2.0 * i as f32) / n as f32,
                ext.y * (2.0 * j as f32) / n as f32);
            let den = f(point);
            let attempt = (den - den_at_center).abs();
            if attempt < closest && (point - square.center).norm() != 0.0{
                closest = attempt;
                closest_point = point;
            }
        }
    }

    closest_point - square.center
}

fn ext_for_normal(block_size : f32) -> f32 {block_size / 100.0} //TODO why so ?


fn make_lines(vg : &VoxelGrid2<f32>, features : &Vec<Option<Vector2<f32>>>) -> Vec<Line2<f32>>{
    let mut ret = Vec::<Line2<f32>>::new();

    for y in 0..vg.size_y - 1{
        for x in 0..vg.size_x - 1{
            let feature = features[y * vg.size_x + x];
            if feature.is_some(){
                let p1 = vg.get(x + 1, y);
                let p2 = vg.get(x, y + 1);
                let p3 = vg.get(x + 1, y + 1);

                let mut vert1 : Option<Vector2<f32>> = None;
                let mut vert2 : Option<Vector2<f32>> = None;

                if !const_sign(p1,p3){
                    vert1 = features[y * vg.size_x + (x + 1)];
                }
                if !const_sign(p3,p2){
                    vert2 = features[(y+1) * vg.size_x + x];
                }

                if vert1.is_some(){
                    ret.push(Line2{start : feature.unwrap(), end : vert1.unwrap()});
                }
            }
        }
    }

    ret
}

fn make_triangles(vg : &VoxelGrid2<f32>, features : &Vec<Option<Vector2<f32>>>, intersections : &Vec<Option<Vec<Vector2<f32>>>>,
    extra : &Vec<Option<Vec<Vector2<f32>>>>) -> Vec<Triangle2<f32>>{
    let mut ret = Vec::<Triangle2<f32>>::new();

    for y in 0..vg.size_y{
        for x in 0.. vg.size_x{
            let t = y * vg.size_x + x;
            let cur_intersections = &intersections[t];
            let cur_extras = &extra[t];

            let p0 = vg.get(x, y);
            let p1 = vg.get(x + 1, y);
            let p2 = vg.get(x, y + 1);
            let p3 = vg.get(x + 1, y + 1);

            let v0 = vg.get_point(x,y);
            let v1 = vg.get_point(x + 1, y);
            let v2 = vg.get_point(x, y + 1);
            let v3 = vg.get_point(x + 1, y + 1);

            let mut sit = 0;

            if !const_sign(p0, p1){sit |= 1;}
            if !const_sign(p1, p3){sit |= 2;}
            if !const_sign(p3, p2){sit |= 4;}
            if !const_sign(p2, p0){sit |= 8;}

            if sit == 0{ //fully inside or fully outside
                let negative = p0 < 0.0;

                if negative{ //render if it is inside
                    let tr1 = Triangle2{p1: v0, p2 : v1, p3 : v3};
                    let tr2 = Triangle2{p1: v0, p2 : v3, p3 : v2};

                    ret.push(tr1);
                    ret.push(tr2);
                }

            }else{ //contains surface
                if cur_intersections.is_some() && features[t].is_some(){
                    let len = cur_intersections.as_ref().unwrap().len();
                    for i in 0..len{
                        ret.push(Triangle2{p1 : features[t].as_ref().unwrap().clone(), p2 : cur_intersections.as_ref().unwrap()[i].clone(), p3 : cur_extras.as_ref().unwrap()[i].clone()});
                    }
                }
            }
        }
    }

    ret
}


fn make_vertex(vg : &VoxelGrid2<f32>, tr : &mut Vec<Triangle2<f32>>, x : usize, y : usize,
    f : &DenFn2<f32>, accuracy : usize, features : &mut Vec<Option<Vector2<f32>>>, out_intersections : &mut Vec<Vector2<f32>>, out_extra : &mut Vec<Vector2<f32>>) -> Option<Vector2<f32>>{
    let epsilon = vg.a / accuracy as f32;

    let p0 = vg.get(x, y);
    let p1 = vg.get(x + 1, y);
    let p2 = vg.get(x, y + 1);
    let p3 = vg.get(x + 1, y + 1);

    let v0 = vg.get_point(x,y);
    let v1 = vg.get_point(x + 1, y);
    let v2 = vg.get_point(x, y + 1);
    let v3 = vg.get_point(x + 1, y + 1);

    let mut sit = 0;

    if !const_sign(p0, p1){sit |= 1;}
    if !const_sign(p1, p3){sit |= 2;}
    if !const_sign(p3, p2){sit |= 4;}
    if !const_sign(p2, p0){sit |= 8;}

    let ext_for_normal = ext_for_normal(vg.a);

    if sit > 0{
        let mut tangents = Vec::<Line2<f32>>::new();

        let mut vert1 : Option<Vector2<f32>> = None;
        let mut vert2 : Option<Vector2<f32>> = None;

        {
            let mut worker = |and : usize, v_a : Vector2<f32>, v_b : Vector2<f32>, p_a : f32, p_b : f32|{
                if (sit & and) > 0{
                    let ip = sample_intersection_brute(Line2{start : v_a, end : v_b}, accuracy, f);
                    let full = if p_a <= 0.0 {v_a} else {v_b};
                    let dir = sample_tangent(Square2{center : ip, extent : ext_for_normal}, accuracy, f);
                    let line = Line2{start : ip - dir * (1.0 / ext_for_normal), end : ip + dir * (1.0 / ext_for_normal)};
                    tangents.push(line);

                    out_intersections.push(ip);
                    out_extra.push(full);

                }else{
                    let negative = p_a < 0.0;
                    if negative{
                        out_intersections.push(v_a);
                        out_extra.push(v_b);
                    }
                }
            };

            worker(1, v0, v1, p0, p1);
            worker(2, v1, v3, p1, p3);
            worker(4, v3, v2, p3, p2);
            worker(8, v2, v0, p2, p0);
        }

        let interpolated_vertex = sample_qef_brute(vg.square2(x,y), accuracy, &tangents);

        for i in 0..out_intersections.len(){
            tr.push(Triangle2{p1 : interpolated_vertex, p2 : out_intersections[i], p3 : out_extra[i]});
        }

        features[y * vg.size_x + x] = Some(interpolated_vertex);

        Some(interpolated_vertex)
    }else{
        None
    }
}

struct ContourData{
    pub lines : Vec<Line2<f32>>,
    pub triangles : Vec<Triangle2<f32>>,
    pub features : Vec<Option<Vector2<f32>>>,
    pub intersections : Vec<Option<Vec<Vector2<f32>>>>,
    pub extras : Vec<Option<Vec<Vector2<f32>>>>,
}

fn make_contour(vg : &VoxelGrid2<f32>, f : &DenFn2<f32>, accuracy : usize) -> ContourData{
    let mut res1 = Vec::<Line2<f32>>::new();
    let mut res2 = Vec::<Triangle2<f32>>::new();

    let mut features : Vec<Option<Vector2<f32>>> = vec![None;vg.size_x * vg.size_y];
    let mut intersections : Vec<Option<Vec<Vector2<f32>>>> = vec![None;vg.size_x * vg.size_y];
    let mut extras : Vec<Option<Vec<Vector2<f32>>>> = vec![None;vg.size_x * vg.size_y];

    {
        let mut cached_make = |x: usize, y: usize, res2: &mut Vec<Triangle2<f32>>| -> Option<Vector2<f32>>{
            let t = y * vg.size_x + x;
            let possible = features[t];
            if possible.is_none() {
                intersections[t] = Some(Vec::with_capacity(4));//TODO extra mem usage
                extras[t] = Some(Vec::with_capacity(4));

                let ret = make_vertex(vg, res2, x, y, f, accuracy, &mut features, &mut intersections[t].as_mut().unwrap(), &mut extras[t].as_mut().unwrap());
                if ret.is_none() {
                    intersections[t] = None;
                    extras[t] = None;
                }

                ret
            } else {
                possible
            }
        };

        for y in 0..vg.size_y {
            for x in 0..vg.size_x {
                let p0 = vg.get(x, y);
                let p1 = vg.get(x + 1, y);
                let p2 = vg.get(x, y + 1);
                let p3 = vg.get(x + 1, y + 1);

                let v0 = vg.get_point(x, y);
                let v1 = vg.get_point(x + 1, y);
                let v2 = vg.get_point(x, y + 1);
                let v3 = vg.get_point(x + 1, y + 1);

                let mut sit = 0;

                if !const_sign(p0, p1) { sit |= 1; }
                if !const_sign(p1, p3) { sit |= 2; }
                if !const_sign(p3, p2) { sit |= 4; }
                if !const_sign(p2, p0) { sit |= 8; }

                if sit > 0 {
                    let interpolated_vertex = cached_make(x, y, &mut res2).unwrap(); //it is 'some' here

                    let mut vert1: Option<Vector2<f32>> = None;
                    let mut vert2: Option<Vector2<f32>> = None;

                    if (sit & 2) > 0 {
                        if x + 1 < vg.size_x {
                            vert1 = cached_make(x + 1, y, &mut res2);
                        }
                    }
                    if (sit & 4) > 0 {
                        if y + 1 < vg.size_y {
                            vert2 = cached_make(x, y + 1, &mut res2);
                        }
                    }

                    if vert1.is_some() {
                        res1.push(Line2 { start: interpolated_vertex, end: vert1.unwrap() });
                    }
                    if vert2.is_some() {
                        res1.push(Line2 { start: interpolated_vertex, end: vert2.unwrap() });
                    }
                } else {
                    let negative = p0 < 0.0;

                    if negative {
                        let tr1 = Triangle2 { p1: v0, p2: v1, p3: v3 };
                        let tr2 = Triangle2 { p1: v0, p2: v3, p3: v2 };

                        res2.push(tr1);
                        res2.push(tr2);
                    }
                }
            }
        }
    }

    ContourData{lines : res1, triangles : res2, features, intersections, extras}

}

fn fill_in_grid(vg : &mut VoxelGrid2<f32>, f : &DenFn2<f32>, point : Vector2<f32>){
    for y in 0..vg.vertices_y(){
        for x in 0..vg.vertices_x(){
            let vx = vg.vertices_x();
            vg.grid[y * vx + x] = f(point + Vector2::new(vg.a * (x as f32), vg.a * (y as f32)));
        }
    }
}*/